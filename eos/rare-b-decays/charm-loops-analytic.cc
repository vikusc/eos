/* vim: set sw=4 sts=4 et foldmethod=syntax : */

/*
 * Copyright (c) 2022 Viktor Kuschke
 *
 * This file is part of the EOS project. EOS is free software;
 * you can redistribute it and/or modify it under the terms of the GNU General
 * Public License version 2, as published by the Free Software Foundation.
 *
 * EOS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59.0 Temple
 * Place, Suite 330, Boston, MA  02111-1307.0  USA
 */

#include <eos/maths/power-of.hh>
#include <eos/maths/multiplepolylog-li22.hh>
#include <eos/maths/polylog.hh>

#include <eos/rare-b-decays/charm-loops-impl.hh>

#include <eos/utils/exception.hh>
#include <eos/utils/log.hh>

#include <cmath>
#include <complex>

namespace eos
{
    using std::complex;
    using std::log;
    using std::sqrt;

    namespace agv_2019a
    {
        // Loop variables from [AGV:2019A] p. 12 eq. (3.9) and p. 15 eq. (3.20)

        inline complex<double> s_eps(const complex<double> & s, const double & feynepsilonhat)
        {
            return s / (1.0 - feynepsilonhat * myi);
        }

        inline complex<double> z_eps(const double & z, const double & feynepsilonhat)
        {
            return (z - feynepsilonhat * myi) / (1.0 - feynepsilonhat * myi);
        }

        inline complex<double> x_a(const double & z, const double & feynepsilonhat)
        {
            if (z == 0.25)
            {
                throw InternalError("x_a becomes singular for m_c = m_b / 2");
            }
            else
            {
                return 1.0 / sqrt(1.0 - 4.0 * z_eps(z, feynepsilonhat));
            }
        }

        inline complex<double> x_b(const double & z, const double & feynepsilonhat)
        {
            return sqrt(4.0 * z_eps(z, feynepsilonhat)) - sqrt(4.0 * z_eps(z, feynepsilonhat) - 1.0);
        }

        inline complex<double> y_a(const complex<double> & s, const double & z, const double & feynepsilonhat)
        {
            if (1.0 - s_eps(s, feynepsilonhat) == 0.0)
            {
                return 0.0;
            }
            else
            {
                return 1.0 / sqrt(1.0 - 4.0 * z_eps(z, feynepsilonhat) / (1.0 - s_eps(s, feynepsilonhat)));
            }
        }

        inline complex<double> y_b(const complex<double> & s, const double & feynepsilonhat)
        {
            if (s_eps(s, feynepsilonhat) == 0.0)
            {
                return 0.0;
            }
            else
            {
                return 1.0 / sqrt(1.0 - 4.0 / s_eps(s, feynepsilonhat));
            }
        }

        inline complex<double> y_c(const complex<double> & s, const double & z, const double & feynepsilonhat)
        {
            if (s_eps(s, feynepsilonhat) == 0.0)
            {
                return 0.0;
            }
            else
            {
                return 1.0 / sqrt(1.0 - 4.0 * z_eps(z, feynepsilonhat) / s_eps(s, feynepsilonhat));
            }
        }

        // Constructor of the loop parameters
        CharmLoopsParameters::CharmLoopsParameters(const double & muhat, const complex<double> & s, const double & z, const double & feynepsilonhat) :
            muhat(muhat)
        {
            s_eps = agv_2019a::s_eps(s, feynepsilonhat);
            z_eps = agv_2019a::z_eps(z, feynepsilonhat);

            x_a = agv_2019a::x_a(z, feynepsilonhat);
            x_b = agv_2019a::x_b(z, feynepsilonhat);
            x_c = x_a;
            x_d = x_b;
            x_e = x_a;

            y_a = agv_2019a::y_a(s, z, feynepsilonhat);
            y_b = agv_2019a::y_b(s, feynepsilonhat);
            y_c = agv_2019a::y_c(s, z, feynepsilonhat);
            y_d = y_c;
            y_e = y_c;
        }

        // LO one-loop functions

        complex<double> f290(const CharmLoopsParameters & clp)
        {
            const double q_c = 2.0 / 3.0; // charm quark charge

            const complex<double> result = 2.0 / 3.0 + 4.0 * clp.s_eps / clp.z_eps + log(power_of<2>(clp.muhat) / clp.z_eps)
                + (1.0 - 3.0 * power_of<2>(clp.y_c)) / (2.0 * power_of<3>(clp.y_c)) * (log(1.0 + clp.y_c) - log(1.0 - clp.y_c));

            return 2.0 / 3.0 * q_c * result;
        }

        complex<double> f190(const CharmLoopsParameters & clp)
        {
            const double c_F = 4.0 / 3.0; // SU(3.0) color factor

            return c_F * f290(clp);
        }

        // Counterterms to the two-loop functions

        complex<double> f17ctQs(const CharmLoopsParameters & )
        {
            return 0.0;
        }

        complex<double> f17ctQc(const CharmLoopsParameters & )
        {
            return 0.0;
        }

        complex<double> f17ctQb(const CharmLoopsParameters & clp)
        {
            const double muhat = clp.muhat;
            const complex<double> yb = clp.y_b;

            const complex<double> result = - 8.0 + 4.0 * (log(1.0 + yb) - log(1.0 - yb)) / yb - 8.0 * log(muhat);

            return result / 81.0;
        }

        complex<double> f27ctQs(const CharmLoopsParameters & )
        {
            return 0.0;
        }

        complex<double> f27ctQc(const CharmLoopsParameters & )
        {
            return 0.0;
        }

        complex<double> f27ctQb(const CharmLoopsParameters & clp)
        {
            return - 6.0 * f17ctQb(clp);
        }

        complex<double> f19ctQs(const CharmLoopsParameters & clp)
        {
            const complex<double> s = clp.s_eps;
            const complex<double> lnms = log(-s);
            const double lnmuhat = log(clp.muhat);

            // Mathematica: -104/2187 + (2*Pi^2)/729 - (32*Log[mub])/729 - (16*Log[mub]^2)/243 + (16*Log[-s])/729 + (16*Log[mub]*Log[-s])/243 - (4*Log[-s]^2)/243;
            const complex<double> result = - 104.0 / 9.0 + 2.0 * pisqu / 3.0 - 32.0 * lnmuhat / 3.0 - 16.0 * power_of<2>(lnmuhat) + 16.0 * lnms / 3.0
                + 16.0 * lnmuhat * lnms - 4.0 * power_of<2>(lnms);

            return result / 243.0;
        }

        complex<double> f19ctQc(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xa = clp.x_a;
            const complex<double> yc = clp.y_c;

            const complex<double> yc2 = power_of<2>(yc);
            const complex<double> yc3 = power_of<3>(yc);

            const complex<double> lnz    = log(clp.z_eps);
            const complex<double> lnxa   = log(xa);
            const complex<double> ln1pxa = log(1.0 + xa);
            const complex<double> ln1mxa = log(1.0 - xa);
            const complex<double> ln1pyc = log(1.0 + yc);
            const complex<double> ln1myc = log(1.0 - yc);

            const complex<double> result = 1792.0 + (768.0 * myi) * M_PI - 20.0 * pisqu - 1536.0 / yc2 - ((624.0 * myi) * M_PI) / yc2
                + 96.0 * dilog(1.0 / 2.0) - 48.0 * dilog((1.0 - xa) / 2.0) - 48.0 * dilog((1.0 + xa) / 2.0) + (-312.0 / yc3 + 648.0 / yc - 288.0 * yc) * dilog((1.0 - yc) / 2.0)
                + (312.0 / yc3 - 648.0 / yc + 288.0 * yc) * dilog((1.0 + yc) / 2.0) + 1536.0 * ln2 + (96.0 * myi) * M_PI * ln2 - (1248.0 * ln2) / yc2 + 96.0 * power_of<2>(ln2) + 2688.0 * lnmuhat + (96.0 * myi) * M_PI * lnmuhat
                - (2400.0 * lnmuhat) / yc2 + 192.0 * ln2 * lnmuhat + 96.0 * power_of<2>(lnmuhat) + 24.0 * power_of<2>(ln1mxa) + ln1mxa * (-768.0 - (48.0 * myi) * M_PI + 624.0 / yc2 - 48.0 * ln2 - 96.0 * lnmuhat - 96.0 * lnxa)
                + 96.0 * power_of<2>(lnxa) + lnxa * (1536.0 + (96.0 * myi) * M_PI - 1248.0 / yc2 + 192.0 * ln2 + 192.0 * lnmuhat - 96.0 * ln1pxa) + (-768.0 - (48.0 * myi) * M_PI + 624.0 / yc2 - 48.0 * ln2 - 96.0 * lnmuhat) * ln1pxa
                + 24.0 * power_of<2>(ln1pxa) + (-156.0 / yc3 + 324.0 / yc - 144.0 * yc) * power_of<2>(ln1myc) + (156.0 / yc3 - 324.0 / yc + 144.0 * yc) * power_of<2>(ln1pyc) - 576.0 * lnz + (576.0 * lnz) / yc2
                + ln1pyc * (768.0 / yc3 + ((312.0 * myi) * M_PI) / yc3 - 1008.0 / yc - ((648.0 * myi) * M_PI) / yc + 96.0 * yc + (288.0 * myi) * M_PI * yc + (312.0 * ln2) / yc3 - (648.0 * ln2) / yc + 288.0 * yc * ln2
                    + (1200.0 * lnmuhat) / yc3 - (2448.0 * lnmuhat) / yc + 1152.0 * yc * lnmuhat + (-312.0 / yc3 + 648.0 / yc - 288.0 * yc) * ln1mxa + (624.0 / yc3 - 1296.0 / yc + 576.0 * yc) * lnxa
                    + (-312.0 / yc3 + 648.0 / yc - 288.0 * yc) * ln1pxa - (288.0 * lnz) / yc3 + (576.0 * lnz) / yc - 288.0 * yc * lnz)
                + ln1myc * (-768.0 / yc3 - ((312.0 * myi) * M_PI) / yc3 + 1008.0 / yc + ((648.0 * myi) * M_PI) / yc - 96.0 * yc - (288.0 * myi) * M_PI * yc - (312.0 * ln2) / yc3 + (648.0 * ln2) / yc - 288.0 * yc * ln2
                    - (1200.0 * lnmuhat) / yc3 + (2448.0 * lnmuhat) / yc - 1152.0 * yc * lnmuhat + (312.0 / yc3 - 648.0 / yc + 288.0 * yc) * ln1mxa + (-624.0 / yc3 + 1296.0 / yc - 576.0 * yc) * lnxa
                    + (312.0 / yc3 - 648.0 / yc + 288.0 * yc) * ln1pxa + (288.0 * lnz) / yc3 - (576.0 * lnz) / yc + 288.0 * yc * lnz);

            return result / 81.0;
        }

        complex<double> f19ctQb(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> yb = clp.y_b;

            const complex<double> yb3 = power_of<3>(yb);

            const complex<double> ln1pyb    = log(1.0 + yb);
            const complex<double> ln1myb    = log(1.0 - yb);
            const complex<double> dilog1pybhalf = dilog((1.0 + yb) / 2.0);
            const complex<double> dilog1mybhalf = dilog((1.0 - yb) / 2.0);

            const complex<double> result = -224.0 / 27.0 - (2.0 * power_of<2>(M_PI)) / 9.0 + 40.0 / (9.0 * power_of<2>(yb))
                - (80.0 * lnmuhat) / 9.0 + (16.0 * lnmuhat) / (3.0 * power_of<2>(yb)) - (16.0 * power_of<2>(lnmuhat)) / 3.0
                + (4.0 / (3.0 * yb3) - 4.0 / yb) * dilog1mybhalf + (-4.0 / (3.0 * yb3) + 4.0 / yb) * dilog1pybhalf
                + (20.0 / (9.0 * yb3) + (8.0 * lnmuhat) / (3.0 * yb3) - (4.0 + 8.0 * lnmuhat) / yb - (4.0 * ln2) / (3.0 * yb3) + (4.0 * ln2) /  yb) * ln1myb
                + (2.0 / (3.0 * yb3) - 2.0 / yb) * power_of<2>(ln1myb)
                + (-20.0 / (9.0 * yb3) + 4.0 / yb - (8.0 * lnmuhat) / (3.0 * yb3) + (8.0 * lnmuhat) / yb + (4.0 * ln2) / (3.0 * yb3) - (4.0 * ln2) / yb) * ln1pyb
                + (-2.0 / (3.0 * yb3) + 2.0 / yb) * power_of<2>(ln1pyb);

            return result / 81.0;
        }

        complex<double> f29ctQs(const CharmLoopsParameters & clp)
        {
            return - 6.0 * f19ctQs(clp);
        }

        complex<double> f29ctQc(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xa = clp.x_a;
            const complex<double> yc = clp.y_c;

            const complex<double> yc2 = power_of<2>(yc);
            const complex<double> yc3 = power_of<3>(yc);

            const complex<double> lnz     = log(clp.z_eps);
            const complex<double> lnxa    = log(xa);
            const complex<double> ln1pxa  = log(1.0 + xa);
            const complex<double> ln1mxa  = log(1.0 - xa);
            const complex<double> ln1pyc  = log(1.0 + yc);
            const complex<double> ln1myc  = log(1.0 - yc);
            const complex<double> ln1pyc2 = power_of<2>(ln1pyc);
            const complex<double> ln1myc2 = power_of<2>(ln1myc);

            const complex<double> result = 208.0 + (48.0 * myi * M_PI) + 40.0 * power_of<2>(M_PI) - 240.0 / yc2 - (48.0 * myi * M_PI) / yc2
                - 192.0 * dilog(1.0 / 2.0) + 96.0 * dilog((1.0 - xa) / 2.0) + 96.0 * dilog((1.0 + xa) / 2.0)
                + (-24.0 / yc3 - 72.0 * yc) * dilog((1.0 - yc) / 2.0) + (24.0 / yc3 + 72.0 * yc) * dilog((1.0 + yc) / 2.0) + 96.0 * ln2 - (192.0 * myi * M_PI *  ln2)
                - (96.0 * ln2) / yc2 - 192.0 * power_of<2>(ln2) + 384.0 * lnmuhat - (192.0 * myi * M_PI *  lnmuhat) - (384.0 * lnmuhat) / yc2 - (384.0 * ln2 *  lnmuhat)
                - 192.0 * power_of<2>(lnmuhat) - 48.0 * power_of<2>(ln1mxa) - 192.0 * power_of<2>(lnxa) + ln1mxa * (-48.0 + (96.0 * myi *  M_PI) + 48.0 / yc2 + 96.0 * ln2 + 192.0 * lnmuhat
                + 192.0 * lnxa) + (-48.0 + (96.0 * myi *  M_PI) + 48.0 / yc2 + 96.0 * ln2 + 192.0 * lnmuhat) * ln1pxa - 48.0 * power_of<2>(ln1pxa)
                + lnxa * (96.0 - (192.0 * myi * M_PI) - 96.0 / yc2 - 384.0 * ln2 - 384.0 * lnmuhat + 192.0 * ln1pxa)
                + (-12.0 / yc3 - 36.0 * yc) * ln1myc2 + (12.0 / yc3 + 36.0 * yc) * ln1pyc2 - 144.0 * lnz + (144.0 * lnz) / yc2
                + ln1pyc * (120.0 / yc3 + (24.0 * myi * M_PI) / yc3 - 144.0 / yc + 24.0 * yc + (72.0 * myi * M_PI *  yc) + (24.0 * ln2) / yc3 + (72.0 * yc *  ln2)
                    + (192.0 * lnmuhat) / yc3 - (288.0 * lnmuhat) / yc + (288.0 * yc *  lnmuhat) + (-24.0 / yc3 - 72.0 * yc) * ln1mxa
                    + (48.0 / yc3 + 144.0 * yc) * lnxa + (-24.0 / yc3 - 72.0 * yc) * ln1pxa - (72.0 * lnz) / yc3 + (144.0 * lnz) / yc - (72.0 * yc *  lnz))
                + ln1myc * (-120.0 / yc3 - (24.0 * myi * M_PI) / yc3 + 144.0 / yc - 24.0 * yc - (72.0 * myi * M_PI *  yc) - (24.0 * ln2) / yc3 - (72.0 * yc *  ln2)
                    - (192.0 * lnmuhat) / yc3 + (288.0 * lnmuhat) / yc - (288.0 * yc *  lnmuhat) + (24.0 / yc3 + 72.0 * yc) * ln1mxa
                    + (-48.0 / yc3 - 144.0 * yc) * lnxa + (24.0 / yc3 + 72.0 * yc) * ln1pxa + (72.0 * lnz) / yc3 - (144.0 * lnz) / yc + (72.0 * yc *  lnz));

            return result / 27.0;
        }

        complex<double> f29ctQb(const CharmLoopsParameters & clp)
        {
            return -6.0 * f19ctQb(clp);
        }

        // NLO two-loop functions

        complex<double> f17a(const CharmLoopsParameters & clp)
        {
            // f17a = - f27a / (2 * N_c)
            return - f27a(clp) / 6.0;
        }

        complex<double> f19a(const CharmLoopsParameters & clp)
        {
            // f19a = - f29a / (2 * N_c)
            return - f29a(clp) / 6.0;
        }

        complex<double> f27a(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xa = clp.x_a;
            const complex<double> ya = clp.y_a;

            const complex<double> xa2 = power_of<2>(xa);
            const complex<double> xa3 = power_of<3>(xa);
            const complex<double> xa4 = power_of<4>(xa);

            const complex<double> ya2 = power_of<2>(ya);
            const complex<double> ya3 = power_of<3>(ya);
            const complex<double> ya4 = power_of<4>(ya);
            const complex<double> ya5 = power_of<5>(ya);
            const complex<double> ya6 = power_of<6>(ya);
            const complex<double> ya7 = power_of<7>(ya);
            const complex<double> ya8 = power_of<8>(ya);

            const complex<double> xainv = 1.0 / xa;
            const complex<double> yainv = 1.0 / ya;

            const double imxa = imag(xa);
            const double imyainv = imag(yainv);

            const complex<double> ln1pxa  = log(1.0 + xa);
            const complex<double> ln1mxa  = log(1.0 - xa);
            const complex<double> ln1pya  = log(1.0 + ya);
            const complex<double> ln1mya  = log(1.0 - ya);

            const complex<double> num1 = (-1.0 + ya) * (1.0 + ya) * (3.0 * ya4 - 3.0 * xa * ya4 + xa2 * (9.0 * ya2 - 106.0 * ya4) + xa3 * (9.0 * ya2 - 38.0 * ya4) + 2.0 * xa4 * (-9.0 + 72.0 * ya2 + 4.0 * ya4));
            const complex<double> num2 = 4.0 * (-1.0 + ya) * (1.0 + ya) * (9.0 * ya2 - 72.0 * ya4 + xa2 * (-9.0 + 72.0 * ya2 + 4.0 * ya4));
            const complex<double> num3 = (-1.0 + ya) * (1.0 + ya) * (3.0 * ya4 + 3.0 * xa * ya4 + xa3 * ya2 * (-9.0 + 38.0 * ya2) + xa2 * (9.0 * ya2 - 106.0 * ya4) + 2.0 * xa4 * (-9.0 + 72.0 * ya2 + 4.0 * ya4));
            const complex<double> num4 = 2.0 * (xa - ya) * (xa + ya) * (9.0 - 81.0 * ya2 + 68.0 * ya4);
            const complex<double> num5 = (-1.0 + ya) * (1.0 + ya) * (ya4 + xa2 * ya2 * (3.0 + 7.0 * ya2) + xa4 * (-6.0 - 15.0 * ya2 + 10.0 * ya4));

            const complex<double> factor1 = (1.0 / (9.0 * (-1.0 + xa2) * ya7)) * 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (-1.0 + 3.0 * ya2);
            const complex<double> factor2 = (1.0 / (9.0 * (-1.0 + xa2) * ya8)) * (xa - ya) * (xa + ya) * power_of<2>(-1.0 + ya2) * (1.0 + 3.0 * ya2);

            const complex<double> logs1 = 2.0 * (xa - ya) * (xa + ya) * (9.0 * ya - 81.0 * ya3 + 68.0 * ya5 - 18.0 * myi * M_PI * (1.0 - 4.0 * ya2 + 3.0 * ya4) - 18.0 * ln2 + 72.0 * ya2 * ln2 - 54.0 * ya4 * ln2);
            const complex<double> logs2 = 2.0 * (xa - ya) * (xa + ya) * (9.0 * ya - 81.0 * ya3 + 68.0 * ya5 + 18.0 * myi * M_PI * (1.0 - 4.0 * ya2 + 3.0 * ya4) + 18.0 * ln2 - 72.0 * ya2 * ln2 + 54.0 * ya4 * ln2);
            const complex<double> logs3 = 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (ya - 3.0 * ya3 - myi * M_PI * (-1.0 - 2.0 * ya2 + 3.0 * ya4) + ln2 + ya2 * ln4 - ya4 * log(8.0));
            const complex<double> logs4 = 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (-ya + 3.0 * ya3 - myi * M_PI * (-1.0 - 2.0 * ya2 + 3.0 * ya4) + ln2 + ya2 * ln4 - ya4 * log(8.0));
            const complex<double> logs5 = 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (ya - 3.0 * ya3 + myi * M_PI * (-1.0 - 2.0 * ya2 + 3.0 * ya4) - ln2 - ya2 * ln4 + ya4 * log(8.0));
            const complex<double> logs6 = 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (-ya + 3.0 * ya3 + myi * M_PI * (-1.0 - 2.0 * ya2 + 3.0 * ya4) - ln2 - ya2 * ln4 + ya4 * log(8.0));

            const complex<double> logs7 = 2.0 * (xa - ya) * (xa + ya) * (9.0 * ya - 81.0 * ya3 + 68.0 * ya5 - 18.0 * ln2 + 72.0 * ya2 * ln2 - 54.0 * ya4 * ln2);
            const complex<double> logs8 = 2.0 * (xa - ya) * (xa + ya) * (9.0 * ya - 81.0 * ya3 + 68.0 * ya5 + 18.0 * ln2 - 72.0 * ya2 * ln2 + 54.0 * ya4 * ln2);
            const complex<double> logs9 = 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (ya - 3.0 * ya3 - ln2 - ya2 * ln4 + ya4 * log(8.0));
            const complex<double> logs10 = 2.0 * (xa - ya) * (-1.0 + ya) * (1.0 + ya) * (xa + ya) * (-ya + 3.0 * ya3 - ln2 - ya2 * ln4 + ya4 * log(8.0));

            const complex<double> term1 = (1.0 / (243.0 * xa2 * (-1.0 + xa2) * ya6)) * (9.0 * ya4 * (-1.0 + ya2) + 12.0 * myi * M_PI * xa2 * (-9.0 * ya2 + 81.0 * ya4 - 70.0 * ya6 + xa2 * (9.0 - 81.0 * ya2 + 68.0 * ya4 + 2.0 * ya6))
                + xa2 * ya2 * (27.0 + ya4 * (217.0 - 864.0 * ln2) - 108.0 * ln2 + 6.0 * ya2 * (-53.0 + 162.0 * ln2)) + xa4 * (108.0 * ln2 - 27.0 * ya2 * (1.0 + 36.0 * ln2) + ya6 * (-226.0 + 48.0 * ln2)
                    + ya4 * (327.0 + 816.0 * ln2))) + (16.0 * lnmuhat) / 81.0;
            const complex<double> term2 = (1.0 / (243.0 * xa2 * (-1.0 + xa2) * ya6)) * (9.0 * ya4 * (-1.0 + ya2) + xa2 * ya2 * (27.0 + ya4 * (217.0 - 24.0 * myi * M_PI - 864.0 * ln2) - 108.0 * ln2 + 6.0 * ya2 * (-53.0 + 162.0 * ln2))
                + xa4 * (108.0 * ln2 - 27.0 * ya2 * (1.0 + 36.0 * ln2) + ya6 * (-226.0 + 24.0 * myi * M_PI + 48.0 * ln2) + ya4 * (327.0 + 816.0 * ln2))) + (16.0 * lnmuhat) / 81.0;

            const complex<double> denom1 = (81.0 * (-1.0 + xa) * xa3 * ya6);
            const complex<double> denom2 = (81.0 * (-1.0 + xa2) * ya6);
            const complex<double> denom3 = (81.0 * xa3 * (1.0 + xa) * ya6);
            const complex<double> denom4 = (54.0 * xa4 * ya6);
            const complex<double> denom5 = (81.0  * (-1.0 + xa2) * ya7);
            const complex<double> denom6 = (9.0 * (-1.0 + xa2) * ya8);

            // Heaviside theta related functions
            const double t11mya1mxa = T(1.0, 1.0 - ya, 1.0 - xa); // MyT[1, 1 - ya, 1 - xa]
            const double t11pya1mxa = T(1.0, 1.0 + ya, 1.0 - xa); // MyT[1, 1 + ya, 1 - xa]
            const double t11mya1pxa = T(1.0, 1.0 - ya, 1.0 + xa); // MyT[1, 1 - ya, 1 + xa]
            const double t11pya1pxa = T(1.0, 1.0 + ya, 1.0 + xa); // MyT[1, 1 + ya, 1 + xa]

            complex<double> result;

            if (imag(clp.s_eps) > 0)
            {
                // F27aupper
                result = term2 - (num3 * ln1mxa) / denom3 - (num1 * ln1pxa) / denom1 + (2.0 * num5 * li2half - num5 * dilog((1.0 - xa) / 2.0) - num5 * dilog((1.0 + xa) / 2.0) + num5 * ln2 * ln1mxa - (num5 * power_of<2>(ln1mxa)) / 2.0
                        + num5 * ln2 * ln1pxa - (num5 * power_of<2>(ln1pxa)) / 2.0) / denom4 + (-(logs7 * ln1mya) - logs8 * ln1pya) / denom5
                    + ((-logs10 - logs9) * li2half + logs10 * dilog((1.0 - ya) / 2.0) + logs9 * dilog((1.0 + ya) / 2.0) - logs10 * ln2 * ln1mya + (logs9 * power_of<2>(ln1mya)) / 2.0 - logs9 * ln2 * ln1pya + (logs10 * power_of<2>(ln1pya)) / 2.0) / denom6
	                + (num2 * log(xa) + num4 * log((xa + ya) * xainv) + num4 * log(1.0 - ya * xainv)) / denom2 + factor1 * (dilog((xa - ya) / (-1.0 + xa)) - dilog((xa - ya) / (1.0 + xa)) - dilog((xa + ya) / (-1.0 + xa))
                        + dilog((xa + ya) / (1.0 + xa)) + (-ln1mxa + 2.0 * log(xa) - ln1pxa) * ln1mya + (ln1mxa - 2.0 * log(xa) + ln1pxa) * ln1pya
                        + (-ln1mxa + ln1pxa + log((1.0 - ya) / (1.0 + xa)) - log((1.0 + ya) / (1.0 - xa))) * log((xa + ya) * xainv) + (ln1mxa - ln1pxa + log((-1.0 + ya) / (-1.0 + xa)) - log((1.0 + ya) / (1.0 + xa))) * log(1.0 - ya * xainv)
	                + log(1.0 + xainv) * ((2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + log((-1.0 + xa) * xainv) * ((-2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                    + factor2 * ((pisqu * ln2) / 6.0 - 4.0 * trilog(-1.0) - 2.0 * li3half + 2.0 * trilog(1.0 / (1.0 - xa)) - 2.0 * trilog(1.0 - xa) + 2.0 * trilog((-1.0 + xa) / (2.0 * xa)) + 2.0 * trilog(1.0 / (1.0 + xa)) + 2.0 * trilog((1.0 - xa) / (1.0 + xa))
                        - 2.0 * trilog(1.0 + xa) + 2.0 * trilog((1.0 + xa) / (1.0 - xa)) + 2.0 * trilog((1.0 + xa) / (2.0 * xa)) + trilog((1.0 + xa) / (1.0 - ya)) + 4.0 * trilog((1.0 - ya) / 2.0) - trilog((1.0 - ya) / (1.0 + xa)) + trilog((-1.0 + xa) / (-1.0 + ya))
                        - trilog((-1.0 + ya) / (-1.0 + xa)) - trilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) + trilog((1.0 - xa) / (1.0 + ya)) + trilog((1.0 + xa) / (1.0 + ya)) + 2.0 * trilog((-1.0 + ya) / (1.0 + ya))
                        - trilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) - trilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) + 4.0 * trilog((1.0 + ya) / 2.0) - trilog((1.0 + ya) / (1.0 - xa)) - trilog((1.0 + ya) / (1.0 + xa))
                        - trilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) + 2.0 * trilog((1.0 + ya) / (-1.0 + ya)) - trilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya)))
                        - trilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) + (pisqu * ln2) / 3.0 - power_of<3>(ln2) - 2.0 * dilog((1.0 + xa) / (1.0 - xa)) * log(1.0 / (1.0 - xa))
                        - 2.0 * dilog((1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 - xa)) - power_of<3>(ln1mxa) / 3.0 - 2.0 * dilog((-1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 + xa)) - 2.0 * dilog((1.0 - xa) / (1.0 + xa)) * log(1.0 / (1.0 + xa))
                        + dilog(-1.0) * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * log(1.0 / (1.0 + xa))) + dilog((xa - ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa) + dilog((xa + ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa)
                        - power_of<3>(ln1pxa) / 3.0 + dilog((xa - ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + dilog((xa + ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + (pisqu * log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0
                        + power_of<3>(log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0 + (pisqu * log((-1.0 + xa2) / (2.0 * xa))) / 3.0 + power_of<3>(log((-1.0 + xa2) / (2.0 * xa))) / 3.0 - (pisqu * log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0 - power_of<3>(log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 - ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 - ya))) / 6.0 - power_of<3>(ln1mya) / 6.0 + dilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) * log((1.0 - ya) / (1.0 + xa))
                        + dilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) * log((1.0 - ya) / (1.0 + xa)) - (pisqu * log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 + (pisqu * log((-1.0 + xa) / (-1.0 + ya))) / 6.0
                        + power_of<3>(log((-1.0 + xa) / (-1.0 + ya))) / 6.0 + dilog((-1.0 + ya) / (1.0 + ya)) * (-log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa))) + dilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) * log((-1.0 + ya) / (-1.0 + xa))
                        + dilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) * log((-1.0 + ya) / (-1.0 + xa)) - (power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * log(2.0 / (1.0 + ya))) / 2.0 + (pisqu * log((1.0 - xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 - xa) / (1.0 + ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 + ya))) / 6.0 - power_of<3>(ln1pya) / 6.0 + dilog(1.0 / (1.0 - xa)) * (ln1mya + ln1pya) + dilog(1.0 / (1.0 + xa)) * (ln1mya + ln1pya)
                        + dilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 - xa)) + dilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) * log((1.0 + ya) / (1.0 - xa))
                        + dilog((1.0 + ya) / (-1.0 + ya)) * (-log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa))) + dilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) * log((1.0 + ya) / (1.0 + xa))
                        + dilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 + xa)) - (log(-2.0 / (-1.0 + ya)) * power_of<2>(log((1.0 + ya) / (1.0 + xa)))) / 2.0 - (pisqu * log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0
                        - power_of<3>(log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0 - (pisqu * log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0
                        + li2half * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 4.0 * log(xa) + 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + 2.0 * ln1mya + 2.0 * ln1pya - 2.0 * log((xa + ya) * xainv) - 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 - ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa)) - 2.0 * ln1pya - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + dilog((1.0 + ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - 2.0 * ln1pya - log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa)) - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + power_of<2>(ln1pya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((1.0 - ya) / 2.0) / 2.0 - log((xa - ya) / (1.0 + xa)) / 2.0 - log((xa + ya) / (-1.0 + xa)) / 2.0 + log((xa + ya) * xainv) / 2.0
                            + log(1.0 - ya * xainv) / 2.0) + power_of<2>(ln1mya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((xa - ya) / (-1.0 + xa)) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log((xa + ya) * xainv) / 2.0
                            - log((xa + ya) / (1.0 + xa)) / 2.0 + log(1.0 - ya * xainv) / 2.0) + dilog((1.0 - xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 + xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv)) + log((1.0 - ya) / 2.0) * ((-0.5) * power_of<2>(log((1.0 + ya) / (1.0 - xa))) - power_of<2>(log((1.0 + ya) / (1.0 + xa))) / 2.0
                            - log((1.0 + ya) / (1.0 - xa)) * log((xa + ya) * xainv) - log((1.0 + ya) / (1.0 + xa)) * log(1.0 - ya * xainv)) - (2.0 * myi) * M_PI * H1((1.0 + xa) / (-1.0 + xa), 1.0 + xainv) * power_of<2>(log(-1.0 / (1.0 + xa))) * my_sign(-imag(xainv))
                        + (2.0 * myi) * M_PI * H1((-1.0 + xa) * xainv, 1.0 + xainv) * power_of<2>(log((2.0 * xa) / (-1.0 + xa2))) * my_sign(-imag(xainv)) - (2.0 * myi) * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) * xainv) * power_of<2>(log(1.0 / (-1.0 + xa))) * my_sign(imag(xainv))
                        + (2.0 * myi) * M_PI * H1(1.0 + xainv, (-1.0 + xa) * xainv) * power_of<2>(log((-2.0 * xa) / (-1.0 + xa2))) * my_sign(imag(xainv)) + myi * M_PI * H1((1.0 + xa) / (xa - ya), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((-2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((1.0 + ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa - ya))) + myi * M_PI * H1((-1.0 + xa) / (xa - ya), (1.0 + xa) / (xa - ya)) * power_of<2>(log((2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa - ya)))
	                    - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa - ya)) * power_of<2>(log((-1.0 + ya) / (1.0 + xa))) * my_sign(imag((1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((1.0 - ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa + ya))) + myi * M_PI * H1((1.0 + xa) / (xa + ya), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((-2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa + ya)))
	                    - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa + ya)) * power_of<2>(log(-((1.0 + ya) / (1.0 + xa)))) * my_sign(imag((1.0 + xa) / (xa + ya)))
                        + myi * M_PI * H1((-1.0 + xa) / (xa + ya), (1.0 + xa) / (xa + ya)) * power_of<2>(log((2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa + ya)))
                        + power_of<2>(log(1.0 / (1.0 + xa))) * (lnhalf + ln2 - log((2.0 * xa) / (1.0 + xa)) - log((1.0 + xa) / (2.0 * xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xa / (1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), 1.0 / (1.0 + xa)))
                        + power_of<2>(log(1.0 / (1.0 - xa))) * (lnhalf + ln2 - log((-1.0 + xa) / (2.0 * xa)) - log((2.0 * xa) / (-1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(imag(xa / (1.0 - xa))) * T(1.0, 1.0 / (1.0 + xa), 1.0 / (1.0 - xa)))
                        + ln1mya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0 + (2.0 * ln2 - log((1.0 - ya) / 2.0)) * ln1pya - log((1.0 + ya) / 2.0) * ln1pya
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1pxa))
                        + power_of<2>(log((1.0 + ya) / (1.0 - xa))) * ((-0.5) * log(-2.0 / (-1.0 + ya)) + log((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) / 2.0 + log((-2.0 * (xa + ya)) / ((-1.0 + xa) * (-1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (-1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), (1.0 + ya) / (1.0 - xa))) + power_of<2>(log((1.0 + ya) / (1.0 + xa))) * (log((-2.0 * (xa - ya)) / ((1.0 + xa) * (-1.0 + ya))) / 2.0
                            + log((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) / 2.0 - myi * M_PI * my_sign(imag((xa - ya) / (1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), (1.0 + ya) / (1.0 + xa)))
                        + power_of<2>(ln1mxa) * ((-myi) * M_PI * my_sign(imxa) * t11mya1mxa - myi * M_PI * my_sign(imxa) * t11pya1mxa) + power_of<2>(ln1pxa) * ((-myi) * M_PI * my_sign(-imxa) * t11mya1pxa
                            - myi * M_PI * my_sign(-imxa) * t11pya1pxa) + ln1pya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1pxa))
                        + power_of<2>(log(-2.0 / (-1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), -2.0 / (-1.0 + xa)) + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                            + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa))) + log((xa + ya) * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0
                            - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa + ya))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa + ya))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa)))
                        + power_of<2>(log((1.0 - ya) / (1.0 + xa))) * ((-0.5) * log(2.0 / (1.0 + ya)) - log((1.0 + ya) / 2.0) / 2.0 + log(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) / 2.0 + log((2.0 * (xa + ya)) / ((1.0 + xa) * (1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), (1.0 - ya) / (1.0 + xa))) + power_of<2>(log(2.0 / (1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, 1.0 / (1.0 + xa), 2.0 / (1.0 + xa))
                            + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + log(1.0 - ya * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0 - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa - ya))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
	                    - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa - ya))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * (log((2.0 * (xa - ya)) / ((-1.0 + xa) * (1.0 + ya))) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa - ya) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), (-1.0 + ya) / (-1.0 + xa))) + log((1.0 + ya) / (1.0 - xa)) * ((ln1mxa - ln1pxa) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)) + log((1.0 - ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log((xa + ya) * xainv) - log((1.0 + ya) / 2.0) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)) + dilog(xa / (-1.0 + xa)) * (-2.0 * ln1mxa - 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + log((1.0 - ya) / (1.0 + xa))
                            + log((1.0 + ya) / (1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + dilog((1.0 + xa) / (-1.0 + xa)) * (2.0 * log(1.0 / (1.0 + xa)) - log((1.0 - ya) / (1.0 + xa)) - log((1.0 + ya) / (1.0 + xa)) + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)
                            + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + log((-1.0 + ya) / (-1.0 + xa)) * ((ln1mxa - ln1pxa) * log(1.0 - ya * xainv) - log((1.0 + ya) / 2.0) * log(1.0 - ya * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + dilog(xa / (1.0 + xa)) * (-2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 2.0 * ln1pxa + log((-1.0 + ya) / (-1.0 + xa))
                            + log((1.0 + ya) / (1.0 - xa)) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + dilog((-1.0 + xa) / (1.0 + xa)) * (2.0 * log(1.0 / (1.0 - xa)) - log((-1.0 + ya) / (-1.0 + xa)) - log((1.0 + ya) / (1.0 - xa)) + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)
                            + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)) + log((1.0 + ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log(1.0 - ya * xainv) + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                            + ln1pxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) + (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((-2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + ln1mxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((-2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + log(1.0 + xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, 1.0 + xainv) * T(p(-xainv, (xa + ya) * xainv), (xa + ya) * xainv, (-1.0 + xa) * xainv) + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, 1.0 + xainv) * T(p(-xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, (-1.0 + xa) * xainv))
	                    + log((-1.0 + xa) * xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) * T(p(xainv, (xa + ya) * xainv), (xa + ya) * xainv, 1.0 + xainv)
                            + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv) * T(p(xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, 1.0 + xainv)) - (21.0 * zeta3) / 4.0);

                return result;
            }
            else
            {
                // F27alower
                result = term1 - (num3 * ln1mxa) / denom3 - (num1 * ln1pxa) / denom1 + (2.0 * num5 * li2half - num5 * dilog((1.0 - xa) / 2.0) - num5 * dilog((1.0 + xa) / 2.0) + num5 * ln2 * ln1mxa - (num5 * power_of<2>(ln1mxa)) / 2.0
                        + num5 * ln2 * ln1pxa - (num5 * power_of<2>(ln1pxa)) / 2.0) / denom4 + (-(logs1 * ln1mya) - logs2 * ln1pya) / denom5
                    + ((logs3 + logs4) * li2half - logs3 * dilog((1.0 - ya) / 2.0) - logs4 * dilog((1.0 + ya) / 2.0) + logs3 * ln2 * ln1mya + (logs5 * power_of<2>(ln1mya)) / 2.0 + logs4 * ln2 * ln1pya + (logs6 * power_of<2>(ln1pya)) / 2.0) / denom6
                    + (num2 * log(xa) + num4 * log((xa + ya) * xainv) + num4 * log(1.0 - ya * xainv)) / denom2 + factor1 * (dilog((xa - ya) / (-1.0 + xa)) - dilog((xa - ya) / (1.0 + xa)) - dilog((xa + ya) / (-1.0 + xa))
                        + dilog((xa + ya) / (1.0 + xa)) + (-ln1mxa + 2.0 * log(xa) - ln1pxa) * ln1mya + (ln1mxa - 2.0 * log(xa) + ln1pxa) * ln1pya
                        + (-ln1mxa + ln1pxa + log((1.0 - ya) / (1.0 + xa)) - log((1.0 + ya) / (1.0 - xa))) * log((xa + ya) * xainv) + (ln1mxa - ln1pxa + log((-1.0 + ya) / (-1.0 + xa)) - log((1.0 + ya) / (1.0 + xa))) * log(1.0 - ya * xainv)
                        + log(1.0 + xainv) * ((2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + log((-1.0 + xa) * xainv) * ((-2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                    + factor2 * ((pisqu * ln2) / 6.0 - 4.0 * trilog(-1.0) - 2.0 * li3half + 2.0 * trilog(1.0 / (1.0 - xa)) - 2.0 * trilog(1.0 - xa) + 2.0 * trilog((-1.0 + xa) / (2.0 * xa)) + 2.0 * trilog(1.0 / (1.0 + xa)) + 2.0 * trilog((1.0 - xa) / (1.0 + xa))
                        - 2.0 * trilog(1.0 + xa) + 2.0 * trilog((1.0 + xa) / (1.0 - xa)) + 2.0 * trilog((1.0 + xa) / (2.0 * xa)) + trilog((1.0 + xa) / (1.0 - ya)) + 4.0 * trilog((1.0 - ya) / 2.0) - trilog((1.0 - ya) / (1.0 + xa)) + trilog((-1.0 + xa) / (-1.0 + ya))
                        - trilog((-1.0 + ya) / (-1.0 + xa)) - trilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) + trilog((1.0 - xa) / (1.0 + ya)) + trilog((1.0 + xa) / (1.0 + ya)) + 2.0 * trilog((-1.0 + ya) / (1.0 + ya))
                        - trilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) - trilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) + 4.0 * trilog((1.0 + ya) / 2.0) - trilog((1.0 + ya) / (1.0 - xa)) - trilog((1.0 + ya) / (1.0 + xa))
                        - trilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) + 2.0 * trilog((1.0 + ya) / (-1.0 + ya)) - trilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya)))
                        - trilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) + (pisqu * ln2) / 3.0 - power_of<3>(ln2) - 2.0 * dilog((1.0 + xa) / (1.0 - xa)) * log(1.0 / (1.0 - xa))
                        - 2.0 * dilog((1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 - xa)) - power_of<3>(ln1mxa) / 3.0 - 2.0 * dilog((-1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 + xa)) - 2.0 * dilog((1.0 - xa) / (1.0 + xa)) * log(1.0 / (1.0 + xa))
                        + dilog(-1.0) * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * log(1.0 / (1.0 + xa))) + dilog((xa - ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa) + dilog((xa + ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa)
                        - power_of<3>(ln1pxa) / 3.0 + dilog((xa - ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + dilog((xa + ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + (pisqu * log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0
                        + power_of<3>(log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0 + (pisqu * log((-1.0 + xa2) / (2.0 * xa))) / 3.0 + power_of<3>(log((-1.0 + xa2) / (2.0 * xa))) / 3.0 - (pisqu * log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0 - power_of<3>(log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 - ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 - ya))) / 6.0 - power_of<3>(ln1mya) / 6.0 + dilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) * log((1.0 - ya) / (1.0 + xa))
                        + dilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) * log((1.0 - ya) / (1.0 + xa)) - (pisqu * log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 + (pisqu * log((-1.0 + xa) / (-1.0 + ya))) / 6.0
                        + power_of<3>(log((-1.0 + xa) / (-1.0 + ya))) / 6.0 + dilog((-1.0 + ya) / (1.0 + ya)) * (-log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa))) + dilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) * log((-1.0 + ya) / (-1.0 + xa))
                        + dilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) * log((-1.0 + ya) / (-1.0 + xa)) - (power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * log(2.0 / (1.0 + ya))) / 2.0 + (pisqu * log((1.0 - xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 - xa) / (1.0 + ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 + ya))) / 6.0 - power_of<3>(ln1pya) / 6.0 + dilog(1.0 / (1.0 - xa)) * (ln1mya + ln1pya) + dilog(1.0 / (1.0 + xa)) * (ln1mya + ln1pya)
                        + dilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 - xa)) + dilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) * log((1.0 + ya) / (1.0 - xa))
                        + dilog((1.0 + ya) / (-1.0 + ya)) * (-log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa))) + dilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) * log((1.0 + ya) / (1.0 + xa))
                        + dilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 + xa)) - (log(-2.0 / (-1.0 + ya)) * power_of<2>(log((1.0 + ya) / (1.0 + xa)))) / 2.0 - (pisqu * log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0
                        - power_of<3>(log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0 - (pisqu * log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0
                        + li2half * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 4.0 * log(xa) + 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + 2.0 * ln1mya + 2.0 * ln1pya - 2.0 * log((xa + ya) * xainv) - 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 - ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa)) - 2.0 * ln1pya - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + dilog((1.0 + ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - 2.0 * ln1pya - log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa)) - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + power_of<2>(ln1pya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((1.0 - ya) / 2.0) / 2.0 - log((xa - ya) / (1.0 + xa)) / 2.0 - log((xa + ya) / (-1.0 + xa)) / 2.0 + log((xa + ya) * xainv) / 2.0
                            + log(1.0 - ya * xainv) / 2.0) + power_of<2>(ln1mya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((xa - ya) / (-1.0 + xa)) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log((xa + ya) * xainv) / 2.0
                            - log((xa + ya) / (1.0 + xa)) / 2.0 + log(1.0 - ya * xainv) / 2.0) + dilog((1.0 - xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 + xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv)) + log((1.0 - ya) / 2.0) * ((-0.5) * power_of<2>(log((1.0 + ya) / (1.0 - xa))) - power_of<2>(log((1.0 + ya) / (1.0 + xa))) / 2.0
                            - log((1.0 + ya) / (1.0 - xa)) * log((xa + ya) * xainv) - log((1.0 + ya) / (1.0 + xa)) * log(1.0 - ya * xainv)) - (2.0 * myi) * M_PI * H1((1.0 + xa) / (-1.0 + xa), 1.0 + xainv) * power_of<2>(log(-1.0 / (1.0 + xa))) * my_sign(-imag(xainv))
                        + (2.0 * myi) * M_PI * H1((-1.0 + xa) * xainv, 1.0 + xainv) * power_of<2>(log((2.0 * xa) / (-1.0 + xa2))) * my_sign(-imag(xainv)) - (2.0 * myi) * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) * xainv) * power_of<2>(log(1.0 / (-1.0 + xa))) * my_sign(imag(xainv))
                        + (2.0 * myi) * M_PI * H1(1.0 + xainv, (-1.0 + xa) * xainv) * power_of<2>(log((-2.0 * xa) / (-1.0 + xa2))) * my_sign(imag(xainv)) + myi * M_PI * H1((1.0 + xa) / (xa - ya), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((-2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((1.0 + ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa - ya))) + myi * M_PI * H1((-1.0 + xa) / (xa - ya), (1.0 + xa) / (xa - ya)) * power_of<2>(log((2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa - ya)) * power_of<2>(log((-1.0 + ya) / (1.0 + xa))) * my_sign(imag((1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((1.0 - ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa + ya))) + myi * M_PI * H1((1.0 + xa) / (xa + ya), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((-2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa + ya)))
                        - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa + ya)) * power_of<2>(log(-((1.0 + ya) / (1.0 + xa)))) * my_sign(imag((1.0 + xa) / (xa + ya)))
                        + myi * M_PI * H1((-1.0 + xa) / (xa + ya), (1.0 + xa) / (xa + ya)) * power_of<2>(log((2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa + ya)))
                        + power_of<2>(log(1.0 / (1.0 + xa))) * (lnhalf + ln2 - log((2.0 * xa) / (1.0 + xa)) - log((1.0 + xa) / (2.0 * xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xa / (1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), 1.0 / (1.0 + xa)))
                        + power_of<2>(log(1.0 / (1.0 - xa))) * (lnhalf + ln2 - log((-1.0 + xa) / (2.0 * xa)) - log((2.0 * xa) / (-1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(imag(xa / (1.0 - xa))) * T(1.0, 1.0 / (1.0 + xa), 1.0 / (1.0 - xa)))
                        + ln1mya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0 + (2.0 * ln2 - log((1.0 - ya) / 2.0)) * ln1pya - log((1.0 + ya) / 2.0) * ln1pya
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1pxa))
                        + power_of<2>(log((1.0 + ya) / (1.0 - xa))) * ((-0.5) * log(-2.0 / (-1.0 + ya)) + log((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) / 2.0 + log((-2.0 * (xa + ya)) / ((-1.0 + xa) * (-1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (-1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), (1.0 + ya) / (1.0 - xa))) + power_of<2>(log((1.0 + ya) / (1.0 + xa))) * (log((-2.0 * (xa - ya)) / ((1.0 + xa) * (-1.0 + ya))) / 2.0
                            + log((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) / 2.0 - myi * M_PI * my_sign(imag((xa - ya) / (1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), (1.0 + ya) / (1.0 + xa)))
                        + power_of<2>(ln1mxa) * ((-myi) * M_PI * my_sign(imxa) * t11mya1mxa - myi * M_PI * my_sign(imxa) * t11pya1mxa) + power_of<2>(ln1pxa) * ((-myi) * M_PI * my_sign(-imxa) * t11mya1pxa
                            - myi * M_PI * my_sign(-imxa) * t11pya1pxa) + ln1pya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1pxa))
                        + power_of<2>(log(-2.0 / (-1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), -2.0 / (-1.0 + xa)) + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                            + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa))) + log((xa + ya) * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0
                            - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa + ya))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa + ya))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa)))
                        + power_of<2>(log((1.0 - ya) / (1.0 + xa))) * ((-0.5) * log(2.0 / (1.0 + ya)) - log((1.0 + ya) / 2.0) / 2.0 + log(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) / 2.0 + log((2.0 * (xa + ya)) / ((1.0 + xa) * (1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), (1.0 - ya) / (1.0 + xa))) + power_of<2>(log(2.0 / (1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, 1.0 / (1.0 + xa), 2.0 / (1.0 + xa))
                            + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + log(1.0 - ya * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0 - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa - ya))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                            - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa - ya))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * (log((2.0 * (xa - ya)) / ((-1.0 + xa) * (1.0 + ya))) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa - ya) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), (-1.0 + ya) / (-1.0 + xa))) + log((1.0 + ya) / (1.0 - xa)) * ((ln1mxa - ln1pxa) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)) + log((1.0 - ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log((xa + ya) * xainv) - log((1.0 + ya) / 2.0) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)) + dilog(xa / (-1.0 + xa)) * (-2.0 * ln1mxa - 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + log((1.0 - ya) / (1.0 + xa))
                            + log((1.0 + ya) / (1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + dilog((1.0 + xa) / (-1.0 + xa)) * (2.0 * log(1.0 / (1.0 + xa)) - log((1.0 - ya) / (1.0 + xa)) - log((1.0 + ya) / (1.0 + xa)) + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)
                            + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + log((-1.0 + ya) / (-1.0 + xa)) * ((ln1mxa - ln1pxa) * log(1.0 - ya * xainv) - log((1.0 + ya) / 2.0) * log(1.0 - ya * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + dilog(xa / (1.0 + xa)) * (-2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 2.0 * ln1pxa + log((-1.0 + ya) / (-1.0 + xa))
                            + log((1.0 + ya) / (1.0 - xa)) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + dilog((-1.0 + xa) / (1.0 + xa)) * (2.0 * log(1.0 / (1.0 - xa)) - log((-1.0 + ya) / (-1.0 + xa)) - log((1.0 + ya) / (1.0 - xa)) + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)
                            + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)) + log((1.0 + ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log(1.0 - ya * xainv) + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                            + ln1pxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) + (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((-2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + ln1mxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((-2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + log(1.0 + xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, 1.0 + xainv) * T(p(-xainv, (xa + ya) * xainv), (xa + ya) * xainv, (-1.0 + xa) * xainv) + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, 1.0 + xainv) * T(p(-xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                            + log((-1.0 + xa) * xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) * T(p(xainv, (xa + ya) * xainv), (xa + ya) * xainv, 1.0 + xainv)
                            + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv) * T(p(xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, 1.0 + xainv)) - (21.0 * zeta3) / 4.0);

                return result;
            }
        }

        complex<double> f29a(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xa = clp.x_a;
            const complex<double> ya = clp.y_a;

            const complex<double> xa2 = power_of<2>(xa);
            const complex<double> xa3 = power_of<3>(xa);
            const complex<double> xa4 = power_of<4>(xa);

            const complex<double> ya2 = power_of<2>(ya);
            const complex<double> ya3 = power_of<3>(ya);
            const complex<double> ya4 = power_of<4>(ya);
            const complex<double> ya5 = power_of<5>(ya);
            const complex<double> ya6 = power_of<6>(ya);
            const complex<double> ya7 = power_of<7>(ya);
            const complex<double> ya8 = power_of<8>(ya);

            const complex<double> xainv = 1.0 / xa;
            const complex<double> yainv = 1.0 / ya;

            const double imxa = imag(xa);
            const double imyainv = imag(yainv);

            const complex<double> ln1pxa  = log(1.0 + xa);
            const complex<double> ln1mxa  = log(1.0 - xa);
            const complex<double> ln1pya  = log(1.0 + ya);
            const complex<double> ln1mya  = log(1.0 - ya);

            const complex<double> num1 = 4.0 * ((-ya2) * (3.0 - 22.0 * ya2 + 15.0 * ya4 + 4.0 * ya5) + xa2 * (9.0 - 42.0 * ya2 + 41.0 * ya4 - 12.0 * ya6 + 4.0 * ya7));
            const complex<double> num2 = -3.0 * ya4 * (-1.0 + ya2) + 3.0 * xa2 * (ya2 - 4.0 * ya4 + 3.0 * ya6) + xa4 * (18.0 + 15.0 * ya2 - 81.0 * ya4 + 16.0 * ya6);
            const complex<double> num3 = (-1.0 + ya) * (1.0 + ya) * (-ya4 + xa2 * ya2 * (-1.0 + 3.0 * ya2) + xa4 * (-6.0 - 11.0 * ya2 + 16.0 * ya4));
            const complex<double> num4 = 4.0 * (3.0 * ya2 - 22.0 * ya4 + 15.0 * ya6 - 4.0 * ya7 + xa2 * (-9.0 + 42.0 * ya2 - 41.0 * ya4 + 12.0 * ya6 + 4.0 * ya7));
            const complex<double> num5 = 2.0 * power_of<2>(-1.0 + ya2) * (ya2 + 5.0 * ya4 + xa2 * (-3.0 - 7.0 * ya2 + 4.0 * ya4));

            const complex<double> denom1 = 81.0 * (-1.0 + xa2) * ya7;
            const complex<double> denom2 = 81.0 * xa4 * ya6;
            const complex<double> denom3 = 27.0 * xa4 * ya6;
            const complex<double> denom4 = 27.0 * (-1.0 + xa2) * ya8;
            const complex<double> denom5 = 81.0 * xa3 * (1.0 + xa) * ya6;
            const complex<double> denom6 = 81.0 * (-1.0 + xa2) * ya8;
            const complex<double> denom7 = 81.0 * (-1.0 + xa) * xa3 * ya6;
            const complex<double> denom8 = 81.0 * (-1.0 + xa2) * ya6;
            const complex<double> denom9 = 243.0 * (-1.0 + xa2) * ya6;
            const complex<double> denom10 = 243.0 * (-1.0 + xa2) * ya7;

            const complex<double> logs1 = 2.0 * (-3.0 * ya4 * (-1.0 + ya2) - 3.0 * xa * ya4 * (-1.0 + ya2) + xa2 * (3.0 * ya2 + 53.0 * ya4 - 56.0 * ya6)
                + 2.0 * xa4 * (9.0 - 87.0 * ya2 + 96.0 * ya4 + ya6 * (-18.0 - 8.0 * myi * M_PI - 8.0 * ln2))
                + xa3 * ya2 * (9.0 - 53.0 * ya2 + 4.0 * ya4 * (11.0 - 4.0 * myi * M_PI - 4.0 * ln2)));
            const complex<double> logs2 = 4.0 * (3.0 * myi * M_PI * power_of<2>(-1.0 + ya2) * (ya2 + 5.0 * ya4 + xa2 * (-3.0 - 7.0 * ya2 + 4.0 * ya4))
                + ya2 * (3.0 * ya - 22.0 * ya3 + 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (-9.0 * ya + 42.0 * ya3 - 41.0 * ya5 + 12.0 * ya7 - 9.0 * ln2 + 45.0 * ya4 * ln2 - 45.0 * ya6 * ln2 + 4.0 * ya8 * (-1.0 + log(8.0))
                    - ya2 * log(8.0)));
            const complex<double> logs3 = 2.0 * (-3.0 * ya4 * (-1.0 + ya2) + 3.0 * xa * ya4 * (-1.0 + ya2) + xa2 * (3.0 * ya2 + 53.0 * ya4 - 56.0 * ya6)
                + 2.0 * xa4 * (9.0 - 87.0 * ya2 + 96.0 * ya4 + ya6 * (-18.0 - 8.0 * myi * M_PI - 8.0 * ln2))
                + xa3 * ya2 * (-9.0 + 53.0 * ya2 + 4.0 * ya4 * (-11.0 + 4.0 * myi * M_PI + log(16.0))));
            const complex<double> logs4 = 8.0 * (ya2 * (3.0 - 53.0 * ya2 + ya4 * (50.0 - 8.0 * myi * M_PI - 8.0 * ln2))
                + xa2 * (-9.0 + 87.0 * ya2 - 96.0 * ya4 + 2.0 * ya6 * (9.0 + 4.0 * myi * M_PI + log(16.0))));
            const complex<double> logs5 = 4.0 * (9.0 * ya2 - 159.0 * ya4 - 8.0 * ya6 * (-14.0 + log(8.0)) + xa2 * (-27.0 + 261.0 * ya2 - 288.0 * ya4 + 4.0 * ya6 * (23.0 + ln64)));
            const complex<double> logs6 = 4.0 * (-6.0 * myi * M_PI * (ya2 * (3.0 - 22.0 * ya2 + 15.0 * ya4) + xa2 * (-9.0 + 42.0 * ya2 - 41.0 * ya4 + 12.0 * ya6))
                + ya2 * (9.0 * ya - 159.0 * ya3 - 18.0 * ln2 + 132.0 * ya2 * ln2 - 90.0 * ya4 * ln2 - 8.0 * ya5 * (-14.0 + log(8.0)))
                + xa2 * (-27.0 * ya + 261.0 * ya3 - 288.0 * ya5 + 54.0 * ln2 - 252.0 * ya2 * ln2 + 246.0 * ya4 * ln2 - 72.0 * ya6 * ln2
                    + 4.0 * ya7 * (23.0 + ln64)));
            const complex<double> logs7 = 4.0 * (6.0 * myi * M_PI * (ya2 * (3.0 - 22.0 * ya2 + 15.0 * ya4) + xa2 * (-9.0 + 42.0 * ya2 - 41.0 * ya4 + 12.0 * ya6))
                + ya2 * (9.0 * ya - 159.0 * ya3 + 18.0 * ln2 - 132.0 * ya2 * ln2 + 90.0 * ya4 * ln2 - 8.0 * ya5 * (-14.0 + log(8.0)))
                + xa2 * (-27.0 * ya + 261.0 * ya3 - 288.0 * ya5 - 54.0 * ln2 + 252.0 * ya2 * ln2 - 246.0 * ya4 * ln2 + 72.0 * ya6 * ln2
                    + 4.0 * ya7 * (23.0 + ln64)));
            const complex<double> logs8 = 4.0 * (-3.0 * myi * M_PI * power_of<2>(-1.0 + ya2) * (ya2 + 5.0 * ya4 + xa2 * (-3.0 - 7.0 * ya2 + 4.0 * ya4))
                - ya2 * (3.0 * ya - 22.0 * ya3 + 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (-4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (9.0 * ya - 42.0 * ya3 + 41.0 * ya5 - 12.0 * ya7 - 45.0 * ya4 * ln2 + 45.0 * ya6 * ln2 + ya2 * log(8.0) - 4.0 * ya8 * (1.0 + log(8.0))
                    + log(512.0)));
            const complex<double> logs9 = 4.0 * (-3.0 * myi * M_PI * power_of<2>(-1.0 + ya2) * (ya2 + 5.0 * ya4 + xa2 * (-3.0 - 7.0 * ya2 + 4.0 * ya4))
                - ya2 * (-3.0 * ya + 22.0 * ya3 - 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (-4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (-9.0 * ya + 42.0 * ya3 - 41.0 * ya5 + 12.0 * ya7 - 45.0 * ya4 * ln2 + 45.0 * ya6 * ln2 + ya2 * log(8.0) - 4.0 * ya8 * (1.0 + log(8.0))
                    + log(512.0)));
            const complex<double> logs10 = 4.0 * (3.0 * myi * M_PI * power_of<2>(-1.0 + ya2) * (ya2 + 5.0 * ya4 + xa2 * (-3.0 - 7.0 * ya2 + 4.0 * ya4))
                + ya2 * (-3.0 * ya + 22.0 * ya3 - 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (9.0 * ya - 42.0 * ya3 + 41.0 * ya5 - 12.0 * ya7 - 9.0 * ln2 + 45.0 * ya4 * ln2 - 45.0 * ya6 * ln2 + 4.0 * ya8 * (-1.0 + log(8.0))
                    - ya2 * log(8.0)));

            const complex<double> logsp1 = 4.0 * (ya2 * (-3.0 * ya + 22.0 * ya3 - 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (9.0 * ya - 42.0 * ya3 + 41.0 * ya5 - 12.0 * ya7 - 9.0 * ln2 + 45.0 * ya4 * ln2 - 45.0 * ya6 * ln2 + 4.0 * ya8 * (-1.0 + log(8.0))
                    - ya2 * log(8.0)));
            const complex<double> logsp2 = 4.0 * (ya2 * (3.0 * ya - 22.0 * ya3 + 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (-9.0 * ya + 42.0 * ya3 - 41.0 * ya5 + 12.0 * ya7 - 9.0 * ln2 + 45.0 * ya4 * ln2 - 45.0 * ya6 * ln2 + 4.0 * ya8 * (-1.0 + log(8.0))
                    - ya2 * log(8.0)));
            const complex<double> logsp3 = 4.0 * (ya2 * (-3.0 * ya + 22.0 * ya3 - 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (-4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (9.0 * ya - 42.0 * ya3 + 41.0 * ya5 - 12.0 * ya7 - 9.0 * ln2 + 45.0 * ya4 * ln2 - 45.0 * ya6 * ln2 - ya2 * log(8.0)
                    + 4.0 * ya8 * (1.0 + log(8.0))));
            const complex<double> logsp4 = 4.0 * (ya2 * (3.0 * ya - 22.0 * ya3 + 15.0 * ya5 + 9.0 * ya2 * ln2 - 27.0 * ya4 * ln2 + ya6 * (-4.0 + 15.0 * ln2) + log(8.0))
                + xa2 * (-9.0 * ya + 42.0 * ya3 - 41.0 * ya5 + 12.0 * ya7 - 9.0 * ln2 + 45.0 * ya4 * ln2 - 45.0 * ya6 * ln2 - ya2 * log(8.0)
                  + 4.0 * ya8 * (1.0 + log(8.0))));
            const complex<double> logsp5 = 4.0 * (xa2 * (27.0 * ya - 261.0 * ya3 + 288.0 * ya5 + ya7 * (-92.0 - 24.0 * myi * M_PI - 24.0 * ln2) + 54.0 * ln2 - 252.0 * ya2 * ln2
                + 246.0 * ya4 * ln2 - 72.0 * ya6 * ln2) + ya2 * (-9.0 * ya + 159.0 * ya3 - 18.0 * ln2 + 132.0 * ya2 * ln2 - 90.0 * ya4 * ln2
                + 8.0 * ya5 * (-14.0 + 3.0 * myi * M_PI + log(8.0))));
            const complex<double> logsp6 = 4.0 * (xa2 * (27.0 * ya - 261.0 * ya3 + 288.0 * ya5 + ya7 * (-92.0 - 24.0 * myi * M_PI - 24.0 * ln2) - 54.0 * ln2 + 252.0 * ya2 * ln2
                - 246.0 * ya4 * ln2 + 72.0 * ya6 * ln2) + ya2 * (-9.0 * ya + 159.0 * ya3 + 18.0 * ln2 - 132.0 * ya2 * ln2 + 90.0 * ya4 * ln2
                + 8.0 * ya5 * (-14.0 + 3.0 * myi * M_PI + log(8.0))));
            const complex<double> logsp7 = 8.0 * (3.0 * ya2 - 53.0 * ya4 + ya6 * (50.0 - 8.0 * ln2) + xa2 * (-9.0 + 87.0 * ya2 - 96.0 * ya4 + 2.0 * ya6 * (9.0 + log(16.0))));
            const complex<double> logsp8 = 2.0 * (3.0 * ya4 * (-1.0 + ya2) - 3.0 * xa * ya4 * (-1.0 + ya2)
                + xa2 * ya2 * (-3.0 - 53.0 * ya2 + 56.0 * ya4) + xa3 * (9.0 * ya2 - 53.0 * ya4 + ya6 * (44.0 - 16.0 * ln2))
                + 2.0 * xa4 * (-9.0 + 87.0 * ya2 - 96.0 * ya4 + 2.0 * ya6 * (9.0 + log(16.0))));
            const complex<double> logsp9 = 2.0 * (3.0 * ya4 * (-1.0 + ya2) + 3.0 * xa * ya4 * (-1.0 + ya2) + xa2 * ya2 * (-3.0 - 53.0 * ya2 + 56.0 * ya4)
                + xa3 * ya2 * (-9.0 + 53.0 * ya2 + 4.0 * ya4 * (-11.0 + log(16.0))) + 2.0 * xa4 * (-9.0 + 87.0 * ya2 - 96.0 * ya4 + 2.0 * ya6 * (9.0 + log(16.0))));
            const complex<double> logsp10 = 4.0 * (ya2 * (9.0 - 159.0 * ya2 + 8.0 * ya4 * (14.0 - 3.0 * myi * M_PI - log(8.0)))
                + xa2 * (-27.0 + 261.0 * ya2 - 288.0 * ya4 + 4.0 * ya6 * (23.0 + 6.0 * myi * M_PI + ln64)));

            const complex<double> termp1 = (1.0 / (729.0 * xa2 * (-1.0 + xa2) * ya6)) * 2.0 * (27.0 * ya4 * (-1.0 + ya2) + xa4 * (-324.0 * ln2 + 27.0 * ya2 * (3.0 + 116.0 * ln2)
            	- 9.0 * ya4 * (115.0 + 384.0 * ln2) + ya6 * (491.0 - 228.0 * myi * M_PI + 78.0 * pisqu + 648.0 * ln2 + 144.0 * ln2squ))
                + xa2 * ya2 * (-18.0 * ya2 * (-59.0 + 106.0 * ln2) - 2.0 * ya4 * (259.0 - 114.0 * myi * M_PI + 39.0 * pisqu - 900.0 * ln2 + 72.0 * ln2squ)
                    + 27.0 * (-3.0 + log(16.0))));

            const complex<double> term1 = 2.0 * ((66.0 * pisqu * xa2 * (-1.0 + xa2) * ya6 - 27.0 * ya4 * (-1.0 + ya2)
                + xa2 * ya2 * (81.0 - 108.0 * ln2 + 18.0 * ya2 * (-59.0 + 106.0 * ln2) + 2.0 * ya4 * (259.0 - 900.0 * ln2 + 72.0 * ln2squ))
                - xa4 * (-324.0 * ln2 + 27.0 * ya2 * (3.0 + 116.0 * ln2) - 9.0 * ya4 * (115.0 + 384.0 * ln2)
                    + ya6 * (491.0 + 648.0 * ln2 + 144.0 * ln2squ)) - 12.0 * myi * M_PI * xa2 * (9.0 * ya2 - 159.0 * ya4 + ya6 * (131.0 - 24.0 * ln2)
                    + xa2 * (-27.0 + 261.0 * ya2 - 288.0 * ya4 + ya6 * (73.0 + 24.0 * ln2)))) / (729.0 * xa2 * (-1.0 + xa2) * ya6));

            const double factor1 = 16.0 / 81;
            const double factor2 = 16.0 / 243;

            // Heaviside theta related functions
            const double t11mya1mxa = T(1.0, 1.0 - ya, 1.0 - xa); // MyT[1, 1 - ya, 1 - xa]
            const double t11pya1mxa = T(1.0, 1.0 + ya, 1.0 - xa); // MyT[1, 1 + ya, 1 - xa]
            const double t11mya1pxa = T(1.0, 1.0 - ya, 1.0 + xa); // MyT[1, 1 - ya, 1 + xa]
            const double t11pya1pxa = T(1.0, 1.0 + ya, 1.0 + xa); // MyT[1, 1 + ya, 1 + xa]

            complex<double> result;

            if (imag(clp.s_eps) > 0)
            {
                // F29aupper
                result = termp1 - (64.0 * power_of<2>(lnmuhat)) / 81.0 - (logsp9 * ln1mxa) / denom5 + (logsp7 * log(xa)) / denom8 - (logsp8 * ln1pxa) / denom7
                    + (-2.0 * num2 * li2half + num2 * dilog((1.0 - xa) / 2.0) + num2 * dilog((1.0 + xa) / 2.0) - num2 * ln2 * ln1mxa - num2 * ln2 * ln1pxa) / denom2 + ((num3 * power_of<2>(ln1mxa)) / 2.0 + (num3 * power_of<2>(ln1pxa)) / 2.0) / denom3
                    + (logsp6 * ln1mya + logsp5 * ln1pya) / denom10 + ((-logsp3 - logsp4) * li2half + logsp4 * dilog((1.0 - ya) / 2.0) + logsp3 * dilog((1.0 + ya) / 2.0) - logsp4 * ln2 * ln1mya + (logsp1 * power_of<2>(ln1mya)) / 2.0
                        - logsp3 * ln2 * ln1pya + (logsp2 * power_of<2>(ln1pya)) / 2.0) / denom6 + (logsp10 * log((xa + ya) * xainv) + logsp10 * log(1.0 - ya * xainv)) / denom9
                    + factor2 * (-19.0 * lnmuhat - (12.0 * myi) * M_PI * lnmuhat - 12.0 * lnmuhat * ln1mya - 12.0 * lnmuhat * ln1pya + 12.0 * lnmuhat * log((xa + ya) * xainv) + 12.0 * lnmuhat * log(1.0 - ya * xainv))
                    + factor1 * (2.0 * li2half - 2.0 * dilog(1.0 / (1.0 - xa)) - 2.0 * dilog(1.0 / (1.0 + xa)) + dilog((1.0 - ya) / (1.0 + xa)) - dilog((xa - ya) / (2.0 * xa)) + dilog((-1.0 + ya) / (-1.0 + xa)) + dilog((1.0 + ya) / (1.0 - xa))
                        + dilog((1.0 + ya) / (1.0 + xa)) - dilog((xa + ya) / (2.0 * xa)) + 2.0 * power_of<2>(log(xa)) - 2.0 * log(xa) * ln1pxa + log((xa - ya) / (1.0 + xa)) * ln1pya + ln1pya * log((xa + ya) / (-1.0 + xa))
                        + (2.0 * log(xa) - log((xa - ya) / (2.0 * xa))) * log((xa + ya) * xainv) - power_of<2>(log((xa + ya) * xainv)) / 2.0 + ln1mya * (log((xa - ya) / (-1.0 + xa)) + log((xa + ya) / (1.0 + xa)))
                        + (2.0 * log(xa) - log((xa + ya) / (2.0 * xa))) * log(1.0 - ya * xainv) - power_of<2>(log(1.0 - ya * xainv)) / 2.0 + ln1mxa * (-2.0 * log(xa) + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * t11mya1mxa
                        + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * t11pya1mxa) + ln1pxa * ((2.0 * myi) * M_PI * my_sign(-imag(xainv)) * t11mya1pxa + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * t11pya1pxa))
                    + ((-num1 - num4) * dilog(xa / (-1.0 + xa)) + (-num1 - num4) * dilog(xa / (1.0 + xa)) + num4 * dilog((xa - ya) / (-1.0 + xa)) + num1 * dilog((xa - ya) / (1.0 + xa)) + num1 * dilog((xa + ya) / (-1.0 + xa))
                        + num4 * dilog((xa + ya) / (1.0 + xa)) + (num1 * ln1mxa - 2.0 * num1 * log(xa) + num1 * ln1pxa) * ln1mya + (num4 * ln1mxa - 2.0 * num4 * log(xa) + num4 * ln1pxa) * ln1pya
                        + (-(num4 * ln1mxa) - num1 * ln1pxa + num4 * log((1.0 - ya) / (1.0 + xa)) + num1 * log((1.0 + ya) / (1.0 - xa))) * log((xa + ya) * xainv)
                        + (-(num1 * ln1mxa) - num4 * ln1pxa + num4 * log((-1.0 + ya) / (-1.0 + xa)) + num1 * log((1.0 + ya) / (1.0 + xa))) * log(1.0 - ya * xainv)
                        + log(1.0 + xainv) * ((2.0 * myi) * num4 * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) + (2.0 * myi) * num1 * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + log((-1.0 + xa) * xainv) * ((2.0 * myi) * num1 * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * num4 * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))) / denom1
                    + num5 * ((pisqu * ln4) / 12.0 - 4.0 * trilog(-1.0) - 2.0 * li3half + 2.0 * trilog(1.0 / (1.0 - xa)) - 2.0 * trilog(1.0 - xa) + 2.0 * trilog((-1.0 + xa) / (2.0 * xa)) + 2.0 * trilog(1.0 / (1.0 + xa)) + 2.0 * trilog((1.0 - xa) / (1.0 + xa))
                        - 2.0 * trilog(1.0 + xa) + 2.0 * trilog((1.0 + xa) / (1.0 - xa)) + 2.0 * trilog((1.0 + xa) / (2.0 * xa)) + trilog((1.0 + xa) / (1.0 - ya)) + 4.0 * trilog((1.0 - ya) / 2.0) - trilog((1.0 - ya) / (1.0 + xa)) + trilog((-1.0 + xa) / (-1.0 + ya))
                        - trilog((-1.0 + ya) / (-1.0 + xa)) - trilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) + trilog((1.0 - xa) / (1.0 + ya)) + trilog((1.0 + xa) / (1.0 + ya)) + 2.0 * trilog((-1.0 + ya) / (1.0 + ya))
                        - trilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) - trilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) + 4.0 * trilog((1.0 + ya) / 2.0) - trilog((1.0 + ya) / (1.0 - xa)) - trilog((1.0 + ya) / (1.0 + xa))
                        - trilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) + 2.0 * trilog((1.0 + ya) / (-1.0 + ya)) - trilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya)))
                        - trilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) + (pisqu * ln2) / 3.0 - power_of<3>(ln2) - 2.0 * dilog((1.0 + xa) / (1.0 - xa)) * log(1.0 / (1.0 - xa))
                        - 2.0 * dilog((1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 - xa)) - power_of<3>(ln1mxa) / 3.0 - 2.0 * dilog((-1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 + xa)) - 2.0 * dilog((1.0 - xa) / (1.0 + xa)) * log(1.0 / (1.0 + xa))
                        + dilog(-1.0) * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * log(1.0 / (1.0 + xa))) + dilog((xa - ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa) + dilog((xa + ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa)
                        - power_of<3>(ln1pxa) / 3.0 + dilog((xa - ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + dilog((xa + ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + (pisqu * log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0
                        + power_of<3>(log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0 + (pisqu * log((-1.0 + xa2) / (2.0 * xa))) / 3.0 + power_of<3>(log((-1.0 + xa2) / (2.0 * xa))) / 3.0 - (pisqu * log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0 - power_of<3>(log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 - ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 - ya))) / 6.0 - power_of<3>(ln1mya) / 6.0 + dilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) * log((1.0 - ya) / (1.0 + xa))
                        + dilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) * log((1.0 - ya) / (1.0 + xa)) - (pisqu * log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 + (pisqu * log((-1.0 + xa) / (-1.0 + ya))) / 6.0
                        + power_of<3>(log((-1.0 + xa) / (-1.0 + ya))) / 6.0 + dilog((-1.0 + ya) / (1.0 + ya)) * (-log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa))) + dilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) * log((-1.0 + ya) / (-1.0 + xa))
                        + dilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) * log((-1.0 + ya) / (-1.0 + xa)) - (power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * log(2.0 / (1.0 + ya))) / 2.0 + (pisqu * log((1.0 - xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 - xa) / (1.0 + ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 + ya))) / 6.0 - power_of<3>(ln1pya) / 6.0 + dilog(1.0 / (1.0 - xa)) * (ln1mya + ln1pya) + dilog(1.0 / (1.0 + xa)) * (ln1mya + ln1pya)
                        + dilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 - xa)) + dilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) * log((1.0 + ya) / (1.0 - xa))
                        + dilog((1.0 + ya) / (-1.0 + ya)) * (-log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa))) + dilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) * log((1.0 + ya) / (1.0 + xa))
                        + dilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 + xa)) - (log(-2.0 / (-1.0 + ya)) * power_of<2>(log((1.0 + ya) / (1.0 + xa)))) / 2.0 - (pisqu * log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0
                        - power_of<3>(log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0 - (pisqu * log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0
                        + li2half * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 4.0 * log(xa) + 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + 2.0 * ln1mya + 2.0 * ln1pya - 2.0 * log((xa + ya) * xainv) - 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 - ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa)) - 2.0 * ln1pya - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + dilog((1.0 + ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - 2.0 * ln1pya - log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa)) - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + power_of<2>(ln1pya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((1.0 - ya) / 2.0) / 2.0 - log((xa - ya) / (1.0 + xa)) / 2.0 - log((xa + ya) / (-1.0 + xa)) / 2.0 + log((xa + ya) * xainv) / 2.0
                            + log(1.0 - ya * xainv) / 2.0) + power_of<2>(ln1mya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((xa - ya) / (-1.0 + xa)) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log((xa + ya) * xainv) / 2.0
                            - log((xa + ya) / (1.0 + xa)) / 2.0 + log(1.0 - ya * xainv) / 2.0) + dilog((1.0 - xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 + xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv)) + log((1.0 - ya) / 2.0) * ((-0.5) * power_of<2>(log((1.0 + ya) / (1.0 - xa))) - power_of<2>(log((1.0 + ya) / (1.0 + xa))) / 2.0
                            - log((1.0 + ya) / (1.0 - xa)) * log((xa + ya) * xainv) - log((1.0 + ya) / (1.0 + xa)) * log(1.0 - ya * xainv)) - (2.0 * myi) * M_PI * H1((1.0 + xa) / (-1.0 + xa), 1.0 + xainv) * power_of<2>(log(-1.0 / (1.0 + xa))) * my_sign(-imag(xainv))
                        + (2.0 * myi) * M_PI * H1((-1.0 + xa) * xainv, 1.0 + xainv) * power_of<2>(log((2.0 * xa) / (-1.0 + xa2))) * my_sign(-imag(xainv)) - (2.0 * myi) * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) * xainv) * power_of<2>(log(1.0 / (-1.0 + xa))) * my_sign(imag(xainv))
                        + (2.0 * myi) * M_PI * H1(1.0 + xainv, (-1.0 + xa) * xainv) * power_of<2>(log((-2.0 * xa) / (-1.0 + xa2))) * my_sign(imag(xainv)) + myi * M_PI * H1((1.0 + xa) / (xa - ya), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((-2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((1.0 + ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa - ya))) + myi * M_PI * H1((-1.0 + xa) / (xa - ya), (1.0 + xa) / (xa - ya)) * power_of<2>(log((2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa - ya)) * power_of<2>(log((-1.0 + ya) / (1.0 + xa))) * my_sign(imag((1.0 + xa) / (xa - ya))) - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((1.0 - ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa + ya)))
                        + myi * M_PI * H1((1.0 + xa) / (xa + ya), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((-2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa + ya)))
                        - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa + ya)) * power_of<2>(log(-((1.0 + ya) / (1.0 + xa)))) * my_sign(imag((1.0 + xa) / (xa + ya))) + myi * M_PI * H1((-1.0 + xa) / (xa + ya), (1.0 + xa) / (xa + ya)) * power_of<2>(log((2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa + ya)))
                        + power_of<2>(log(1.0 / (1.0 + xa))) * (lnhalf + ln2 - log((2.0 * xa) / (1.0 + xa)) - log((1.0 + xa) / (2.0 * xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xa / (1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), 1.0 / (1.0 + xa)))
                        + power_of<2>(log(1.0 / (1.0 - xa))) * (lnhalf + ln2 - log((-1.0 + xa) / (2.0 * xa)) - log((2.0 * xa) / (-1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(imag(xa / (1.0 - xa))) * T(1.0, 1.0 / (1.0 + xa), 1.0 / (1.0 - xa)))
                        + ln1mya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0 + (2.0 * ln2 - log((1.0 - ya) / 2.0)) * ln1pya - log((1.0 + ya) / 2.0) * ln1pya
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1pxa))
                        + power_of<2>(log((1.0 + ya) / (1.0 - xa))) * ((-0.5) * log(-2.0 / (-1.0 + ya)) + log((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) / 2.0 + log((-2.0 * (xa + ya)) / ((-1.0 + xa) * (-1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (-1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), (1.0 + ya) / (1.0 - xa))) + power_of<2>(log((1.0 + ya) / (1.0 + xa))) * (log((-2.0 * (xa - ya)) / ((1.0 + xa) * (-1.0 + ya))) / 2.0
                            + log((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) / 2.0 - myi * M_PI * my_sign(imag((xa - ya) / (1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), (1.0 + ya) / (1.0 + xa)))
                        + power_of<2>(ln1mxa) * ((-myi) * M_PI * my_sign(imxa) * t11mya1mxa - myi * M_PI * my_sign(imxa) * t11pya1mxa) + power_of<2>(ln1pxa) * ((-myi) * M_PI * my_sign(-imxa) * t11mya1pxa
                            - myi * M_PI * my_sign(-imxa) * t11pya1pxa) + ln1pya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1pxa))
                        + power_of<2>(log(-2.0 / (-1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), -2.0 / (-1.0 + xa)) + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                            + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa))) + log((xa + ya) * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0
                            - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa + ya))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa + ya))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa)))
                        + power_of<2>(log((1.0 - ya) / (1.0 + xa))) * ((-0.5) * log(2.0 / (1.0 + ya)) - log((1.0 + ya) / 2.0) / 2.0 + log(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) / 2.0 + log((2.0 * (xa + ya)) / ((1.0 + xa) * (1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), (1.0 - ya) / (1.0 + xa))) + power_of<2>(log(2.0 / (1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, 1.0 / (1.0 + xa), 2.0 / (1.0 + xa))
                            + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + log(1.0 - ya * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0 - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa - ya))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                        - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa - ya))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * (log((2.0 * (xa - ya)) / ((-1.0 + xa) * (1.0 + ya))) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa - ya) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), (-1.0 + ya) / (-1.0 + xa))) + log((1.0 + ya) / (1.0 - xa)) * ((ln1mxa - ln1pxa) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)) + log((1.0 - ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log((xa + ya) * xainv) - log((1.0 + ya) / 2.0) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)) + dilog(xa / (-1.0 + xa)) * (-2.0 * ln1mxa - 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + log((1.0 - ya) / (1.0 + xa))
                            + log((1.0 + ya) / (1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + dilog((1.0 + xa) / (-1.0 + xa)) * (2.0 * log(1.0 / (1.0 + xa)) - log((1.0 - ya) / (1.0 + xa)) - log((1.0 + ya) / (1.0 + xa)) + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)
                            + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + log((-1.0 + ya) / (-1.0 + xa)) * ((ln1mxa - ln1pxa) * log(1.0 - ya * xainv) - log((1.0 + ya) / 2.0) * log(1.0 - ya * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + dilog(xa / (1.0 + xa)) * (-2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 2.0 * ln1pxa + log((-1.0 + ya) / (-1.0 + xa))
                            + log((1.0 + ya) / (1.0 - xa)) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + dilog((-1.0 + xa) / (1.0 + xa)) * (2.0 * log(1.0 / (1.0 - xa)) - log((-1.0 + ya) / (-1.0 + xa)) - log((1.0 + ya) / (1.0 - xa)) + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)
                            + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)) + log((1.0 + ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log(1.0 - ya * xainv) + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + ln1pxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) + (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((-2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + ln1mxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((-2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + log(1.0 + xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, 1.0 + xainv) * T(p(-xainv, (xa + ya) * xainv), (xa + ya) * xainv, (-1.0 + xa) * xainv) + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, 1.0 + xainv) * T(p(-xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + log((-1.0 + xa) * xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) * T(p(xainv, (xa + ya) * xainv), (xa + ya) * xainv, 1.0 + xainv)
                            + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv) * T(p(xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, 1.0 + xainv)) - (21.0 * zeta3) / 4.0) / denom4;

                return result;
            }
            else
            {
                // F29alower
                result = -term1 - (64.0 * power_of<2>(lnmuhat)) / 81.0 + (logs1 * ln1mxa) / denom5 + (logs4 * log(xa)) / denom8 + (logs3 * ln1pxa) / denom7
                    + (-2.0 * num2 * li2half + num2 * dilog((1.0 - xa) / 2.0) + num2 * dilog((1.0 + xa) / 2.0) - num2 * ln2 * ln1mxa - num2 * ln2 * ln1pxa) / denom2 + ((num3 * power_of<2>(ln1mxa)) / 2.0 + (num3 * power_of<2>(ln1pxa)) / 2.0) / denom3
                    + (-(logs6 * ln1mya) - logs7 * ln1pya) / denom10 + ((logs8 + logs9) * li2half - logs8 * dilog((1.0 - ya) / 2.0) - logs9 * dilog((1.0 + ya) / 2.0) + logs8 * ln2 * ln1mya + (logs10 * power_of<2>(ln1mya)) / 2.0
                        + logs9 * ln2 * ln1pya + (logs2 * power_of<2>(ln1pya)) / 2.0) / denom6 + (logs5 * log((xa + ya) * xainv) + logs5 * log(1.0 - ya * xainv)) / denom9
                    + factor2 * (-19.0 * lnmuhat + (12.0 * myi) * M_PI * lnmuhat - 12.0 * lnmuhat * ln1mya - 12.0 * lnmuhat * ln1pya + 12.0 * lnmuhat * log((xa + ya) * xainv) + 12.0 * lnmuhat * log(1.0 - ya * xainv))
                    + factor1 * (2.0 * li2half - 2.0 * dilog(1.0 / (1.0 - xa)) - 2.0 * dilog(1.0 / (1.0 + xa)) + dilog((1.0 - ya) / (1.0 + xa)) - dilog((xa - ya) / (2.0 * xa)) + dilog((-1.0 + ya) / (-1.0 + xa)) + dilog((1.0 + ya) / (1.0 - xa))
                        + dilog((1.0 + ya) / (1.0 + xa)) - dilog((xa + ya) / (2.0 * xa)) + 2.0 * power_of<2>(log(xa)) - 2.0 * log(xa) * ln1pxa + log((xa - ya) / (1.0 + xa)) * ln1pya + ln1pya * log((xa + ya) / (-1.0 + xa))
                        + (2.0 * log(xa) - log((xa - ya) / (2.0 * xa))) * log((xa + ya) * xainv) - power_of<2>(log((xa + ya) * xainv)) / 2.0 + ln1mya * (log((xa - ya) / (-1.0 + xa)) + log((xa + ya) / (1.0 + xa)))
                        + (2.0 * log(xa) - log((xa + ya) / (2.0 * xa))) * log(1.0 - ya * xainv) - power_of<2>(log(1.0 - ya * xainv)) / 2.0 + ln1mxa * (-2.0 * log(xa) + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * t11mya1mxa
                            + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * t11pya1mxa) + ln1pxa * ((2.0 * myi) * M_PI * my_sign(-imag(xainv)) * t11mya1pxa + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * t11pya1pxa))
                    + ((-num1 - num4) * dilog(xa / (-1.0 + xa)) + (-num1 - num4) * dilog(xa / (1.0 + xa)) + num4 * dilog((xa - ya) / (-1.0 + xa)) + num1 * dilog((xa - ya) / (1.0 + xa)) + num1 * dilog((xa + ya) / (-1.0 + xa))
                        + num4 * dilog((xa + ya) / (1.0 + xa)) + (num1 * ln1mxa - 2.0 * num1 * log(xa) + num1 * ln1pxa) * ln1mya + (num4 * ln1mxa - 2.0 * num4 * log(xa) + num4 * ln1pxa) * ln1pya
                        + (-(num4 * ln1mxa) - num1 * ln1pxa + num4 * log((1.0 - ya) / (1.0 + xa)) + num1 * log((1.0 + ya) / (1.0 - xa))) * log((xa + ya) * xainv)
                        + (-(num1 * ln1mxa) - num4 * ln1pxa + num4 * log((-1.0 + ya) / (-1.0 + xa)) + num1 * log((1.0 + ya) / (1.0 + xa))) * log(1.0 - ya * xainv)
                        + log(1.0 + xainv) * ((2.0 * myi) * num4 * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) + (2.0 * myi) * num1 * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + log((-1.0 + xa) * xainv) * ((2.0 * myi) * num1 * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * num4 * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))) / denom1
                    + (num5 * ((pisqu * ln4) / 12.0 - 4.0 * trilog(-1.0) - 2.0 * li3half + 2.0 * trilog(1.0 / (1.0 - xa)) - 2.0 * trilog(1.0 - xa) + 2.0 * trilog((-1.0 + xa) / (2.0 * xa)) + 2.0 * trilog(1.0 / (1.0 + xa)) + 2.0 * trilog((1.0 - xa) / (1.0 + xa))
                        - 2.0 * trilog(1.0 + xa) + 2.0 * trilog((1.0 + xa) / (1.0 - xa)) + 2.0 * trilog((1.0 + xa) / (2.0 * xa)) + trilog((1.0 + xa) / (1.0 - ya)) + 4.0 * trilog((1.0 - ya) / 2.0) - trilog((1.0 - ya) / (1.0 + xa)) + trilog((-1.0 + xa) / (-1.0 + ya))
                        - trilog((-1.0 + ya) / (-1.0 + xa)) - trilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) + trilog((1.0 - xa) / (1.0 + ya)) + trilog((1.0 + xa) / (1.0 + ya)) + 2.0 * trilog((-1.0 + ya) / (1.0 + ya))
                        - trilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) - trilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) + 4.0 * trilog((1.0 + ya) / 2.0) - trilog((1.0 + ya) / (1.0 - xa)) - trilog((1.0 + ya) / (1.0 + xa))
                        - trilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) + 2.0 * trilog((1.0 + ya) / (-1.0 + ya)) - trilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya)))
                        - trilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) - trilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) + (pisqu * ln2) / 3.0 - power_of<3>(ln2) - 2.0 * dilog((1.0 + xa) / (1.0 - xa)) * log(1.0 / (1.0 - xa))
                        - 2.0 * dilog((1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 - xa)) - power_of<3>(ln1mxa) / 3.0 - 2.0 * dilog((-1.0 + xa) / (2.0 * xa)) * log(1.0 / (1.0 + xa)) - 2.0 * dilog((1.0 - xa) / (1.0 + xa)) * log(1.0 / (1.0 + xa))
                        + dilog(-1.0) * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * log(1.0 / (1.0 + xa))) + dilog((xa - ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa) + dilog((xa + ya) / (-1.0 + xa)) * (ln1mxa - ln1pxa)
                        - power_of<3>(ln1pxa) / 3.0 + dilog((xa - ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + dilog((xa + ya) / (1.0 + xa)) * (-ln1mxa + ln1pxa) + (pisqu * log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0
                        + power_of<3>(log((-0.5) * ((-1.0 + xa2) * xainv))) / 3.0 + (pisqu * log((-1.0 + xa2) / (2.0 * xa))) / 3.0 + power_of<3>(log((-1.0 + xa2) / (2.0 * xa))) / 3.0 - (pisqu * log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0 - power_of<3>(log((1.0 - xa2) / (2.0 * xa - 2.0 * ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 - ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 - ya))) / 6.0 - power_of<3>(ln1mya) / 6.0 + dilog(((-1.0 + xa) * (-1.0 + ya)) / ((1.0 + xa) * (1.0 + ya))) * log((1.0 - ya) / (1.0 + xa))
                        + dilog((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) * log((1.0 - ya) / (1.0 + xa)) - (pisqu * log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa - ya)))) / 6.0 + (pisqu * log((-1.0 + xa) / (-1.0 + ya))) / 6.0
                        + power_of<3>(log((-1.0 + xa) / (-1.0 + ya))) / 6.0 + dilog((-1.0 + ya) / (1.0 + ya)) * (-log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa))) + dilog((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) * log((-1.0 + ya) / (-1.0 + xa))
                        + dilog(((1.0 + xa) * (-1.0 + ya)) / ((-1.0 + xa) * (1.0 + ya))) * log((-1.0 + ya) / (-1.0 + xa)) - (power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * log(2.0 / (1.0 + ya))) / 2.0 + (pisqu * log((1.0 - xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 - xa) / (1.0 + ya))) / 6.0
                        + (pisqu * log((1.0 + xa) / (1.0 + ya))) / 6.0 + power_of<3>(log((1.0 + xa) / (1.0 + ya))) / 6.0 - power_of<3>(ln1pya) / 6.0 + dilog(1.0 / (1.0 - xa)) * (ln1mya + ln1pya) + dilog(1.0 / (1.0 + xa)) * (ln1mya + ln1pya)
                        + dilog(((1.0 + xa) * (1.0 + ya)) / ((-1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 - xa)) + dilog(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) * log((1.0 + ya) / (1.0 - xa))
                        + dilog((1.0 + ya) / (-1.0 + ya)) * (-log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa))) + dilog(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) * log((1.0 + ya) / (1.0 + xa))
                        + dilog(((-1.0 + xa) * (1.0 + ya)) / ((1.0 + xa) * (-1.0 + ya))) * log((1.0 + ya) / (1.0 + xa)) - (log(-2.0 / (-1.0 + ya)) * power_of<2>(log((1.0 + ya) / (1.0 + xa)))) / 2.0 - (pisqu * log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0
                        - power_of<3>(log((-0.5) * (((-1.0 + xa) * (1.0 + xa)) / (xa + ya)))) / 6.0 - (pisqu * log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0 - power_of<3>(log((-1.0 + xa2) / (2.0 * (xa + ya)))) / 6.0
                        + li2half * (2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 4.0 * log(xa) + 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + 2.0 * ln1mya + 2.0 * ln1pya - 2.0 * log((xa + ya) * xainv) - 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 - ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - log((1.0 - ya) / (1.0 + xa)) - log((-1.0 + ya) / (-1.0 + xa)) - 2.0 * ln1pya - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + dilog((1.0 + ya) / 2.0) * (-ln1mxa + 2.0 * log(xa) - ln1pxa - 2.0 * ln1mya - 2.0 * ln1pya - log((1.0 + ya) / (1.0 - xa)) - log((1.0 + ya) / (1.0 + xa)) - log((xa + ya) * xainv) - log(1.0 - ya * xainv))
                        + power_of<2>(ln1pya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((1.0 - ya) / 2.0) / 2.0 - log((xa - ya) / (1.0 + xa)) / 2.0 - log((xa + ya) / (-1.0 + xa)) / 2.0 + log((xa + ya) * xainv) / 2.0 + log(1.0 - ya * xainv) / 2.0)
                        + power_of<2>(ln1mya) * (ln64 / 12.0 - ln1mxa / 2.0 + log(xa) - ln1pxa / 2.0 - log((xa - ya) / (-1.0 + xa)) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log((xa + ya) * xainv) / 2.0
                            - log((xa + ya) / (1.0 + xa)) / 2.0 + log(1.0 - ya * xainv) / 2.0) + dilog((1.0 - xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv))
                        + dilog((1.0 + xa) / 2.0) * (-ln1mya - ln1pya + 2.0 * log((xa + ya) * xainv) + 2.0 * log(1.0 - ya * xainv)) + log((1.0 - ya) / 2.0) * ((-0.5) * power_of<2>(log((1.0 + ya) / (1.0 - xa))) - power_of<2>(log((1.0 + ya) / (1.0 + xa))) / 2.0
                            - log((1.0 + ya) / (1.0 - xa)) * log((xa + ya) * xainv) - log((1.0 + ya) / (1.0 + xa)) * log(1.0 - ya * xainv)) - (2.0 * myi) * M_PI * H1((1.0 + xa) / (-1.0 + xa), 1.0 + xainv) * power_of<2>(log(-1.0 / (1.0 + xa))) * my_sign(-imag(xainv))
                        + (2.0 * myi) * M_PI * H1((-1.0 + xa) * xainv, 1.0 + xainv) * power_of<2>(log((2.0 * xa) / (-1.0 + xa2))) * my_sign(-imag(xainv)) - (2.0 * myi) * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) * xainv) * power_of<2>(log(1.0 / (-1.0 + xa))) * my_sign(imag(xainv))
                        + (2.0 * myi) * M_PI * H1(1.0 + xainv, (-1.0 + xa) * xainv) * power_of<2>(log((-2.0 * xa) / (-1.0 + xa2))) * my_sign(imag(xainv)) + myi * M_PI * H1((1.0 + xa) / (xa - ya), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((-2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa - ya)) * power_of<2>(log((1.0 + ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa - ya))) + myi * M_PI * H1((-1.0 + xa) / (xa - ya), (1.0 + xa) / (xa - ya)) * power_of<2>(log((2.0 * (xa - ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa - ya)))
                        - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa - ya)) * power_of<2>(log((-1.0 + ya) / (1.0 + xa))) * my_sign(imag((1.0 + xa) / (xa - ya))) - myi * M_PI * H1((-1.0 + xa) / (1.0 + xa), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((1.0 - ya) / (-1.0 + xa))) * my_sign(imag((-1.0 + xa) / (xa + ya)))
                        + myi * M_PI * H1((1.0 + xa) / (xa + ya), (-1.0 + xa) / (xa + ya)) * power_of<2>(log((-2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((-1.0 + xa) / (xa + ya)))
                        - myi * M_PI * H1((1.0 + xa) / (-1.0 + xa), (1.0 + xa) / (xa + ya)) * power_of<2>(log(-((1.0 + ya) / (1.0 + xa)))) * my_sign(imag((1.0 + xa) / (xa + ya))) + myi * M_PI * H1((-1.0 + xa) / (xa + ya), (1.0 + xa) / (xa + ya)) * power_of<2>(log((2.0 * (xa + ya)) / (-1.0 + xa2))) * my_sign(imag((1.0 + xa) / (xa + ya)))
                        + power_of<2>(log(1.0 / (1.0 + xa))) * (lnhalf + ln2 - log((2.0 * xa) / (1.0 + xa)) - log((1.0 + xa) / (2.0 * xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xa / (1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), 1.0 / (1.0 + xa)))
                        + power_of<2>(log(1.0 / (1.0 - xa))) * (lnhalf + ln2 - log((-1.0 + xa) / (2.0 * xa)) - log((2.0 * xa) / (-1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(imag(xa / (1.0 - xa))) * T(1.0, 1.0 / (1.0 + xa), 1.0 / (1.0 - xa)))
                        + ln1mya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0 + (2.0 * ln2 - log((1.0 - ya) / 2.0)) * ln1pya - log((1.0 + ya) / 2.0) * ln1pya
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(imyainv) * t11mya1pxa))
                        + power_of<2>(log((1.0 + ya) / (1.0 - xa))) * ((-0.5) * log(-2.0 / (-1.0 + ya)) + log((-0.5) * (((-1.0 + xa) * (-1.0 + ya)) / (xa + ya))) / 2.0 + log((-2.0 * (xa + ya)) / ((-1.0 + xa) * (-1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (-1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), (1.0 + ya) / (1.0 - xa))) + power_of<2>(log((1.0 + ya) / (1.0 + xa))) * (log((-2.0 * (xa - ya)) / ((1.0 + xa) * (-1.0 + ya))) / 2.0
                            + log((-0.5) * (((1.0 + xa) * (-1.0 + ya)) / (xa - ya))) / 2.0 - myi * M_PI * my_sign(imag((xa - ya) / (1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), (1.0 + ya) / (1.0 + xa)))
                        + power_of<2>(ln1mxa) * ((-myi) * M_PI * my_sign(imxa) * t11mya1mxa - myi * M_PI * my_sign(imxa) * t11pya1mxa) + power_of<2>(ln1pxa) * ((-myi) * M_PI * my_sign(-imxa) * t11mya1pxa
                            - myi * M_PI * my_sign(-imxa) * t11pya1pxa) + ln1pya * (pisqu / 6.0 - ln2squ / 2.0 - ln2squ / 2.0 - power_of<2>(ln1mxa) / 2.0 - 2.0 * ln2 * log(xa) - power_of<2>(ln1pxa) / 2.0
                            + ln1mxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1mxa) + ln1pxa * (2.0 * ln2 - (2.0 * myi) * M_PI * my_sign(-imyainv) * t11pya1pxa))
                        + power_of<2>(log(-2.0 / (-1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, 1.0 / (1.0 - xa), -2.0 / (-1.0 + xa)) + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                            + myi * M_PI * my_sign(imag((1.0 + xa) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa))) + log((xa + ya) * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0
                            - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa + ya))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa + ya))) * T(1.0, (1.0 + ya) / (1.0 - xa), -2.0 / (-1.0 + xa)))
                        + power_of<2>(log((1.0 - ya) / (1.0 + xa))) * ((-0.5) * log(2.0 / (1.0 + ya)) - log((1.0 + ya) / 2.0) / 2.0 + log(((1.0 + xa) * (1.0 + ya)) / (2.0 * (xa + ya))) / 2.0 + log((2.0 * (xa + ya)) / ((1.0 + xa) * (1.0 + ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa + ya) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 - xa), (1.0 - ya) / (1.0 + xa))) + power_of<2>(log(2.0 / (1.0 + xa))) * ((-2.0 * myi) * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, 1.0 / (1.0 + xa), 2.0 / (1.0 + xa))
                            + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 - ya) / (1.0 + xa), 2.0 / (1.0 + xa)) + myi * M_PI * my_sign(imag((-1.0 + xa) / (1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + log(1.0 - ya * xainv) * (-(ln2 * ln1mxa) + power_of<2>(ln1mxa) / 2.0 - ln2 * ln1pxa + power_of<2>(ln1pxa) / 2.0 - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + xa)) * my_sign(imag((-1.0 + xa) / (xa - ya))) * T(1.0, (-1.0 + ya) / (-1.0 + xa), -2.0 / (-1.0 + xa))
                        - (2.0 * myi) * M_PI * log(2.0 / (1.0 + xa)) * my_sign(imag((1.0 + xa) / (xa - ya))) * T(1.0, (1.0 + ya) / (1.0 + xa), 2.0 / (1.0 + xa)))
                        + power_of<2>(log((-1.0 + ya) / (-1.0 + xa))) * (log((2.0 * (xa - ya)) / ((-1.0 + xa) * (1.0 + ya))) / 2.0 - log((1.0 + ya) / 2.0) / 2.0 + log(((-1.0 + xa) * (1.0 + ya)) / (2.0 * (xa - ya))) / 2.0
                            - myi * M_PI * my_sign(imag((xa - ya) / (-1.0 + xa))) * T(1.0, (1.0 + ya) / (1.0 + xa), (-1.0 + ya) / (-1.0 + xa))) + log((1.0 + ya) / (1.0 - xa)) * ((ln1mxa - ln1pxa) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)) + log((1.0 - ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log((xa + ya) * xainv) - log((1.0 + ya) / 2.0) * log((xa + ya) * xainv)
                            + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)) + dilog(xa / (-1.0 + xa)) * (-2.0 * ln1mxa - 2.0 * log(1.0 / (1.0 + xa)) + 2.0 * ln1pxa + log((1.0 - ya) / (1.0 + xa))
                            + log((1.0 + ya) / (1.0 + xa)) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                        + dilog((1.0 + xa) / (-1.0 + xa)) * (2.0 * log(1.0 / (1.0 + xa)) - log((1.0 - ya) / (1.0 + xa)) - log((1.0 + ya) / (1.0 + xa)) + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, (xa + ya) * xainv, 1.0 + xainv)
                            + (2.0 * myi) * M_PI * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + log((-1.0 + ya) / (-1.0 + xa)) * ((ln1mxa - ln1pxa) * log(1.0 - ya * xainv) - log((1.0 + ya) / 2.0) * log(1.0 - ya * xainv)
                            + (2.0 * myi) * M_PI * log(1.0 + xainv) * my_sign(-imag(xainv)) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv)) + dilog(xa / (1.0 + xa)) * (-2.0 * log(1.0 / (1.0 - xa)) + 2.0 * ln1mxa - 2.0 * ln1pxa + log((-1.0 + ya) / (-1.0 + xa))
                            + log((1.0 + ya) / (1.0 - xa)) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + dilog((-1.0 + xa) / (1.0 + xa)) * (2.0 * log(1.0 / (1.0 - xa)) - log((-1.0 + ya) / (-1.0 + xa)) - log((1.0 + ya) / (1.0 - xa)) + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv)
                            + (2.0 * myi) * M_PI * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)) + log((1.0 + ya) / (1.0 + xa)) * ((-ln1mxa + ln1pxa) * log(1.0 - ya * xainv) + (2.0 * myi) * M_PI * log((-1.0 + xa) * xainv) * my_sign(imag(xainv)) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + ln1pxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) + (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((-2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) - (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + ln1mxa * ((-1.0 / 3.0) * pisqu + log(1.0 + xainv) * ((-2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, (xa + ya) * xainv, 1.0 + xainv) - (2.0 * myi) * M_PI * my_sign(-imxa) * T(1.0, 1.0 - ya * xainv, 1.0 + xainv))
                            + log((-1.0 + xa) * xainv) * ((2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) + (2.0 * myi) * M_PI * my_sign(imxa) * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv)))
                        + log(1.0 + xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, 1.0 + xainv) * T(p(-xainv, (xa + ya) * xainv), (xa + ya) * xainv, (-1.0 + xa) * xainv) + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, 1.0 + xainv) * T(p(-xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, (-1.0 + xa) * xainv))
                        + log((-1.0 + xa) * xainv) * (4.0 * pisqu * T(1.0, (xa + ya) * xainv, (-1.0 + xa) * xainv) * T(p(xainv, (xa + ya) * xainv), (xa + ya) * xainv, 1.0 + xainv)
                        + 4.0 * pisqu * T(1.0, 1.0 - ya * xainv, (-1.0 + xa) * xainv) * T(p(xainv, 1.0 - ya * xainv), 1.0 - ya * xainv, 1.0 + xainv)) - (21.0 * zeta3) / 4.0)) / denom4;

                return result;
            }
        }

        complex<double> f17b(const CharmLoopsParameters & clp)
        {
            // f17b = - f27b / (2 * N_c)
            return - f27b(clp) / 6.0;
        }

        complex<double> f19b(const CharmLoopsParameters & clp)
        {
            // f19b = - f29b / (2 * N_c)
            return - f29b(clp) / 6.0;
        }

        complex<double> f27b(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xb = clp.x_b;
            const complex<double> yb = clp.y_b;

            const complex<double> xbinv = 1.0 / xb;

            // Powers of xd and yd

            const complex<double> xb2 = power_of<2>(xb);
            const complex<double> xb3 = power_of<3>(xb);
            const complex<double> xb4 = power_of<4>(xb);
            const complex<double> xb5 = power_of<5>(xb);
            const complex<double> xb6 = power_of<6>(xb);
            const complex<double> xb7 = power_of<7>(xb);
            const complex<double> xb8 = power_of<8>(xb);
            const complex<double> xb9 = power_of<9>(xb);
            const complex<double> xb10 = power_of<10>(xb);
            const complex<double> xb11 = power_of<11>(xb);
            const complex<double> xb12 = power_of<12>(xb);
            const complex<double> xb13 = power_of<13>(xb);
            const complex<double> xb14 = power_of<14>(xb);
            const complex<double> xb16 = power_of<16>(xb);

            const complex<double> yb2 = power_of<2>(yb);
            const complex<double> yb3 = power_of<3>(yb);
            const complex<double> yb4 = power_of<4>(yb);
            const complex<double> yb5 = power_of<5>(yb);
            const complex<double> yb6 = power_of<6>(yb);
            const complex<double> yb7 = power_of<7>(yb);
            const complex<double> yb8 = power_of<8>(yb);

            // weights appearing in the GPLs [AGV:2019A] p. 34

            const double wx3 = 2.0 + sqrt(3);
            const double wx4 = 2.0 - sqrt(3);

            const complex<double> w4 = (2.0 * xb) / power_of<2>(1.0 - xb);
            const complex<double> w5 = (2.0 * xb) / power_of<2>(1.0 + xb);
            const complex<double> w7 = (8.0 * xb2) / (1.0 - 6.0 * xb2 + xb4);

            const double wx3inv = wx4;
            const double wx4inv = wx3;

            const complex<double> w4inv = 1.0 / w4;
            const complex<double> w5inv = 1.0 / w5;
            const complex<double> w7inv = 1.0 / w7;

            const complex<double> tb = (2.0 * (-2.0 * xb2 + 2.0 * xb2 * yb + sqrt(2) * xb2 * (1.0 + yb) * sqrt((2.0 * xb4 - xb2 * yb + 2.0 * xb4 * yb - xb6 * yb + xb2 * yb2 + 4.0 * xb4 * yb2 + xb6 * yb2) / (xb4 * power_of<2>(1.0 + yb))))) / (-1.0 + 6.0 * xb2 - xb4 + yb + 2.0 * xb2 * yb + xb4 * yb);
            const complex<double> vb = (2.0 * (-2.0 * xb2 - 2.0 * xb2 * yb + sqrt(2) * xb2 * (1.0 - yb) * sqrt((2.0 * xb4 + xb2 * yb - 2.0 * xb4 * yb + xb6 * yb + xb2 * yb2 + 4.0 * xb4 * yb2 + xb6 * yb2) / (xb4 * power_of<2>(1.0 - yb))))) / (1.0 - 6.0 * xb2 + xb4 + yb + 2.0 * xb2 * yb + xb4 * yb);

            // Logs of yb

            const complex<double> ln1pyb = log(1.0 + yb);
            const complex<double> ln1myb = log(1.0 - yb);

            // Polynomials in xb and yb

            const complex<double> num1 = power_of<2>(1.0 + xb2) * (-1.0 + yb) * (1.0 + yb) * (-1.0 + 3.0 * yb2 + xb4 * (-1.0 + 3.0 * yb2) + xb2 * (-2.0 + 22.0 * yb2));
            const complex<double> num2 = 9.0 * yb2 * power_of<2>(-1.0 + yb2) + 9.0 * xb8 * yb2 * power_of<2>(-1.0 + yb2) + 48.0 * xb2 * yb2 * (3.0 - 13.0 * yb2 + 10.0 * yb4) + 48.0 * xb6 * yb2 * (3.0 - 13.0 * yb2 + 10.0 * yb4)
                + 2.0 * xb4 * (40.0 + 447.0 * yb2 + 762.0 * yb4 + 1311.0 * yb6);
            const complex<double> num3 = power_of<2>(myi + xb) * (-1.0 + yb) * (1.0 + yb) * (-8.0 * tb * xb2 * (-4.0 * xb2 * (-1.0 - 6.0 * yb - 9.0 * yb2 - 12.0 * yb3 + 45.0 * yb4 + 18.0 * yb5 - 3.0 * yb6
                     + xb10 * (1.0 + 6.0 * yb + 9.0 * yb2 + 12.0 * yb3 - 45.0 * yb4 - 18.0 * yb5 + 3.0 * yb6) + 2.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6)
                     + 2.0 * myi * xb9 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) + xb2 * (45.0 - 18.0 * yb - 219.0 * yb2 + 28.0 * yb3 + 567.0 * yb4 + 246.0 * yb5 + 215.0 * yb6)
                     - xb8 * (45.0 - 18.0 * yb - 219.0 * yb2 + 28.0 * yb3 + 567.0 * yb4 + 246.0 * yb5 + 215.0 * yb6) - 8.0 * myi * xb3 * (13.0 + 6.0 * yb - 31.0 * yb2 - 4.0 * yb3 + 1103.0 * yb4 - 66.0 * yb5 + 291.0 * yb6)
                     - 8.0 * myi * xb7 * (13.0 + 6.0 * yb - 31.0 * yb2 - 4.0 * yb3 + 1103.0 * yb4 - 66.0 * yb5 + 291.0 * yb6) - 4.0 * myi * xb5 * (51.0 + 18.0 * yb + 43.0 * yb2 - 28.0 * yb3 + 2569.0 * yb4 - 246.0 * yb5 + 825.0 * yb6)
                     + 2.0 * xb4 * (23.0 - 6.0 * yb + 279.0 * yb2 + 20.0 * yb3 + 1029.0 * yb4 + 114.0 * yb5 + 1005.0 * yb6) - 2.0 * xb6 * (23.0 - 6.0 * yb + 279.0 * yb2 + 20.0 * yb3 + 1029.0 * yb4 + 114.0 * yb5 + 1005.0 * yb6))
                   - 8.0 * vb * xb2 * (1.0 + 27.0 * yb2 - 57.0 * yb4 - 3.0 * yb6 + xb10 * (-1.0 - 27.0 * yb2 + 57.0 * yb4 + 3.0 * yb6) - 2.0 * myi * xb * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6)
                     - 2.0 * myi * xb9 * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) + 8.0 * myi * xb3 * (7.0 + 5.0 * yb2 + 833.0 * yb4 + 211.0 * yb6) + 8.0 * myi * xb7 * (7.0 + 5.0 * yb2 + 833.0 * yb4 + 211.0 * yb6)
                     + 4.0 * myi * xb5 * (27.0 + 41.0 * yb2 + 1757.0 * yb4 + 383.0 * yb6) - xb2 * (69.0 - 345.0 * yb2 + 1635.0 * yb4 + 529.0 * yb6) + xb8 * (69.0 - 345.0 * yb2 + 1635.0 * yb4 + 529.0 * yb6)
                     - 2.0 * xb4 * (35.0 + 353.0 * yb2 + 1301.0 * yb4 + 1287.0 * yb6) + xb6 * (70.0 + 706.0 * yb2 + 2602.0 * yb4 + 2574.0 * yb6))
                   + power_of<2>(vb) * (-1.0 - 6.0 * yb - 9.0 * yb2 - 12.0 * yb3 + 45.0 * yb4 + 18.0 * yb5 - 3.0 * yb6 + xb14 * (1.0 + 6.0 * yb + 9.0 * yb2 + 12.0 * yb3 - 45.0 * yb4 - 18.0 * yb5 + 3.0 * yb6)
                     + 2.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) + 2.0 * myi * xb13 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6)
                     + xb2 * (47.0 + 42.0 * yb - 345.0 * yb2 + 148.0 * yb3 + 573.0 * yb4 + 66.0 * yb5 + 269.0 * yb6) - xb12 * (47.0 + 42.0 * yb - 345.0 * yb2 + 148.0 * yb3 + 573.0 * yb4 + 66.0 * yb5 + 269.0 * yb6)
                     - 4.0 * myi * xb3 * (25.0 - 18.0 * yb + 49.0 * yb2 - 68.0 * yb3 + 2107.0 * yb4 - 42.0 * yb5 + 603.0 * yb6) - 4.0 * myi * xb11 * (25.0 - 18.0 * yb + 49.0 * yb2 - 68.0 * yb3 + 2107.0 * yb4 - 42.0 * yb5 + 603.0 * yb6)
                     - xb6 * (-99.0 - 114.0 * yb + 709.0 * yb2 + 412.0 * yb3 + 1255.0 * yb4 + 2262.0 * yb5 + 1303.0 * yb6) + xb8 * (-99.0 - 114.0 * yb + 709.0 * yb2 + 412.0 * yb3 + 1255.0 * yb4 + 2262.0 * yb5 + 1303.0 * yb6)
                     + 3.0 * xb4 * (49.0 + 54.0 * yb - 7.0 * yb2 - 84.0 * yb3 + 3171.0 * yb4 - 738.0 * yb5 + 1363.0 * yb6) - 3.0 * xb10 * (49.0 + 54.0 * yb - 7.0 * yb2 - 84.0 * yb3 + 3171.0 * yb4 - 738.0 * yb5 + 1363.0 * yb6)
                     + 8.0 * myi * xb7 * (121.0 + 78.0 * yb + 113.0 * yb2 - 132.0 * yb3 + 3611.0 * yb4 - 1098.0 * yb5 + 2011.0 * yb6) + 2.0 * myi * xb5 * (193.0 + 198.0 * yb - 1447.0 * yb2 - 116.0 * yb3 + 12275.0 * yb4 - 2130.0 * yb5
                       + 3283.0 * yb6) + 2.0 * myi * xb9 * (193.0 + 198.0 * yb - 1447.0 * yb2 - 116.0 * yb3 + 12275.0 * yb4 - 2130.0 * yb5 + 3283.0 * yb6)))
                 - 4.0 * xb2 * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 9.0 * yb2 + 12.0 * yb3 + 45.0 * yb4 - 18.0 * yb5 - 3.0 * yb6 + xb8 * (-45.0 - 18.0 * yb + 219.0 * yb2 + 28.0 * yb3 - 567.0 * yb4 + 246.0 * yb5 - 215.0 * yb6)
                     + xb10 * (1.0 - 6.0 * yb + 9.0 * yb2 - 12.0 * yb3 - 45.0 * yb4 + 18.0 * yb5 + 3.0 * yb6) + 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6)
                     + 2.0 * myi * xb9 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) + xb2 * (45.0 + 18.0 * yb - 219.0 * yb2 - 28.0 * yb3 + 567.0 * yb4 - 246.0 * yb5 + 215.0 * yb6)
                     - 8.0 * myi * xb3 * (13.0 - 6.0 * yb - 31.0 * yb2 + 4.0 * yb3 + 1103.0 * yb4 + 66.0 * yb5 + 291.0 * yb6) - 8.0 * myi * xb7 * (13.0 - 6.0 * yb - 31.0 * yb2 + 4.0 * yb3 + 1103.0 * yb4 + 66.0 * yb5 + 291.0 * yb6)
                     - 4.0 * myi * xb5 * (51.0 - 18.0 * yb + 43.0 * yb2 + 28.0 * yb3 + 2569.0 * yb4 + 246.0 * yb5 + 825.0 * yb6) + 2.0 * xb4 * (23.0 + 6.0 * yb + 279.0 * yb2 - 20.0 * yb3 + 1029.0 * yb4 - 114.0 * yb5 + 1005.0 * yb6)
                     - 2.0 * xb6 * (23.0 + 6.0 * yb + 279.0 * yb2 - 20.0 * yb3 + 1029.0 * yb4 - 114.0 * yb5 + 1005.0 * yb6)) - 4.0 * xb2 * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb10 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6)
                     - 3.0 * xb2 * (-7.0 + 31.0 * yb2 + 167.0 * yb4 + 33.0 * yb6) + 3.0 * xb8 * (-7.0 + 31.0 * yb2 + 167.0 * yb4 + 33.0 * yb6) + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6)
                     + 2.0 * myi * xb9 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) - 8.0 * myi * xb3 * (19.0 - 67.0 * yb2 + 1373.0 * yb4 + 371.0 * yb6) - 8.0 * myi * xb7 * (19.0 - 67.0 * yb2 + 1373.0 * yb4 + 371.0 * yb6)
                     + 2.0 * xb4 * (11.0 + 205.0 * yb2 + 757.0 * yb4 + 723.0 * yb6) - 2.0 * xb6 * (11.0 + 205.0 * yb2 + 757.0 * yb4 + 723.0 * yb6) - 4.0 * myi * xb5 * (75.0 + 45.0 * yb2 + 3381.0 * yb4 + 1267.0 * yb6))
                   + power_of<2>(vb) * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb10 * (-171.0 - 144.0 * yb + 403.0 * yb2 + 224.0 * yb3 - 11093.0 * yb4 + 1968.0 * yb5 - 4147.0 * yb6)
                     + xb8 * (-147.0 - 96.0 * yb + 139.0 * yb2 + 320.0 * yb3 + 691.0 * yb4 + 1824.0 * yb5 - 75.0 * yb6) + xb2 * (23.0 + 48.0 * yb - 255.0 * yb2 + 96.0 * yb3 - 471.0 * yb4 - 144.0 * yb5 - 33.0 * yb6)
                     + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) + xb12 * (-23.0 - 48.0 * yb + 255.0 * yb2 - 96.0 * yb3 + 471.0 * yb4 + 144.0 * yb5 + 33.0 * yb6) + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6)
                     + 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + xb6 * (147.0 + 96.0 * yb - 139.0 * yb2 - 320.0 * yb3 - 691.0 * yb4 - 1824.0 * yb5 + 75.0 * yb6)
                     - 4.0 * myi * xb3 * (37.0 - 24.0 * yb - 5.0 * yb2 - 48.0 * yb3 + 2635.0 * yb4 + 72.0 * yb5 + 757.0 * yb6) - 4.0 * myi * xb11 * (37.0 - 24.0 * yb - 5.0 * yb2 - 48.0 * yb3 + 2635.0 * yb4 + 72.0 * yb5 + 757.0 * yb6)
                     + 8.0 * myi * xb7 * (133.0 + 72.0 * yb + 187.0 * yb2 - 112.0 * yb3 + 3883.0 * yb4 - 984.0 * yb5 + 2293.0 * yb6) + 2.0 * myi * xb5 * (193.0 + 192.0 * yb - 1721.0 * yb2 - 128.0 * yb3 + 12799.0 * yb4 - 2112.0 * yb5
                       + 3033.0 * yb6) + 2.0 * myi * xb9 * (193.0 + 192.0 * yb - 1721.0 * yb2 - 128.0 * yb3 + 12799.0 * yb4 - 2112.0 * yb5 + 3033.0 * yb6)
                     + xb4 * (171.0 + 144.0 * yb - 403.0 * yb2 - 224.0 * yb3 + 11093.0 * yb4 - 1968.0 * yb5 + 4147.0 * yb6)))
                 + power_of<2>(tb) * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 9.0 * yb2 + 12.0 * yb3 + 45.0 * yb4 - 18.0 * yb5 - 3.0 * yb6 + xb6 * (99.0 - 114.0 * yb - 709.0 * yb2 + 412.0 * yb3 - 1255.0 * yb4 + 2262.0 * yb5 - 1303.0 * yb6)
                     + xb12 * (-47.0 + 42.0 * yb + 345.0 * yb2 + 148.0 * yb3 - 573.0 * yb4 + 66.0 * yb5 - 269.0 * yb6) + xb14 * (1.0 - 6.0 * yb + 9.0 * yb2 - 12.0 * yb3 - 45.0 * yb4 + 18.0 * yb5 + 3.0 * yb6)
                     + 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) + 2.0 * myi * xb13 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6)
                     + xb2 * (47.0 - 42.0 * yb - 345.0 * yb2 - 148.0 * yb3 + 573.0 * yb4 - 66.0 * yb5 + 269.0 * yb6) - 4.0 * myi * xb3 * (25.0 + 18.0 * yb + 49.0 * yb2 + 68.0 * yb3 + 2107.0 * yb4 + 42.0 * yb5 + 603.0 * yb6)
                     - 4.0 * myi * xb11 * (25.0 + 18.0 * yb + 49.0 * yb2 + 68.0 * yb3 + 2107.0 * yb4 + 42.0 * yb5 + 603.0 * yb6) + xb8 * (-99.0 + 114.0 * yb + 709.0 * yb2 - 412.0 * yb3 + 1255.0 * yb4 - 2262.0 * yb5 + 1303.0 * yb6)
                     + 3.0 * xb4 * (49.0 - 54.0 * yb - 7.0 * yb2 + 84.0 * yb3 + 3171.0 * yb4 + 738.0 * yb5 + 1363.0 * yb6) - 3.0 * xb10 * (49.0 - 54.0 * yb - 7.0 * yb2 + 84.0 * yb3 + 3171.0 * yb4 + 738.0 * yb5 + 1363.0 * yb6)
                     + 8.0 * myi * xb7 * (121.0 - 78.0 * yb + 113.0 * yb2 + 132.0 * yb3 + 3611.0 * yb4 + 1098.0 * yb5 + 2011.0 * yb6) + 2.0 * myi * xb5 * (193.0 - 198.0 * yb - 1447.0 * yb2 + 116.0 * yb3 + 12275.0 * yb4 + 2130.0 * yb5
                       + 3283.0 * yb6) + 2.0 * myi * xb9 * (193.0 - 198.0 * yb - 1447.0 * yb2 + 116.0 * yb3 + 12275.0 * yb4 + 2130.0 * yb5 + 3283.0 * yb6))
                   - 4.0 * xb2 * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb8 * (-147.0 + 96.0 * yb + 139.0 * yb2 - 320.0 * yb3 + 691.0 * yb4 - 1824.0 * yb5 - 75.0 * yb6) + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6)
                     - xb2 * (-23.0 + 48.0 * yb + 255.0 * yb2 + 96.0 * yb3 + 471.0 * yb4 - 144.0 * yb5 + 33.0 * yb6) + xb12 * (-23.0 + 48.0 * yb + 255.0 * yb2 + 96.0 * yb3 + 471.0 * yb4 - 144.0 * yb5 + 33.0 * yb6)
                     + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + xb6 * (147.0 - 96.0 * yb - 139.0 * yb2 + 320.0 * yb3 - 691.0 * yb4 + 1824.0 * yb5
                       + 75.0 * yb6) - 4.0 * myi * xb3 * (37.0 + 24.0 * yb - 5.0 * yb2 + 48.0 * yb3 + 2635.0 * yb4 - 72.0 * yb5 + 757.0 * yb6) - 4.0 * myi * xb11 * (37.0 + 24.0 * yb - 5.0 * yb2 + 48.0 * yb3 + 2635.0 * yb4 - 72.0 * yb5
                       + 757.0 * yb6) + 8.0 * myi * xb7 * (133.0 - 72.0 * yb + 187.0 * yb2 + 112.0 * yb3 + 3883.0 * yb4 + 984.0 * yb5 + 2293.0 * yb6) + 2.0 * myi * xb5 * (193.0 - 192.0 * yb - 1721.0 * yb2 + 128.0 * yb3 + 12799.0 * yb4
                       + 2112.0 * yb5 + 3033.0 * yb6) + 2.0 * myi * xb9 * (193.0 - 192.0 * yb - 1721.0 * yb2 + 128.0 * yb3 + 12799.0 * yb4 + 2112.0 * yb5 + 3033.0 * yb6)
                     + xb4 * (171.0 - 144.0 * yb - 403.0 * yb2 + 224.0 * yb3 + 11093.0 * yb4 + 1968.0 * yb5 + 4147.0 * yb6) - xb10 * (171.0 - 144.0 * yb - 403.0 * yb2 + 224.0 * yb3 + 11093.0 * yb4 + 1968.0 * yb5 + 4147.0 * yb6))
                   + power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb12 * (-23.0 + 399.0 * yb2 + 375.0 * yb4 - 15.0 * yb6) + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6)
                     + xb2 * (23.0 - 399.0 * yb2 - 375.0 * yb4 + 15.0 * yb6) + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6)
                     - 4.0 * myi * xb3 * (37.0 + 67.0 * yb2 + 2587.0 * yb4 + 733.0 * yb6) - 4.0 * myi * xb11 * (37.0 + 67.0 * yb2 + 2587.0 * yb4 + 733.0 * yb6) + 8.0 * myi * xb7 * (229.0 + 195.0 * yb2 + 7131.0 * yb4 + 4061.0 * yb6)
                     + xb6 * (339.0 + 1045.0 * yb2 + 3661.0 * yb4 + 4587.0 * yb6) - xb8 * (339.0 + 1045.0 * yb2 + 3661.0 * yb4 + 4587.0 * yb6) + 2.0 * myi * xb5 * (385.0 - 2873.0 * yb2 + 21439.0 * yb4 + 5593.0 * yb6)
                     + 2.0 * myi * xb9 * (385.0 - 2873.0 * yb2 + 21439.0 * yb4 + 5593.0 * yb6) + xb4 * (363.0 - 1411.0 * yb2 + 19637.0 * yb4 + 6659.0 * yb6) - xb10 * (363.0 - 1411.0 * yb2 + 19637.0 * yb4 + 6659.0 * yb6))));
            const complex<double> num4 = power_of<2>(-myi + xb) * (-1.0 + yb) * (1.0 + yb) *
                (-8.0 * tb * xb2 * (-4.0 * xb2 * (-1.0 - 6.0 * yb - 9.0 * yb2 - 12.0 * yb3 + 45.0 * yb4 + 18.0 * yb5 - 3.0 * yb6 + xb10 * (1.0 + 6.0 * yb + 9.0 * yb2 + 12.0 * yb3 - 45.0 * yb4 - 18.0 * yb5 + 3.0 * yb6)
                     - 2.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) - 2.0 * myi * xb9 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6)
                     + xb2 * (45.0 - 18.0 * yb - 219.0 * yb2 + 28.0 * yb3 + 567.0 * yb4 + 246.0 * yb5 + 215.0 * yb6) - xb8 * (45.0 - 18.0 * yb - 219.0 * yb2 + 28.0 * yb3 + 567.0 * yb4 + 246.0 * yb5 + 215.0 * yb6)
                     + 8.0 * myi * xb3 * (13.0 + 6.0 * yb - 31.0 * yb2 - 4.0 * yb3 + 1103.0 * yb4 - 66.0 * yb5 + 291.0 * yb6) + 8.0 * myi * xb7 * (13.0 + 6.0 * yb - 31.0 * yb2 - 4.0 * yb3 + 1103.0 * yb4 - 66.0 * yb5 + 291.0 * yb6)
                     + 4.0 * myi * xb5 * (51.0 + 18.0 * yb + 43.0 * yb2 - 28.0 * yb3 + 2569.0 * yb4 - 246.0 * yb5 + 825.0 * yb6) + 2.0 * xb4 * (23.0 - 6.0 * yb + 279.0 * yb2 + 20.0 * yb3 + 1029.0 * yb4 + 114.0 * yb5 + 1005.0 * yb6)
                     - 2.0 * xb6 * (23.0 - 6.0 * yb + 279.0 * yb2 + 20.0 * yb3 + 1029.0 * yb4 + 114.0 * yb5 + 1005.0 * yb6)) - 8.0 * vb * xb2 * (1.0 + 27.0 * yb2 - 57.0 * yb4 - 3.0 * yb6 + xb10 * (-1.0 - 27.0 * yb2 + 57.0 * yb4 + 3.0 * yb6)
                     + 2.0 * myi * xb * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) + 2.0 * myi * xb9 * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) - 8.0 * myi * xb3 * (7.0 + 5.0 * yb2 + 833.0 * yb4 + 211.0 * yb6)
                     - 8.0 * myi * xb7 * (7.0 + 5.0 * yb2 + 833.0 * yb4 + 211.0 * yb6) - 4.0 * myi * xb5 * (27.0 + 41.0 * yb2 + 1757.0 * yb4 + 383.0 * yb6) - xb2 * (69.0 - 345.0 * yb2 + 1635.0 * yb4 + 529.0 * yb6)
                     + xb8 * (69.0 - 345.0 * yb2 + 1635.0 * yb4 + 529.0 * yb6) - 2.0 * xb4 * (35.0 + 353.0 * yb2 + 1301.0 * yb4 + 1287.0 * yb6) + xb6 * (70.0 + 706.0 * yb2 + 2602.0 * yb4 + 2574.0 * yb6))
                   + power_of<2>(vb) * (-1.0 - 6.0 * yb - 9.0 * yb2 - 12.0 * yb3 + 45.0 * yb4 + 18.0 * yb5 - 3.0 * yb6 + xb14 * (1.0 + 6.0 * yb + 9.0 * yb2 + 12.0 * yb3 - 45.0 * yb4 - 18.0 * yb5 + 3.0 * yb6)
                     - 2.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) - 2.0 * myi * xb13 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6)
                     + xb2 * (47.0 + 42.0 * yb - 345.0 * yb2 + 148.0 * yb3 + 573.0 * yb4 + 66.0 * yb5 + 269.0 * yb6) - xb12 * (47.0 + 42.0 * yb - 345.0 * yb2 + 148.0 * yb3 + 573.0 * yb4 + 66.0 * yb5 + 269.0 * yb6)
                     + 4.0 * myi * xb3 * (25.0 - 18.0 * yb + 49.0 * yb2 - 68.0 * yb3 + 2107.0 * yb4 - 42.0 * yb5 + 603.0 * yb6) + 4.0 * myi * xb11 * (25.0 - 18.0 * yb + 49.0 * yb2 - 68.0 * yb3 + 2107.0 * yb4 - 42.0 * yb5 + 603.0 * yb6)
                     - xb6 * (-99.0 - 114.0 * yb + 709.0 * yb2 + 412.0 * yb3 + 1255.0 * yb4 + 2262.0 * yb5 + 1303.0 * yb6) + xb8 * (-99.0 - 114.0 * yb + 709.0 * yb2 + 412.0 * yb3 + 1255.0 * yb4 + 2262.0 * yb5 + 1303.0 * yb6)
                     + 3.0 * xb4 * (49.0 + 54.0 * yb - 7.0 * yb2 - 84.0 * yb3 + 3171.0 * yb4 - 738.0 * yb5 + 1363.0 * yb6) - 3.0 * xb10 * (49.0 + 54.0 * yb - 7.0 * yb2 - 84.0 * yb3 + 3171.0 * yb4 - 738.0 * yb5 + 1363.0 * yb6)
                     - 8.0 * myi * xb7 * (121.0 + 78.0 * yb + 113.0 * yb2 - 132.0 * yb3 + 3611.0 * yb4 - 1098.0 * yb5 + 2011.0 * yb6) - 2.0 * myi * xb5 * (193.0 + 198.0 * yb - 1447.0 * yb2 - 116.0 * yb3 + 12275.0 * yb4 - 2130.0 * yb5
                       + 3283.0 * yb6) - 2.0 * myi * xb9 * (193.0 + 198.0 * yb - 1447.0 * yb2 - 116.0 * yb3 + 12275.0 * yb4 - 2130.0 * yb5 + 3283.0 * yb6)))
                 - 4.0 * xb2 * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 9.0 * yb2 + 12.0 * yb3 + 45.0 * yb4 - 18.0 * yb5 - 3.0 * yb6 + xb8 * (-45.0 - 18.0 * yb + 219.0 * yb2 + 28.0 * yb3 - 567.0 * yb4 + 246.0 * yb5 - 215.0 * yb6)
                     + xb10 * (1.0 - 6.0 * yb + 9.0 * yb2 - 12.0 * yb3 - 45.0 * yb4 + 18.0 * yb5 + 3.0 * yb6) - 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6)
                     - 2.0 * myi * xb9 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) + xb2 * (45.0 + 18.0 * yb - 219.0 * yb2 - 28.0 * yb3 + 567.0 * yb4 - 246.0 * yb5 + 215.0 * yb6)
                     + 8.0 * myi * xb3 * (13.0 - 6.0 * yb - 31.0 * yb2 + 4.0 * yb3 + 1103.0 * yb4 + 66.0 * yb5 + 291.0 * yb6) + 8.0 * myi * xb7 * (13.0 - 6.0 * yb - 31.0 * yb2 + 4.0 * yb3 + 1103.0 * yb4 + 66.0 * yb5 + 291.0 * yb6)
                     + 4.0 * myi * xb5 * (51.0 - 18.0 * yb + 43.0 * yb2 + 28.0 * yb3 + 2569.0 * yb4 + 246.0 * yb5 + 825.0 * yb6) + 2.0 * xb4 * (23.0 + 6.0 * yb + 279.0 * yb2 - 20.0 * yb3 + 1029.0 * yb4 - 114.0 * yb5 + 1005.0 * yb6)
                     - 2.0 * xb6 * (23.0 + 6.0 * yb + 279.0 * yb2 - 20.0 * yb3 + 1029.0 * yb4 - 114.0 * yb5 + 1005.0 * yb6)) - 4.0 * xb2 * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb10 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6)
                     - 3.0 * xb2 * (-7.0 + 31.0 * yb2 + 167.0 * yb4 + 33.0 * yb6) + 3.0 * xb8 * (-7.0 + 31.0 * yb2 + 167.0 * yb4 + 33.0 * yb6) - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6)
                     - 2.0 * myi * xb9 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + 8.0 * myi * xb3 * (19.0 - 67.0 * yb2 + 1373.0 * yb4 + 371.0 * yb6) + 8.0 * myi * xb7 * (19.0 - 67.0 * yb2 + 1373.0 * yb4 + 371.0 * yb6)
                     + 2.0 * xb4 * (11.0 + 205.0 * yb2 + 757.0 * yb4 + 723.0 * yb6) - 2.0 * xb6 * (11.0 + 205.0 * yb2 + 757.0 * yb4 + 723.0 * yb6) + 4.0 * myi * xb5 * (75.0 + 45.0 * yb2 + 3381.0 * yb4 + 1267.0 * yb6))
                   + power_of<2>(vb) * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb10 * (-171.0 - 144.0 * yb + 403.0 * yb2 + 224.0 * yb3 - 11093.0 * yb4 + 1968.0 * yb5 - 4147.0 * yb6)
                     + xb8 * (-147.0 - 96.0 * yb + 139.0 * yb2 + 320.0 * yb3 + 691.0 * yb4 + 1824.0 * yb5 - 75.0 * yb6) + xb2 * (23.0 + 48.0 * yb - 255.0 * yb2 + 96.0 * yb3 - 471.0 * yb4 - 144.0 * yb5 - 33.0 * yb6)
                     + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) + xb12 * (-23.0 - 48.0 * yb + 255.0 * yb2 - 96.0 * yb3 + 471.0 * yb4 + 144.0 * yb5 + 33.0 * yb6) - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6)
                     - 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + xb6 * (147.0 + 96.0 * yb - 139.0 * yb2 - 320.0 * yb3 - 691.0 * yb4 - 1824.0 * yb5 + 75.0 * yb6)
                     + 4.0 * myi * xb3 * (37.0 - 24.0 * yb - 5.0 * yb2 - 48.0 * yb3 + 2635.0 * yb4 + 72.0 * yb5 + 757.0 * yb6) + 4.0 * myi * xb11 * (37.0 - 24.0 * yb - 5.0 * yb2 - 48.0 * yb3 + 2635.0 * yb4 + 72.0 * yb5 + 757.0 * yb6)
                     - 8.0 * myi * xb7 * (133.0 + 72.0 * yb + 187.0 * yb2 - 112.0 * yb3 + 3883.0 * yb4 - 984.0 * yb5 + 2293.0 * yb6) - 2.0 * myi * xb5 * (193.0 + 192.0 * yb - 1721.0 * yb2 - 128.0 * yb3 + 12799.0 * yb4 - 2112.0 * yb5
                       + 3033.0 * yb6) - 2.0 * myi * xb9 * (193.0 + 192.0 * yb - 1721.0 * yb2 - 128.0 * yb3 + 12799.0 * yb4 - 2112.0 * yb5 + 3033.0 * yb6)
                     + xb4 * (171.0 + 144.0 * yb - 403.0 * yb2 - 224.0 * yb3 + 11093.0 * yb4 - 1968.0 * yb5 + 4147.0 * yb6)))
                 + power_of<2>(tb) * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 9.0 * yb2 + 12.0 * yb3 + 45.0 * yb4 - 18.0 * yb5 - 3.0 * yb6 + xb6 * (99.0 - 114.0 * yb - 709.0 * yb2 + 412.0 * yb3 - 1255.0 * yb4 + 2262.0 * yb5 - 1303.0 * yb6)
                     + xb12 * (-47.0 + 42.0 * yb + 345.0 * yb2 + 148.0 * yb3 - 573.0 * yb4 + 66.0 * yb5 - 269.0 * yb6) + xb14 * (1.0 - 6.0 * yb + 9.0 * yb2 - 12.0 * yb3 - 45.0 * yb4 + 18.0 * yb5 + 3.0 * yb6)
                     - 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) - 2.0 * myi * xb13 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6)
                     + xb2 * (47.0 - 42.0 * yb - 345.0 * yb2 - 148.0 * yb3 + 573.0 * yb4 - 66.0 * yb5 + 269.0 * yb6) + 4.0 * myi * xb3 * (25.0 + 18.0 * yb + 49.0 * yb2 + 68.0 * yb3 + 2107.0 * yb4 + 42.0 * yb5 + 603.0 * yb6)
                     + 4.0 * myi * xb11 * (25.0 + 18.0 * yb + 49.0 * yb2 + 68.0 * yb3 + 2107.0 * yb4 + 42.0 * yb5 + 603.0 * yb6) + xb8 * (-99.0 + 114.0 * yb + 709.0 * yb2 - 412.0 * yb3 + 1255.0 * yb4 - 2262.0 * yb5 + 1303.0 * yb6)
                     + 3.0 * xb4 * (49.0 - 54.0 * yb - 7.0 * yb2 + 84.0 * yb3 + 3171.0 * yb4 + 738.0 * yb5 + 1363.0 * yb6) - 3.0 * xb10 * (49.0 - 54.0 * yb - 7.0 * yb2 + 84.0 * yb3 + 3171.0 * yb4 + 738.0 * yb5 + 1363.0 * yb6)
                     - 8.0 * myi * xb7 * (121.0 - 78.0 * yb + 113.0 * yb2 + 132.0 * yb3 + 3611.0 * yb4 + 1098.0 * yb5 + 2011.0 * yb6) - 2.0 * myi * xb5 * (193.0 - 198.0 * yb - 1447.0 * yb2 + 116.0 * yb3 + 12275.0 * yb4 + 2130.0 * yb5
                       + 3283.0 * yb6) - 2.0 * myi * xb9 * (193.0 - 198.0 * yb - 1447.0 * yb2 + 116.0 * yb3 + 12275.0 * yb4 + 2130.0 * yb5 + 3283.0 * yb6))
                   - 4.0 * xb2 * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb8 * (-147.0 + 96.0 * yb + 139.0 * yb2 - 320.0 * yb3 + 691.0 * yb4 - 1824.0 * yb5 - 75.0 * yb6) + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6)
                     - xb2 * (-23.0 + 48.0 * yb + 255.0 * yb2 + 96.0 * yb3 + 471.0 * yb4 - 144.0 * yb5 + 33.0 * yb6) + xb12 * (-23.0 + 48.0 * yb + 255.0 * yb2 + 96.0 * yb3 + 471.0 * yb4 - 144.0 * yb5 + 33.0 * yb6)
                     - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) - 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) + xb6 * (147.0 - 96.0 * yb - 139.0 * yb2 + 320.0 * yb3 - 691.0 * yb4 + 1824.0 * yb5
                       + 75.0 * yb6) + 4.0 * myi * xb3 * (37.0 + 24.0 * yb - 5.0 * yb2 + 48.0 * yb3 + 2635.0 * yb4 - 72.0 * yb5 + 757.0 * yb6) + 4.0 * myi * xb11 * (37.0 + 24.0 * yb - 5.0 * yb2 + 48.0 * yb3 + 2635.0 * yb4 - 72.0 * yb5
                       + 757.0 * yb6) - 8.0 * myi * xb7 * (133.0 - 72.0 * yb + 187.0 * yb2 + 112.0 * yb3 + 3883.0 * yb4 + 984.0 * yb5 + 2293.0 * yb6) - 2.0 * myi * xb5 * (193.0 - 192.0 * yb - 1721.0 * yb2 + 128.0 * yb3 + 12799.0 * yb4
                       + 2112.0 * yb5 + 3033.0 * yb6) - 2.0 * myi * xb9 * (193.0 - 192.0 * yb - 1721.0 * yb2 + 128.0 * yb3 + 12799.0 * yb4 + 2112.0 * yb5 + 3033.0 * yb6)
                     + xb4 * (171.0 - 144.0 * yb - 403.0 * yb2 + 224.0 * yb3 + 11093.0 * yb4 + 1968.0 * yb5 + 4147.0 * yb6) - xb10 * (171.0 - 144.0 * yb - 403.0 * yb2 + 224.0 * yb3 + 11093.0 * yb4 + 1968.0 * yb5 + 4147.0 * yb6))
                   + power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6 + xb12 * (-23.0 + 399.0 * yb2 + 375.0 * yb4 - 15.0 * yb6) + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6)
                     + xb2 * (23.0 - 399.0 * yb2 - 375.0 * yb4 + 15.0 * yb6) - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) - 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6)
                     + 4.0 * myi * xb3 * (37.0 + 67.0 * yb2 + 2587.0 * yb4 + 733.0 * yb6) + 4.0 * myi * xb11 * (37.0 + 67.0 * yb2 + 2587.0 * yb4 + 733.0 * yb6) - 8.0 * myi * xb7 * (229.0 + 195.0 * yb2 + 7131.0 * yb4 + 4061.0 * yb6)
                     + xb6 * (339.0 + 1045.0 * yb2 + 3661.0 * yb4 + 4587.0 * yb6) - xb8 * (339.0 + 1045.0 * yb2 + 3661.0 * yb4 + 4587.0 * yb6) - 2.0 * myi * xb5 * (385.0 - 2873.0 * yb2 + 21439.0 * yb4 + 5593.0 * yb6)
                     - 2.0 * myi * xb9 * (385.0 - 2873.0 * yb2 + 21439.0 * yb4 + 5593.0 * yb6) + xb4 * (363.0 - 1411.0 * yb2 + 19637.0 * yb4 + 6659.0 * yb6) - xb10 * (363.0 - 1411.0 * yb2 + 19637.0 * yb4 + 6659.0 * yb6))));
            const complex<double> num5 = 8.0 * tb * xb2 * (-8.0 * vb * xb2 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8) + xb8 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8)
                    + xb12 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8) + 2.0 * xb2 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8)
                    + 2.0 * xb10 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8) - 4.0 * xb6 * (-89.0 - 346.0 * yb2 - 4380.0 * yb4 + 2762.0 * yb6 + 2053.0 * yb8))
                  - 4.0 * xb2 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6
                      - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 - 30.0 * yb - 240.0 * yb2 + 66.0 * yb3 - 5802.0 * yb4 + 342.0 * yb5 + 3512.0 * yb6 - 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8))
                  + power_of<2>(vb) * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + 4.0 * xb2 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7
                      - 113.0 * yb8) + 4.0 * xb14 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7 - 113.0 * yb8)
                    + xb16 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb4 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6
                      + 486.0 * yb7 + 251.0 * yb8) + 4.0 * xb12 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6 + 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 - 510.0 * yb - 744.0 * yb2 + 1154.0 * yb3 - 28530.0 * yb4 + 5878.0 * yb5 + 12752.0 * yb6 - 6522.0 * yb7 + 17391.0 * yb8)))
                + 4.0 * xb2 * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6
                      + 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 + 30.0 * yb - 240.0 * yb2 - 66.0 * yb3 - 5802.0 * yb4 - 342.0 * yb5 + 3512.0 * yb6 + 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8))
                  - 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb2 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb10 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb12 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    + 4.0 * xb6 * (-161.0 - 134.0 * yb2 - 7224.0 * yb4 + 4262.0 * yb6 + 3257.0 * yb8) + xb4 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)
                    + xb8 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)) + power_of<2>(vb) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5 - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5
                      - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 - 480.0 * yb - 718.0 * yb2 + 1056.0 * yb3 - 30120.0 * yb4 + 5472.0 * yb5 + 13486.0 * yb6 - 6048.0 * yb7 + 18269.0 * yb8)))
                + power_of<2>(tb) * (-8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb16 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8) - 4.0 * xb2 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6
                      - 30.0 * yb7 + 113.0 * yb8) - 4.0 * xb14 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6 - 30.0 * yb7 + 113.0 * yb8)
                    + 4.0 * xb4 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    + 4.0 * xb12 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 + 510.0 * yb - 744.0 * yb2 - 1154.0 * yb3 - 28530.0 * yb4 - 5878.0 * yb5 + 12752.0 * yb6 + 6522.0 * yb7 + 17391.0 * yb8))
                  + 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5 - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5
                      - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 + 480.0 * yb - 718.0 * yb2 - 1056.0 * yb3 - 30120.0 * yb4 - 5472.0 * yb5 + 13486.0 * yb6 + 6048.0 * yb7 + 18269.0 * yb8))
                  - power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8)
                    + xb12 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8) - 20.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 20.0 * xb14 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb6 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8) - 4.0 * xb10 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8)
                    - 2.0 * xb8 * (-1493.0 + 978.0 * yb2 - 52872.0 * yb4 + 25486.0 * yb6 + 27901.0 * yb8)));
            const complex<double> num6 = 8.0 * tb * xb2 * (-8.0 * vb * xb2 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8) + xb8 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8)
                    + xb12 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8) + 2.0 * xb2 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8)
                    + 2.0 * xb10 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8) - 4.0 * xb6 * (-89.0 - 346.0 * yb2 - 4380.0 * yb4 + 2762.0 * yb6 + 2053.0 * yb8))
                  - 4.0 * xb2 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6
                      - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 - 30.0 * yb - 240.0 * yb2 + 66.0 * yb3 - 5802.0 * yb4 + 342.0 * yb5 + 3512.0 * yb6 - 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8))
                  + power_of<2>(vb) * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + 4.0 * xb2 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7
                      - 113.0 * yb8) + 4.0 * xb14 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7 - 113.0 * yb8)
                    + xb16 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb4 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6
                      + 486.0 * yb7 + 251.0 * yb8) + 4.0 * xb12 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6 + 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 - 510.0 * yb - 744.0 * yb2 + 1154.0 * yb3 - 28530.0 * yb4 + 5878.0 * yb5 + 12752.0 * yb6 - 6522.0 * yb7 + 17391.0 * yb8)))
                + 4.0 * xb2 * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6
                      + 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 + 30.0 * yb - 240.0 * yb2 - 66.0 * yb3 - 5802.0 * yb4 - 342.0 * yb5 + 3512.0 * yb6 + 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8))
                  - 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb2 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb10 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb12 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    + 4.0 * xb6 * (-161.0 - 134.0 * yb2 - 7224.0 * yb4 + 4262.0 * yb6 + 3257.0 * yb8) + xb4 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)
                    + xb8 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)) + power_of<2>(vb) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5 - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5
                      - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 - 480.0 * yb - 718.0 * yb2 + 1056.0 * yb3 - 30120.0 * yb4 + 5472.0 * yb5 + 13486.0 * yb6 - 6048.0 * yb7 + 18269.0 * yb8)))
                + power_of<2>(tb) * (-8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb16 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8) - 4.0 * xb2 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6
                      - 30.0 * yb7 + 113.0 * yb8) - 4.0 * xb14 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6 - 30.0 * yb7 + 113.0 * yb8)
                    + 4.0 * xb4 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    + 4.0 * xb12 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 + 510.0 * yb - 744.0 * yb2 - 1154.0 * yb3 - 28530.0 * yb4 - 5878.0 * yb5 + 12752.0 * yb6 + 6522.0 * yb7 + 17391.0 * yb8))
                  + 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5 - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5
                      - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 + 480.0 * yb - 718.0 * yb2 - 1056.0 * yb3 - 30120.0 * yb4 - 5472.0 * yb5 + 13486.0 * yb6 + 6048.0 * yb7 + 18269.0 * yb8))
                  - power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8)
                    + xb12 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8) - 20.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 20.0 * xb14 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb6 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8) - 4.0 * xb10 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8)
                    - 2.0 * xb8 * (-1493.0 + 978.0 * yb2 - 52872.0 * yb4 + 25486.0 * yb6 + 27901.0 * yb8)));
            const complex<double> num7 = (4.0 * xb2 + 4.0 * power_of<2>(tb) * xb2 - tb * (1.0 - 6.0 * xb2 + xb4)) * (-1.0 + yb) * (1.0 + yb) * (3.0 * (-1.0 + yb) * yb * power_of<4>(1.0 + yb) + 3.0 * xb8 * (-1.0 + yb) * yb * power_of<4>(1.0 + yb)
                 + 4.0 * xb2 * (3.0 - 3.0 * yb - 18.0 * yb2 + 2.0 * yb3 + 135.0 * yb4 + 33.0 * yb5 + 40.0 * yb6) + 4.0 * xb6 * (3.0 - 3.0 * yb - 18.0 * yb2 + 2.0 * yb3 + 135.0 * yb4 + 33.0 * yb5 + 40.0 * yb6)
                 + 2.0 * xb4 * (12.0 - 9.0 * yb + yb2 + 14.0 * yb3 + 406.0 * yb4 + 123.0 * yb5 + 221.0 * yb6));
            const complex<double> num8 = (-4.0 * xb2 - 4.0 * power_of<2>(tb) * xb2 + tb * (1.0 - 6.0 * xb2 + xb4)) * (-1.0 + yb) * (1.0 + yb) * (3.0 * (-1.0 + yb) * yb * power_of<4>(1.0 + yb) + 3.0 * xb8 * (-1.0 + yb) * yb * power_of<4>(1.0 + yb)
                 + 4.0 * xb2 * (3.0 - 3.0 * yb - 18.0 * yb2 + 2.0 * yb3 + 135.0 * yb4 + 33.0 * yb5 + 40.0 * yb6) + 4.0 * xb6 * (3.0 - 3.0 * yb - 18.0 * yb2 + 2.0 * yb3 + 135.0 * yb4 + 33.0 * yb5 + 40.0 * yb6)
                 + 2.0 * xb4 * (12.0 - 9.0 * yb + yb2 + 14.0 * yb3 + 406.0 * yb4 + 123.0 * yb5 + 221.0 * yb6));
            const complex<double> num9 = (4.0 * xb2 + 4.0 * power_of<2>(vb) * xb2 + vb * (1.0 - 6.0 * xb2 + xb4)) * (-1.0 + yb) * (1.0 + yb) * (3.0 * power_of<4>(-1.0 + yb) * yb * (1.0 + yb) + 3.0 * xb8 * power_of<4>(-1.0 + yb) * yb * (1.0 + yb)
                 + 4.0 * xb2 * (3.0 + 3.0 * yb - 18.0 * yb2 - 2.0 * yb3 + 135.0 * yb4 - 33.0 * yb5 + 40.0 * yb6) + 4.0 * xb6 * (3.0 + 3.0 * yb - 18.0 * yb2 - 2.0 * yb3 + 135.0 * yb4 - 33.0 * yb5 + 40.0 * yb6)
                 + 2.0 * xb4 * (12.0 + 9.0 * yb + yb2 - 14.0 * yb3 + 406.0 * yb4 - 123.0 * yb5 + 221.0 * yb6));
            const complex<double> num10 = -8.0 * tb * xb2 * (-8.0 * vb * xb2 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8) + xb8 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8)
                    + xb12 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8) + 2.0 * xb2 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8)
                    + 2.0 * xb10 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8) - 4.0 * xb6 * (-89.0 - 346.0 * yb2 - 4380.0 * yb4 + 2762.0 * yb6 + 2053.0 * yb8))
                  - 4.0 * xb2 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6
                      - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 - 30.0 * yb - 240.0 * yb2 + 66.0 * yb3 - 5802.0 * yb4 + 342.0 * yb5 + 3512.0 * yb6 - 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8))
                  + power_of<2>(vb) * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + 4.0 * xb2 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7
                      - 113.0 * yb8) + 4.0 * xb14 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7 - 113.0 * yb8)
                    + xb16 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb4 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6
                      + 486.0 * yb7 + 251.0 * yb8) + 4.0 * xb12 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6 + 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 - 510.0 * yb - 744.0 * yb2 + 1154.0 * yb3 - 28530.0 * yb4 + 5878.0 * yb5 + 12752.0 * yb6 - 6522.0 * yb7 + 17391.0 * yb8)))
                - 4.0 * xb2 * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6
                      + 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 + 30.0 * yb - 240.0 * yb2 - 66.0 * yb3 - 5802.0 * yb4 - 342.0 * yb5 + 3512.0 * yb6 + 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8))
                  - 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb2 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb10 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb12 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    + 4.0 * xb6 * (-161.0 - 134.0 * yb2 - 7224.0 * yb4 + 4262.0 * yb6 + 3257.0 * yb8) + xb4 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)
                    + xb8 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)) + power_of<2>(vb) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5 - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5
                      - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 - 480.0 * yb - 718.0 * yb2 + 1056.0 * yb3 - 30120.0 * yb4 + 5472.0 * yb5 + 13486.0 * yb6 - 6048.0 * yb7 + 18269.0 * yb8)))
                + power_of<2>(tb) * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb16 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8) - 4.0 * xb2 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6
                      - 30.0 * yb7 + 113.0 * yb8) - 4.0 * xb14 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6 - 30.0 * yb7 + 113.0 * yb8)
                    + 4.0 * xb4 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    + 4.0 * xb12 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 + 510.0 * yb - 744.0 * yb2 - 1154.0 * yb3 - 28530.0 * yb4 - 5878.0 * yb5 + 12752.0 * yb6 + 6522.0 * yb7 + 17391.0 * yb8))
                  - 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5 - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5
                      - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 + 480.0 * yb - 718.0 * yb2 - 1056.0 * yb3 - 30120.0 * yb4 - 5472.0 * yb5 + 13486.0 * yb6 + 6048.0 * yb7 + 18269.0 * yb8))
                  + power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) - 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8)
                    + xb12 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8) - 20.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 20.0 * xb14 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb6 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8) - 4.0 * xb10 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8)
                    - 2.0 * xb8 * (-1493.0 + 978.0 * yb2 - 52872.0 * yb4 + 25486.0 * yb6 + 27901.0 * yb8)));
            const complex<double> num11 = -8.0 * tb * xb2 * (-8.0 * vb * xb2 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8 - 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    - 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8) + xb8 * (111.0 - 1082.0 * yb2 + 13332.0 * yb4 - 11030.0 * yb6 - 1331.0 * yb8)
                    + xb12 * (1.0 + 26.0 * yb2 - 84.0 * yb4 + 54.0 * yb6 + 3.0 * yb8) + 2.0 * xb2 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8)
                    + 2.0 * xb10 * (-33.0 + 150.0 * yb2 - 828.0 * yb4 + 346.0 * yb6 + 365.0 * yb8) - 4.0 * xb6 * (-89.0 - 346.0 * yb2 - 4380.0 * yb4 + 2762.0 * yb6 + 2053.0 * yb8))
                  - 4.0 * xb2 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 - 36.0 * yb - 96.0 * yb2 + 28.0 * yb3 + 372.0 * yb4 + 308.0 * yb5 + 80.0 * yb6 - 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6
                      - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 - 30.0 * yb - 240.0 * yb2 + 66.0 * yb3 - 5802.0 * yb4 + 342.0 * yb5 + 3512.0 * yb6 - 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 - 90.0 * yb + 1480.0 * yb2 + 166.0 * yb3 - 17430.0 * yb4 + 962.0 * yb5 + 13296.0 * yb6 - 1038.0 * yb7 + 2861.0 * yb8))
                  + power_of<2>(vb) * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2)
                    - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + 4.0 * xb2 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7
                      - 113.0 * yb8) + 4.0 * xb14 * (11.0 + 6.0 * yb - 56.0 * yb2 + 22.0 * yb3 + 126.0 * yb4 + 2.0 * yb5 + 32.0 * yb6 - 30.0 * yb7 - 113.0 * yb8)
                    + xb16 * (-1.0 - 6.0 * yb - 8.0 * yb2 - 6.0 * yb3 + 54.0 * yb4 + 30.0 * yb5 - 48.0 * yb6 - 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb4 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6
                      + 486.0 * yb7 + 251.0 * yb8) + 4.0 * xb12 * (-25.0 + 66.0 * yb + 8.0 * yb2 - 30.0 * yb3 - 1962.0 * yb4 - 522.0 * yb5 + 1728.0 * yb6 + 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 - 186.0 * yb + 1800.0 * yb2 + 342.0 * yb3 - 11202.0 * yb4 + 1986.0 * yb5 + 7648.0 * yb6 - 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 - 510.0 * yb - 744.0 * yb2 + 1154.0 * yb3 - 28530.0 * yb4 + 5878.0 * yb5 + 12752.0 * yb6 - 6522.0 * yb7 + 17391.0 * yb8)))
                - 4.0 * xb2 * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + xb2 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8)
                    + xb10 * (42.0 + 36.0 * yb - 96.0 * yb2 - 28.0 * yb3 + 372.0 * yb4 - 308.0 * yb5 + 80.0 * yb6 + 300.0 * yb7 - 398.0 * yb8) + xb12 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6
                      + 18.0 * yb7 + 3.0 * yb8) + 4.0 * xb6 * (-125.0 + 30.0 * yb - 240.0 * yb2 - 66.0 * yb3 - 5802.0 * yb4 - 342.0 * yb5 + 3512.0 * yb6 + 378.0 * yb7 + 2655.0 * yb8)
                    + xb4 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8)
                    + xb8 * (-207.0 + 90.0 * yb + 1480.0 * yb2 - 166.0 * yb3 - 17430.0 * yb4 - 962.0 * yb5 + 13296.0 * yb6 + 1038.0 * yb7 + 2861.0 * yb8))
                  - 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb2 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb10 * (18.0 + 108.0 * yb2 - 912.0 * yb4 + 852.0 * yb6 - 66.0 * yb8) + xb12 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    + 4.0 * xb6 * (-161.0 - 134.0 * yb2 - 7224.0 * yb4 + 4262.0 * yb6 + 3257.0 * yb8) + xb4 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)
                    + xb8 * (-303.0 + 1878.0 * yb2 - 21528.0 * yb4 + 15562.0 * yb6 + 4391.0 * yb8)) + power_of<2>(vb) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5 - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 - 12.0 * yb + 14.0 * yb2 - 12.0 * yb3 + 180.0 * yb4 + 60.0 * yb5
                      - 222.0 * yb6 - 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 + 72.0 * yb + 10.0 * yb2 - 56.0 * yb3 - 2352.0 * yb4 - 616.0 * yb5 + 1910.0 * yb6 + 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 - 180.0 * yb + 1842.0 * yb2 + 332.0 * yb3 - 11508.0 * yb4 + 1924.0 * yb5 + 7838.0 * yb6 - 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 - 480.0 * yb - 718.0 * yb2 + 1056.0 * yb3 - 30120.0 * yb4 + 5472.0 * yb5 + 13486.0 * yb6 - 6048.0 * yb7 + 18269.0 * yb8)))
                + power_of<2>(tb) * (8.0 * vb * xb2 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2)
                    - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2)
                    + xb16 * (-1.0 + 6.0 * yb - 8.0 * yb2 + 6.0 * yb3 + 54.0 * yb4 - 30.0 * yb5 - 48.0 * yb6 + 18.0 * yb7 + 3.0 * yb8) - 4.0 * xb2 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6
                      - 30.0 * yb7 + 113.0 * yb8) - 4.0 * xb14 * (-11.0 + 6.0 * yb + 56.0 * yb2 + 22.0 * yb3 - 126.0 * yb4 + 2.0 * yb5 - 32.0 * yb6 - 30.0 * yb7 + 113.0 * yb8)
                    + 4.0 * xb4 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    + 4.0 * xb12 * (-25.0 - 66.0 * yb + 8.0 * yb2 + 30.0 * yb3 - 1962.0 * yb4 + 522.0 * yb5 + 1728.0 * yb6 - 486.0 * yb7 + 251.0 * yb8)
                    - 4.0 * xb6 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 4.0 * xb10 * (-181.0 + 186.0 * yb + 1800.0 * yb2 - 342.0 * yb3 - 11202.0 * yb4 - 1986.0 * yb5 + 7648.0 * yb6 + 2142.0 * yb7 + 1935.0 * yb8)
                    - 2.0 * xb8 * (-869.0 + 510.0 * yb - 744.0 * yb2 - 1154.0 * yb3 - 28530.0 * yb4 - 5878.0 * yb5 + 12752.0 * yb6 + 6522.0 * yb7 + 17391.0 * yb8))
                  - 4.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb2 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5 - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) - 4.0 * xb14 * (-5.0 + 12.0 * yb + 14.0 * yb2 + 12.0 * yb3 + 180.0 * yb4 - 60.0 * yb5
                      - 222.0 * yb6 + 36.0 * yb7 + 33.0 * yb8) + 4.0 * xb4 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    + 4.0 * xb12 * (-37.0 - 72.0 * yb + 10.0 * yb2 + 56.0 * yb3 - 2352.0 * yb4 + 616.0 * yb5 + 1910.0 * yb6 - 600.0 * yb7 + 469.0 * yb8)
                    - 4.0 * xb6 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 4.0 * xb10 * (-187.0 + 180.0 * yb + 1842.0 * yb2 - 332.0 * yb3 - 11508.0 * yb4 - 1924.0 * yb5 + 7838.0 * yb6 + 2076.0 * yb7 + 2015.0 * yb8)
                    - 2.0 * xb8 * (-917.0 + 480.0 * yb - 718.0 * yb2 - 1056.0 * yb3 - 30120.0 * yb4 - 5472.0 * yb5 + 13486.0 * yb6 + 6048.0 * yb7 + 18269.0 * yb8))
                  + power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8 + 64.0 * xb3 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb5 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb7 * power_of<4>(1.0 + 3.0 * yb2) - 128.0 * xb9 * power_of<4>(1.0 + 3.0 * yb2)
                    + 64.0 * xb11 * power_of<4>(1.0 + 3.0 * yb2) + 64.0 * xb13 * power_of<4>(1.0 + 3.0 * yb2) + xb4 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8)
                    + xb12 * (44.0 - 1592.0 * yb2 + 864.0 * yb4 + 1464.0 * yb6 - 780.0 * yb8) - 20.0 * xb2 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 20.0 * xb14 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8) + xb16 * (-1.0 + 10.0 * yb2 + 24.0 * yb4 - 42.0 * yb6 + 9.0 * yb8)
                    - 4.0 * xb6 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8) - 4.0 * xb10 * (-379.0 + 2638.0 * yb2 - 19704.0 * yb4 + 12370.0 * yb6 + 5075.0 * yb8)
                    - 2.0 * xb8 * (-1493.0 + 978.0 * yb2 - 52872.0 * yb4 + 25486.0 * yb6 + 27901.0 * yb8)));
            const complex<double> num12 = power_of<4>(1.0 + xb2) * (1.0 - 22.0 * xb2 + xb4) * yb2 * power_of<3>(-1.0 + yb2);

            const complex<double> denom1 = 108.0 * xb4 * power_of<2>(1.0 + 3.0 * yb2);
            const complex<double> denom2 = 162.0 * xb4 * yb * power_of<3>(1.0 + 3.0 * yb2);
            const complex<double> denom3 = 864.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom4 = 1728.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom5 = 108.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * power_of<4>(xb + 3.0 * xb * yb2);
            const complex<double> denom6 = 108.0 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * power_of<4>(xb + 3.0 * xb * yb2);
            const complex<double> denom7 = 144.0 * xb6 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom8 = 108.0 * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom9 = 108.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom10 = 432.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * power_of<4>(1.0 + 3.0 * yb2);

            const complex<double> logs1 = power_of<2>(myi + xb) * (-1.0 + yb) * (1.0 + yb) * (-8.0 * tb * xb2 * (-4.0 * xb2 * (1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb10 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) - 2.0 * myi * xb9 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) + 8.0 * myi * xb3 * (13.0 + 6.0 * yb - 4.0 * yb3 - 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2))
                     + 8.0 * myi * xb7 * (13.0 + 6.0 * yb - 4.0 * yb3 - 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2)) + xb8 * (45.0 - 18.0 * yb + 28.0 * yb3 + 246.0 * yb5 + yb6 * (215.0 - 4032.0 * ln2) + 63.0 * yb4 * (9.0 + 128.0 * ln2) - 3.0 * yb2 * (73.0 + 1344.0 * ln2)) + 2.0 * xb4 * (-23.0 + 6.0 * yb - 20.0 * yb3 - 114.0 * yb5 + 3.0 * yb6 * (-335.0 + 704.0 * ln2) + 3.0 * yb2 * (-93.0 + 704.0 * ln2) - 3.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb6 * (46.0 - 12.0 * yb + 40.0 * yb3 + 228.0 * yb5 - 6.0 * yb6 * (-335.0 + 704.0 * ln2) - 6.0 * yb2 * (-93.0 + 704.0 * ln2) + 6.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb2 * (-45.0 + 18.0 * yb - 28.0 * yb3 - 246.0 * yb5 - 63.0 * yb4 * (9.0 + 128.0 * ln2) + 3.0 * yb2 * (73.0 + 1344.0 * ln2) + yb6 * (-215.0 + 4032.0 * ln2)) + 4.0 * myi * xb5 * (51.0 + 18.0 * yb - 28.0 * yb3 - 246.0 * yb5 + yb4 * (2569.0 - 8064.0 * ln2) + yb2 * (43.0 + 4032.0 * ln2) + yb6 * (825.0 + 4032.0 * ln2)))
                   + 8.0 * vb * xb2 * (1.0 - 3.0 * yb2 * (-9.0 + 64.0 * ln2) - 3.0 * yb6 * (1.0 + 64.0 * ln2) + yb4 * (-57.0 + 384.0 * ln2) + xb10 * (-1.0 + yb4 * (57.0 - 384.0 * ln2) + 3.0 * yb2 * (-9.0 + 64.0 * ln2) + 3.0 * yb6 * (1.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 3.0 * yb2 * (7.0 + 64.0 * ln2) + 3.0 * yb6 * (17.0 + 64.0 * ln2) - 3.0 * yb4 * (13.0 + 128.0 * ln2)) - 2.0 * myi * xb9 * (-1.0 + 3.0 * yb2 * (7.0 + 64.0 * ln2) + 3.0 * yb6 * (17.0 + 64.0 * ln2) - 3.0 * yb4 * (13.0 + 128.0 * ln2)) + 8.0 * myi * xb3 * (7.0 + yb4 * (833.0 - 1920.0 * ln2) + yb2 * (5.0 + 960.0 * ln2) + yb6 * (211.0 + 960.0 * ln2)) + 8.0 * myi * xb7 * (7.0 + yb4 * (833.0 - 1920.0 * ln2) + yb2 * (5.0 + 960.0 * ln2) + yb6 * (211.0 + 960.0 * ln2)) + xb8 * (69.0 + yb6 * (529.0 - 4032.0 * ln2) - 3.0 * yb2 * (115.0 + 1344.0 * ln2) + 3.0 * yb4 * (545.0 + 2688.0 * ln2)) + xb2 * (-69.0 - 3.0 * yb4 * (545.0 + 2688.0 * ln2) + yb6 * (-529.0 + 4032.0 * ln2) + yb2 * (345.0 + 4032.0 * ln2))
                     + 4.0 * myi * xb5 * (27.0 + yb4 * (1757.0 - 8064.0 * ln2) + yb2 * (41.0 + 4032.0 * ln2) + yb6 * (383.0 + 4032.0 * ln2)) + xb4 * (-70.0 + 66.0 * yb6 * (-39.0 + 64.0 * ln2) + yb2 * (-706.0 + 4224.0 * ln2) - 2.0 * yb4 * (1301.0 + 4224.0 * ln2)) + xb6 * (70.0 + yb2 * (706.0 - 4224.0 * ln2) - 66.0 * yb6 * (-39.0 + 64.0 * ln2) + yb4 * (2602.0 + 8448.0 * ln2))) + power_of<2>(vb) * (1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb14 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2))
                     - 2.0 * myi * xb13 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) + 2.0 * myi * xb5 * (-193.0 - 198.0 * yb + 116.0 * yb3 + 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) + 2.0 * myi * xb9 * (-193.0 - 198.0 * yb + 116.0 * yb3 + 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) - 3.0 * xb4 * (49.0 + 54.0 * yb - 84.0 * yb3 - 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2)) + 3.0 * xb10 * (49.0 + 54.0 * yb - 84.0 * yb3 - 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2))
                     + 4.0 * myi * xb3 * (25.0 - 18.0 * yb - 68.0 * yb3 - 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2)) + 4.0 * myi * xb11 * (25.0 - 18.0 * yb - 68.0 * yb3 - 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2)) - 8.0 * myi * xb7 * (121.0 + 78.0 * yb - 132.0 * yb3 - 1098.0 * yb5 + yb4 * (3611.0 - 4224.0 * ln2) + yb2 * (113.0 + 2112.0 * ln2) + yb6 * (2011.0 + 2112.0 * ln2)) + xb6 * (-99.0 - 114.0 * yb + 412.0 * yb3 + 2262.0 * yb5 + yb2 * (709.0 - 8640.0 * ln2) + yb6 * (1303.0 - 8640.0 * ln2) + 5.0 * yb4 * (251.0 + 3456.0 * ln2)) + xb2 * (-47.0 - 42.0 * yb - 148.0 * yb3 - 66.0 * yb5 + 69.0 * yb2 * (5.0 + 64.0 * ln2) - 3.0 * yb4 * (191.0 + 2944.0 * ln2) + yb6 * (-269.0 + 4416.0 * ln2))
                     + xb8 * (99.0 + 114.0 * yb - 412.0 * yb3 - 2262.0 * yb5 - 5.0 * yb4 * (251.0 + 3456.0 * ln2) + yb6 * (-1303.0 + 8640.0 * ln2) + yb2 * (-709.0 + 8640.0 * ln2)) + xb12 * (47.0 + 42.0 * yb + 148.0 * yb3 + 66.0 * yb5 + yb6 * (269.0 - 4416.0 * ln2) - 69.0 * yb2 * (5.0 + 64.0 * ln2) + yb4 * (573.0 + 8832.0 * ln2)))) + power_of<2>(tb) * (8.0 * vb * xb2 * (1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb14 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) - 2.0 * myi * xb13 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2))
                     + 2.0 * myi * xb5 * (-193.0 + 198.0 * yb - 116.0 * yb3 - 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) + 2.0 * myi * xb9 * (-193.0 + 198.0 * yb - 116.0 * yb3 - 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) - 3.0 * xb4 * (49.0 - 54.0 * yb + 84.0 * yb3 + 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2)) + 3.0 * xb10 * (49.0 - 54.0 * yb + 84.0 * yb3 + 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2)) + 4.0 * myi * xb3 * (25.0 + 18.0 * yb + 68.0 * yb3 + 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2))
                     + 4.0 * myi * xb11 * (25.0 + 18.0 * yb + 68.0 * yb3 + 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2)) - 8.0 * myi * xb7 * (121.0 - 78.0 * yb + 132.0 * yb3 + 1098.0 * yb5 + yb4 * (3611.0 - 4224.0 * ln2) + yb2 * (113.0 + 2112.0 * ln2) + yb6 * (2011.0 + 2112.0 * ln2)) + xb6 * (-99.0 + 114.0 * yb - 412.0 * yb3 - 2262.0 * yb5 + yb2 * (709.0 - 8640.0 * ln2) + yb6 * (1303.0 - 8640.0 * ln2) + 5.0 * yb4 * (251.0 + 3456.0 * ln2)) + xb2 * (-47.0 + 42.0 * yb + 148.0 * yb3 + 66.0 * yb5 + 69.0 * yb2 * (5.0 + 64.0 * ln2) - 3.0 * yb4 * (191.0 + 2944.0 * ln2) + yb6 * (-269.0 + 4416.0 * ln2)) - xb12 * (-47.0 + 42.0 * yb + 148.0 * yb3 + 66.0 * yb5 + 69.0 * yb2 * (5.0 + 64.0 * ln2) - 3.0 * yb4 * (191.0 + 2944.0 * ln2) + yb6 * (-269.0 + 4416.0 * ln2))
                     + xb8 * (99.0 - 114.0 * yb + 412.0 * yb3 + 2262.0 * yb5 - 5.0 * yb4 * (251.0 + 3456.0 * ln2) + yb6 * (-1303.0 + 8640.0 * ln2) + yb2 * (-709.0 + 8640.0 * ln2))) + power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb14 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 2.0 * myi * xb13 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 2.0 * myi * xb5 * (-385.0 + yb6 * (-5593.0 + 192.0 * ln2) + yb2 * (2873.0 + 192.0 * ln2) - yb4 * (21439.0 + 384.0 * ln2)) + 2.0 * myi * xb9 * (-385.0 + yb6 * (-5593.0 + 192.0 * ln2) + yb2 * (2873.0 + 192.0 * ln2) - yb4 * (21439.0 + 384.0 * ln2))
                     + 4.0 * myi * xb3 * (37.0 + yb4 * (2587.0 - 4224.0 * ln2) + yb2 * (67.0 + 2112.0 * ln2) + yb6 * (733.0 + 2112.0 * ln2)) + 4.0 * myi * xb11 * (37.0 + yb4 * (2587.0 - 4224.0 * ln2) + yb2 * (67.0 + 2112.0 * ln2) + yb6 * (733.0 + 2112.0 * ln2)) - 8.0 * myi * xb7 * (229.0 + yb4 * (7131.0 - 4224.0 * ln2) + 3.0 * yb2 * (65.0 + 704.0 * ln2) + yb6 * (4061.0 + 2112.0 * ln2)) - xb4 * (363.0 + yb4 * (19637.0 - 8064.0 * ln2) + yb2 * (-1411.0 + 4032.0 * ln2) + yb6 * (6659.0 + 4032.0 * ln2)) + xb10 * (363.0 + yb4 * (19637.0 - 8064.0 * ln2) + yb2 * (-1411.0 + 4032.0 * ln2) + yb6 * (6659.0 + 4032.0 * ln2)) + xb2 * (-23.0 + yb4 * (375.0 - 8832.0 * ln2) + 3.0 * yb6 * (-5.0 + 1472.0 * ln2) + yb2 * (399.0 + 4416.0 * ln2)) - xb6 * (339.0 + yb4 * (3661.0 - 17280.0 * ln2) + 5.0 * yb2 * (209.0 + 1728.0 * ln2) + yb6 * (4587.0 + 8640.0 * ln2))
                     + xb8 * (339.0 + yb4 * (3661.0 - 17280.0 * ln2) + 5.0 * yb2 * (209.0 + 1728.0 * ln2) + yb6 * (4587.0 + 8640.0 * ln2)) + xb12 * (23.0 + yb6 * (15.0 - 4416.0 * ln2) - 3.0 * yb2 * (133.0 + 1472.0 * ln2) + yb4 * (-375.0 + 8832.0 * ln2))) - 4.0 * xb2 * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb14 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 2.0 * myi * xb13 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 2.0 * myi * xb5 * (-193.0 + 192.0 * yb - 128.0 * yb3 - 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2))
                     + 2.0 * myi * xb9 * (-193.0 + 192.0 * yb - 128.0 * yb3 - 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2)) + 4.0 * myi * xb3 * (37.0 + 24.0 * yb + 48.0 * yb3 - 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) + 4.0 * myi * xb11 * (37.0 + 24.0 * yb + 48.0 * yb3 - 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) - 8.0 * myi * xb7 * (133.0 - 72.0 * yb + 112.0 * yb3 + 984.0 * yb5 + yb4 * (3883.0 - 4224.0 * ln2) + 11.0 * yb2 * (17.0 + 192.0 * ln2) + yb6 * (2293.0 + 2112.0 * ln2)) - xb4 * (171.0 - 144.0 * yb + 224.0 * yb3 + 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2))
                     + xb10 * (171.0 - 144.0 * yb + 224.0 * yb3 + 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2)) + xb2 * (-23.0 + 48.0 * yb + 96.0 * yb3 - 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) - xb12 * (-23.0 + 48.0 * yb + 96.0 * yb3 - 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) - xb6 * (147.0 - 96.0 * yb + 320.0 * yb3 + 1824.0 * yb5 + 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb2 * (-139.0 + 8640.0 * ln2) - yb4 * (691.0 + 17280.0 * ln2)) + xb8 * (147.0 - 96.0 * yb + 320.0 * yb3 + 1824.0 * yb5 + 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb2 * (-139.0 + 8640.0 * ln2) - yb4 * (691.0 + 17280.0 * ln2))))
                 - 4.0 * xb2 * (8.0 * vb * xb2 * (1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb10 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) - 2.0 * myi * xb9 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) + 8.0 * myi * xb3 * (13.0 - 6.0 * yb + 4.0 * yb3 + 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2)) + 8.0 * myi * xb7 * (13.0 - 6.0 * yb + 4.0 * yb3 + 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2))
                     + xb8 * (45.0 + 18.0 * yb - 28.0 * yb3 - 246.0 * yb5 + yb6 * (215.0 - 4032.0 * ln2) + 63.0 * yb4 * (9.0 + 128.0 * ln2) - 3.0 * yb2 * (73.0 + 1344.0 * ln2)) + 2.0 * xb4 * (-23.0 - 6.0 * yb + 20.0 * yb3 + 114.0 * yb5 + 3.0 * yb6 * (-335.0 + 704.0 * ln2) + 3.0 * yb2 * (-93.0 + 704.0 * ln2) - 3.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb6 * (46.0 + 12.0 * yb - 40.0 * yb3 - 228.0 * yb5 - 6.0 * yb6 * (-335.0 + 704.0 * ln2) - 6.0 * yb2 * (-93.0 + 704.0 * ln2) + 6.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb2 * (-45.0 - 18.0 * yb + 28.0 * yb3 + 246.0 * yb5 - 63.0 * yb4 * (9.0 + 128.0 * ln2) + 3.0 * yb2 * (73.0 + 1344.0 * ln2) + yb6 * (-215.0 + 4032.0 * ln2)) + 4.0 * myi * xb5 * (51.0 - 18.0 * yb + 28.0 * yb3 + 246.0 * yb5 + yb4 * (2569.0 - 8064.0 * ln2) + yb2 * (43.0 + 4032.0 * ln2) + yb6 * (825.0 + 4032.0 * ln2)))
                   - 4.0 * xb2 * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb10 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 2.0 * myi * xb9 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 4.0 * myi * xb5 * (75.0 + yb4 * (3381.0 - 8064.0 * ln2) + 9.0 * yb2 * (5.0 + 448.0 * ln2) + 7.0 * yb6 * (181.0 + 576.0 * ln2)) + 8.0 * myi * xb3 * (19.0 + yb4 * (1373.0 - 1920.0 * ln2) + yb2 * (-67.0 + 960.0 * ln2) + yb6 * (371.0 + 960.0 * ln2)) + 8.0 * myi * xb7 * (19.0 + yb4 * (1373.0 - 1920.0 * ln2) + yb2 * (-67.0 + 960.0 * ln2) + yb6 * (371.0 + 960.0 * ln2)) + 3.0 * xb2 * (-7.0 + yb4 * (167.0 - 2688.0 * ln2) + 3.0 * yb6 * (11.0 + 448.0 * ln2) + yb2 * (31.0 + 1344.0 * ln2))
                     - 3.0 * xb8 * (-7.0 + yb4 * (167.0 - 2688.0 * ln2) + 3.0 * yb6 * (11.0 + 448.0 * ln2) + yb2 * (31.0 + 1344.0 * ln2)) + 2.0 * xb4 * (-11.0 + 3.0 * yb6 * (-241.0 + 704.0 * ln2) + yb2 * (-205.0 + 2112.0 * ln2) - yb4 * (757.0 + 4224.0 * ln2)) + xb6 * (22.0 + yb2 * (410.0 - 4224.0 * ln2) - 6.0 * yb6 * (-241.0 + 704.0 * ln2) + 2.0 * yb4 * (757.0 + 4224.0 * ln2))) + power_of<2>(vb) * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb14 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) - 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 2.0 * myi * xb13 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2))
                     + 2.0 * myi * xb5 * (-193.0 - 192.0 * yb + 128.0 * yb3 + 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2)) + 2.0 * myi * xb9 * (-193.0 - 192.0 * yb + 128.0 * yb3 + 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2)) + 4.0 * myi * xb3 * (37.0 - 24.0 * yb - 48.0 * yb3 + 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) + 4.0 * myi * xb11 * (37.0 - 24.0 * yb - 48.0 * yb3 + 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) - 8.0 * myi * xb7 * (133.0 + 72.0 * yb - 112.0 * yb3 - 984.0 * yb5 + yb4 * (3883.0 - 4224.0 * ln2) + 11.0 * yb2 * (17.0 + 192.0 * ln2) + yb6 * (2293.0 + 2112.0 * ln2))
                     - xb4 * (171.0 + 144.0 * yb - 224.0 * yb3 - 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2)) + xb10 * (171.0 + 144.0 * yb - 224.0 * yb3 - 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2)) + xb2 * (-23.0 - 48.0 * yb - 96.0 * yb3 + 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) - xb12 * (-23.0 - 48.0 * yb - 96.0 * yb3 + 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) + xb8 * (147.0 + 96.0 * yb - 320.0 * yb3 - 1824.0 * yb5 + 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb2 * (-139.0 + 8640.0 * ln2) - yb4 * (691.0 + 17280.0 * ln2))
                     + xb6 * (-147.0 - 96.0 * yb + 320.0 * yb3 + 1824.0 * yb5 + yb2 * (139.0 - 8640.0 * ln2) - 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb4 * (691.0 + 17280.0 * ln2)))));
            const complex<double> logs2 = power_of<2>(-myi + xb) * (-1.0 + yb) * (1.0 + yb) * (-8.0 * tb * xb2 * (-4.0 * xb2 * (1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb10 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) + 2.0 * myi * xb9 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) - 8.0 * myi * xb3 * (13.0 + 6.0 * yb - 4.0 * yb3 - 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2))
                     - 8.0 * myi * xb7 * (13.0 + 6.0 * yb - 4.0 * yb3 - 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2)) + xb8 * (45.0 - 18.0 * yb + 28.0 * yb3 + 246.0 * yb5 + yb6 * (215.0 - 4032.0 * ln2) + 63.0 * yb4 * (9.0 + 128.0 * ln2) - 3.0 * yb2 * (73.0 + 1344.0 * ln2)) + 2.0 * xb4 * (-23.0 + 6.0 * yb - 20.0 * yb3 - 114.0 * yb5 + 3.0 * yb6 * (-335.0 + 704.0 * ln2) + 3.0 * yb2 * (-93.0 + 704.0 * ln2) - 3.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb6 * (46.0 - 12.0 * yb + 40.0 * yb3 + 228.0 * yb5 - 6.0 * yb6 * (-335.0 + 704.0 * ln2) - 6.0 * yb2 * (-93.0 + 704.0 * ln2) + 6.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb2 * (-45.0 + 18.0 * yb - 28.0 * yb3 - 246.0 * yb5 - 63.0 * yb4 * (9.0 + 128.0 * ln2) + 3.0 * yb2 * (73.0 + 1344.0 * ln2) + yb6 * (-215.0 + 4032.0 * ln2)) - 4.0 * myi * xb5 * (51.0 + 18.0 * yb - 28.0 * yb3 - 246.0 * yb5 + yb4 * (2569.0 - 8064.0 * ln2) + yb2 * (43.0 + 4032.0 * ln2) + yb6 * (825.0 + 4032.0 * ln2)))
                   + 8.0 * vb * xb2 * (1.0 - 3.0 * yb2 * (-9.0 + 64.0 * ln2) - 3.0 * yb6 * (1.0 + 64.0 * ln2) + yb4 * (-57.0 + 384.0 * ln2) + xb10 * (-1.0 + yb4 * (57.0 - 384.0 * ln2) + 3.0 * yb2 * (-9.0 + 64.0 * ln2) + 3.0 * yb6 * (1.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 3.0 * yb2 * (7.0 + 64.0 * ln2) + 3.0 * yb6 * (17.0 + 64.0 * ln2) - 3.0 * yb4 * (13.0 + 128.0 * ln2)) + 2.0 * myi * xb9 * (-1.0 + 3.0 * yb2 * (7.0 + 64.0 * ln2) + 3.0 * yb6 * (17.0 + 64.0 * ln2) - 3.0 * yb4 * (13.0 + 128.0 * ln2)) - 8.0 * myi * xb3 * (7.0 + yb4 * (833.0 - 1920.0 * ln2) + yb2 * (5.0 + 960.0 * ln2) + yb6 * (211.0 + 960.0 * ln2)) - 8.0 * myi * xb7 * (7.0 + yb4 * (833.0 - 1920.0 * ln2) + yb2 * (5.0 + 960.0 * ln2) + yb6 * (211.0 + 960.0 * ln2)) + xb8 * (69.0 + yb6 * (529.0 - 4032.0 * ln2) - 3.0 * yb2 * (115.0 + 1344.0 * ln2) + 3.0 * yb4 * (545.0 + 2688.0 * ln2)) + xb2 * (-69.0 - 3.0 * yb4 * (545.0 + 2688.0 * ln2) + yb6 * (-529.0 + 4032.0 * ln2) + yb2 * (345.0 + 4032.0 * ln2))
                     - 4.0 * myi * xb5 * (27.0 + yb4 * (1757.0 - 8064.0 * ln2) + yb2 * (41.0 + 4032.0 * ln2) + yb6 * (383.0 + 4032.0 * ln2)) + xb4 * (-70.0 + 66.0 * yb6 * (-39.0 + 64.0 * ln2) + yb2 * (-706.0 + 4224.0 * ln2) - 2.0 * yb4 * (1301.0 + 4224.0 * ln2)) + xb6 * (70.0 + yb2 * (706.0 - 4224.0 * ln2) - 66.0 * yb6 * (-39.0 + 64.0 * ln2) + yb4 * (2602.0 + 8448.0 * ln2))) + power_of<2>(vb) * (1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb14 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2))
                     + 2.0 * myi * xb13 * (-1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) - 2.0 * myi * xb5 * (-193.0 - 198.0 * yb + 116.0 * yb3 + 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) - 2.0 * myi * xb9 * (-193.0 - 198.0 * yb + 116.0 * yb3 + 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) - 3.0 * xb4 * (49.0 + 54.0 * yb - 84.0 * yb3 - 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2)) + 3.0 * xb10 * (49.0 + 54.0 * yb - 84.0 * yb3 - 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2))
                     - 4.0 * myi * xb3 * (25.0 - 18.0 * yb - 68.0 * yb3 - 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2)) - 4.0 * myi * xb11 * (25.0 - 18.0 * yb - 68.0 * yb3 - 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2)) + 8.0 * myi * xb7 * (121.0 + 78.0 * yb - 132.0 * yb3 - 1098.0 * yb5 + yb4 * (3611.0 - 4224.0 * ln2) + yb2 * (113.0 + 2112.0 * ln2) + yb6 * (2011.0 + 2112.0 * ln2)) + xb6 * (-99.0 - 114.0 * yb + 412.0 * yb3 + 2262.0 * yb5 + yb2 * (709.0 - 8640.0 * ln2) + yb6 * (1303.0 - 8640.0 * ln2) + 5.0 * yb4 * (251.0 + 3456.0 * ln2)) + xb2 * (-47.0 - 42.0 * yb - 148.0 * yb3 - 66.0 * yb5 + 69.0 * yb2 * (5.0 + 64.0 * ln2) - 3.0 * yb4 * (191.0 + 2944.0 * ln2) + yb6 * (-269.0 + 4416.0 * ln2))
                     + xb8 * (99.0 + 114.0 * yb - 412.0 * yb3 - 2262.0 * yb5 - 5.0 * yb4 * (251.0 + 3456.0 * ln2) + yb6 * (-1303.0 + 8640.0 * ln2) + yb2 * (-709.0 + 8640.0 * ln2)) + xb12 * (47.0 + 42.0 * yb + 148.0 * yb3 + 66.0 * yb5 + yb6 * (269.0 - 4416.0 * ln2) - 69.0 * yb2 * (5.0 + 64.0 * ln2) + yb4 * (573.0 + 8832.0 * ln2)))) + power_of<2>(tb) * (8.0 * vb * xb2 * (1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb14 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) + 2.0 * myi * xb13 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2))
                     - 2.0 * myi * xb5 * (-193.0 + 198.0 * yb - 116.0 * yb3 - 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) - 2.0 * myi * xb9 * (-193.0 + 198.0 * yb - 116.0 * yb3 - 2130.0 * yb5 + yb6 * (-3283.0 + 192.0 * ln2) + yb2 * (1447.0 + 192.0 * ln2) - yb4 * (12275.0 + 384.0 * ln2)) - 3.0 * xb4 * (49.0 - 54.0 * yb + 84.0 * yb3 + 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2)) + 3.0 * xb10 * (49.0 - 54.0 * yb + 84.0 * yb3 + 738.0 * yb5 + yb4 * (3171.0 - 2688.0 * ln2) + 7.0 * yb2 * (-1.0 + 192.0 * ln2) + yb6 * (1363.0 + 1344.0 * ln2)) - 4.0 * myi * xb3 * (25.0 + 18.0 * yb + 68.0 * yb3 + 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2))
                     - 4.0 * myi * xb11 * (25.0 + 18.0 * yb + 68.0 * yb3 + 42.0 * yb5 + yb4 * (2107.0 - 4224.0 * ln2) + 3.0 * yb6 * (201.0 + 704.0 * ln2) + yb2 * (49.0 + 2112.0 * ln2)) + 8.0 * myi * xb7 * (121.0 - 78.0 * yb + 132.0 * yb3 + 1098.0 * yb5 + yb4 * (3611.0 - 4224.0 * ln2) + yb2 * (113.0 + 2112.0 * ln2) + yb6 * (2011.0 + 2112.0 * ln2)) + xb6 * (-99.0 + 114.0 * yb - 412.0 * yb3 - 2262.0 * yb5 + yb2 * (709.0 - 8640.0 * ln2) + yb6 * (1303.0 - 8640.0 * ln2) + 5.0 * yb4 * (251.0 + 3456.0 * ln2)) + xb2 * (-47.0 + 42.0 * yb + 148.0 * yb3 + 66.0 * yb5 + 69.0 * yb2 * (5.0 + 64.0 * ln2) - 3.0 * yb4 * (191.0 + 2944.0 * ln2) + yb6 * (-269.0 + 4416.0 * ln2)) - xb12 * (-47.0 + 42.0 * yb + 148.0 * yb3 + 66.0 * yb5 + 69.0 * yb2 * (5.0 + 64.0 * ln2) - 3.0 * yb4 * (191.0 + 2944.0 * ln2) + yb6 * (-269.0 + 4416.0 * ln2))
                     + xb8 * (99.0 - 114.0 * yb + 412.0 * yb3 + 2262.0 * yb5 - 5.0 * yb4 * (251.0 + 3456.0 * ln2) + yb6 * (-1303.0 + 8640.0 * ln2) + yb2 * (-709.0 + 8640.0 * ln2))) + power_of<2>(vb) * power_of<2>(-1.0 + xb2) * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb14 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 2.0 * myi * xb13 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 2.0 * myi * xb5 * (-385.0 + yb6 * (-5593.0 + 192.0 * ln2) + yb2 * (2873.0 + 192.0 * ln2) - yb4 * (21439.0 + 384.0 * ln2)) - 2.0 * myi * xb9 * (-385.0 + yb6 * (-5593.0 + 192.0 * ln2) + yb2 * (2873.0 + 192.0 * ln2) - yb4 * (21439.0 + 384.0 * ln2))
                     - 4.0 * myi * xb3 * (37.0 + yb4 * (2587.0 - 4224.0 * ln2) + yb2 * (67.0 + 2112.0 * ln2) + yb6 * (733.0 + 2112.0 * ln2)) - 4.0 * myi * xb11 * (37.0 + yb4 * (2587.0 - 4224.0 * ln2) + yb2 * (67.0 + 2112.0 * ln2) + yb6 * (733.0 + 2112.0 * ln2)) + 8.0 * myi * xb7 * (229.0 + yb4 * (7131.0 - 4224.0 * ln2) + 3.0 * yb2 * (65.0 + 704.0 * ln2) + yb6 * (4061.0 + 2112.0 * ln2)) - xb4 * (363.0 + yb4 * (19637.0 - 8064.0 * ln2) + yb2 * (-1411.0 + 4032.0 * ln2) + yb6 * (6659.0 + 4032.0 * ln2)) + xb10 * (363.0 + yb4 * (19637.0 - 8064.0 * ln2) + yb2 * (-1411.0 + 4032.0 * ln2) + yb6 * (6659.0 + 4032.0 * ln2)) + xb2 * (-23.0 + yb4 * (375.0 - 8832.0 * ln2) + 3.0 * yb6 * (-5.0 + 1472.0 * ln2) + yb2 * (399.0 + 4416.0 * ln2)) - xb6 * (339.0 + yb4 * (3661.0 - 17280.0 * ln2) + 5.0 * yb2 * (209.0 + 1728.0 * ln2) + yb6 * (4587.0 + 8640.0 * ln2))
                     + xb8 * (339.0 + yb4 * (3661.0 - 17280.0 * ln2) + 5.0 * yb2 * (209.0 + 1728.0 * ln2) + yb6 * (4587.0 + 8640.0 * ln2)) + xb12 * (23.0 + yb6 * (15.0 - 4416.0 * ln2) - 3.0 * yb2 * (133.0 + 1472.0 * ln2) + yb4 * (-375.0 + 8832.0 * ln2))) - 4.0 * xb2 * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb14 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 2.0 * myi * xb13 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 2.0 * myi * xb5 * (-193.0 + 192.0 * yb - 128.0 * yb3 - 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2))
                     - 2.0 * myi * xb9 * (-193.0 + 192.0 * yb - 128.0 * yb3 - 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2)) - 4.0 * myi * xb3 * (37.0 + 24.0 * yb + 48.0 * yb3 - 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) - 4.0 * myi * xb11 * (37.0 + 24.0 * yb + 48.0 * yb3 - 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) + 8.0 * myi * xb7 * (133.0 - 72.0 * yb + 112.0 * yb3 + 984.0 * yb5 + yb4 * (3883.0 - 4224.0 * ln2) + 11.0 * yb2 * (17.0 + 192.0 * ln2) + yb6 * (2293.0 + 2112.0 * ln2)) - xb4 * (171.0 - 144.0 * yb + 224.0 * yb3 + 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2))
                     + xb10 * (171.0 - 144.0 * yb + 224.0 * yb3 + 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2)) + xb2 * (-23.0 + 48.0 * yb + 96.0 * yb3 - 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) - xb12 * (-23.0 + 48.0 * yb + 96.0 * yb3 - 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) - xb6 * (147.0 - 96.0 * yb + 320.0 * yb3 + 1824.0 * yb5 + 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb2 * (-139.0 + 8640.0 * ln2) - yb4 * (691.0 + 17280.0 * ln2)) + xb8 * (147.0 - 96.0 * yb + 320.0 * yb3 + 1824.0 * yb5 + 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb2 * (-139.0 + 8640.0 * ln2) - yb4 * (691.0 + 17280.0 * ln2))))
                 - 4.0 * xb2 * (8.0 * vb * xb2 * (1.0 - 6.0 * yb - 12.0 * yb3 + 18.0 * yb5 + yb6 * (3.0 - 192.0 * ln2) + yb2 * (9.0 - 192.0 * ln2) + yb4 * (-45.0 + 384.0 * ln2) + xb10 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + yb4 * (45.0 - 384.0 * ln2) + 3.0 * yb2 * (-3.0 + 64.0 * ln2) + 3.0 * yb6 * (-1.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) + 2.0 * myi * xb9 * (-1.0 + 6.0 * yb + 12.0 * yb3 - 18.0 * yb5 + 3.0 * yb2 * (13.0 + 64.0 * ln2) + 3.0 * yb6 * (15.0 + 64.0 * ln2) - 3.0 * yb4 * (17.0 + 128.0 * ln2)) - 8.0 * myi * xb3 * (13.0 - 6.0 * yb + 4.0 * yb3 + 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2)) - 8.0 * myi * xb7 * (13.0 - 6.0 * yb + 4.0 * yb3 + 66.0 * yb5 + yb4 * (1103.0 - 1920.0 * ln2) + 3.0 * yb6 * (97.0 + 320.0 * ln2) + yb2 * (-31.0 + 960.0 * ln2))
                     + xb8 * (45.0 + 18.0 * yb - 28.0 * yb3 - 246.0 * yb5 + yb6 * (215.0 - 4032.0 * ln2) + 63.0 * yb4 * (9.0 + 128.0 * ln2) - 3.0 * yb2 * (73.0 + 1344.0 * ln2)) + 2.0 * xb4 * (-23.0 - 6.0 * yb + 20.0 * yb3 + 114.0 * yb5 + 3.0 * yb6 * (-335.0 + 704.0 * ln2) + 3.0 * yb2 * (-93.0 + 704.0 * ln2) - 3.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb6 * (46.0 + 12.0 * yb - 40.0 * yb3 - 228.0 * yb5 - 6.0 * yb6 * (-335.0 + 704.0 * ln2) - 6.0 * yb2 * (-93.0 + 704.0 * ln2) + 6.0 * yb4 * (343.0 + 1408.0 * ln2)) + xb2 * (-45.0 - 18.0 * yb + 28.0 * yb3 + 246.0 * yb5 - 63.0 * yb4 * (9.0 + 128.0 * ln2) + 3.0 * yb2 * (73.0 + 1344.0 * ln2) + yb6 * (-215.0 + 4032.0 * ln2)) - 4.0 * myi * xb5 * (51.0 - 18.0 * yb + 28.0 * yb3 + 246.0 * yb5 + yb4 * (2569.0 - 8064.0 * ln2) + yb2 * (43.0 + 4032.0 * ln2) + yb6 * (825.0 + 4032.0 * ln2)))
                   - 4.0 * xb2 * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb10 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 2.0 * myi * xb9 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) - 4.0 * myi * xb5 * (75.0 + yb4 * (3381.0 - 8064.0 * ln2) + 9.0 * yb2 * (5.0 + 448.0 * ln2) + 7.0 * yb6 * (181.0 + 576.0 * ln2)) - 8.0 * myi * xb3 * (19.0 + yb4 * (1373.0 - 1920.0 * ln2) + yb2 * (-67.0 + 960.0 * ln2) + yb6 * (371.0 + 960.0 * ln2)) - 8.0 * myi * xb7 * (19.0 + yb4 * (1373.0 - 1920.0 * ln2) + yb2 * (-67.0 + 960.0 * ln2) + yb6 * (371.0 + 960.0 * ln2)) + 3.0 * xb2 * (-7.0 + yb4 * (167.0 - 2688.0 * ln2) + 3.0 * yb6 * (11.0 + 448.0 * ln2) + yb2 * (31.0 + 1344.0 * ln2))
                     - 3.0 * xb8 * (-7.0 + yb4 * (167.0 - 2688.0 * ln2) + 3.0 * yb6 * (11.0 + 448.0 * ln2) + yb2 * (31.0 + 1344.0 * ln2)) + 2.0 * xb4 * (-11.0 + 3.0 * yb6 * (-241.0 + 704.0 * ln2) + yb2 * (-205.0 + 2112.0 * ln2) - yb4 * (757.0 + 4224.0 * ln2)) + xb6 * (22.0 + yb2 * (410.0 - 4224.0 * ln2) - 6.0 * yb6 * (-241.0 + 704.0 * ln2) + 2.0 * yb4 * (757.0 + 4224.0 * ln2))) + power_of<2>(vb) * (1.0 + yb6 * (9.0 - 192.0 * ln2) - 3.0 * yb2 * (3.0 + 64.0 * ln2) + yb4 * (-33.0 + 384.0 * ln2) + xb14 * (-1.0 + yb4 * (33.0 - 384.0 * ln2) + 3.0 * yb6 * (-3.0 + 64.0 * ln2) + 3.0 * yb2 * (3.0 + 64.0 * ln2)) + 2.0 * myi * xb * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2)) + 2.0 * myi * xb13 * (-1.0 + 3.0 * yb6 * (13.0 + 64.0 * ln2) + 3.0 * yb2 * (19.0 + 64.0 * ln2) - 3.0 * yb4 * (21.0 + 128.0 * ln2))
                     - 2.0 * myi * xb5 * (-193.0 - 192.0 * yb + 128.0 * yb3 + 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2)) - 2.0 * myi * xb9 * (-193.0 - 192.0 * yb + 128.0 * yb3 + 2112.0 * yb5 + 3.0 * yb6 * (-1011.0 + 64.0 * ln2) + yb2 * (1721.0 + 192.0 * ln2) - yb4 * (12799.0 + 384.0 * ln2)) - 4.0 * myi * xb3 * (37.0 - 24.0 * yb - 48.0 * yb3 + 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) - 4.0 * myi * xb11 * (37.0 - 24.0 * yb - 48.0 * yb3 + 72.0 * yb5 + yb4 * (2635.0 - 4224.0 * ln2) + yb2 * (-5.0 + 2112.0 * ln2) + yb6 * (757.0 + 2112.0 * ln2)) + 8.0 * myi * xb7 * (133.0 + 72.0 * yb - 112.0 * yb3 - 984.0 * yb5 + yb4 * (3883.0 - 4224.0 * ln2) + 11.0 * yb2 * (17.0 + 192.0 * ln2) + yb6 * (2293.0 + 2112.0 * ln2))
                     - xb4 * (171.0 + 144.0 * yb - 224.0 * yb3 - 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2)) + xb10 * (171.0 + 144.0 * yb - 224.0 * yb3 - 1968.0 * yb5 + yb4 * (11093.0 - 8064.0 * ln2) + yb2 * (-403.0 + 4032.0 * ln2) + yb6 * (4147.0 + 4032.0 * ln2)) + xb2 * (-23.0 - 48.0 * yb - 96.0 * yb3 + 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) - xb12 * (-23.0 - 48.0 * yb - 96.0 * yb3 + 144.0 * yb5 + yb4 * (471.0 - 8832.0 * ln2) + 3.0 * yb2 * (85.0 + 1472.0 * ln2) + yb6 * (33.0 + 4416.0 * ln2)) + xb8 * (147.0 + 96.0 * yb - 320.0 * yb3 - 1824.0 * yb5 + 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb2 * (-139.0 + 8640.0 * ln2) - yb4 * (691.0 + 17280.0 * ln2))
                     + xb6 * (-147.0 - 96.0 * yb + 320.0 * yb3 + 1824.0 * yb5 + yb2 * (139.0 - 8640.0 * ln2) - 15.0 * yb6 * (5.0 + 576.0 * ln2) + yb4 * (691.0 + 17280.0 * ln2)))));
            const complex<double> logs3 = (-1.0 + yb) * (1.0 + yb) * (-4.0 * xb2 * (2.0 * xb6 * (12.0 + 9.0 * yb - 14.0 * yb3 - 123.0 * yb5 + yb2 * (1.0 - 186.0 * ln2) + yb6 * (221.0 - 186.0 * ln2) + yb4 * (406.0 + 372.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb12 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) - 3.0 * xb2 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-1.0 + yb2 * (-1.0 + 18.0 * ln2) + 2.0 * yb * (1.0 + log(512.0))) - 3.0 * xb10 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-1.0 + yb2 * (-1.0 + 18.0 * ln2) + 2.0 * yb * (1.0 + log(512.0))) + xb4 * (12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 + yb6 * (160.0 - 243.0 * ln2) - 9.0 * yb2 * (8.0 + 27.0 * ln2) + 54.0 * yb4 * (10.0 + log(512.0))) + xb8 * (12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 + yb6 * (160.0 - 243.0 * ln2) - 9.0 * yb2 * (8.0 + 27.0 * ln2) + 54.0 * yb4 * (10.0 + log(512.0))))
                 + power_of<2>(vb) * (-60.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * ln2 - 60.0 * xb14 * yb2 * power_of<2>(-1.0 + yb2) * ln2 + 2.0 * xb8 * (-48.0 - 36.0 * yb + 56.0 * yb3 + 492.0 * yb5 + yb6 * (-884.0 + 129.0 * ln2) + yb2 * (-4.0 + 129.0 * ln2) - 2.0 * yb4 * (812.0 + 129.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb16 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + 4.0 * xb6 * (-12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 - 30.0 * yb4 * (18.0 + ln2) + 5.0 * yb6 * (-32.0 + log(8.0)) + 3.0 * yb2 * (24.0 + log(32.0))) + 4.0 * xb10 * (-12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 - 30.0 * yb4 * (18.0 + ln2) + 5.0 * yb6 * (-32.0 + log(8.0)) + 3.0 * yb2 * (24.0 + log(32.0))) - 12.0 * xb4 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + log(2048.0)) + yb2 * (1.0 + log(2048.0))) - 12.0 * xb12 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + log(2048.0)) + yb2 * (1.0 + log(2048.0))))
                 + vb * xb2 * (-4.0 * xb6 * (-30.0 - 21.0 * yb + 38.0 * yb3 + 303.0 * yb5 - 12.0 * yb4 * (79.0 + 124.0 * ln2) + yb6 * (-583.0 + 744.0 * ln2) + yb2 * (-39.0 + 744.0 * ln2)) + xb4 * (48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb6 * (515.0 - 1944.0 * ln2) - yb2 * (425.0 + 1944.0 * ln2) + yb4 * (2422.0 + 3888.0 * ln2)) + xb8 * (48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb6 * (515.0 - 1944.0 * ln2) - yb2 * (425.0 + 1944.0 * ln2) + yb4 * (2422.0 + 3888.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-1.0 + yb2 * (-1.0 + ln256) + yb * (2.0 + ln256)) + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-1.0 + yb2 * (-1.0 + ln256) + yb * (2.0 + ln256)) - 2.0 * xb2 * (6.0 - 3.0 * yb - 22.0 * yb3 - 39.0 * yb5 + 9.0 * yb2 * (-1.0 + 24.0 * ln2) + yb6 * (71.0 + 216.0 * ln2) - 36.0 * yb4 * (-7.0 + log(4096.0)))
                   - 2.0 * xb10 * (6.0 - 3.0 * yb - 22.0 * yb3 - 39.0 * yb5 + 9.0 * yb2 * (-1.0 + 24.0 * ln2) + yb6 * (71.0 + 216.0 * ln2) - 36.0 * yb4 * (-7.0 + log(4096.0)))));
            const complex<double> logs4 = (-1.0 + yb) * (1.0 + yb) * (-4.0 * xb2 * (2.0 * xb6 * (12.0 - 9.0 * yb + 14.0 * yb3 + 123.0 * yb5 + yb2 * (1.0 - 186.0 * ln2) + yb6 * (221.0 - 186.0 * ln2) + yb4 * (406.0 + 372.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb12 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) - 3.0 * xb2 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-1.0 + yb2 * (-1.0 + 18.0 * ln2) - 2.0 * yb * (1.0 + log(512.0))) - 3.0 * xb10 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-1.0 + yb2 * (-1.0 + 18.0 * ln2) - 2.0 * yb * (1.0 + log(512.0))) + xb4 * (12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 + yb6 * (160.0 - 243.0 * ln2) - 9.0 * yb2 * (8.0 + 27.0 * ln2) + 54.0 * yb4 * (10.0 + log(512.0))) + xb8 * (12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 + yb6 * (160.0 - 243.0 * ln2) - 9.0 * yb2 * (8.0 + 27.0 * ln2) + 54.0 * yb4 * (10.0 + log(512.0))))
                 + power_of<2>(tb) * (-60.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * ln2 - 60.0 * xb14 * yb2 * power_of<2>(-1.0 + yb2) * ln2 + 2.0 * xb8 * (-48.0 + 36.0 * yb - 56.0 * yb3 - 492.0 * yb5 + yb6 * (-884.0 + 129.0 * ln2) + yb2 * (-4.0 + 129.0 * ln2) - 2.0 * yb4 * (812.0 + 129.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb16 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + 4.0 * xb6 * (-12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 - 30.0 * yb4 * (18.0 + ln2) + 5.0 * yb6 * (-32.0 + log(8.0)) + 3.0 * yb2 * (24.0 + log(32.0))) + 4.0 * xb10 * (-12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 - 30.0 * yb4 * (18.0 + ln2) + 5.0 * yb6 * (-32.0 + log(8.0)) + 3.0 * yb2 * (24.0 + log(32.0))) - 12.0 * xb4 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 11.0 * ln2) + yb2 * (1.0 + log(2048.0))) - 12.0 * xb12 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 11.0 * ln2) + yb2 * (1.0 + log(2048.0))))
                 + tb * xb2 * (4.0 * xb6 * (-30.0 + 21.0 * yb - 38.0 * yb3 - 303.0 * yb5 - 12.0 * yb4 * (79.0 + 124.0 * ln2) + yb6 * (-583.0 + 744.0 * ln2) + yb2 * (-39.0 + 744.0 * ln2)) + xb4 * (-48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb6 * (-515.0 + 1944.0 * ln2) + yb2 * (425.0 + 1944.0 * ln2) - 2.0 * yb4 * (1211.0 + 1944.0 * ln2)) + xb8 * (-48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb6 * (-515.0 + 1944.0 * ln2) + yb2 * (425.0 + 1944.0 * ln2) - 2.0 * yb4 * (1211.0 + 1944.0 * ln2)) - 3.0 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-1.0 - 2.0 * yb * (1.0 + log(16.0)) + yb2 * (-1.0 + ln256)) - 3.0 * xb12 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-1.0 - 2.0 * yb * (1.0 + log(16.0)) + yb2 * (-1.0 + ln256)) + 2.0 * xb2 * (6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + 9.0 * yb2 * (-1.0 + 24.0 * ln2) + yb6 * (71.0 + 216.0 * ln2) - 36.0 * yb4 * (-7.0 + log(4096.0)))
                   + 2.0 * xb10 * (6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + 9.0 * yb2 * (-1.0 + 24.0 * ln2) + yb6 * (71.0 + 216.0 * ln2) - 36.0 * yb4 * (-7.0 + log(4096.0)))));
            const complex<double> logs5 = (-1.0 + yb) * (1.0 + yb) * (-4.0 * xb2 * (-4.0 * xb6 * (12.0 - 9.0 * yb + 14.0 * yb3 + 123.0 * yb5 + yb4 * (406.0 - 186.0 * ln2) + yb2 * (1.0 + 93.0 * ln2) + yb6 * (221.0 + 93.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb12 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) - xb4 * (24.0 - 24.0 * yb + 16.0 * yb3 + 264.0 * yb5 + 9.0 * yb2 * (-16.0 + 27.0 * ln2) + yb6 * (320.0 + 243.0 * ln2) - 54.0 * yb4 * (-20.0 + log(512.0))) - xb8 * (24.0 - 24.0 * yb + 16.0 * yb3 + 264.0 * yb5 + 9.0 * yb2 * (-16.0 + 27.0 * ln2) + yb6 * (320.0 + 243.0 * ln2) - 54.0 * yb4 * (-20.0 + log(512.0))) - 6.0 * xb2 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 9.0 * ln2) + yb2 * (1.0 + log(512.0))) - 6.0 * xb10 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 9.0 * ln2) + yb2 * (1.0 + log(512.0))))
                 + power_of<2>(tb) * (-60.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * ln2 - 60.0 * xb14 * yb2 * power_of<2>(-1.0 + yb2) * ln2 + 2.0 * xb8 * (96.0 - 72.0 * yb + 112.0 * yb3 + 984.0 * yb5 + yb4 * (3248.0 - 258.0 * ln2) + yb2 * (8.0 + 129.0 * ln2) + yb6 * (1768.0 + 129.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb16 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + 4.0 * xb6 * (24.0 - 24.0 * yb + 16.0 * yb3 + 264.0 * yb5 - 30.0 * yb4 * (-36.0 + ln2) + 5.0 * yb6 * (64.0 + log(8.0)) + 3.0 * yb2 * (-48.0 + log(32.0))) + 4.0 * xb10 * (24.0 - 24.0 * yb + 16.0 * yb3 + 264.0 * yb5 - 30.0 * yb4 * (-36.0 + ln2) + 5.0 * yb6 * (64.0 + log(8.0)) + 3.0 * yb2 * (-48.0 + log(32.0))) - 12.0 * xb4 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-2.0 + yb2 * (-2.0 + log(2048.0)) - yb * (4.0 + log(2048.0))) - 12.0 * xb12 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-2.0 + yb2 * (-2.0 + log(2048.0)) - yb * (4.0 + log(2048.0))))
                 - 2.0 * tb * xb2 * (-4.0 * xb6 * (30.0 - 21.0 * yb + 38.0 * yb3 + 303.0 * yb5 + yb4 * (948.0 - 744.0 * ln2) + yb2 * (39.0 + 372.0 * ln2) + yb6 * (583.0 + 372.0 * ln2)) - xb4 * (48.0 - 51.0 * yb + 26.0 * yb3 + 537.0 * yb5 + yb4 * (2422.0 - 1944.0 * ln2) + yb2 * (-425.0 + 972.0 * ln2) + yb6 * (515.0 + 972.0 * ln2)) - xb8 * (48.0 - 51.0 * yb + 26.0 * yb3 + 537.0 * yb5 + yb4 * (2422.0 - 1944.0 * ln2) + yb2 * (-425.0 + 972.0 * ln2) + yb6 * (515.0 + 972.0 * ln2)) + 3.0 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 4.0 * ln2) + yb2 * (1.0 + log(16.0))) + 3.0 * xb12 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 4.0 * ln2) + yb2 * (1.0 + log(16.0))) + 2.0 * xb2 * (6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + yb6 * (71.0 - 108.0 * ln2) + 36.0 * yb4 * (7.0 + ln64) - 9.0 * yb2 * (1.0 + log(4096.0))) + 2.0 * xb10 * (6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + yb6 * (71.0 - 108.0 * ln2) + 36.0 * yb4 * (7.0 + ln64) - 9.0 * yb2 * (1.0 + log(4096.0)))));
            const complex<double> logs6 = (-1.0 + yb) * (1.0 + yb) * (-4.0 * xb2 * (-4.0 * xb6 * (12.0 + 9.0 * yb - 14.0 * yb3 - 123.0 * yb5 + yb4 * (406.0 - 186.0 * ln2) + yb2 * (1.0 + 93.0 * ln2) + yb6 * (221.0 + 93.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb12 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) - xb4 * (24.0 + 24.0 * yb - 16.0 * yb3 - 264.0 * yb5 + 9.0 * yb2 * (-16.0 + 27.0 * ln2) + yb6 * (320.0 + 243.0 * ln2) - 54.0 * yb4 * (-20.0 + log(512.0))) - xb8 * (24.0 + 24.0 * yb - 16.0 * yb3 - 264.0 * yb5 + 9.0 * yb2 * (-16.0 + 27.0 * ln2) + yb6 * (320.0 + 243.0 * ln2) - 54.0 * yb4 * (-20.0 + log(512.0))) - 6.0 * xb2 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + log(512.0)) + yb2 * (1.0 + log(512.0))) - 6.0 * xb10 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + log(512.0)) + yb2 * (1.0 + log(512.0))))
                 + power_of<2>(vb) * (-60.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * ln2 - 60.0 * xb14 * yb2 * power_of<2>(-1.0 + yb2) * ln2 + 2.0 * xb8 * (96.0 + 72.0 * yb - 112.0 * yb3 - 984.0 * yb5 + yb4 * (3248.0 - 258.0 * ln2) + yb2 * (8.0 + 129.0 * ln2) + yb6 * (1768.0 + 129.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb16 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + 4.0 * xb6 * (24.0 + 24.0 * yb - 16.0 * yb3 - 264.0 * yb5 - 30.0 * yb4 * (-36.0 + ln2) + 5.0 * yb6 * (64.0 + log(8.0)) + 3.0 * yb2 * (-48.0 + log(32.0))) + 4.0 * xb10 * (24.0 + 24.0 * yb - 16.0 * yb3 - 264.0 * yb5 - 30.0 * yb4 * (-36.0 + ln2) + 5.0 * yb6 * (64.0 + log(8.0)) + 3.0 * yb2 * (-48.0 + log(32.0))) - 12.0 * xb4 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-2.0 + yb2 * (-2.0 + log(2048.0)) + yb * (4.0 + log(2048.0))) - 12.0 * xb12 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-2.0 + yb2 * (-2.0 + log(2048.0)) + yb * (4.0 + log(2048.0))))
                 + 2.0 * vb * xb2 * (-4.0 * xb6 * (30.0 + 21.0 * yb - 38.0 * yb3 - 303.0 * yb5 + yb4 * (948.0 - 744.0 * ln2) + yb2 * (39.0 + 372.0 * ln2) + yb6 * (583.0 + 372.0 * ln2)) - xb4 * (48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb4 * (2422.0 - 1944.0 * ln2) + yb2 * (-425.0 + 972.0 * ln2) + yb6 * (515.0 + 972.0 * ln2)) - xb8 * (48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb4 * (2422.0 - 1944.0 * ln2) + yb2 * (-425.0 + 972.0 * ln2) + yb6 * (515.0 + 972.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + log(16.0)) + yb2 * (1.0 + log(16.0))) + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + log(16.0)) + yb2 * (1.0 + log(16.0))) - 2.0 * xb2 * (-6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + yb6 * (-71.0 + 108.0 * ln2) - 36.0 * yb4 * (7.0 + ln64) + 9.0 * yb2 * (1.0 + log(4096.0)))
                   - 2.0 * xb10 * (-6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + yb6 * (-71.0 + 108.0 * ln2) - 36.0 * yb4 * (7.0 + ln64) + 9.0 * yb2 * (1.0 + log(4096.0)))));
            const complex<double> logs7 = (-1.0 + yb) * (1.0 + yb) * (-4.0 * xb2 * (-3.0 * xb2 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 18.0 * ln2) + yb2 * (1.0 + 18.0 * ln2)) - 3.0 * xb10 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 18.0 * ln2) + yb2 * (1.0 + 18.0 * ln2)) - 2.0 * xb6 * (12.0 - 9.0 * yb + 14.0 * yb3 + 123.0 * yb5 + yb4 * (406.0 - 372.0 * ln2) + yb2 * (1.0 + 186.0 * ln2) + yb6 * (221.0 + 186.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb12 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) - xb4 * (12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 + 9.0 * yb2 * (-8.0 + 27.0 * ln2) + yb6 * (160.0 + 243.0 * ln2) - 54.0 * yb4 * (-10.0 + log(512.0))) - xb8 * (12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 + 9.0 * yb2 * (-8.0 + 27.0 * ln2) + yb6 * (160.0 + 243.0 * ln2) - 54.0 * yb4 * (-10.0 + log(512.0))))
                 + power_of<2>(tb) * (-60.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * ln2 - 60.0 * xb14 * yb2 * power_of<2>(-1.0 + yb2) * ln2 + 2.0 * xb8 * (48.0 - 36.0 * yb + 56.0 * yb3 + 492.0 * yb5 + yb4 * (1624.0 - 258.0 * ln2) + yb2 * (4.0 + 129.0 * ln2) + yb6 * (884.0 + 129.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb16 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + 4.0 * xb6 * (12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 - 30.0 * yb4 * (-18.0 + ln2) + 5.0 * yb6 * (32.0 + log(8.0)) + 3.0 * yb2 * (-24.0 + log(32.0))) + 4.0 * xb10 * (12.0 - 12.0 * yb + 8.0 * yb3 + 132.0 * yb5 - 30.0 * yb4 * (-18.0 + ln2) + 5.0 * yb6 * (32.0 + log(8.0)) + 3.0 * yb2 * (-24.0 + log(32.0))) - 12.0 * xb4 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-1.0 + yb2 * (-1.0 + log(2048.0)) - yb * (2.0 + log(2048.0))) - 12.0 * xb12 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (-1.0 + yb2 * (-1.0 + log(2048.0)) - yb * (2.0 + log(2048.0))))
                 + tb * xb2 * (4.0 * xb6 * (30.0 - 21.0 * yb + 38.0 * yb3 + 303.0 * yb5 + yb4 * (948.0 - 1488.0 * ln2) + yb2 * (39.0 + 744.0 * ln2) + yb6 * (583.0 + 744.0 * ln2)) + xb4 * (48.0 - 51.0 * yb + 26.0 * yb3 + 537.0 * yb5 + yb4 * (2422.0 - 3888.0 * ln2) + yb2 * (-425.0 + 1944.0 * ln2) + yb6 * (515.0 + 1944.0 * ln2)) + xb8 * (48.0 - 51.0 * yb + 26.0 * yb3 + 537.0 * yb5 + yb4 * (2422.0 - 3888.0 * ln2) + yb2 * (-425.0 + 1944.0 * ln2) + yb6 * (515.0 + 1944.0 * ln2)) - 3.0 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 8.0 * ln2) + yb2 * (1.0 + ln256)) - 3.0 * xb12 * (-1.0 + yb) * yb * power_of<2>(1.0 + yb) * (1.0 + yb * (2.0 - 8.0 * ln2) + yb2 * (1.0 + ln256)) + 2.0 * xb2 * (-6.0 - 3.0 * yb - 22.0 * yb3 - 39.0 * yb5 + 9.0 * yb2 * (1.0 + 24.0 * ln2) + yb6 * (-71.0 + 216.0 * ln2) - 36.0 * yb4 * (7.0 + log(4096.0)))
                   + 2.0 * xb10 * (-6.0 - 3.0 * yb - 22.0 * yb3 - 39.0 * yb5 + 9.0 * yb2 * (1.0 + 24.0 * ln2) + yb6 * (-71.0 + 216.0 * ln2) - 36.0 * yb4 * (7.0 + log(4096.0)))));
            const complex<double> logs8 = (-1.0 + yb) * (1.0 + yb) * (-4.0 * xb2 * (-2.0 * xb6 * (12.0 + 9.0 * yb - 14.0 * yb3 - 123.0 * yb5 + yb4 * (406.0 - 372.0 * ln2) + yb2 * (1.0 + 186.0 * ln2) + yb6 * (221.0 + 186.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb12 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) - xb4 * (12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 + 9.0 * yb2 * (-8.0 + 27.0 * ln2) + yb6 * (160.0 + 243.0 * ln2) - 54.0 * yb4 * (-10.0 + log(512.0))) - xb8 * (12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 + 9.0 * yb2 * (-8.0 + 27.0 * ln2) + yb6 * (160.0 + 243.0 * ln2) - 54.0 * yb4 * (-10.0 + log(512.0))) - 3.0 * xb2 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb2 * (1.0 + 18.0 * ln2) + 2.0 * yb * (-1.0 + log(512.0))) - 3.0 * xb10 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb2 * (1.0 + 18.0 * ln2) + 2.0 * yb * (-1.0 + log(512.0))))
                 + power_of<2>(vb) * (-60.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * ln2 - 60.0 * xb14 * yb2 * power_of<2>(-1.0 + yb2) * ln2 + 2.0 * xb8 * (48.0 + 36.0 * yb - 56.0 * yb3 - 492.0 * yb5 + yb4 * (1624.0 - 258.0 * ln2) + yb2 * (4.0 + 129.0 * ln2) + yb6 * (884.0 + 129.0 * ln2)) + yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + xb16 * yb2 * (-6.0 * yb2 * ln2 + log(8.0) + yb4 * log(8.0)) + 4.0 * xb6 * (12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 - 30.0 * yb4 * (-18.0 + ln2) + 5.0 * yb6 * (32.0 + log(8.0)) + 3.0 * yb2 * (-24.0 + log(32.0))) + 4.0 * xb10 * (12.0 + 12.0 * yb - 8.0 * yb3 - 132.0 * yb5 - 30.0 * yb4 * (-18.0 + ln2) + 5.0 * yb6 * (32.0 + log(8.0)) + 3.0 * yb2 * (-24.0 + log(32.0))) - 12.0 * xb4 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-1.0 + yb2 * (-1.0 + log(2048.0)) + yb * (2.0 + log(2048.0))) - 12.0 * xb12 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (-1.0 + yb2 * (-1.0 + log(2048.0)) + yb * (2.0 + log(2048.0))))
                 + vb * xb2 * (-4.0 * xb6 * (30.0 + 21.0 * yb - 38.0 * yb3 - 303.0 * yb5 + yb4 * (948.0 - 1488.0 * ln2) + yb2 * (39.0 + 744.0 * ln2) + yb6 * (583.0 + 744.0 * ln2)) - xb4 * (48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb4 * (2422.0 - 3888.0 * ln2) + yb2 * (-425.0 + 1944.0 * ln2) + yb6 * (515.0 + 1944.0 * ln2)) - xb8 * (48.0 + 51.0 * yb - 26.0 * yb3 - 537.0 * yb5 + yb4 * (2422.0 - 3888.0 * ln2) + yb2 * (-425.0 + 1944.0 * ln2) + yb6 * (515.0 + 1944.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + ln256) + yb2 * (1.0 + ln256)) + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb * (1.0 + yb) * (1.0 + yb * (-2.0 + ln256) + yb2 * (1.0 + ln256)) - 2.0 * xb2 * (-6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + 9.0 * yb2 * (1.0 + 24.0 * ln2) + yb6 * (-71.0 + 216.0 * ln2) - 36.0 * yb4 * (7.0 + log(4096.0)))
                   - 2.0 * xb10 * (-6.0 + 3.0 * yb + 22.0 * yb3 + 39.0 * yb5 + 9.0 * yb2 * (1.0 + 24.0 * ln2) + yb6 * (-71.0 + 216.0 * ln2) - 36.0 * yb4 * (7.0 + log(4096.0)))));
            const complex<double> logs9 = power_of<2>(myi + xb) * (-1.0 + yb) * (1.0 + yb) * (power_of<2>(tb) * (power_of<2>(vb) * power_of<2>(-1.0 + xb2) * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - 4.0 * myi * xb3 * (2.0 + 37.0 * ln2 + yb2 * (6.0 + 67.0 * ln2) + yb6 * (-54.0 + 733.0 * ln2) + yb4 * (-18.0 + 2587.0 * ln2)) - 4.0 * myi * xb11 * (2.0 + 37.0 * ln2 + yb2 * (6.0 + 67.0 * ln2) + yb6 * (-54.0 + 733.0 * ln2) + yb4 * (-18.0 + 2587.0 * ln2)) + xb6 * (8.0 + 339.0 * ln2 + yb2 * (-168.0 + 1045.0 * ln2) + 3.0 * yb6 * (-648.0 + 1529.0 * ln2) + yb4 * (-1224.0 + 3661.0 * ln2)) - xb8 * (8.0 + 339.0 * ln2 + yb2 * (-168.0 + 1045.0 * ln2) + 3.0 * yb6 * (-648.0 + 1529.0 * ln2) + yb4 * (-1224.0 + 3661.0 * ln2))
                     + 8.0 * myi * xb7 * (2.0 + 229.0 * ln2 + 13.0 * yb2 * (-2.0 + 15.0 * ln2) + 3.0 * yb4 * (-70.0 + 2377.0 * ln2) + yb6 * (-342.0 + 4061.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 1411.0 * ln2) + 363.0 * ln2 + yb6 * (468.0 + 6659.0 * ln2) + yb4 * (348.0 + 19637.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 1411.0 * ln2) + 363.0 * ln2 + yb6 * (468.0 + 6659.0 * ln2) + yb4 * (348.0 + 19637.0 * ln2)) + 2.0 * myi * xb5 * (yb2 * (64.0 - 2873.0 * ln2) + 385.0 * ln2 + yb6 * (576.0 + 5593.0 * ln2) + yb4 * (384.0 + 21439.0 * ln2)) + 2.0 * myi * xb9 * (yb2 * (64.0 - 2873.0 * ln2) + 385.0 * ln2 + yb6 * (576.0 + 5593.0 * ln2) + yb4 * (384.0 + 21439.0 * ln2)) + xb12 * (4.0 - 23.0 * ln2 + 3.0 * yb2 * (4.0 + 133.0 * ln2) + yb4 * (-36.0 + 375.0 * ln2) - 3.0 * yb6 * (36.0 + log(32.0))) + xb2 * (-4.0 + yb4 * (36.0 - 375.0 * ln2) + 23.0 * ln2 - 3.0 * yb2 * (4.0 + 133.0 * ln2) + 3.0 * yb6 * (36.0 + log(32.0))))
                   + 8.0 * vb * xb2 * (-ln2 - 9.0 * yb2 * ln2 + 12.0 * yb3 * ln2 + 45.0 * yb4 * ln2 - 18.0 * yb5 * ln2 + 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 + 2.0 * myi * xb13 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 + xb12 * (4.0 - 47.0 * ln2 + 42.0 * yb * ln2 + 148.0 * yb3 * ln2 + 66.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 115.0 * ln2) - 3.0 * yb4 * (12.0 + 191.0 * ln2) - yb6 * (108.0 + 269.0 * ln2)) + xb2 * (-4.0 + 47.0 * ln2 - 42.0 * yb * ln2 - 148.0 * yb3 * ln2 - 66.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 269.0 * ln2) + yb4 * (36.0 + 573.0 * ln2)) - xb6 * (-8.0 - 99.0 * ln2 + 114.0 * yb * ln2 - 412.0 * yb3 * ln2 - 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2))
                     + xb8 * (-8.0 - 99.0 * ln2 + 114.0 * yb * ln2 - 412.0 * yb3 * ln2 - 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2)) - 4.0 * myi * xb3 * (2.0 + 25.0 * ln2 + 18.0 * yb * ln2 + 68.0 * yb3 * ln2 + 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2)) - 4.0 * myi * xb11 * (2.0 + 25.0 * ln2 + 18.0 * yb * ln2 + 68.0 * yb3 * ln2 + 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2)) + 8.0 * myi * xb7 * (2.0 + 121.0 * ln2 - 78.0 * yb * ln2 + 132.0 * yb3 * ln2 + 1098.0 * yb5 * ln2 + yb2 * (-26.0 + 113.0 * ln2) + yb6 * (-342.0 + 2011.0 * ln2) + yb4 * (-210.0 + 3611.0 * ln2))
                     + xb4 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 - 162.0 * yb * ln2 + 252.0 * yb3 * ln2 + 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 - 162.0 * yb * ln2 + 252.0 * yb3 * ln2 + 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) + 2.0 * myi * xb5 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 - 198.0 * yb * ln2 + 116.0 * yb3 * ln2 + 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2)) + 2.0 * myi * xb9 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 - 198.0 * yb * ln2 + 116.0 * yb3 * ln2 + 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2)) - yb6 * log(8.0) + xb14 * (ln2 - 6.0 * yb * ln2 + 9.0 * yb2 * ln2 - 12.0 * yb3 * ln2 - 45.0 * yb4 * ln2 + 18.0 * yb5 * ln2 + yb6 * log(8.0))
                     + yb * ln64) - 4.0 * xb2 * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + xb6 * (8.0 + 147.0 * ln2 - 96.0 * yb * ln2 + 320.0 * yb3 * ln2 + 1824.0 * yb5 * ln2 + 3.0 * yb6 * (-648.0 + 25.0 * ln2) - yb2 * (168.0 + 139.0 * ln2) - yb4 * (1224.0 + 691.0 * ln2)) + xb8 * (-8.0 + yb6 * (1944.0 - 75.0 * ln2) - 147.0 * ln2 + 96.0 * yb * ln2 - 320.0 * yb3 * ln2 - 1824.0 * yb5 * ln2 + yb2 * (168.0 + 139.0 * ln2) + yb4 * (1224.0 + 691.0 * ln2)) - 4.0 * myi * xb3 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 + 24.0 * yb * ln2 + 48.0 * yb3 * ln2 - 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2))
                     - 4.0 * myi * xb11 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 + 24.0 * yb * ln2 + 48.0 * yb3 * ln2 - 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2)) + 8.0 * myi * xb7 * (2.0 + 133.0 * ln2 - 72.0 * yb * ln2 + 112.0 * yb3 * ln2 + 984.0 * yb5 * ln2 + yb2 * (-26.0 + 187.0 * ln2) + yb6 * (-342.0 + 2293.0 * ln2) + yb4 * (-210.0 + 3883.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 - 144.0 * yb * ln2 + 224.0 * yb3 * ln2 + 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 - 144.0 * yb * ln2 + 224.0 * yb3 * ln2 + 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2))
                     + 2.0 * myi * xb5 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 - 192.0 * yb * ln2 + 128.0 * yb3 * ln2 + 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) + 2.0 * myi * xb9 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 - 192.0 * yb * ln2 + 128.0 * yb3 * ln2 + 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) - xb2 * (4.0 - 23.0 * ln2 + 48.0 * yb * ln2 + 96.0 * yb3 * ln2 - 144.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 85.0 * ln2) + yb4 * (-36.0 + 471.0 * ln2) + 3.0 * yb6 * (-36.0 + log(2048.0))) + xb12 * (4.0 - 23.0 * ln2 + 48.0 * yb * ln2 + 96.0 * yb3 * ln2 - 144.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 85.0 * ln2) + yb4 * (-36.0 + 471.0 * ln2) + 3.0 * yb6 * (-36.0 + log(2048.0)))))
                 - 4.0 * xb2 * (power_of<2>(vb) * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + xb2 * (-4.0 + yb4 * (36.0 - 471.0 * ln2) + yb6 * (108.0 - 33.0 * ln2) + 23.0 * ln2 + 48.0 * yb * ln2 + 96.0 * yb3 * ln2 - 144.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 85.0 * ln2)) + xb6 * (8.0 + 147.0 * ln2 + 96.0 * yb * ln2 - 320.0 * yb3 * ln2 - 1824.0 * yb5 * ln2 + 3.0 * yb6 * (-648.0 + 25.0 * ln2) - yb2 * (168.0 + 139.0 * ln2) - yb4 * (1224.0 + 691.0 * ln2)) + xb8 * (-8.0 + yb6 * (1944.0 - 75.0 * ln2) - 147.0 * ln2 - 96.0 * yb * ln2 + 320.0 * yb3 * ln2 + 1824.0 * yb5 * ln2 + yb2 * (168.0 + 139.0 * ln2) + yb4 * (1224.0 + 691.0 * ln2))
                     - 4.0 * myi * xb3 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 - 24.0 * yb * ln2 - 48.0 * yb3 * ln2 + 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2)) - 4.0 * myi * xb11 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 - 24.0 * yb * ln2 - 48.0 * yb3 * ln2 + 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2)) + 8.0 * myi * xb7 * (2.0 + 133.0 * ln2 + 72.0 * yb * ln2 - 112.0 * yb3 * ln2 - 984.0 * yb5 * ln2 + yb2 * (-26.0 + 187.0 * ln2) + yb6 * (-342.0 + 2293.0 * ln2) + yb4 * (-210.0 + 3883.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 + 144.0 * yb * ln2 - 224.0 * yb3 * ln2 - 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2))
                     - xb10 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 + 144.0 * yb * ln2 - 224.0 * yb3 * ln2 - 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2)) + 2.0 * myi * xb5 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 + 192.0 * yb * ln2 - 128.0 * yb3 * ln2 - 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) + 2.0 * myi * xb9 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 + 192.0 * yb * ln2 - 128.0 * yb3 * ln2 - 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) + xb12 * (4.0 - 23.0 * ln2 - 48.0 * yb * ln2 - 96.0 * yb3 * ln2 + 144.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 85.0 * ln2) + yb4 * (-36.0 + 471.0 * ln2) + 3.0 * yb6 * (-36.0 + log(2048.0))))
                   - 4.0 * xb2 * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb10 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 + 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + 2.0 * myi * xb9 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - xb2 * (1.0 + 3.0 * yb2) * (4.0 - 21.0 * ln2 + 156.0 * yb2 * ln2 + yb4 * (-36.0 + 33.0 * ln2)) + xb8 * (1.0 + 3.0 * yb2) * (4.0 - 21.0 * ln2 + 156.0 * yb2 * ln2 + yb4 * (-36.0 + 33.0 * ln2)) - 8.0 * myi * xb3 * (1.0 + yb2 * (3.0 - 67.0 * ln2) + 19.0 * ln2 + yb6 * (-27.0 + 371.0 * ln2) + yb4 * (-9.0 + 1373.0 * ln2)) - 8.0 * myi * xb7 * (1.0 + yb2 * (3.0 - 67.0 * ln2) + 19.0 * ln2 + yb6 * (-27.0 + 371.0 * ln2) + yb4 * (-9.0 + 1373.0 * ln2)) - 4.0 * myi * xb5 * (4.0 + 75.0 * ln2 + 3.0 * yb4 * (-76.0 + 1127.0 * ln2) + yb6 * (-396.0 + 1267.0 * ln2) + 5.0 * yb2 * (-4.0 + log(512.0)))
                     + 2.0 * xb4 * (1.0 + 3.0 * yb2) * (-2.0 + 4.0 * yb2 * (8.0 + 43.0 * ln2) + yb4 * (114.0 + 241.0 * ln2) + log(2048.0)) - 2.0 * xb6 * (1.0 + 3.0 * yb2) * (-2.0 + 4.0 * yb2 * (8.0 + 43.0 * ln2) + yb4 * (114.0 + 241.0 * ln2) + log(2048.0))) + 8.0 * vb * xb2 * (-ln2 - 9.0 * yb2 * ln2 + 12.0 * yb3 * ln2 + 45.0 * yb4 * ln2 - 18.0 * yb5 * ln2 + 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 + 2.0 * myi * xb9 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 + xb8 * (4.0 - 45.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 - 9.0 * yb4 * (4.0 + 63.0 * ln2) + 3.0 * yb2 * (4.0 + 73.0 * ln2) - yb6 * (108.0 + 215.0 * ln2)) + xb2 * (-4.0 + 45.0 * ln2 + 18.0 * yb * ln2 - 28.0 * yb3 * ln2 - 246.0 * yb5 * ln2 + 9.0 * yb4 * (4.0 + 63.0 * ln2) - 3.0 * yb2 * (4.0 + 73.0 * ln2) + yb6 * (108.0 + 215.0 * ln2))
                     - 4.0 * myi * xb5 * (4.0 + 51.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 + 33.0 * yb6 * (-12.0 + 25.0 * ln2) + yb2 * (-20.0 + 43.0 * ln2) + yb4 * (-228.0 + 2569.0 * ln2)) - yb6 * log(8.0) + xb10 * (ln2 - 6.0 * yb * ln2 + 9.0 * yb2 * ln2 - 12.0 * yb3 * ln2 - 45.0 * yb4 * ln2 + 18.0 * yb5 * ln2 + yb6 * log(8.0)) + yb * ln64 + 2.0 * xb4 * (-2.0 + 23.0 * ln2 - 20.0 * yb3 * ln2 - 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2) + yb * ln64) - 2.0 * xb6 * (-2.0 + 23.0 * ln2 - 20.0 * yb3 * ln2 - 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2) + yb * ln64) - 8.0 * myi * xb3 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 6.0 * yb * ln2 + 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb3 * log(16.0) + log(8192.0))
                     - 8.0 * myi * xb7 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 6.0 * yb * ln2 + 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb3 * log(16.0) + log(8192.0)))) - 8.0 * tb * xb2 * (power_of<2>(vb) * (-ln2 - 6.0 * yb * ln2 - 9.0 * yb2 * ln2 - 12.0 * yb3 * ln2 + 45.0 * yb4 * ln2 + 18.0 * yb5 * ln2 + 2.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 + 2.0 * myi * xb13 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 + xb2 * (-4.0 + 47.0 * ln2 + 42.0 * yb * ln2 + 148.0 * yb3 * ln2 + 66.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 269.0 * ln2) + yb4 * (36.0 + 573.0 * ln2)) - xb12 * (-4.0 + 47.0 * ln2 + 42.0 * yb * ln2 + 148.0 * yb3 * ln2 + 66.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 269.0 * ln2) + yb4 * (36.0 + 573.0 * ln2))
                     - xb6 * (-8.0 - 99.0 * ln2 - 114.0 * yb * ln2 + 412.0 * yb3 * ln2 + 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2)) + xb8 * (-8.0 - 99.0 * ln2 - 114.0 * yb * ln2 + 412.0 * yb3 * ln2 + 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2)) - 4.0 * myi * xb3 * (2.0 + 25.0 * ln2 - 18.0 * yb * ln2 - 68.0 * yb3 * ln2 - 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2)) - 4.0 * myi * xb11 * (2.0 + 25.0 * ln2 - 18.0 * yb * ln2 - 68.0 * yb3 * ln2 - 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2))
                     + 8.0 * myi * xb7 * (2.0 + 121.0 * ln2 + 78.0 * yb * ln2 - 132.0 * yb3 * ln2 - 1098.0 * yb5 * ln2 + yb2 * (-26.0 + 113.0 * ln2) + yb6 * (-342.0 + 2011.0 * ln2) + yb4 * (-210.0 + 3611.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 + 162.0 * yb * ln2 - 252.0 * yb3 * ln2 - 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 + 162.0 * yb * ln2 - 252.0 * yb3 * ln2 - 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) + 2.0 * myi * xb5 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 + 198.0 * yb * ln2 - 116.0 * yb3 * ln2 - 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2))
                     + 2.0 * myi * xb9 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 + 198.0 * yb * ln2 - 116.0 * yb3 * ln2 - 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2)) - yb6 * log(8.0) + xb14 * (ln2 + 9.0 * yb2 * ln2 + 12.0 * yb3 * ln2 - 45.0 * yb4 * ln2 - 18.0 * yb5 * ln2 + yb6 * log(8.0) + yb * ln64)) - 8.0 * vb * xb2 * (ln2 + 27.0 * yb2 * ln2 - 57.0 * yb4 * ln2 - 2.0 * myi * xb * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) * ln2 - 2.0 * myi * xb9 * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) * ln2 - xb2 * (-4.0 + 69.0 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 529.0 * ln2) + 3.0 * yb4 * (12.0 + 545.0 * ln2)) + xb8 * (-4.0 + 69.0 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 529.0 * ln2) + 3.0 * yb4 * (12.0 + 545.0 * ln2)) - 2.0 * xb4 * (-2.0 + 35.0 * ln2 + 9.0 * yb6 * (38.0 + 143.0 * ln2) + yb2 * (26.0 + 353.0 * ln2) + yb4 * (210.0 + 1301.0 * ln2))
                     + 4.0 * myi * xb5 * (4.0 + 27.0 * ln2 + yb2 * (-20.0 + 41.0 * ln2) + yb6 * (-396.0 + 383.0 * ln2) + yb4 * (-228.0 + 1757.0 * ln2)) + xb6 * (-4.0 + 70.0 * ln2 + 18.0 * yb6 * (38.0 + 143.0 * ln2) + yb2 * (52.0 + 706.0 * ln2) + yb4 * (420.0 + 2602.0 * ln2)) - yb6 * log(8.0) + xb10 * (-ln2 - 27.0 * yb2 * ln2 + 57.0 * yb4 * ln2 + yb6 * log(8.0)) + 8.0 * myi * xb3 * (1.0 + yb6 * (-27.0 + 211.0 * ln2) + yb4 * (-9.0 + 833.0 * ln2) + yb2 * (3.0 + log(32.0)) + log(128.0)) + 8.0 * myi * xb7 * (1.0 + yb6 * (-27.0 + 211.0 * ln2) + yb4 * (-9.0 + 833.0 * ln2) + yb2 * (3.0 + log(32.0)) + log(128.0)))
                   + xb2 * (24.0 * yb * ln2 + 36.0 * yb2 * ln2 + 48.0 * yb3 * ln2 - 180.0 * yb4 * ln2 - 72.0 * yb5 * ln2 + 12.0 * yb6 * ln2 - 4.0 * xb10 * (1.0 + 6.0 * yb + 9.0 * yb2 + 12.0 * yb3 - 45.0 * yb4 - 18.0 * yb5 + 3.0 * yb6) * ln2 - 8.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 - 8.0 * myi * xb9 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 - 4.0 * xb2 * (-4.0 + 45.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 + 9.0 * yb4 * (4.0 + 63.0 * ln2) - 3.0 * yb2 * (4.0 + 73.0 * ln2) + yb6 * (108.0 + 215.0 * ln2)) + 4.0 * xb8 * (-4.0 + 45.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 + 9.0 * yb4 * (4.0 + 63.0 * ln2) - 3.0 * yb2 * (4.0 + 73.0 * ln2) + yb6 * (108.0 + 215.0 * ln2))
                     - 8.0 * xb4 * (-2.0 + 23.0 * ln2 - 6.0 * yb * ln2 + 20.0 * yb3 * ln2 + 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2)) + 8.0 * xb6 * (-2.0 + 23.0 * ln2 - 6.0 * yb * ln2 + 20.0 * yb3 * ln2 + 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2)) + 16.0 * myi * xb5 * (4.0 + 51.0 * ln2 + 18.0 * yb * ln2 - 28.0 * yb3 * ln2 - 246.0 * yb5 * ln2 + 33.0 * yb6 * (-12.0 + 25.0 * ln2) + yb2 * (-20.0 + 43.0 * ln2) + yb4 * (-228.0 + 2569.0 * ln2)) + log(16.0) + 32.0 * myi * xb3 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 4.0 * yb3 * ln2 - 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb * ln64 + log(8192.0))
                     + 32.0 * myi * xb7 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 4.0 * yb3 * ln2 - 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb * ln64 + log(8192.0)))));
            const complex<double> logs10 = power_of<2>(-myi + xb) * (-1.0 + yb) * (1.0 + yb) * (power_of<2>(tb) * (power_of<2>(vb) * power_of<2>(-1.0 + xb2) * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + 4.0 * myi * xb3 * (2.0 + 37.0 * ln2 + yb2 * (6.0 + 67.0 * ln2) + yb6 * (-54.0 + 733.0 * ln2) + yb4 * (-18.0 + 2587.0 * ln2)) + 4.0 * myi * xb11 * (2.0 + 37.0 * ln2 + yb2 * (6.0 + 67.0 * ln2) + yb6 * (-54.0 + 733.0 * ln2) + yb4 * (-18.0 + 2587.0 * ln2)) + xb6 * (8.0 + 339.0 * ln2 + yb2 * (-168.0 + 1045.0 * ln2) + 3.0 * yb6 * (-648.0 + 1529.0 * ln2) + yb4 * (-1224.0 + 3661.0 * ln2)) - xb8 * (8.0 + 339.0 * ln2 + yb2 * (-168.0 + 1045.0 * ln2) + 3.0 * yb6 * (-648.0 + 1529.0 * ln2) + yb4 * (-1224.0 + 3661.0 * ln2))
                     - 8.0 * myi * xb7 * (2.0 + 229.0 * ln2 + 13.0 * yb2 * (-2.0 + 15.0 * ln2) + 3.0 * yb4 * (-70.0 + 2377.0 * ln2) + yb6 * (-342.0 + 4061.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 1411.0 * ln2) + 363.0 * ln2 + yb6 * (468.0 + 6659.0 * ln2) + yb4 * (348.0 + 19637.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 1411.0 * ln2) + 363.0 * ln2 + yb6 * (468.0 + 6659.0 * ln2) + yb4 * (348.0 + 19637.0 * ln2)) - 2.0 * myi * xb5 * (yb2 * (64.0 - 2873.0 * ln2) + 385.0 * ln2 + yb6 * (576.0 + 5593.0 * ln2) + yb4 * (384.0 + 21439.0 * ln2)) - 2.0 * myi * xb9 * (yb2 * (64.0 - 2873.0 * ln2) + 385.0 * ln2 + yb6 * (576.0 + 5593.0 * ln2) + yb4 * (384.0 + 21439.0 * ln2)) + xb12 * (4.0 - 23.0 * ln2 + 3.0 * yb2 * (4.0 + 133.0 * ln2) + yb4 * (-36.0 + 375.0 * ln2) - 3.0 * yb6 * (36.0 + log(32.0))) + xb2 * (-4.0 + yb4 * (36.0 - 375.0 * ln2) + 23.0 * ln2 - 3.0 * yb2 * (4.0 + 133.0 * ln2) + 3.0 * yb6 * (36.0 + log(32.0))))
                   + 8.0 * vb * xb2 * (-ln2 - 9.0 * yb2 * ln2 + 12.0 * yb3 * ln2 + 45.0 * yb4 * ln2 - 18.0 * yb5 * ln2 - 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 - 2.0 * myi * xb13 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 + xb12 * (4.0 - 47.0 * ln2 + 42.0 * yb * ln2 + 148.0 * yb3 * ln2 + 66.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 115.0 * ln2) - 3.0 * yb4 * (12.0 + 191.0 * ln2) - yb6 * (108.0 + 269.0 * ln2)) + xb2 * (-4.0 + 47.0 * ln2 - 42.0 * yb * ln2 - 148.0 * yb3 * ln2 - 66.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 269.0 * ln2) + yb4 * (36.0 + 573.0 * ln2)) - xb6 * (-8.0 - 99.0 * ln2 + 114.0 * yb * ln2 - 412.0 * yb3 * ln2 - 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2))
                     + xb8 * (-8.0 - 99.0 * ln2 + 114.0 * yb * ln2 - 412.0 * yb3 * ln2 - 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2)) + 4.0 * myi * xb3 * (2.0 + 25.0 * ln2 + 18.0 * yb * ln2 + 68.0 * yb3 * ln2 + 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2)) + 4.0 * myi * xb11 * (2.0 + 25.0 * ln2 + 18.0 * yb * ln2 + 68.0 * yb3 * ln2 + 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2)) - 8.0 * myi * xb7 * (2.0 + 121.0 * ln2 - 78.0 * yb * ln2 + 132.0 * yb3 * ln2 + 1098.0 * yb5 * ln2 + yb2 * (-26.0 + 113.0 * ln2) + yb6 * (-342.0 + 2011.0 * ln2) + yb4 * (-210.0 + 3611.0 * ln2))
                     + xb4 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 - 162.0 * yb * ln2 + 252.0 * yb3 * ln2 + 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 - 162.0 * yb * ln2 + 252.0 * yb3 * ln2 + 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) - 2.0 * myi * xb5 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 - 198.0 * yb * ln2 + 116.0 * yb3 * ln2 + 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2)) - 2.0 * myi * xb9 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 - 198.0 * yb * ln2 + 116.0 * yb3 * ln2 + 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2)) - yb6 * log(8.0) + xb14 * (ln2 - 6.0 * yb * ln2 + 9.0 * yb2 * ln2 - 12.0 * yb3 * ln2 - 45.0 * yb4 * ln2 + 18.0 * yb5 * ln2 + yb6 * log(8.0))
                     + yb * ln64) - 4.0 * xb2 * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + xb6 * (8.0 + 147.0 * ln2 - 96.0 * yb * ln2 + 320.0 * yb3 * ln2 + 1824.0 * yb5 * ln2 + 3.0 * yb6 * (-648.0 + 25.0 * ln2) - yb2 * (168.0 + 139.0 * ln2) - yb4 * (1224.0 + 691.0 * ln2)) + xb8 * (-8.0 + yb6 * (1944.0 - 75.0 * ln2) - 147.0 * ln2 + 96.0 * yb * ln2 - 320.0 * yb3 * ln2 - 1824.0 * yb5 * ln2 + yb2 * (168.0 + 139.0 * ln2) + yb4 * (1224.0 + 691.0 * ln2)) + 4.0 * myi * xb3 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 + 24.0 * yb * ln2 + 48.0 * yb3 * ln2 - 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2))
                     + 4.0 * myi * xb11 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 + 24.0 * yb * ln2 + 48.0 * yb3 * ln2 - 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2)) - 8.0 * myi * xb7 * (2.0 + 133.0 * ln2 - 72.0 * yb * ln2 + 112.0 * yb3 * ln2 + 984.0 * yb5 * ln2 + yb2 * (-26.0 + 187.0 * ln2) + yb6 * (-342.0 + 2293.0 * ln2) + yb4 * (-210.0 + 3883.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 - 144.0 * yb * ln2 + 224.0 * yb3 * ln2 + 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 - 144.0 * yb * ln2 + 224.0 * yb3 * ln2 + 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2))
                     - 2.0 * myi * xb5 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 - 192.0 * yb * ln2 + 128.0 * yb3 * ln2 + 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) - 2.0 * myi * xb9 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 - 192.0 * yb * ln2 + 128.0 * yb3 * ln2 + 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) - xb2 * (4.0 - 23.0 * ln2 + 48.0 * yb * ln2 + 96.0 * yb3 * ln2 - 144.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 85.0 * ln2) + yb4 * (-36.0 + 471.0 * ln2) + 3.0 * yb6 * (-36.0 + log(2048.0))) + xb12 * (4.0 - 23.0 * ln2 + 48.0 * yb * ln2 + 96.0 * yb3 * ln2 - 144.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 85.0 * ln2) + yb4 * (-36.0 + 471.0 * ln2) + 3.0 * yb6 * (-36.0 + log(2048.0)))))
                 - 4.0 * xb2 * (power_of<2>(vb) * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb14 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - 2.0 * myi * xb13 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 + xb2 * (-4.0 + yb4 * (36.0 - 471.0 * ln2) + yb6 * (108.0 - 33.0 * ln2) + 23.0 * ln2 + 48.0 * yb * ln2 + 96.0 * yb3 * ln2 - 144.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 85.0 * ln2)) + xb6 * (8.0 + 147.0 * ln2 + 96.0 * yb * ln2 - 320.0 * yb3 * ln2 - 1824.0 * yb5 * ln2 + 3.0 * yb6 * (-648.0 + 25.0 * ln2) - yb2 * (168.0 + 139.0 * ln2) - yb4 * (1224.0 + 691.0 * ln2)) + xb8 * (-8.0 + yb6 * (1944.0 - 75.0 * ln2) - 147.0 * ln2 - 96.0 * yb * ln2 + 320.0 * yb3 * ln2 + 1824.0 * yb5 * ln2 + yb2 * (168.0 + 139.0 * ln2) + yb4 * (1224.0 + 691.0 * ln2))
                     + 4.0 * myi * xb3 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 - 24.0 * yb * ln2 - 48.0 * yb3 * ln2 + 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2)) + 4.0 * myi * xb11 * (2.0 + yb2 * (6.0 - 5.0 * ln2) + 37.0 * ln2 - 24.0 * yb * ln2 - 48.0 * yb3 * ln2 + 72.0 * yb5 * ln2 + yb6 * (-54.0 + 757.0 * ln2) + yb4 * (-18.0 + 2635.0 * ln2)) - 8.0 * myi * xb7 * (2.0 + 133.0 * ln2 + 72.0 * yb * ln2 - 112.0 * yb3 * ln2 - 984.0 * yb5 * ln2 + yb2 * (-26.0 + 187.0 * ln2) + yb6 * (-342.0 + 2293.0 * ln2) + yb4 * (-210.0 + 3883.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 + 144.0 * yb * ln2 - 224.0 * yb3 * ln2 - 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2))
                     - xb10 * (4.0 + yb2 * (76.0 - 403.0 * ln2) + 171.0 * ln2 + 144.0 * yb * ln2 - 224.0 * yb3 * ln2 - 1968.0 * yb5 * ln2 + 13.0 * yb6 * (36.0 + 319.0 * ln2) + yb4 * (348.0 + 11093.0 * ln2)) - 2.0 * myi * xb5 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 + 192.0 * yb * ln2 - 128.0 * yb3 * ln2 - 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) - 2.0 * myi * xb9 * (yb2 * (64.0 - 1721.0 * ln2) + 193.0 * ln2 + 192.0 * yb * ln2 - 128.0 * yb3 * ln2 - 2112.0 * yb5 * ln2 + 9.0 * yb6 * (64.0 + 337.0 * ln2) + yb4 * (384.0 + 12799.0 * ln2)) + xb12 * (4.0 - 23.0 * ln2 - 48.0 * yb * ln2 - 96.0 * yb3 * ln2 + 144.0 * yb5 * ln2 + 3.0 * yb2 * (4.0 + 85.0 * ln2) + yb4 * (-36.0 + 471.0 * ln2) + 3.0 * yb6 * (-36.0 + log(2048.0))))
                   - 4.0 * xb2 * ((-1.0 + 9.0 * yb2 + 33.0 * yb4 - 9.0 * yb6) * ln2 + xb10 * (1.0 - 9.0 * yb2 - 33.0 * yb4 + 9.0 * yb6) * ln2 - 2.0 * myi * xb * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - 2.0 * myi * xb9 * (-1.0 + 57.0 * yb2 - 63.0 * yb4 + 39.0 * yb6) * ln2 - xb2 * (1.0 + 3.0 * yb2) * (4.0 - 21.0 * ln2 + 156.0 * yb2 * ln2 + yb4 * (-36.0 + 33.0 * ln2)) + xb8 * (1.0 + 3.0 * yb2) * (4.0 - 21.0 * ln2 + 156.0 * yb2 * ln2 + yb4 * (-36.0 + 33.0 * ln2)) + 8.0 * myi * xb3 * (1.0 + yb2 * (3.0 - 67.0 * ln2) + 19.0 * ln2 + yb6 * (-27.0 + 371.0 * ln2) + yb4 * (-9.0 + 1373.0 * ln2)) + 8.0 * myi * xb7 * (1.0 + yb2 * (3.0 - 67.0 * ln2) + 19.0 * ln2 + yb6 * (-27.0 + 371.0 * ln2) + yb4 * (-9.0 + 1373.0 * ln2)) + 4.0 * myi * xb5 * (4.0 + 75.0 * ln2 + 3.0 * yb4 * (-76.0 + 1127.0 * ln2) + yb6 * (-396.0 + 1267.0 * ln2) + 5.0 * yb2 * (-4.0 + log(512.0)))
                     + 2.0 * xb4 * (1.0 + 3.0 * yb2) * (-2.0 + 4.0 * yb2 * (8.0 + 43.0 * ln2) + yb4 * (114.0 + 241.0 * ln2) + log(2048.0)) - 2.0 * xb6 * (1.0 + 3.0 * yb2) * (-2.0 + 4.0 * yb2 * (8.0 + 43.0 * ln2) + yb4 * (114.0 + 241.0 * ln2) + log(2048.0))) + 8.0 * vb * xb2 * (-ln2 - 9.0 * yb2 * ln2 + 12.0 * yb3 * ln2 + 45.0 * yb4 * ln2 - 18.0 * yb5 * ln2 - 2.0 * myi * xb * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 - 2.0 * myi * xb9 * (-1.0 + 6.0 * yb + 39.0 * yb2 + 12.0 * yb3 - 51.0 * yb4 - 18.0 * yb5 + 45.0 * yb6) * ln2 + xb8 * (4.0 - 45.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 - 9.0 * yb4 * (4.0 + 63.0 * ln2) + 3.0 * yb2 * (4.0 + 73.0 * ln2) - yb6 * (108.0 + 215.0 * ln2)) + xb2 * (-4.0 + 45.0 * ln2 + 18.0 * yb * ln2 - 28.0 * yb3 * ln2 - 246.0 * yb5 * ln2 + 9.0 * yb4 * (4.0 + 63.0 * ln2) - 3.0 * yb2 * (4.0 + 73.0 * ln2) + yb6 * (108.0 + 215.0 * ln2))
                     + 4.0 * myi * xb5 * (4.0 + 51.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 + 33.0 * yb6 * (-12.0 + 25.0 * ln2) + yb2 * (-20.0 + 43.0 * ln2) + yb4 * (-228.0 + 2569.0 * ln2)) - yb6 * log(8.0) + xb10 * (ln2 - 6.0 * yb * ln2 + 9.0 * yb2 * ln2 - 12.0 * yb3 * ln2 - 45.0 * yb4 * ln2 + 18.0 * yb5 * ln2 + yb6 * log(8.0)) + yb * ln64 + 2.0 * xb4 * (-2.0 + 23.0 * ln2 - 20.0 * yb3 * ln2 - 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2) + yb * ln64) - 2.0 * xb6 * (-2.0 + 23.0 * ln2 - 20.0 * yb3 * ln2 - 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2) + yb * ln64) + 8.0 * myi * xb3 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 6.0 * yb * ln2 + 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb3 * log(16.0) + log(8192.0))
                     + 8.0 * myi * xb7 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 6.0 * yb * ln2 + 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb3 * log(16.0) + log(8192.0)))) - 8.0 * tb * xb2 * (power_of<2>(vb) * (-ln2 - 6.0 * yb * ln2 - 9.0 * yb2 * ln2 - 12.0 * yb3 * ln2 + 45.0 * yb4 * ln2 + 18.0 * yb5 * ln2 - 2.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 - 2.0 * myi * xb13 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 + xb2 * (-4.0 + 47.0 * ln2 + 42.0 * yb * ln2 + 148.0 * yb3 * ln2 + 66.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 269.0 * ln2) + yb4 * (36.0 + 573.0 * ln2)) - xb12 * (-4.0 + 47.0 * ln2 + 42.0 * yb * ln2 + 148.0 * yb3 * ln2 + 66.0 * yb5 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 269.0 * ln2) + yb4 * (36.0 + 573.0 * ln2))
                     - xb6 * (-8.0 - 99.0 * ln2 - 114.0 * yb * ln2 + 412.0 * yb3 * ln2 + 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2)) + xb8 * (-8.0 - 99.0 * ln2 - 114.0 * yb * ln2 + 412.0 * yb3 * ln2 + 2262.0 * yb5 * ln2 + yb2 * (168.0 + 709.0 * ln2) + yb4 * (1224.0 + 1255.0 * ln2) + yb6 * (1944.0 + 1303.0 * ln2)) + 4.0 * myi * xb3 * (2.0 + 25.0 * ln2 - 18.0 * yb * ln2 - 68.0 * yb3 * ln2 - 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2)) + 4.0 * myi * xb11 * (2.0 + 25.0 * ln2 - 18.0 * yb * ln2 - 68.0 * yb3 * ln2 - 42.0 * yb5 * ln2 + yb2 * (6.0 + 49.0 * ln2) + 9.0 * yb6 * (-6.0 + 67.0 * ln2) + yb4 * (-18.0 + 2107.0 * ln2))
                     - 8.0 * myi * xb7 * (2.0 + 121.0 * ln2 + 78.0 * yb * ln2 - 132.0 * yb3 * ln2 - 1098.0 * yb5 * ln2 + yb2 * (-26.0 + 113.0 * ln2) + yb6 * (-342.0 + 2011.0 * ln2) + yb4 * (-210.0 + 3611.0 * ln2)) + xb4 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 + 162.0 * yb * ln2 - 252.0 * yb3 * ln2 - 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) - xb10 * (4.0 + yb2 * (76.0 - 21.0 * ln2) + 147.0 * ln2 + 162.0 * yb * ln2 - 252.0 * yb3 * ln2 - 2214.0 * yb5 * ln2 + yb6 * (468.0 + 4089.0 * ln2) + yb4 * (348.0 + 9513.0 * ln2)) - 2.0 * myi * xb5 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 + 198.0 * yb * ln2 - 116.0 * yb3 * ln2 - 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2))
                     - 2.0 * myi * xb9 * (yb2 * (64.0 - 1447.0 * ln2) + 193.0 * ln2 + 198.0 * yb * ln2 - 116.0 * yb3 * ln2 - 2130.0 * yb5 * ln2 + yb6 * (576.0 + 3283.0 * ln2) + yb4 * (384.0 + 12275.0 * ln2)) - yb6 * log(8.0) + xb14 * (ln2 + 9.0 * yb2 * ln2 + 12.0 * yb3 * ln2 - 45.0 * yb4 * ln2 - 18.0 * yb5 * ln2 + yb6 * log(8.0) + yb * ln64)) - 8.0 * vb * xb2 * (ln2 + 27.0 * yb2 * ln2 - 57.0 * yb4 * ln2 + 2.0 * myi * xb * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) * ln2 + 2.0 * myi * xb9 * (-1.0 + 21.0 * yb2 - 39.0 * yb4 + 51.0 * yb6) * ln2 - xb2 * (-4.0 + 69.0 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 529.0 * ln2) + 3.0 * yb4 * (12.0 + 545.0 * ln2)) + xb8 * (-4.0 + 69.0 * ln2 - 3.0 * yb2 * (4.0 + 115.0 * ln2) + yb6 * (108.0 + 529.0 * ln2) + 3.0 * yb4 * (12.0 + 545.0 * ln2)) - 2.0 * xb4 * (-2.0 + 35.0 * ln2 + 9.0 * yb6 * (38.0 + 143.0 * ln2) + yb2 * (26.0 + 353.0 * ln2) + yb4 * (210.0 + 1301.0 * ln2))
                     - 4.0 * myi * xb5 * (4.0 + 27.0 * ln2 + yb2 * (-20.0 + 41.0 * ln2) + yb6 * (-396.0 + 383.0 * ln2) + yb4 * (-228.0 + 1757.0 * ln2)) + xb6 * (-4.0 + 70.0 * ln2 + 18.0 * yb6 * (38.0 + 143.0 * ln2) + yb2 * (52.0 + 706.0 * ln2) + yb4 * (420.0 + 2602.0 * ln2)) - yb6 * log(8.0) + xb10 * (-ln2 - 27.0 * yb2 * ln2 + 57.0 * yb4 * ln2 + yb6 * log(8.0)) - 8.0 * myi * xb3 * (1.0 + yb6 * (-27.0 + 211.0 * ln2) + yb4 * (-9.0 + 833.0 * ln2) + yb2 * (3.0 + log(32.0)) + log(128.0)) - 8.0 * myi * xb7 * (1.0 + yb6 * (-27.0 + 211.0 * ln2) + yb4 * (-9.0 + 833.0 * ln2) + yb2 * (3.0 + log(32.0)) + log(128.0)))
                   - xb2 * (-24.0 * yb * ln2 - 36.0 * yb2 * ln2 - 48.0 * yb3 * ln2 + 180.0 * yb4 * ln2 + 72.0 * yb5 * ln2 - 12.0 * yb6 * ln2 - 8.0 * myi * xb * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 - 8.0 * myi * xb9 * (-1.0 - 6.0 * yb + 39.0 * yb2 - 12.0 * yb3 - 51.0 * yb4 + 18.0 * yb5 + 45.0 * yb6) * ln2 + 4.0 * xb2 * (-4.0 + 45.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 + 9.0 * yb4 * (4.0 + 63.0 * ln2) - 3.0 * yb2 * (4.0 + 73.0 * ln2) + yb6 * (108.0 + 215.0 * ln2)) - 4.0 * xb8 * (-4.0 + 45.0 * ln2 - 18.0 * yb * ln2 + 28.0 * yb3 * ln2 + 246.0 * yb5 * ln2 + 9.0 * yb4 * (4.0 + 63.0 * ln2) - 3.0 * yb2 * (4.0 + 73.0 * ln2) + yb6 * (108.0 + 215.0 * ln2)) + 8.0 * xb4 * (-2.0 + 23.0 * ln2 - 6.0 * yb * ln2 + 20.0 * yb3 * ln2 + 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2))
                     - 8.0 * xb6 * (-2.0 + 23.0 * ln2 - 6.0 * yb * ln2 + 20.0 * yb3 * ln2 + 114.0 * yb5 * ln2 + 21.0 * yb4 * (10.0 + 49.0 * ln2) + yb2 * (26.0 + 279.0 * ln2) + 3.0 * yb6 * (114.0 + 335.0 * ln2)) + 16.0 * myi * xb5 * (4.0 + 51.0 * ln2 + 18.0 * yb * ln2 - 28.0 * yb3 * ln2 - 246.0 * yb5 * ln2 + 33.0 * yb6 * (-12.0 + 25.0 * ln2) + yb2 * (-20.0 + 43.0 * ln2) + yb4 * (-228.0 + 2569.0 * ln2)) - log(16.0) + xb10 * (24.0 * yb * ln2 + 36.0 * yb2 * ln2 + 48.0 * yb3 * ln2 - 180.0 * yb4 * ln2 - 72.0 * yb5 * ln2 + 12.0 * yb6 * ln2 + log(16.0)) + 32.0 * myi * xb3 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 4.0 * yb3 * ln2 - 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb * ln64 + log(8192.0)) + 32.0 * myi * xb7 * (1.0 + yb2 * (3.0 - 31.0 * ln2) - 4.0 * yb3 * ln2 - 66.0 * yb5 * ln2 + 3.0 * yb6 * (-9.0 + 97.0 * ln2) + yb4 * (-9.0 + 1103.0 * ln2) + yb * ln64 + log(8192.0)))));

            const complex<double> term1 = -(80.0 * lnmuhat) / 81.0 + (2.0 * xb4 * (-991.0 + 108.0 * ln2 - 36.0 * yb2 * (135.0 + 28.0 * ln2) + 9.0 * yb4 * (-957.0 + 100.0 * ln2))
                  + 72.0 * xb2 * (-1.0 + yb2) * (2.0 + yb2 * (-13.0 + 14.0 * ln2) - ln4) + 72.0 * xb6 * (-1.0 + yb2) * (2.0 + yb2 * (-13.0 + 14.0 * ln2) - ln4) + 9.0 * (1.0 - 4.0 * yb2 + 3.0 * yb4) * (-1.0 + log(16.0))
                  + 9.0 * xb8 * (1.0 - 4.0 * yb2 + 3.0 * yb4) * (-1.0 + log(16.0))) / (1944.0 * xb4 * power_of<2>(1.0 + 3.0 * yb2));

            const complex<double> f27bpart1 = (num1 * log(xb)) / denom1 + (num4 * dilog((-myi) * xb) + num3 * dilog(myi * xb) - (num3 * power_of<2>(log(1.0 - myi * xb))) / 2.0 - (num4 * power_of<2>(log(1.0 + myi * xb))) / 2.0 + num3 * log(1.0 - myi * xb) * log(xb)
                    + num4 * log(1.0 + myi * xb) * log(xb)) / denom3 + (-(num2 * ln1myb) + num2 * ln1pyb) / denom2
                + (num9 * dilog(-(vb / w4)) + num9 * dilog(w4 / (-1.0 + w4)) - num9 * dilog(w4 / (1.0 + w4)) - num9 * dilog((vb + w4) / (-1.0 + w4)) + num9 * dilog((vb + w4) / (1.0 + w4))
                    + num9 * dilog(vb / w5) - num9 * dilog(w5 / (-1.0 + w5)) + num9 * dilog(w5 / (1.0 + w5)) + num9 * dilog((-vb + w5) / (-1.0 + w5)) - num9 * dilog((-vb + w5) / (1.0 + w5))
                    - num9 * dilog(w4 / (w4 - w7)) + num9 * dilog((vb + w4) / (w4 - w7)) - num9 * dilog(w5 / (w5 + w7)) + num9 * dilog((-vb + w5) / (w5 + w7)) + 4.0 * num9 * ln2 * log(1.0 - vb)
                    - 4.0 * num9 * ln2 * log(1.0 + vb) - num9 * log((1.0 + vb) / (1.0 - w4)) * log((vb + w4) / w4) + num9 * log((1.0 - vb) / (1.0 + w4)) * log((vb + w4) / w4)
                    + num9 * log(1.0 - vb / w5) * log((-1.0 + vb) / (-1.0 + w5)) - num9 * log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 + w5)) + num9 * log((vb + w4) / w4) * log(-((vb + w7) / (w4 - w7)))
                    + num9 * log(1.0 - vb / w5) * log((vb + w7) / (w5 + w7)) + (2.0 * num9 * log(1.0 - vb) - 2.0 * num9 * log(1.0 + vb)) * log(xb) + (2.0 * myi) * num9 * M_PI * log(1.0 + w4inv) * my_sign(-imag(w4)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv)
                    - (2.0 * myi) * num9 * M_PI * log((-1.0 + w4) / w4) * my_sign(imag(w4)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)
                    + (2.0 * myi) * num9 * M_PI * log(1.0 - w7 / w4) * my_sign(imag(w4 / w7)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) - (2.0 * myi) * num9 * M_PI * log(1.0 + w5inv) * my_sign(-imag(w5)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                    + (2.0 * myi) * num9 * M_PI * log((-1.0 + w5) / w5) * my_sign(imag(w5)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * num9 * M_PI * log((w5 + w7) / w5) * my_sign(-imag(w5 / w7)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5)) / denom6
                + (-(num8 * dilog(tb / w4)) - num8 * dilog(w4 / (-1.0 + w4)) - num7 * dilog(w4 / (1.0 + w4)) + num8 * dilog((-tb + w4) / (-1.0 + w4)) + num7 * dilog((-tb + w4) / (1.0 + w4))
                    - num8 * dilog(-(tb / w5)) - num7 * dilog(w5 / (-1.0 + w5)) - num8 * dilog(w5 / (1.0 + w5)) + num7 * dilog((tb + w5) / (-1.0 + w5)) + num8 * dilog((tb + w5) / (1.0 + w5))
                    - num7 * dilog(w4 / (w4 - w7)) + num7 * dilog((-tb + w4) / (w4 - w7)) - num7 * dilog(w5 / (w5 + w7)) + num7 * dilog((tb + w5) / (w5 + w7)) + 4.0 * num8 * ln2 * log(1.0 - tb)
                    + 4.0 * num7 * ln2 * log(1.0 + tb) + num8 * log(1.0 - tb / w4) * log((-1.0 + tb) / (-1.0 + w4)) + num7 * log(1.0 - tb / w4) * log((1.0 + tb) / (1.0 + w4))
                    + num7 * log((1.0 + tb) / (1.0 - w5)) * log((tb + w5) / w5) + num8 * log((1.0 - tb) / (1.0 + w5)) * log((tb + w5) / w5) + num7 * log(1.0 - tb / w4) * log((tb - w7) / (w4 - w7))
                    + num7 * log((tb + w5) / w5) * log((-tb + w7) / (w5 + w7)) + (2.0 * num8 * log(1.0 - tb) + 2.0 * num7 * log(1.0 + tb)) * log(xb)
                    + (2.0 * myi) * num7 * M_PI * log(1.0 + w4inv) * my_sign(-imag(w4)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) + (2.0 * myi) * num8 * M_PI * log((-1.0 + w4) / w4) * my_sign(imag(w4)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4)
                    + (2.0 * myi) * num7 * M_PI * log(1.0 - w7 / w4) * my_sign(imag(w4 / w7)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + (2.0 * myi) * num8 * M_PI * log(1.0 + w5inv) * my_sign(-imag(w5)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv)
                    + (2.0 * myi) * num7 * M_PI * log((-1.0 + w5) / w5) * my_sign(imag(w5)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) + (2.0 * myi) * num7 * M_PI * log((w5 + w7) / w5) * my_sign(-imag(w5 / w7)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)) / denom5
                + ((-num10 - num11) * dilog(-myi / (-myi + wx3)) + (-num10 - num11) * dilog(myi / (myi + wx3)) + (-num10 - num11) * dilog(-myi / (-myi + wx4))
                    + (-num10 - num11) * dilog(myi / (myi + wx4)) + num10 * dilog((myi - xb) / (myi + wx3)) + num10 * dilog((myi - xb) / (myi + wx4)) + num5 * dilog(-(xb / wx3)) + num6 * dilog(xb / wx3)
                    + num5 * dilog(-(xb / wx4)) + num6 * dilog(xb / wx4) + num11 * dilog((-myi + xb) / (-myi + wx3)) + num11 * dilog((-myi + xb) / (-myi + wx4)) + num10 * dilog((myi + xb) / (myi - wx3))
                    + num11 * dilog((myi + xb) / (myi + wx3)) + num10 * dilog((myi + xb) / (myi - wx4)) + num11 * dilog((myi + xb) / (myi + wx4)) + num11 * log((wx3 - xb) / (myi + wx3)) * log(1.0 - myi * xb)
                    + num11 * log((wx3 - xb) / (-myi + wx3)) * log(1.0 + myi * xb) + (-2.0 * num10 * ln2 + num5 * log(xb)) * log((wx3 + xb) / wx3) - 2.0 * num10 * ln2 * log((wx4 + xb) / wx4)
                    + log(1.0 - myi * xb) * (num11 * log((wx4 - xb) / (myi + wx4)) + num10 * log((wx3 + xb) / (-myi + wx3)) + num10 * log((wx4 + xb) / (-myi + wx4)))
                    + log(1.0 + myi * xb) * (num11 * log((wx4 - xb) / (-myi + wx4)) + num10 * log((wx3 + xb) / (myi + wx3)) + num10 * log((wx4 + xb) / (myi + wx4))) - 2.0 * num11 * ln2 * log(1.0 - xb / wx3)
                    - 2.0 * num11 * ln2 * log(1.0 - xb / wx4) + log(xb) * (num5 * log((wx4 + xb) / wx4) + num6 * log(1.0 - xb / wx3) + num6 * log(1.0 - xb / wx4))
                    + (2.0 * myi) * num11 * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * num10 * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                    + (2.0 * myi) * num11 * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * num10 * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                    + (2.0 * myi) * num10 * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * num11 * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                    + (2.0 * myi) * num10 * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * num11 * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) / denom4;

            const complex<double> f27bpart2 = (num12 * ((-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * power_of<2>(log(1.0 - myi * xb)) + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * power_of<2>(log(1.0 + myi * xb))
                + dilog(1.0 / (1.0 + w7)) * (4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb) - 4.0 * log(xb)) + dilog(tb) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog(-vb) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb))
                + dilog((1.0 + vb) / (1.0 - w7)) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog((-1.0 + tb) / (-1.0 + w7)) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog((1.0 - tb) / 2.0) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb))
                + dilog(-tb) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog((1.0 + tb) / 2.0) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog((1.0 - vb) / 2.0) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog(vb) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb))
                + dilog((1.0 + vb) / 2.0) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog((1.0 + tb) / (1.0 + w7)) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog((1.0 - vb) / (1.0 + w7)) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb))
                + dilog(1.0 / (1.0 - w7)) * (-4.0 * log(1.0 - myi * xb) - 4.0 * log(1.0 + myi * xb) + 4.0 * log(xb)) + dilog(-myi / (-myi + wx3)) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb)
                + dilog(myi / (myi + wx3)) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb)
                + dilog(-myi / (-myi + wx4)) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb)
                + dilog(myi / (myi + wx4)) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb)
                + dilog(1.0 / 2.0 + (myi / 2.0) * xb) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb)
                + dilog(((-0.5) * myi) * (myi + xb)) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb)
                + dilog(-(xb / wx3)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog(xb / wx3) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog(-(xb / wx4)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog(xb / wx4) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog((myi - xb) / (myi + wx3)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((myi - xb) / (myi + wx4)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((-myi + xb) / (-myi + wx3)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((-myi + xb) / (-myi + wx4)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((myi + xb) / (myi - wx3)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((myi + xb) / (myi + wx3)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((myi + xb) / (myi - wx4)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((myi + xb) / (myi + wx4)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog((-myi) * xb) * (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 2.0 * ln1myb - 4.0 * log(yb) + 2.0 * ln1pyb)
                + dilog(myi * xb) * (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 2.0 * ln1myb - 4.0 * log(yb) + 2.0 * ln1pyb)
                + li2half * (4.0 * log(1.0 - tb) + 4.0 * log(tb) - 4.0 * log(1.0 + tb) - 4.0 * log(1.0 - vb) + 4.0 * log(vb) + 4.0 * log(1.0 + vb) - 4.0 * log(1.0 - tb / w7) - 4.0 * log((vb + w7) / w7) + 8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb) - 8.0 * log(xb) + 4.0 * ln1myb - 8.0 * log(yb) + 4.0 * ln1pyb)
                + log(xb) * (-2.0 * ln2 * log(1.0 - tb) + power_of<2>(log(1.0 - tb)) - 2.0 * ln2 * log(1.0 + tb) + power_of<2>(log(1.0 + tb)) - 2.0 * ln2 * log(1.0 - vb) + power_of<2>(log(1.0 - vb)) - 2.0 * ln2 * log(1.0 + vb) + power_of<2>(log(1.0 + vb)) - 2.0 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) + 2.0 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7))
                  - 2.0 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) + 2.0 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7)) + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx3 + xb) / wx3)
                  + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx4 + xb) / wx4) + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log(1.0 - xb / wx3)
                  + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log(1.0 - xb / wx4) - (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) + (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7)
                  + (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7) - (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)) + log(1.0 - myi * xb) * (2.0 * ln2 * log(1.0 - tb) - power_of<2>(log(1.0 - tb)) + 2.0 * ln2 * log(1.0 + tb) - power_of<2>(log(1.0 + tb)) + 2.0 * ln2 * log(1.0 - vb) - power_of<2>(log(1.0 - vb))
                  + 2.0 * ln2 * log(1.0 + vb) - power_of<2>(log(1.0 + vb)) + 2.0 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) - 2.0 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7)) + 2.0 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) - 2.0 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7))
                  + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx3 - xb) / (myi + wx3)) + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx4 - xb) / (myi + wx4))
                   + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7)) * log(1.0 / 2.0 + (myi / 2.0) * xb)
                  + (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7)) * log(xb) + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx3 + xb) / (-myi + wx3))
                   + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx4 + xb) / (-myi + wx4)) + (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7)
                  - (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7) - (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7) + (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7))
                + log(1.0 + myi * xb) * (2.0 * ln2 * log(1.0 - tb) - power_of<2>(log(1.0 - tb)) + 2.0 * ln2 * log(1.0 + tb) - power_of<2>(log(1.0 + tb)) + 2.0 * ln2 * log(1.0 - vb) - power_of<2>(log(1.0 - vb)) + 2.0 * ln2 * log(1.0 + vb) - power_of<2>(log(1.0 + vb)) + 2.0 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) - 2.0 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7))
                  + 2.0 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) - 2.0 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7)) + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx3 - xb) / (-myi + wx3))
                  + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx4 - xb) / (-myi + wx4)) + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7)
                    + 2.0 * log((vb + w7) / w7)) * log(1.0 / 2.0 - (myi / 2.0) * xb) + (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7)) * log(xb)
                  + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx3 + xb) / (myi + wx3)) + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx4 + xb) / (myi + wx4))
                  + (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) - (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7) - (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7) + (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7))
                + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                + (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                + (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                + (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                + (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) + ln1myb * (log((wx3 - xb) / (myi + wx3)) * log(1.0 - myi * xb) - power_of<2>(log(1.0 - myi * xb)) + log((wx3 - xb) / (-myi + wx3)) * log(1.0 + myi * xb) - power_of<2>(log(1.0 + myi * xb))
                  + log(1.0 - myi * xb) * (log((wx4 - xb) / (myi + wx4)) - 2.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) + 2.0 * log(xb) + log((wx3 + xb) / (-myi + wx3)) + log((wx4 + xb) / (-myi + wx4))) + log(1.0 + myi * xb) * (log((wx4 - xb) / (-myi + wx4)) - 2.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) + 2.0 * log(xb) + log((wx3 + xb) / (myi + wx3)) + log((wx4 + xb) / (myi + wx4)))
                  + log(xb) * (-log((wx3 + xb) / wx3) - log((wx4 + xb) / wx4) - log(1.0 - xb / wx3) - log(1.0 - xb / wx4)) + (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                  + (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                  + (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + ln1pyb * (log((wx3 - xb) / (myi + wx3)) * log(1.0 - myi * xb) - power_of<2>(log(1.0 - myi * xb)) + log((wx3 - xb) / (-myi + wx3)) * log(1.0 + myi * xb) - power_of<2>(log(1.0 + myi * xb))
                  + log(1.0 - myi * xb) * (log((wx4 - xb) / (myi + wx4)) - 2.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) + 2.0 * log(xb) + log((wx3 + xb) / (-myi + wx3)) + log((wx4 + xb) / (-myi + wx4))) + log(1.0 + myi * xb) * (log((wx4 - xb) / (-myi + wx4)) - 2.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) + 2.0 * log(xb) + log((wx3 + xb) / (myi + wx3)) + log((wx4 + xb) / (myi + wx4)))
                  + log(xb) * (-log((wx3 + xb) / wx3) - log((wx4 + xb) / wx4) - log(1.0 - xb / wx3) - log(1.0 - xb / wx4)) + (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                  + (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                  + (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + log(yb) * (-2.0 * log((wx3 - xb) / (myi + wx3)) * log(1.0 - myi * xb) + 2.0 * power_of<2>(log(1.0 - myi * xb)) - 2.0 * log((wx3 - xb) / (-myi + wx3)) * log(1.0 + myi * xb)
                  + 2.0 * power_of<2>(log(1.0 + myi * xb)) + log(1.0 - myi * xb) * (-2.0 * log((wx4 - xb) / (myi + wx4)) + 4.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) - 4.0 * log(xb) - 2.0 * log((wx3 + xb) / (-myi + wx3)) - 2.0 * log((wx4 + xb) / (-myi + wx4)))
                  + log(1.0 + myi * xb) * (-2.0 * log((wx4 - xb) / (-myi + wx4)) + 4.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) - 4.0 * log(xb) - 2.0 * log((wx3 + xb) / (myi + wx3)) - 2.0 * log((wx4 + xb) / (myi + wx4))) + log(xb) * (2.0 * log((wx3 + xb) / wx3) + 2.0 * log((wx4 + xb) / wx4) + 2.0 * log(1.0 - xb / wx3) + 2.0 * log(1.0 - xb / wx4))
                  - (4.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (4.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (4.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (4.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                  - (4.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (4.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (4.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (4.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)))) / denom7;

            const complex<double> f27bpart3 = (num12 * ((pisqu * ln2) / 3.0 - 8.0 * trilog(-1.0) + 28.0 * li3half + 2.0 * trilog(1.0 / (1.0 - tb)) + 4.0 * trilog((1.0 - tb) / 2.0) - 2.0 * trilog(-tb) + 2.0 * trilog(tb) + 2.0 * trilog(tb / (-1.0 + tb)) - trilog((2.0 * tb) / (-1.0 + tb)) - 2.0 * trilog(1.0 / (1.0 + tb)) + 2.0 * trilog((-1.0 + tb) / (1.0 + tb)) - 2.0 * trilog(tb / (1.0 + tb))
                + trilog((2.0 * tb) / (1.0 + tb)) + 4.0 * trilog((1.0 + tb) / 2.0) + 2.0 * trilog((1.0 + tb) / (-1.0 + tb)) - 2.0 * trilog(1.0 / (1.0 - vb)) + 4.0 * trilog((1.0 - vb) / 2.0) + 2.0 * trilog(-vb) - 2.0 * trilog(vb) - 2.0 * trilog(vb / (-1.0 + vb)) + trilog((2.0 * vb) / (-1.0 + vb)) + 2.0 * trilog(1.0 / (1.0 + vb)) + 2.0 * trilog((-1.0 + vb) / (1.0 + vb))
                + 2.0 * trilog(vb / (1.0 + vb)) - trilog((2.0 * vb) / (1.0 + vb)) + 4.0 * trilog((1.0 + vb) / 2.0) + 2.0 * trilog((1.0 + vb) / (-1.0 + vb)) + 2.0 * trilog(1.0 / (1.0 - w4)) - trilog((1.0 + vb) / (1.0 - w4)) - 4.0 * trilog(1.0 - w4) + 2.0 * trilog((1.0 - w4) / (1.0 + vb)) + trilog((tb - w4) / (-1.0 + tb)) - trilog((tb - w4) / (1.0 + tb))
                - trilog((-1.0 + tb) / (-1.0 + w4)) + 2.0 * trilog((-1.0 + w4) / (-1.0 + tb)) - trilog((-0.5) * (((1.0 + tb) * (-1.0 + w4)) / (tb - w4))) + 2.0 * trilog(-w4inv) - 2.0 * trilog(w4inv) - trilog((tb - w4) / ((-1.0 + tb) * w4)) + 2.0 * trilog((-1.0 + w4) / (2.0 * w4)) - 2.0 * trilog(w4 / (-1.0 + w4)) + 2.0 * trilog(1.0 / (1.0 + w4))
                - trilog((1.0 + tb) / (1.0 + w4)) - trilog((1.0 - vb) / (1.0 + w4)) + 2.0 * trilog((1.0 - w4) / (1.0 + w4)) - trilog(((1.0 + tb) * (-1.0 + w4)) / ((-1.0 + tb) * (1.0 + w4))) - trilog(((-1.0 + vb) * (-1.0 + w4)) / ((1.0 + vb) * (1.0 + w4))) + 2.0 * trilog(w4 / (1.0 + w4)) + 2.0 * trilog((1.0 + w4) / (1.0 - w4)) - trilog(((-1.0 + tb) * (1.0 + w4)) / (2.0 * (tb - w4)))
                - trilog(((-1.0 + tb) * (1.0 + w4)) / ((1.0 + tb) * (-1.0 + w4))) - trilog(((1.0 + vb) * (1.0 + w4)) / ((-1.0 + vb) * (-1.0 + w4))) + 2.0 * trilog((1.0 + w4) / (2.0 * w4)) + trilog((-tb + w4) / (-1.0 + w4)) - trilog((-tb + w4) / (1.0 + w4)) - trilog((-0.5) * (((-1.0 + vb) * (-1.0 + w4)) / (vb + w4))) - trilog(((1.0 + vb) * (1.0 + w4)) / (2.0 * (vb + w4)))
                - trilog((vb + w4) / (-1.0 + vb)) + trilog((vb + w4) / (1.0 + vb)) + trilog((vb + w4) / (-1.0 + w4)) - trilog((vb + w4) / (1.0 + w4)) - trilog((tb - w4) / (tb - tb * w4)) + trilog((tb - w4) / (tb + tb * w4)) + trilog(-((tb - w4) / (w4 + tb * w4))) - trilog((vb + w4) / (vb - vb * w4)) + trilog((vb + w4) / (w4 - vb * w4))
                + trilog((vb + w4) / (vb + vb * w4)) - trilog((vb + w4) / (w4 + vb * w4)) + 2.0 * trilog(1.0 / (1.0 - w5)) - trilog((1.0 + tb) / (1.0 - w5)) - trilog((vb - w5) / (-1.0 + vb)) + trilog((vb - w5) / (1.0 + vb)) - trilog((-1.0 + vb) / (-1.0 + w5)) - trilog((-0.5) * (((1.0 + vb) * (-1.0 + w5)) / (vb - w5))) - 2.0 * trilog(-w5inv)
                + 2.0 * trilog(w5inv) + trilog((vb - w5) / ((-1.0 + vb) * w5)) + 2.0 * trilog((-1.0 + w5) / (2.0 * w5)) + 2.0 * trilog(w5 / (-1.0 + w5)) + 2.0 * trilog(1.0 / (1.0 + w5)) - trilog((1.0 - tb) / (1.0 + w5)) - trilog((1.0 + vb) / (1.0 + w5)) + 2.0 * trilog((1.0 - w5) / (1.0 + w5)) - trilog(((-1.0 + tb) * (-1.0 + w5)) / ((1.0 + tb) * (1.0 + w5)))
                - trilog(((1.0 + vb) * (-1.0 + w5)) / ((-1.0 + vb) * (1.0 + w5))) - 2.0 * trilog(w5 / (1.0 + w5)) - 4.0 * trilog(1.0 + w5) + 2.0 * trilog((1.0 + w5) / (1.0 - tb)) + 2.0 * trilog((1.0 + w5) / (1.0 + vb)) + 2.0 * trilog((1.0 + w5) / (1.0 - w5)) - trilog(((-1.0 + vb) * (1.0 + w5)) / (2.0 * (vb - w5))) - trilog(((1.0 + tb) * (1.0 + w5)) / ((-1.0 + tb) * (-1.0 + w5)))
                - trilog(((-1.0 + vb) * (1.0 + w5)) / ((1.0 + vb) * (-1.0 + w5))) + 2.0 * trilog((1.0 + w5) / (2.0 * w5)) - trilog((-0.5) * (((-1.0 + tb) * (-1.0 + w5)) / (tb + w5))) - trilog(((1.0 + tb) * (1.0 + w5)) / (2.0 * (tb + w5))) + trilog((tb + w5) / (-1.0 + tb)) - trilog((tb + w5) / (1.0 + tb)) - trilog((tb + w5) / (-1.0 + w5)) + trilog((tb + w5) / (1.0 + w5))
                - trilog((-vb + w5) / (-1.0 + w5)) + trilog((-vb + w5) / (1.0 + w5)) + trilog((tb + w5) / (tb - tb * w5)) - trilog((tb + w5) / (w5 - tb * w5)) - trilog((tb + w5) / (tb + tb * w5)) + trilog((tb + w5) / (w5 + tb * w5)) + trilog((vb - w5) / (vb - vb * w5)) - trilog((vb - w5) / (vb + vb * w5)) - trilog(-((vb - w5) / (w5 + vb * w5)))
                + 2.0 * trilog(1.0 + w7inv) - 8.0 * trilog(1.0 / (1.0 - w7)) + 4.0 * trilog((1.0 + vb) / (1.0 - w7)) + 2.0 * trilog((-1.0 + tb) / (tb - w7)) - trilog((tb - w4) / (tb - w7)) - trilog((tb + w5) / (tb - w7)) + 2.0 * trilog((tb - w7) / (-1.0 + tb)) - 2.0 * trilog((tb - w7) / (1.0 + tb)) + 2.0 * trilog(w4 / (w4 - w7)) - trilog((-tb + w4) / (w4 - w7))
                - trilog((vb + w4) / (w4 - w7)) - trilog((tb - w7) / (w4 - w7)) - trilog(((-1.0 + w4) * (tb - w7)) / ((-1.0 + tb) * (w4 - w7))) + trilog(((1.0 + w4) * (tb - w7)) / ((1.0 + tb) * (w4 - w7))) - trilog(((-1.0 + tb) * (w4 - w7)) / ((-1.0 + w4) * (tb - w7))) + trilog(((1.0 + tb) * (w4 - w7)) / ((1.0 + w4) * (tb - w7)))
                + 4.0 * trilog((-1.0 + tb) / (-1.0 + w7)) - trilog(((-1.0 + w4) * (tb - w7)) / ((tb - w4) * (-1.0 + w7))) - trilog(-(((1.0 + w5) * (tb - w7)) / ((tb + w5) * (-1.0 + w7)))) - trilog(-(((-1.0 + tb) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) - trilog(-(((1.0 + vb) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7))))
                - trilog((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (tb - w7))) + 2.0 * trilog(-w7inv) - 2.0 * trilog(w7inv) + 2.0 * trilog((w4 - w7) / ((-1.0 + w4) * w7)) + 2.0 * trilog((-1.0 + w7) / (2.0 * w7)) - 2.0 * trilog((-1.0 + w7) / w7) + 2.0 * trilog(-w7) - 6.0 * trilog(w7) + 2.0 * trilog(w7 / w4) + 2.0 * trilog(-(w7 / w5)) - trilog(((-1.0 + tb) * w7) / (tb - w7))
                - trilog(-(((1.0 + tb) * w7) / (tb - w7))) + trilog(-(((tb + w5) * w7) / (w5 * (tb - w7)))) + trilog(-(w7 / (w4 - w7))) + 2.0 * trilog(((-1.0 + w4) * w7) / (w4 - w7)) - 2.0 * trilog(-(((1.0 + w4) * w7) / (w4 - w7))) + trilog(-(((vb + w4) * w7) / (vb * (w4 - w7)))) - 6.0 * trilog(w7 / (-1.0 + w7)) - trilog(((-1.0 + tb) * w7) / (tb * (-1.0 + w7)))
                - trilog(((1.0 + vb) * w7) / (vb * (-1.0 + w7))) + 2.0 * trilog(((-1.0 + w4) * w7) / (w4 * (-1.0 + w7))) + 2.0 * trilog(((1.0 + w5) * w7) / (w5 * (-1.0 + w7))) + 4.0 * trilog(1.0 / (1.0 + w7)) - 2.0 * trilog((1.0 + tb) / (1.0 + w7)) - 2.0 * trilog((1.0 - vb) / (1.0 + w7)) + 2.0 * trilog((1.0 - w7) / (1.0 + w7)) + trilog(((1.0 + w4) * (tb - w7)) / ((tb - w4) * (1.0 + w7)))
                + trilog(-(((-1.0 + w5) * (tb - w7)) / ((tb + w5) * (1.0 + w7)))) + trilog(-(((1.0 + tb) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) + trilog(-(((-1.0 + vb) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) - trilog(((1.0 + tb) * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7))) - trilog(((-1.0 + vb) * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7))) + 2.0 * trilog(w7 / (1.0 + w7))
                - trilog(((-1.0 + vb) * w7) / (vb * (1.0 + w7))) - 2.0 * trilog(((-1.0 + w5) * w7) / (w5 * (1.0 + w7))) - 2.0 * trilog((1.0 + w7) / (1.0 - w7)) + trilog(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (tb - w7))) + trilog(((-1.0 + tb) * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7))) + trilog(((1.0 + vb) * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7))) - 2.0 * trilog((1.0 + w7) / (2.0 * w7))
                + trilog((-1.0 + w7) / (-tb + w7)) + trilog(((-tb + w4) * w7) / (w4 * (-tb + w7))) - trilog((1.0 + w7) / (-tb + w7)) + 3.0 * trilog((-tb + w7) / (-1.0 + w7)) - trilog((-tb + w7) / (1.0 + w7)) + 2.0 * trilog((1.0 + vb) / (vb + w7)) - trilog((vb + w4) / (vb + w7)) - trilog((vb - w5) / (vb + w7))
                - trilog(((1.0 + vb) * (w4 - w7)) / ((-1.0 + w4) * (vb + w7))) + trilog(((-1.0 + vb) * (w4 - w7)) / ((1.0 + w4) * (vb + w7))) + trilog((-1.0 + w7) / (vb + w7)) - trilog((-0.5) * (((-1.0 + vb) * (-1.0 + w7)) / (vb + w7))) - trilog(((1.0 + vb) * w7) / (vb + w7)) + trilog(((vb + w4) * w7) / (w4 * (vb + w7)))
                + trilog(((-vb + w5) * w7) / (w5 * (vb + w7))) - trilog((1.0 + w7) / (vb + w7)) + trilog(((1.0 + vb) * (1.0 + w7)) / (2.0 * (vb + w7))) - 2.0 * trilog((vb + w7) / (-1.0 + vb)) + 2.0 * trilog((vb + w7) / (1.0 + vb)) - trilog(-((vb + w7) / (w4 - w7))) - trilog(((-1.0 + w4) * (vb + w7)) / ((1.0 + vb) * (w4 - w7)))
                + trilog(((1.0 + w4) * (vb + w7)) / ((-1.0 + vb) * (w4 - w7))) + 3.0 * trilog((vb + w7) / (-1.0 + w7)) - trilog(((-1.0 + w4) * (vb + w7)) / ((vb + w4) * (-1.0 + w7))) - trilog(-(((1.0 + w5) * (vb + w7)) / ((vb - w5) * (-1.0 + w7)))) - trilog((vb + w7) / (1.0 + w7)) + trilog(((1.0 + w4) * (vb + w7)) / ((vb + w4) * (1.0 + w7)))
                + trilog(-(((-1.0 + w5) * (vb + w7)) / ((vb - w5) * (1.0 + w7)))) + trilog(w7 / (-w4 + w7)) + trilog(((tb - w4) * w7) / (tb * (-w4 + w7))) + 2.0 * trilog(w5 / (w5 + w7)) - trilog((tb + w5) / (w5 + w7)) - trilog((-vb + w5) / (w5 + w7)) + trilog(((-1.0 + w5) * (tb - w7)) / ((1.0 + tb) * (w5 + w7)))
                - trilog(((1.0 + w5) * (tb - w7)) / ((-1.0 + tb) * (w5 + w7))) + 2.0 * trilog(w7 / (w5 + w7)) + trilog(((vb - w5) * w7) / (vb * (w5 + w7))) + 2.0 * trilog(((1.0 + w5) * w7) / (w5 + w7)) + trilog(((tb + w5) * w7) / (tb * (w5 + w7))) - trilog((-tb + w7) / (w5 + w7)) - trilog((vb + w7) / (w5 + w7))
                + trilog(((-1.0 + w5) * (vb + w7)) / ((-1.0 + vb) * (w5 + w7))) - trilog(((1.0 + w5) * (vb + w7)) / ((1.0 + vb) * (w5 + w7))) + trilog(((1.0 + tb) * (w5 + w7)) / ((-1.0 + w5) * (tb - w7))) - trilog(((-1.0 + tb) * (w5 + w7)) / ((1.0 + w5) * (tb - w7))) - trilog(((1.0 + vb) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))
                - trilog(((-1.0 + tb) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))) + trilog(((-1.0 + vb) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))) + trilog(((1.0 + tb) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))) + trilog(((-1.0 + vb) * (w5 + w7)) / ((-1.0 + w5) * (vb + w7))) - trilog(((1.0 + vb) * (w5 + w7)) / ((1.0 + w5) * (vb + w7)))
                - trilog((w7 + tb * w7) / (tb + tb * w7)) - trilog((w7 - vb * w7) / (vb + w7)) + 2.0 * trilog((w4 - w7) / (w4 - w4 * w7)) - 2.0 * trilog((w4 - w7) / (w4 + w4 * w7)) - 2.0 * trilog(-((w4 - w7) / (w7 + w4 * w7))) - 2.0 * trilog((w7 + w4 * w7) / (w4 + w4 * w7)) + 2.0 * trilog((w5 + w7) / (w5 - w5 * w7)) - 2.0 * trilog((w5 + w7) / (w7 - w5 * w7))
                - 2.0 * trilog((w7 - w5 * w7) / (w5 + w7)) - 2.0 * trilog((w5 + w7) / (w5 + w5 * w7)) + 2.0 * trilog((w5 + w7) / (w7 + w5 * w7)) - 24.0 * trilog(-myi / wx3) - 24.0 * trilog(myi / wx3) - 40.0 * trilog(-myi / (-myi + wx3)) - 8.0 * trilog(wx3 / (-myi + wx3)) + 16.0 * trilog((-myi + wx3) / (2.0 * wx3)) - 16.0 * trilog((-myi + wx3) / wx3) - 40.0 * trilog(myi / (myi + wx3))
                + 16.0 * trilog((myi - wx3) / (myi + wx3)) - 8.0 * trilog(wx3 / (myi + wx3)) + 16.0 * trilog((myi + wx3) / (myi - wx3)) + 16.0 * trilog((myi + wx3) / (2.0 * wx3)) - 16.0 * trilog((myi + wx3) / wx3) - 24.0 * trilog(-myi / wx4) - 24.0 * trilog(myi / wx4) - 40.0 * trilog(-myi / (-myi + wx4)) - 8.0 * trilog(wx4 / (-myi + wx4)) + 16.0 * trilog((-myi + wx4) / (2.0 * wx4))
                - 16.0 * trilog((-myi + wx4) / wx4) - 40.0 * trilog(myi / (myi + wx4)) + 16.0 * trilog((myi - wx4) / (myi + wx4)) - 8.0 * trilog(wx4 / (myi + wx4)) + 16.0 * trilog((myi + wx4) / (myi - wx4)) + 16.0 * trilog((myi + wx4) / (2.0 * wx4)) - 16.0 * trilog((myi + wx4) / wx4) + 20.0 * trilog((myi - xb) / (myi + wx3)) + 20.0 * trilog((myi - xb) / (myi + wx4))
                + 8.0 * trilog((-myi + wx3) / (wx3 - xb)) + 8.0 * trilog((myi + wx3) / (wx3 - xb)) + 4.0 * trilog((wx3 - xb) / (-myi + wx3)) + 4.0 * trilog((wx3 - xb) / (myi + wx3)) + 8.0 * trilog((-myi + wx4) / (wx4 - xb)) + 8.0 * trilog((myi + wx4) / (wx4 - xb)) + 4.0 * trilog((wx4 - xb) / (-myi + wx4)) + 4.0 * trilog((wx4 - xb) / (myi + wx4))
                - 24.0 * trilog(1.0 / 2.0 - (myi / 2.0) * xb) - 24.0 * trilog(1.0 - myi * xb) - 8.0 * trilog(((-myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 - xb))) - 8.0 * trilog(((-myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 - xb))) - 24.0 * trilog((1.0 + myi * xb) / 2.0) - 24.0 * trilog(1.0 + myi * xb) - 8.0 * trilog(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 - xb)))
                - 8.0 * trilog(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 - xb))) - 4.0 * trilog((myi * (wx3 - xb)) / ((-myi + wx3) * xb)) - 4.0 * trilog(((-myi) * (wx3 - xb)) / ((myi + wx3) * xb)) - 4.0 * trilog((myi * (wx4 - xb)) / ((-myi + wx4) * xb)) - 4.0 * trilog(((-myi) * (wx4 - xb)) / ((myi + wx4) * xb)) - 24.0 * trilog((-myi) * xb) - 24.0 * trilog(myi * xb) - 8.0 * trilog(-(xb / wx3))
                - 8.0 * trilog(xb / wx3) - 8.0 * trilog(-(xb / wx4)) - 8.0 * trilog(xb / wx4) + 8.0 * trilog(-xb2) + 16.0 * trilog(-myi / (-myi + xb)) - 4.0 * trilog(((-myi) * (wx3 - xb)) / (wx3 * (-myi + xb))) - 4.0 * trilog(((-myi) * (wx4 - xb)) / (wx4 * (-myi + xb))) + 8.0 * trilog(xb / (-myi + xb)) - 24.0 * trilog((2.0 * xb) / (-myi + xb)) + 20.0 * trilog((-myi + xb) / (-myi + wx3))
                + 20.0 * trilog((-myi + xb) / (-myi + wx4)) - 16.0 * trilog((-myi + xb) * xbinv) + 4.0 * trilog((wx3 * (-myi + xb)) / ((-myi + wx3) * xb)) + 4.0 * trilog((wx3 * (-myi + xb)) / ((myi + wx3) * xb)) + 4.0 * trilog((wx4 * (-myi + xb)) / ((-myi + wx4) * xb)) + 4.0 * trilog((wx4 * (-myi + xb)) / ((myi + wx4) * xb)) + 16.0 * trilog(myi / (myi + xb))
                - 4.0 * trilog((myi * (wx3 - xb)) / (wx3 * (myi + xb))) - 4.0 * trilog((myi * (wx4 - xb)) / (wx4 * (myi + xb))) + 8.0 * trilog(xb / (myi + xb)) - 24.0 * trilog((2.0 * xb) / (myi + xb)) - 8.0 * trilog(((-myi + wx3) * (-myi + xb)) / ((myi + wx3) * (myi + xb))) - 8.0 * trilog(((myi + wx3) * (-myi + xb)) / ((-myi + wx3) * (myi + xb)))
                - 8.0 * trilog(((-myi + wx4) * (-myi + xb)) / ((myi + wx4) * (myi + xb))) - 8.0 * trilog(((myi + wx4) * (-myi + xb)) / ((-myi + wx4) * (myi + xb))) + 20.0 * trilog((myi + xb) / (myi - wx3)) + 20.0 * trilog((myi + xb) / (myi + wx3)) + 20.0 * trilog((myi + xb) / (myi - wx4)) + 20.0 * trilog((myi + xb) / (myi + wx4)) + 8.0 * trilog(-((myi + xb) / (wx3 - xb)))
                + 8.0 * trilog(-((myi + xb) / (wx4 - xb))) - 16.0 * trilog((myi + xb) * xbinv) + 4.0 * trilog((wx3 * (myi + xb)) / ((-myi + wx3) * xb)) + 4.0 * trilog((wx3 * (myi + xb)) / ((myi + wx3) * xb)) + 4.0 * trilog((wx4 * (myi + xb)) / ((-myi + wx4) * xb)) + 4.0 * trilog((wx4 * (myi + xb)) / ((myi + wx4) * xb)) - 8.0 * trilog(((-myi + wx3) * (myi + xb)) / ((myi + wx3) * (-myi + xb)))
                - 8.0 * trilog(((myi + wx3) * (myi + xb)) / ((-myi + wx3) * (-myi + xb))) - 8.0 * trilog(((-myi + wx4) * (myi + xb)) / ((myi + wx4) * (-myi + xb))) - 8.0 * trilog(((myi + wx4) * (myi + xb)) / ((-myi + wx4) * (-myi + xb))) + 8.0 * trilog((-myi + xb) / (-wx3 + xb)) + 4.0 * trilog((-wx3 + xb) / (-myi + xb)) + 4.0 * trilog((-wx3 + xb) / (myi + xb))
                + 8.0 * trilog((-myi + wx3) / (wx3 + xb)) + 8.0 * trilog((myi + wx3) / (wx3 + xb)) - 8.0 * trilog(((myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 + xb))) - 8.0 * trilog(((-myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 + xb))) + 8.0 * trilog((-myi + xb) / (wx3 + xb)) + 8.0 * trilog((myi + xb) / (wx3 + xb)) + 4.0 * trilog((wx3 + xb) / (-myi + wx3))
                + 4.0 * trilog((wx3 + xb) / (myi + wx3)) - 4.0 * trilog(((-myi) * (wx3 + xb)) / ((-myi + wx3) * xb)) - 4.0 * trilog((myi * (wx3 + xb)) / ((myi + wx3) * xb)) + 4.0 * trilog((wx3 + xb) / (-myi + xb)) - 4.0 * trilog(((-myi) * (wx3 + xb)) / (wx3 * (-myi + xb))) + 4.0 * trilog((wx3 + xb) / (myi + xb)) - 4.0 * trilog((myi * (wx3 + xb)) / (wx3 * (myi + xb)))
                + 8.0 * trilog((-myi + xb) / (-wx4 + xb)) + 4.0 * trilog((-wx4 + xb) / (-myi + xb)) + 4.0 * trilog((-wx4 + xb) / (myi + xb)) + 8.0 * trilog((-myi + wx4) / (wx4 + xb)) + 8.0 * trilog((myi + wx4) / (wx4 + xb)) - 8.0 * trilog(((myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 + xb))) - 8.0 * trilog(((-myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 + xb)))
                + 8.0 * trilog((-myi + xb) / (wx4 + xb)) + 8.0 * trilog((myi + xb) / (wx4 + xb)) + 4.0 * trilog((wx4 + xb) / (-myi + wx4)) + 4.0 * trilog((wx4 + xb) / (myi + wx4)) - 4.0 * trilog(((-myi) * (wx4 + xb)) / ((-myi + wx4) * xb)) - 4.0 * trilog((myi * (wx4 + xb)) / ((myi + wx4) * xb)) + 4.0 * trilog((wx4 + xb) / (-myi + xb))
                - 4.0 * trilog(((-myi) * (wx4 + xb)) / (wx4 * (-myi + xb))) + 4.0 * trilog((wx4 + xb) / (myi + xb)) - 4.0 * trilog((myi * (wx4 + xb)) / (wx4 * (myi + xb))) - 2.0 * dilog((-1.0 + w7) / (2.0 * w7)) * lnhalf - 2.0 * dilog((1.0 - w7) / (1.0 + w7)) * lnhalf + 2.0 * dilog((1.0 + w7) / (1.0 - w7)) * lnhalf + 2.0 * dilog((1.0 + w7) / (2.0 * w7)) * lnhalf
                - 16.0 * dilog((-myi + wx3) / (2.0 * wx3)) * lnhalf - 16.0 * dilog((myi - wx3) / (myi + wx3)) * lnhalf - 16.0 * dilog((myi + wx3) / (myi - wx3)) * lnhalf - 16.0 * dilog((myi + wx3) / (2.0 * wx3)) * lnhalf - 16.0 * dilog((-myi + wx4) / (2.0 * wx4)) * lnhalf - 16.0 * dilog((myi - wx4) / (myi + wx4)) * lnhalf
                - 16.0 * dilog((myi + wx4) / (myi - wx4)) * lnhalf - 16.0 * dilog((myi + wx4) / (2.0 * wx4)) * lnhalf - (10.0 * pisqu * ln2) / 3.0 + (2.0 * power_of<3>(ln2)) / 3.0 + (4.0 * pisqu * ln4) / 3.0 - dilog(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (tb - w7))) * log((1.0 - tb) / 2.0) - dilog(((-1.0 + tb) * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7))) * log((1.0 - tb) / 2.0)
                - (pisqu * log(1.0 - tb)) / 12.0 - (ln2squ * log(1.0 - tb)) / 2.0 + dilog(1.0 - tb) * log(1.0 - tb) + dilog(tb) * log(1.0 - tb) + dilog(((-1.0 + tb) * w7) / (tb - w7)) * log(1.0 - tb) + dilog(((-1.0 + tb) * w7) / (tb * (-1.0 + w7))) * log(1.0 - tb) - (ln2 * power_of<2>(log(1.0 - tb))) / 2.0 - (log((1.0 - tb) / 8.0) * power_of<2>(log(1.0 - tb))) / 6.0
                - power_of<3>(log(1.0 - tb)) / 6.0 + power_of<2>(log(1.0 - tb)) * log(tb) + dilog((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (tb - w7))) * log((1.0 + tb) / 2.0) + dilog(((1.0 + tb) * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7))) * log((1.0 + tb) / 2.0) - (power_of<2>(log(1.0 - tb)) * log((1.0 + tb) / 2.0)) / 2.0 + (5.0 * pisqu * log(1.0 + tb)) / 12.0 - (ln2squ * log(1.0 + tb)) / 2.0
                - dilog(-tb) * log(1.0 + tb) - dilog(1.0 + tb) * log(1.0 + tb) + dilog(-(((1.0 + tb) * w7) / (tb - w7))) * log(1.0 + tb) + dilog((w7 + tb * w7) / (tb + tb * w7)) * log(1.0 + tb) - ln2squ * log(1.0 + tb) + 2.0 * ln2 * log(1.0 - tb) * log(1.0 + tb) - log((1.0 - tb) / 2.0) * log(1.0 - tb) * log(1.0 + tb)
                - log(1.0 - tb) * log((1.0 + tb) / 2.0) * log(1.0 + tb) + (ln2 * power_of<2>(log(1.0 + tb))) / 2.0 + (ln64 * power_of<2>(log(1.0 + tb))) / 6.0 - (log((1.0 - tb) / 2.0) * power_of<2>(log(1.0 + tb))) / 2.0 - log(-tb) * power_of<2>(log(1.0 + tb)) + (log((1.0 + tb) / 8.0) * power_of<2>(log(1.0 + tb))) / 6.0 - power_of<3>(log(1.0 + tb)) / 6.0
                + dilog(((-1.0 + vb) * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7))) * log((1.0 - vb) / 2.0) + dilog((-0.5) * (((-1.0 + vb) * (-1.0 + w7)) / (vb + w7))) * log((1.0 - vb) / 2.0) + dilog(-2.0 / (-1.0 + w7)) * (-log(1.0 + tb) - log(1.0 - vb)) + (5.0 * pisqu * log(1.0 - vb)) / 12.0 - (ln2squ * log(1.0 - vb)) / 2.0 - dilog(1.0 - vb) * log(1.0 - vb)
                - dilog(vb) * log(1.0 - vb) + dilog(((-1.0 + vb) * w7) / (vb * (1.0 + w7))) * log(1.0 - vb) + dilog((w7 - vb * w7) / (vb + w7)) * log(1.0 - vb) - ln2squ * log(1.0 - vb) + (ln2 * power_of<2>(log(1.0 - vb))) / 2.0 + (ln64 * power_of<2>(log(1.0 - vb))) / 6.0 + (log((1.0 - vb) / 8.0) * power_of<2>(log(1.0 - vb))) / 6.0 - power_of<3>(log(1.0 - vb)) / 6.0
                + dilog(-w4inv) * (log(1.0 + tb) + log(1.0 - vb)) + dilog(1.0 / (1.0 + w4)) * (log(1.0 + tb) + log(1.0 - vb)) + dilog(1.0 / (1.0 - w5)) * (log(1.0 + tb) + log(1.0 - vb)) + dilog(w5inv) * (log(1.0 + tb) + log(1.0 - vb)) - power_of<2>(log(1.0 - vb)) * log(vb)
                - dilog(((1.0 + vb) * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7))) * log((1.0 + vb) / 2.0) - dilog(((1.0 + vb) * (1.0 + w7)) / (2.0 * (vb + w7))) * log((1.0 + vb) / 2.0) - (power_of<2>(log(1.0 - vb)) * log((1.0 + vb) / 2.0)) / 2.0 + dilog(w4inv) * (-log(1.0 - tb) - log(1.0 + vb)) + dilog(-w5inv) * (-log(1.0 - tb) - log(1.0 + vb))
                - (pisqu * log(1.0 + vb)) / 12.0 - (ln2squ * log(1.0 + vb)) / 2.0 + dilog(-vb) * log(1.0 + vb) + dilog(1.0 + vb) * log(1.0 + vb) + dilog(((1.0 + vb) * w7) / (vb * (-1.0 + w7))) * log(1.0 + vb) + dilog(((1.0 + vb) * w7) / (vb + w7)) * log(1.0 + vb) + 2.0 * ln2 * log(1.0 - vb) * log(1.0 + vb)
                - log((1.0 - vb) / 2.0) * log(1.0 - vb) * log(1.0 + vb) - log(1.0 - vb) * log((1.0 + vb) / 2.0) * log(1.0 + vb) - (ln2 * power_of<2>(log(1.0 + vb))) / 2.0 - (log((1.0 - vb) / 2.0) * power_of<2>(log(1.0 + vb))) / 2.0 + log(-vb) * power_of<2>(log(1.0 + vb)) - (log((1.0 + vb) / 8.0) * power_of<2>(log(1.0 + vb))) / 6.0 - power_of<3>(log(1.0 + vb)) / 6.0
                + dilog(1.0 / (1.0 - w4)) * (log(1.0 - tb) + log(1.0 + vb)) + dilog(1.0 / (1.0 + w5)) * (log(1.0 - tb) + log(1.0 + vb)) + dilog(2.0 / (1.0 + w7)) * (log(1.0 - tb) + log(1.0 + vb)) - dilog((tb - w4) / (-1.0 + tb)) * log(1.0 - tb / w4) + dilog((tb - w4) / (1.0 + tb)) * log(1.0 - tb / w4)
                + dilog((tb - w4) / ((-1.0 + tb) * w4)) * log(1.0 - tb / w4) - dilog((-tb + w4) / (-1.0 + w4)) * log(1.0 - tb / w4) + dilog((-tb + w4) / (1.0 + w4)) * log(1.0 - tb / w4) + dilog((tb - w4) / (tb - tb * w4)) * log(1.0 - tb / w4) - dilog((tb - w4) / (tb + tb * w4)) * log(1.0 - tb / w4)
                - dilog(-((tb - w4) / (w4 + tb * w4))) * log(1.0 - tb / w4) + dilog((tb - w4) / (tb - w7)) * log(1.0 - tb / w4) + dilog((-tb + w4) / (w4 - w7)) * log(1.0 - tb / w4) - dilog(((-tb + w4) * w7) / (w4 * (-tb + w7))) * log(1.0 - tb / w4) - dilog(((tb - w4) * w7) / (tb * (-w4 + w7))) * log(1.0 - tb / w4)
                + (power_of<2>(log(1.0 - tb)) * log(1.0 - tb / w4)) / 2.0 + (power_of<2>(log(1.0 + tb)) * log(1.0 - tb / w4)) / 2.0 - 2.0 * dilog((1.0 + w4) / (1.0 - w4)) * log(1.0 / (1.0 - w4)) - 2.0 * dilog((1.0 + w4) / (2.0 * w4)) * log(1.0 / (1.0 - w4)) - 2.0 * dilog((w4 - w7) / ((-1.0 + w4) * w7)) * log(1.0 / (1.0 - w4)) - 2.0 * dilog((w4 - w7) / (w4 - w4 * w7)) * log(1.0 / (1.0 - w4))
                + lnhalf * power_of<2>(log(1.0 / (1.0 - w4))) + ln2 * power_of<2>(log(1.0 / (1.0 - w4))) + dilog(((1.0 + vb) * (1.0 + w4)) / ((-1.0 + vb) * (-1.0 + w4))) * log((1.0 + vb) / (1.0 - w4)) + dilog(((1.0 + vb) * (1.0 + w4)) / (2.0 * (vb + w4))) * log((1.0 + vb) / (1.0 - w4)) + dilog(-(((1.0 + vb) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) * log((1.0 + vb) / (1.0 - w4))
                + dilog(((1.0 + vb) * (w4 - w7)) / ((-1.0 + w4) * (vb + w7))) * log((1.0 + vb) / (1.0 - w4)) - (log((1.0 - vb) / 2.0) * power_of<2>(log((1.0 + vb) / (1.0 - w4)))) / 2.0 - (log(-2.0 / (-1.0 + vb)) * power_of<2>(log((1.0 + vb) / (1.0 - w4)))) / 2.0 - (pisqu * log(1.0 - w4)) / 3.0 - power_of<3>(log(1.0 - w4)) / 3.0 + (pisqu * log((1.0 - w4) / (1.0 + tb))) / 6.0 + power_of<3>(log((1.0 - w4) / (1.0 + tb))) / 6.0
                + dilog(((-1.0 + tb) * (1.0 + w4)) / (2.0 * (tb - w4))) * log((-1.0 + tb) / (-1.0 + w4)) + dilog(((-1.0 + tb) * (1.0 + w4)) / ((1.0 + tb) * (-1.0 + w4))) * log((-1.0 + tb) / (-1.0 + w4)) + dilog(((-1.0 + tb) * (w4 - w7)) / ((-1.0 + w4) * (tb - w7))) * log((-1.0 + tb) / (-1.0 + w4))
                + dilog(-(((-1.0 + tb) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) * log((-1.0 + tb) / (-1.0 + w4)) - log((1.0 + tb) / 2.0) * log(1.0 - tb / w4) * log((-1.0 + tb) / (-1.0 + w4)) - (power_of<2>(log(1.0 - tb / w4)) * log((-1.0 + tb) / (-1.0 + w4))) / 2.0 - (log(2.0 / (1.0 + tb)) * power_of<2>(log((-1.0 + tb) / (-1.0 + w4)))) / 2.0
                - (log((1.0 + tb) / 2.0) * power_of<2>(log((-1.0 + tb) / (-1.0 + w4)))) / 2.0 + (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-2.0 * (tb - w4)) / ((1.0 + tb) * (-1.0 + w4)))) / 2.0 - (power_of<2>(log(1.0 - tb / w4)) * log((-1.0 + w4) / (-1.0 + tb))) / 2.0 + (pisqu * log((-1.0 + w4) / (-1.0 + vb))) / 6.0 + power_of<3>(log((-1.0 + w4) / (-1.0 + vb))) / 6.0
                + (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-0.5) * (((1.0 + tb) * (-1.0 + w4)) / (tb - w4)))) / 2.0 - power_of<2>(log(1.0 / (1.0 - w4))) * log((-1.0 + w4) / (2.0 * w4)) + (power_of<2>(log(1.0 - tb / w4)) * log((tb * (-1.0 + w4)) / ((-1.0 + tb) * w4))) / 2.0 + (pisqu * log(w4 / (-1.0 + tb))) / 6.0 + power_of<3>(log(w4 / (-1.0 + tb))) / 6.0 - (pisqu * log(w4 / (1.0 + tb))) / 6.0
                - power_of<3>(log(w4 / (1.0 + tb))) / 6.0 - (pisqu * log(w4 / (1.0 - vb))) / 6.0 - power_of<3>(log(w4 / (1.0 - vb))) / 6.0 + (pisqu * log(-(w4 / (1.0 + vb)))) / 6.0 + power_of<3>(log(-(w4 / (1.0 + vb)))) / 6.0 - power_of<2>(log(1.0 / (1.0 - w4))) * log((2.0 * w4) / (-1.0 + w4)) + (power_of<2>(log(1.0 - tb / w4)) * log(((-1.0 + tb) * w4) / (tb * (-1.0 + w4)))) / 2.0 - (pisqu * log(w4 / (vb * (-1.0 + w4)))) / 6.0
                - power_of<3>(log(w4 / (vb * (-1.0 + w4)))) / 6.0 - 2.0 * dilog((-1.0 + w4) / (2.0 * w4)) * log(1.0 / (1.0 + w4)) - 2.0 * dilog((1.0 - w4) / (1.0 + w4)) * log(1.0 / (1.0 + w4)) + 2.0 * dilog((w4 - w7) / (w4 + w4 * w7)) * log(1.0 / (1.0 + w4)) + 2.0 * dilog(-((w4 - w7) / (w7 + w4 * w7))) * log(1.0 / (1.0 + w4)) + lnhalf * power_of<2>(log(1.0 / (1.0 + w4)))
                + ln2 * power_of<2>(log(1.0 / (1.0 + w4))) + dilog((-0.5) * (((1.0 + tb) * (-1.0 + w4)) / (tb - w4))) * log((1.0 + tb) / (1.0 + w4)) + dilog(((1.0 + tb) * (-1.0 + w4)) / ((-1.0 + tb) * (1.0 + w4))) * log((1.0 + tb) / (1.0 + w4)) - dilog(((1.0 + tb) * (w4 - w7)) / ((1.0 + w4) * (tb - w7))) * log((1.0 + tb) / (1.0 + w4))
                - dilog(-(((1.0 + tb) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) * log((1.0 + tb) / (1.0 + w4)) - log((1.0 - tb) / 2.0) * log(1.0 - tb / w4) * log((1.0 + tb) / (1.0 + w4)) + (power_of<2>(log(1.0 - tb / w4)) * log((1.0 + tb) / (1.0 + w4))) / 2.0 - (log((1.0 - tb) / 2.0) * power_of<2>(log((1.0 + tb) / (1.0 + w4)))) / 2.0 - (log(-2.0 / (-1.0 + tb)) * power_of<2>(log((1.0 + tb) / (1.0 + w4)))) / 2.0
                + dilog(((-1.0 + vb) * (-1.0 + w4)) / ((1.0 + vb) * (1.0 + w4))) * log((1.0 - vb) / (1.0 + w4)) + dilog((-0.5) * (((-1.0 + vb) * (-1.0 + w4)) / (vb + w4))) * log((1.0 - vb) / (1.0 + w4)) - dilog(-(((-1.0 + vb) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) * log((1.0 - vb) / (1.0 + w4))
                - dilog(((-1.0 + vb) * (w4 - w7)) / ((1.0 + w4) * (vb + w7))) * log((1.0 - vb) / (1.0 + w4)) - (log(2.0 / (1.0 + vb)) * power_of<2>(log((1.0 - vb) / (1.0 + w4)))) / 2.0 - (log((1.0 + vb) / 2.0) * power_of<2>(log((1.0 - vb) / (1.0 + w4)))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log((2.0 * (tb - w4)) / ((-1.0 + tb) * (1.0 + w4)))) / 2.0 - power_of<2>(log(1.0 / (1.0 + w4))) * log((2.0 * w4) / (1.0 + w4))
                - (pisqu * log(1.0 + w4)) / 3.0 - power_of<3>(log(1.0 + w4)) / 3.0 + (pisqu * log((1.0 + w4) / (1.0 - tb))) / 6.0 + power_of<3>(log((1.0 + w4) / (1.0 - tb))) / 6.0 + (power_of<2>(log(1.0 - tb / w4)) * log((1.0 + w4) / (1.0 + tb))) / 2.0 + (pisqu * log((1.0 + w4) / (1.0 + vb))) / 6.0 + power_of<3>(log((1.0 + w4) / (1.0 + vb))) / 6.0 + (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log(((-1.0 + tb) * (1.0 + w4)) / (2.0 * (tb - w4)))) / 2.0
                - power_of<2>(log(1.0 / (1.0 + w4))) * log((1.0 + w4) / (2.0 * w4)) - (power_of<2>(log(1.0 - tb)) * log((-tb + w4) / (-1.0 + w4))) / 2.0 - (power_of<2>(log(1.0 + tb)) * log((-tb + w4) / (1.0 + w4))) / 2.0 + (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((-0.5) * (((-1.0 + vb) * (-1.0 + w4)) / (vb + w4)))) / 2.0
                + (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log(((1.0 + vb) * (1.0 + w4)) / (2.0 * (vb + w4)))) / 2.0 - (pisqu * log((-0.5) * (((-1.0 + w4) * (1.0 + w4)) / (vb + w4)))) / 6.0 - power_of<3>(log((-0.5) * (((-1.0 + w4) * (1.0 + w4)) / (vb + w4)))) / 6.0 - (power_of<2>(log(1.0 + vb)) * log((vb + w4) / (-1.0 + w4))) / 2.0
                + (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((-2.0 * (vb + w4)) / ((-1.0 + vb) * (-1.0 + w4)))) / 2.0 + dilog((1.0 + w4) / (1.0 + w7)) * (-log(1.0 - tb / w4) - log((vb + w4) / w4)) + dilog((-w4 + w7) / (1.0 + w7)) * (-log(1.0 - tb / w4) - log((vb + w4) / w4)) + dilog((vb + w4) / (-1.0 + vb)) * log((vb + w4) / w4)
                - dilog((vb + w4) / (1.0 + vb)) * log((vb + w4) / w4) - dilog((vb + w4) / (-1.0 + w4)) * log((vb + w4) / w4) + dilog((vb + w4) / (1.0 + w4)) * log((vb + w4) / w4) + dilog((vb + w4) / (vb - vb * w4)) * log((vb + w4) / w4) - dilog((vb + w4) / (w4 - vb * w4)) * log((vb + w4) / w4)
                - dilog((vb + w4) / (vb + vb * w4)) * log((vb + w4) / w4) + dilog((vb + w4) / (w4 + vb * w4)) * log((vb + w4) / w4) + dilog((vb + w4) / (w4 - w7)) * log((vb + w4) / w4) - dilog(-(((vb + w4) * w7) / (vb * (w4 - w7)))) * log((vb + w4) / w4) + dilog((vb + w4) / (vb + w7)) * log((vb + w4) / w4)
                - dilog(((vb + w4) * w7) / (w4 * (vb + w7))) * log((vb + w4) / w4) + (power_of<2>(log(1.0 - vb)) * log((vb + w4) / w4)) / 2.0 + (power_of<2>(log(1.0 + vb)) * log((vb + w4) / w4)) / 2.0 - log((1.0 - vb) / 2.0) * log((1.0 + vb) / (1.0 - w4)) * log((vb + w4) / w4) - log((1.0 + vb) / 2.0) * log((1.0 - vb) / (1.0 + w4)) * log((vb + w4) / w4)
                - (log((1.0 + vb) / (1.0 - w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 - (log((1.0 - w4) / (1.0 + vb)) * power_of<2>(log((vb + w4) / w4))) / 2.0 + (log((vb * (-1.0 + w4)) / ((1.0 + vb) * w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 + (log(((1.0 + vb) * w4) / (vb * (-1.0 + w4))) * power_of<2>(log((vb + w4) / w4))) / 2.0 + (log((1.0 - vb) / (1.0 + w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0
                - (log(((-1.0 + vb) * w4) / (vb * (1.0 + w4))) * power_of<2>(log((vb + w4) / w4))) / 2.0 + (log((1.0 + w4) / (1.0 - vb)) * power_of<2>(log((vb + w4) / w4))) / 2.0 - (log((vb * (1.0 + w4)) / ((-1.0 + vb) * w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 + dilog((1.0 - w4) / 2.0) * (log(1.0 - tb / w4) + log((vb + w4) / w4))
                + dilog((1.0 + w4) / 2.0) * (log(1.0 - tb / w4) + log((vb + w4) / w4)) + dilog((-1.0 + w4) / (-1.0 + w7)) * (log(1.0 - tb / w4) + log((vb + w4) / w4)) + dilog((-w4 + w7) / (-1.0 + w7)) * (log(1.0 - tb / w4) + log((vb + w4) / w4)) - (power_of<2>(log(1.0 - vb)) * log((vb + w4) / (1.0 + w4))) / 2.0
                + (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log((2.0 * (vb + w4)) / ((1.0 + vb) * (1.0 + w4)))) / 2.0 - (pisqu * log(w4 / (tb - tb * w4))) / 6.0 - power_of<3>(log(w4 / (tb - tb * w4))) / 6.0 + (pisqu * log(w4 / (tb + tb * w4))) / 6.0 + power_of<3>(log(w4 / (tb + tb * w4))) / 6.0 - (power_of<2>(log(1.0 - tb / w4)) * log((tb + tb * w4) / (w4 + tb * w4))) / 2.0
                - (power_of<2>(log(1.0 - tb / w4)) * log((w4 + tb * w4) / (tb + tb * w4))) / 2.0 + (pisqu * log(-(w4 / (vb + vb * w4)))) / 6.0 + power_of<3>(log(-(w4 / (vb + vb * w4)))) / 6.0 - (pisqu * log((1.0 - power_of<2>(w4)) / (2.0 * tb - 2.0 * w4))) / 6.0 - power_of<3>(log((1.0 - power_of<2>(w4)) / (2.0 * tb - 2.0 * w4))) / 6.0 - (pisqu * log((-1.0 + power_of<2>(w4)) / (2.0 * (tb - w4)))) / 6.0 - power_of<3>(log((-1.0 + power_of<2>(w4)) / (2.0 * (tb - w4)))) / 6.0
                + (pisqu * log((-0.5) * ((-1.0 + power_of<2>(w4)) / w4))) / 3.0 + power_of<3>(log((-0.5) * ((-1.0 + power_of<2>(w4)) / w4))) / 3.0 + (pisqu * log((-1.0 + power_of<2>(w4)) / (2.0 * w4))) / 3.0 + power_of<3>(log((-1.0 + power_of<2>(w4)) / (2.0 * w4))) / 3.0 - (pisqu * log((-1.0 + power_of<2>(w4)) / (2.0 * (vb + w4)))) / 6.0 - power_of<3>(log((-1.0 + power_of<2>(w4)) / (2.0 * (vb + w4)))) / 6.0 + dilog((vb - w5) / (-1.0 + vb)) * log(1.0 - vb / w5)
                - dilog((vb - w5) / (1.0 + vb)) * log(1.0 - vb / w5) - dilog((vb - w5) / ((-1.0 + vb) * w5)) * log(1.0 - vb / w5) + dilog((-vb + w5) / (-1.0 + w5)) * log(1.0 - vb / w5) - dilog((-vb + w5) / (1.0 + w5)) * log(1.0 - vb / w5) - dilog((vb - w5) / (vb - vb * w5)) * log(1.0 - vb / w5) + dilog((vb - w5) / (vb + vb * w5)) * log(1.0 - vb / w5)
                + dilog(-((vb - w5) / (w5 + vb * w5))) * log(1.0 - vb / w5) + dilog((vb - w5) / (vb + w7)) * log(1.0 - vb / w5) - dilog(((-vb + w5) * w7) / (w5 * (vb + w7))) * log(1.0 - vb / w5) + dilog((-vb + w5) / (w5 + w7)) * log(1.0 - vb / w5) - dilog(((vb - w5) * w7) / (vb * (w5 + w7))) * log(1.0 - vb / w5)
                + (power_of<2>(log(1.0 - vb)) * log(1.0 - vb / w5)) / 2.0 + (power_of<2>(log(1.0 + vb)) * log(1.0 - vb / w5)) / 2.0 + dilog(-w7inv) * (2.0 * lnhalf - 2.0 * log(1.0 / (1.0 + w4)) - 2.0 * log(1.0 / (1.0 - w5))) + dilog(1.0 / (1.0 + w7)) * (2.0 * lnhalf - log(1.0 - tb) + log(1.0 + tb) + log(1.0 - vb) - log(1.0 + vb) - 2.0 * log(1.0 / (1.0 + w4))
                  - 2.0 * log(1.0 / (1.0 - w5))) - 2.0 * dilog((1.0 + w5) / (1.0 - w5)) * log(1.0 / (1.0 - w5)) - 2.0 * dilog((1.0 + w5) / (2.0 * w5)) * log(1.0 / (1.0 - w5)) + 2.0 * dilog((w5 + w7) / (w7 - w5 * w7)) * log(1.0 / (1.0 - w5)) + 2.0 * dilog((w5 + w7) / (w5 + w5 * w7)) * log(1.0 / (1.0 - w5)) + lnhalf * power_of<2>(log(1.0 / (1.0 - w5)))
                + ln2 * power_of<2>(log(1.0 / (1.0 - w5))) + dilog((1.0 + tb) / (-1.0 + tb)) * (-log((1.0 + tb) / (1.0 + w4)) - log((1.0 + tb) / (1.0 - w5))) + dilog(((1.0 + tb) * (1.0 + w5)) / ((-1.0 + tb) * (-1.0 + w5))) * log((1.0 + tb) / (1.0 - w5)) + dilog(((1.0 + tb) * (1.0 + w5)) / (2.0 * (tb + w5))) * log((1.0 + tb) / (1.0 - w5))
                - dilog(((1.0 + tb) * (w5 + w7)) / ((-1.0 + w5) * (tb - w7))) * log((1.0 + tb) / (1.0 - w5)) - dilog(((1.0 + tb) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))) * log((1.0 + tb) / (1.0 - w5)) - (log((1.0 - tb) / 2.0) * power_of<2>(log((1.0 + tb) / (1.0 - w5)))) / 2.0 - (log(-2.0 / (-1.0 + tb)) * power_of<2>(log((1.0 + tb) / (1.0 - w5)))) / 2.0
                + dilog((1.0 + tb) / (tb - w7)) * (-log((1.0 + tb) / 2.0) - log(1.0 + tb) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 + tb) / (1.0 - w5))) - (pisqu * log(1.0 - w5)) / 3.0 - power_of<3>(log(1.0 - w5)) / 3.0 + (pisqu * log((1.0 - w5) / (1.0 + vb))) / 6.0 + power_of<3>(log((1.0 - w5) / (1.0 + vb))) / 6.0
                + dilog((-1.0 + vb) / (1.0 + vb)) * (-log((1.0 - vb) / (1.0 + w4)) - log((-1.0 + vb) / (-1.0 + w5))) + dilog((1.0 - vb) / 2.0) * (-2.0 * log(1.0 - vb) - 2.0 * log(1.0 + vb) - log((1.0 - vb) / (1.0 + w4)) - log((vb + w4) / w4) - log(1.0 - vb / w5) - log((-1.0 + vb) / (-1.0 + w5)))
                + dilog(((-1.0 + vb) * (1.0 + w5)) / (2.0 * (vb - w5))) * log((-1.0 + vb) / (-1.0 + w5)) + dilog(((-1.0 + vb) * (1.0 + w5)) / ((1.0 + vb) * (-1.0 + w5))) * log((-1.0 + vb) / (-1.0 + w5)) - dilog(((-1.0 + vb) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))) * log((-1.0 + vb) / (-1.0 + w5))
                - dilog(((-1.0 + vb) * (w5 + w7)) / ((-1.0 + w5) * (vb + w7))) * log((-1.0 + vb) / (-1.0 + w5)) - log((1.0 + vb) / 2.0) * log(1.0 - vb / w5) * log((-1.0 + vb) / (-1.0 + w5)) + (power_of<2>(log(1.0 - vb / w5)) * log((-1.0 + vb) / (-1.0 + w5))) / 2.0 - (log(2.0 / (1.0 + vb)) * power_of<2>(log((-1.0 + vb) / (-1.0 + w5)))) / 2.0 - (log((1.0 + vb) / 2.0) * power_of<2>(log((-1.0 + vb) / (-1.0 + w5)))) / 2.0
                + dilog((-1.0 + vb) / (vb + w7)) * (-log((1.0 - vb) / 2.0) - log(1.0 - vb) + log((1.0 - vb) / (1.0 + w4)) + log((-1.0 + vb) / (-1.0 + w5))) + dilog((1.0 - vb) / (1.0 + w7)) * (-log((1.0 - vb) / 2.0) - log(1.0 - vb) + log((1.0 - vb) / (1.0 + w4)) + log((vb + w4) / w4) + log(1.0 - vb / w5) + log((-1.0 + vb) / (-1.0 + w5)))
                + (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((-2.0 * (vb - w5)) / ((1.0 + vb) * (-1.0 + w5)))) / 2.0 + (pisqu * log((-1.0 + w5) / (-1.0 + tb))) / 6.0 + power_of<3>(log((-1.0 + w5) / (-1.0 + tb))) / 6.0 + (power_of<2>(log(1.0 - vb / w5)) * log((-1.0 + w5) / (-1.0 + vb))) / 2.0 + (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((-0.5) * (((1.0 + vb) * (-1.0 + w5)) / (vb - w5)))) / 2.0
                - power_of<2>(log(1.0 / (1.0 - w5))) * log((-1.0 + w5) / (2.0 * w5)) - (power_of<2>(log(1.0 - vb / w5)) * log((vb * (-1.0 + w5)) / ((-1.0 + vb) * w5))) / 2.0 + (pisqu * log(w5 / (1.0 - tb))) / 6.0 + power_of<3>(log(w5 / (1.0 - tb))) / 6.0 - (pisqu * log(-(w5 / (1.0 + tb)))) / 6.0 - power_of<3>(log(-(w5 / (1.0 + tb)))) / 6.0 - (pisqu * log(w5 / (-1.0 + vb))) / 6.0 - power_of<3>(log(w5 / (-1.0 + vb))) / 6.0
                + (pisqu * log(w5 / (1.0 + vb))) / 6.0 + power_of<3>(log(w5 / (1.0 + vb))) / 6.0 - power_of<2>(log(1.0 / (1.0 - w5))) * log((2.0 * w5) / (-1.0 + w5)) + (pisqu * log(w5 / (tb * (-1.0 + w5)))) / 6.0 + power_of<3>(log(w5 / (tb * (-1.0 + w5)))) / 6.0 - (power_of<2>(log(1.0 - vb / w5)) * log(((-1.0 + vb) * w5) / (vb * (-1.0 + w5)))) / 2.0 - 2.0 * dilog((-1.0 + w5) / (2.0 * w5)) * log(1.0 / (1.0 + w5))
                - 2.0 * dilog((1.0 - w5) / (1.0 + w5)) * log(1.0 / (1.0 + w5)) - 2.0 * dilog((w5 + w7) / (w5 - w5 * w7)) * log(1.0 / (1.0 + w5)) - 2.0 * dilog((w5 + w7) / (w7 + w5 * w7)) * log(1.0 / (1.0 + w5)) + lnhalf * power_of<2>(log(1.0 / (1.0 + w5))) + ln2 * power_of<2>(log(1.0 / (1.0 + w5)))
                + dilog(w7inv) * (-2.0 * lnhalf + 2.0 * log(1.0 / (1.0 - w4)) + 2.0 * log(1.0 / (1.0 + w5))) + dilog(1.0 / (1.0 - w7)) * (-2.0 * lnhalf - log(1.0 - tb) + log(1.0 + tb) + log(1.0 - vb) - log(1.0 + vb) + 2.0 * log(1.0 / (1.0 - w4)) + 2.0 * log(1.0 / (1.0 + w5)))
                + dilog(-1.0) * (2.0 * log(1.0 / (1.0 - w4)) + 2.0 * log(1.0 / (1.0 + w4)) + 2.0 * log(1.0 / (1.0 - w5)) + 2.0 * log(1.0 / (1.0 + w5))) + dilog((-1.0 + tb) / (1.0 + tb)) * (-log((-1.0 + tb) / (-1.0 + w4)) - log((1.0 - tb) / (1.0 + w5)))
                + dilog((-1.0 + tb) / (tb - w7)) * (log((1.0 - tb) / 2.0) - log(1.0 - tb) - log((-1.0 + tb) / (-1.0 + w4)) - log((1.0 - tb) / (1.0 + w5))) + dilog(((-1.0 + tb) * (-1.0 + w5)) / ((1.0 + tb) * (1.0 + w5))) * log((1.0 - tb) / (1.0 + w5)) + dilog((-0.5) * (((-1.0 + tb) * (-1.0 + w5)) / (tb + w5))) * log((1.0 - tb) / (1.0 + w5))
                + dilog(((-1.0 + tb) * (w5 + w7)) / ((1.0 + w5) * (tb - w7))) * log((1.0 - tb) / (1.0 + w5)) + dilog(((-1.0 + tb) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))) * log((1.0 - tb) / (1.0 + w5)) - (log(2.0 / (1.0 + tb)) * power_of<2>(log((1.0 - tb) / (1.0 + w5)))) / 2.0 - (log((1.0 + tb) / 2.0) * power_of<2>(log((1.0 - tb) / (1.0 + w5)))) / 2.0
                + dilog((1.0 + vb) / (-1.0 + vb)) * (-log((1.0 + vb) / (1.0 - w4)) - log((1.0 + vb) / (1.0 + w5))) + dilog((1.0 + vb) / (vb + w7)) * (log((1.0 + vb) / 2.0) - log(1.0 + vb) - log((1.0 + vb) / (1.0 - w4)) - log((1.0 + vb) / (1.0 + w5)))
                + dilog((1.0 + vb) / 2.0) * (-2.0 * log(1.0 - vb) - 2.0 * log(1.0 + vb) - log((1.0 + vb) / (1.0 - w4)) - log((vb + w4) / w4) - log(1.0 - vb / w5) - log((1.0 + vb) / (1.0 + w5))) + dilog((1.0 + vb) / (1.0 - w7)) * (log((1.0 + vb) / 2.0) - log(1.0 + vb) - log((1.0 + vb) / (1.0 - w4)) - log((vb + w4) / w4) - log(1.0 - vb / w5)
                  - log((1.0 + vb) / (1.0 + w5))) + dilog((-0.5) * (((1.0 + vb) * (-1.0 + w5)) / (vb - w5))) * log((1.0 + vb) / (1.0 + w5)) + dilog(((1.0 + vb) * (-1.0 + w5)) / ((-1.0 + vb) * (1.0 + w5))) * log((1.0 + vb) / (1.0 + w5)) + dilog(((1.0 + vb) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))) * log((1.0 + vb) / (1.0 + w5))
                + dilog(((1.0 + vb) * (w5 + w7)) / ((1.0 + w5) * (vb + w7))) * log((1.0 + vb) / (1.0 + w5)) - log((1.0 - vb) / 2.0) * log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 + w5)) - (power_of<2>(log(1.0 - vb / w5)) * log((1.0 + vb) / (1.0 + w5))) / 2.0 - (log((1.0 - vb) / 2.0) * power_of<2>(log((1.0 + vb) / (1.0 + w5)))) / 2.0 - (log(-2.0 / (-1.0 + vb)) * power_of<2>(log((1.0 + vb) / (1.0 + w5)))) / 2.0
                + (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log((2.0 * (vb - w5)) / ((-1.0 + vb) * (1.0 + w5)))) / 2.0 - power_of<2>(log(1.0 / (1.0 + w5))) * log((2.0 * w5) / (1.0 + w5)) - (pisqu * log(1.0 + w5)) / 3.0 - power_of<3>(log(1.0 + w5)) / 3.0 + (pisqu * log((1.0 + w5) / (1.0 + tb))) / 6.0 + power_of<3>(log((1.0 + w5) / (1.0 + tb))) / 6.0 + (pisqu * log((1.0 + w5) / (1.0 - vb))) / 6.0 + power_of<3>(log((1.0 + w5) / (1.0 - vb))) / 6.0
                - (power_of<2>(log(1.0 - vb / w5)) * log((1.0 + w5) / (1.0 + vb))) / 2.0 + (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log(((-1.0 + vb) * (1.0 + w5)) / (2.0 * (vb - w5)))) / 2.0 - power_of<2>(log(1.0 / (1.0 + w5))) * log((1.0 + w5) / (2.0 * w5)) + (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((-0.5) * (((-1.0 + tb) * (-1.0 + w5)) / (tb + w5)))) / 2.0
                + (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log(((1.0 + tb) * (1.0 + w5)) / (2.0 * (tb + w5)))) / 2.0 - (pisqu * log((-0.5) * (((-1.0 + w5) * (1.0 + w5)) / (tb + w5)))) / 6.0 - power_of<3>(log((-0.5) * (((-1.0 + w5) * (1.0 + w5)) / (tb + w5)))) / 6.0 - (power_of<2>(log(1.0 + tb)) * log((tb + w5) / (-1.0 + w5))) / 2.0
                + (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((-2.0 * (tb + w5)) / ((-1.0 + tb) * (-1.0 + w5)))) / 2.0 + dilog((1.0 - w5) / (1.0 + w7)) * (-log(1.0 - vb / w5) - log((tb + w5) / w5)) + dilog((w5 + w7) / (1.0 + w7)) * (-log(1.0 - vb / w5) - log((tb + w5) / w5))
                + dilog((1.0 + tb) / 2.0) * (-2.0 * log(1.0 - tb) - 2.0 * log(1.0 + tb) - log(1.0 - tb / w4) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 + tb) / (1.0 - w5)) - log((tb + w5) / w5)) + dilog((-1.0 + tb) / (-1.0 + w7)) * (log((1.0 - tb) / 2.0) - log(1.0 - tb) - log(1.0 - tb / w4) - log((-1.0 + tb) / (-1.0 + w4)) - log((1.0 - tb) / (1.0 + w5))
                  - log((tb + w5) / w5)) + dilog((1.0 - tb) / 2.0) * (-2.0 * log(1.0 - tb) - 2.0 * log(1.0 + tb) - log(1.0 - tb / w4) - log((-1.0 + tb) / (-1.0 + w4)) - log((1.0 - tb) / (1.0 + w5)) - log((tb + w5) / w5)) - dilog((tb + w5) / (-1.0 + tb)) * log((tb + w5) / w5) + dilog((tb + w5) / (1.0 + tb)) * log((tb + w5) / w5)
                + dilog((tb + w5) / (-1.0 + w5)) * log((tb + w5) / w5) - dilog((tb + w5) / (1.0 + w5)) * log((tb + w5) / w5) - dilog((tb + w5) / (tb - tb * w5)) * log((tb + w5) / w5) + dilog((tb + w5) / (w5 - tb * w5)) * log((tb + w5) / w5) + dilog((tb + w5) / (tb + tb * w5)) * log((tb + w5) / w5)
                - dilog((tb + w5) / (w5 + tb * w5)) * log((tb + w5) / w5) + dilog((tb + w5) / (tb - w7)) * log((tb + w5) / w5) - dilog(-(((tb + w5) * w7) / (w5 * (tb - w7)))) * log((tb + w5) / w5) + dilog((tb + w5) / (w5 + w7)) * log((tb + w5) / w5) - dilog(((tb + w5) * w7) / (tb * (w5 + w7))) * log((tb + w5) / w5)
                + (power_of<2>(log(1.0 - tb)) * log((tb + w5) / w5)) / 2.0 + (power_of<2>(log(1.0 + tb)) * log((tb + w5) / w5)) / 2.0 - log((1.0 - tb) / 2.0) * log((1.0 + tb) / (1.0 - w5)) * log((tb + w5) / w5) - log((1.0 + tb) / 2.0) * log((1.0 - tb) / (1.0 + w5)) * log((tb + w5) / w5) + (log((1.0 + tb) / (1.0 - w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0
                + (log((1.0 - w5) / (1.0 + tb)) * power_of<2>(log((tb + w5) / w5))) / 2.0 - (log((tb * (-1.0 + w5)) / ((1.0 + tb) * w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0 - (log(((1.0 + tb) * w5) / (tb * (-1.0 + w5))) * power_of<2>(log((tb + w5) / w5))) / 2.0 - (log((1.0 - tb) / (1.0 + w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0 + (log(((-1.0 + tb) * w5) / (tb * (1.0 + w5))) * power_of<2>(log((tb + w5) / w5))) / 2.0
                - (log((1.0 + w5) / (1.0 - tb)) * power_of<2>(log((tb + w5) / w5))) / 2.0 + (log((tb * (1.0 + w5)) / ((-1.0 + tb) * w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0 + dilog((1.0 - w5) / 2.0) * (log(1.0 - vb / w5) + log((tb + w5) / w5)) + dilog((1.0 + w5) / 2.0) * (log(1.0 - vb / w5) + log((tb + w5) / w5))
                + dilog((1.0 + w5) / (1.0 - w7)) * (log(1.0 - vb / w5) + log((tb + w5) / w5)) + dilog((w5 + w7) / (-1.0 + w7)) * (log(1.0 - vb / w5) + log((tb + w5) / w5)) + dilog((1.0 + tb) / (1.0 + w7)) * (-log((1.0 + tb) / 2.0) - log(1.0 + tb) + log(1.0 - tb / w4) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 + tb) / (1.0 - w5)) + log((tb + w5) / w5))
                - (power_of<2>(log(1.0 - tb)) * log((tb + w5) / (1.0 + w5))) / 2.0 + (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log((2.0 * (tb + w5)) / ((1.0 + tb) * (1.0 + w5)))) / 2.0 - (power_of<2>(log(1.0 - vb)) * log((-vb + w5) / (-1.0 + w5))) / 2.0 - (power_of<2>(log(1.0 + vb)) * log((-vb + w5) / (1.0 + w5))) / 2.0 - (pisqu * log(-(w5 / (tb + tb * w5)))) / 6.0 - power_of<3>(log(-(w5 / (tb + tb * w5)))) / 6.0
                + (pisqu * log(w5 / (vb - vb * w5))) / 6.0 + power_of<3>(log(w5 / (vb - vb * w5))) / 6.0 - (pisqu * log(w5 / (vb + vb * w5))) / 6.0 - power_of<3>(log(w5 / (vb + vb * w5))) / 6.0 + (power_of<2>(log(1.0 - vb / w5)) * log((vb + vb * w5) / (w5 + vb * w5))) / 2.0 + (power_of<2>(log(1.0 - vb / w5)) * log((w5 + vb * w5) / (vb + vb * w5))) / 2.0 - (pisqu * log((1.0 - power_of<2>(w5)) / (2.0 * vb - 2.0 * w5))) / 6.0
                - power_of<3>(log((1.0 - power_of<2>(w5)) / (2.0 * vb - 2.0 * w5))) / 6.0 - (pisqu * log((-1.0 + power_of<2>(w5)) / (2.0 * (vb - w5)))) / 6.0 - power_of<3>(log((-1.0 + power_of<2>(w5)) / (2.0 * (vb - w5)))) / 6.0 + (pisqu * log((-0.5) * ((-1.0 + power_of<2>(w5)) / w5))) / 3.0 + power_of<3>(log((-0.5) * ((-1.0 + power_of<2>(w5)) / w5))) / 3.0 + (pisqu * log((-1.0 + power_of<2>(w5)) / (2.0 * w5))) / 3.0 + power_of<3>(log((-1.0 + power_of<2>(w5)) / (2.0 * w5))) / 3.0
                - (pisqu * log((-1.0 + power_of<2>(w5)) / (2.0 * (tb + w5)))) / 6.0 - power_of<3>(log((-1.0 + power_of<2>(w5)) / (2.0 * (tb + w5)))) / 6.0 + power_of<2>(lnhalf) * log(1.0 + w7inv) - power_of<2>(log(1.0 / (1.0 + w4))) * log(1.0 + w7inv) - power_of<2>(log(1.0 / (1.0 - w5))) * log(1.0 + w7inv) + dilog(w7 / (-w4 + w7)) * log(1.0 - tb / w7) - (log(1.0 - tb) * power_of<2>(log(1.0 - tb / w7))) / 2.0
                - (log(1.0 + tb) * power_of<2>(log(1.0 - tb / w7))) / 2.0 + (log(1.0 - tb / w4) * power_of<2>(log(1.0 - tb / w7))) / 2.0 + (log((tb + w5) / w5) * power_of<2>(log(1.0 - tb / w7))) / 2.0 + (pisqu * log(1.0 / (tb - w7))) / 6.0 + power_of<3>(log(1.0 / (tb - w7))) / 6.0 - (pisqu * log(2.0 / (tb - w7))) / 6.0 - power_of<3>(log(2.0 / (tb - w7))) / 6.0 - (pisqu * log(w4 / (tb - w7))) / 6.0 - power_of<3>(log(w4 / (tb - w7))) / 6.0
                - (pisqu * log((-1.0 + w5) / (tb - w7))) / 6.0 - power_of<3>(log((-1.0 + w5) / (tb - w7))) / 6.0 + (pisqu * log((1.0 + w5) / (tb - w7))) / 6.0 + power_of<3>(log((1.0 + w5) / (tb - w7))) / 6.0 - (power_of<2>(log(1.0 - tb / w7)) * log((-tb + w4) / (w4 - w7))) / 2.0 + dilog(((-1.0 + w4) * (tb - w7)) / ((-1.0 + tb) * (w4 - w7))) * log((tb - w7) / (w4 - w7))
                - dilog(((1.0 + w4) * (tb - w7)) / ((1.0 + tb) * (w4 - w7))) * log((tb - w7) / (w4 - w7)) + dilog(((-1.0 + w4) * (tb - w7)) / ((tb - w4) * (-1.0 + w7))) * log((tb - w7) / (w4 - w7)) - dilog(((1.0 + w4) * (tb - w7)) / ((tb - w4) * (1.0 + w7))) * log((tb - w7) / (w4 - w7)) + (power_of<2>(log(1.0 - tb / w4)) * log((tb - w7) / (w4 - w7))) / 2.0
                - (power_of<2>(log(1.0 - tb / w4)) * log((w4 * (tb - w7)) / (tb * (w4 - w7)))) / 2.0 - (pisqu * log(w4 - w7)) / 3.0 - power_of<3>(log(w4 - w7)) / 3.0 - (pisqu * log((w4 - w7) / (-1.0 + vb))) / 6.0 - power_of<3>(log((w4 - w7) / (-1.0 + vb))) / 6.0 + (pisqu * log((w4 - w7) / (1.0 + vb))) / 6.0 + power_of<3>(log((w4 - w7) / (1.0 + vb))) / 6.0 + (power_of<2>(log(1.0 - tb / w4)) * log((w4 - w7) / (tb - w7))) / 2.0
                - (power_of<2>(log(1.0 - tb / w4)) * log((tb * (w4 - w7)) / (w4 * (tb - w7)))) / 2.0 - (pisqu * log(-w5 - w7)) / 3.0 - power_of<3>(log(-w5 - w7)) / 3.0 + (power_of<2>(log(1.0 - tb / w7)) * log((-1.0 + tb) / (-1.0 + w7))) / 2.0 - log(1.0 - tb / w4) * log((tb - w7) / (w4 - w7)) * log((-1.0 + tb) / (-1.0 + w7)) - (power_of<2>(log((tb - w7) / (w4 - w7))) * log((-1.0 + tb) / (-1.0 + w7))) / 2.0
                - (power_of<2>(log((1.0 - tb) / 2.0)) * log((-2.0 * (tb - w7)) / ((1.0 + tb) * (-1.0 + w7)))) / 2.0 + (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log(((-1.0 + w4) * (tb - w7)) / ((tb - w4) * (-1.0 + w7)))) / 2.0 + (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log(-(((1.0 + w5) * (tb - w7)) / ((tb + w5) * (-1.0 + w7))))) / 2.0
                + (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((-1.0 + tb) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7))))) / 2.0 - (pisqu * log(-(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7))))) / 6.0 - power_of<3>(log(-(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7))))) / 6.0 - (pisqu * log(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) / 6.0
                - power_of<3>(log(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) / 6.0 + (pisqu * log(-(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7))))) / 6.0 + power_of<3>(log(-(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7))))) / 6.0 + (pisqu * log(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7)))) / 3.0 + power_of<3>(log(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7)))) / 3.0
                - (pisqu * log(-(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7))))) / 6.0 - power_of<3>(log(-(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7))))) / 6.0 - (pisqu * log(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) / 6.0 - power_of<3>(log(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) / 6.0
                - (power_of<2>(log((tb - w7) / (w4 - w7))) * log((-1.0 + w7) / (-1.0 + tb))) / 2.0 - (power_of<2>(log((1.0 - tb) / 2.0)) * log((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (tb - w7)))) / 2.0 + (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log(((tb - w4) * (-1.0 + w7)) / ((-1.0 + w4) * (tb - w7)))) / 2.0
                + (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log(-(((tb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (tb - w7))))) / 2.0 + (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((tb - w4) * (-1.0 + w7)) / ((-1.0 + tb) * (w4 - w7))))) / 2.0 + (pisqu * log(-2.0 / w7)) / 3.0 + power_of<3>(log(-2.0 / w7)) / 3.0 - (pisqu * log(2.0 / w7)) / 3.0 - power_of<3>(log(2.0 / w7)) / 3.0 - (pisqu * log((-1.0 + w4) / w7)) / 3.0
                - power_of<3>(log((-1.0 + w4) / w7)) / 3.0 + (pisqu * log((1.0 + w4) / w7)) / 3.0 + power_of<3>(log((1.0 + w4) / w7)) / 3.0 + (pisqu * log((1.0 - w5) / w7)) / 3.0 + power_of<3>(log((1.0 - w5) / w7)) / 3.0 - (pisqu * log(-((1.0 + w5) / w7))) / 3.0 - power_of<3>(log(-((1.0 + w5) / w7))) / 3.0 + power_of<2>(lnhalf) * log((-1.0 + w7) / (2.0 * w7)) - power_of<2>(lnhalf) * log((-1.0 + w7) / w7)
                + power_of<2>(log(1.0 / (1.0 - w4))) * log((-1.0 + w7) / w7) + power_of<2>(log(1.0 / (1.0 + w5))) * log((-1.0 + w7) / w7) - power_of<2>(log(1.0 / (1.0 - w4))) * log((w4 * (-1.0 + w7)) / ((-1.0 + w4) * w7)) - power_of<2>(log(1.0 / (1.0 + w5))) * log((w5 * (-1.0 + w7)) / ((1.0 + w5) * w7)) + (log(1.0 / (1.0 - w7)) * power_of<2>(log(-(w7 / (w4 - w7))))) / 2.0
                + (log(1.0 - w7) * power_of<2>(log(-(w7 / (w4 - w7))))) / 2.0 - power_of<2>(lnhalf) * log(w7 / (-1.0 + w7)) + power_of<2>(log(1.0 / (1.0 - w4))) * log(w7 / (-1.0 + w7)) + power_of<2>(log(1.0 / (1.0 + w5))) * log(w7 / (-1.0 + w7)) + power_of<2>(lnhalf) * log((2.0 * w7) / (-1.0 + w7)) - (pisqu * log(w7 / (tb * (-1.0 + w7)))) / 6.0 - power_of<3>(log(w7 / (tb * (-1.0 + w7)))) / 6.0
                - power_of<2>(log(1.0 / (1.0 - w4))) * log(((-1.0 + w4) * w7) / (w4 * (-1.0 + w7))) - power_of<2>(log(1.0 / (1.0 + w5))) * log(((1.0 + w5) * w7) / (w5 * (-1.0 + w7))) - (power_of<2>(log(-(w7 / (w4 - w7)))) * log(1.0 / (1.0 + w7))) / 2.0 + (power_of<2>(log(1.0 - tb / w7)) * log((1.0 + tb) / (1.0 + w7))) / 2.0 + log(1.0 - tb / w4) * log((tb - w7) / (w4 - w7)) * log((1.0 + tb) / (1.0 + w7))
                + (power_of<2>(log((tb - w7) / (w4 - w7))) * log((1.0 + tb) / (1.0 + w7))) / 2.0 + (power_of<2>(log((1.0 + tb) / 2.0)) * log((2.0 * (tb - w7)) / ((-1.0 + tb) * (1.0 + w7)))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log(((1.0 + w4) * (tb - w7)) / ((tb - w4) * (1.0 + w7)))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log(-(((-1.0 + w5) * (tb - w7)) / ((tb + w5) * (1.0 + w7))))) / 2.0
                - (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((1.0 + tb) * (w4 - w7)) / ((tb - w4) * (1.0 + w7))))) / 2.0 + (pisqu * log(-(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7))))) / 6.0 + power_of<3>(log(-(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7))))) / 6.0 + (pisqu * log(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) / 6.0
                + power_of<3>(log(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) / 6.0 - (pisqu * log(-(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7))))) / 6.0 - power_of<3>(log(-(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7))))) / 6.0 - (pisqu * log(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7)))) / 3.0 - power_of<3>(log(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7)))) / 3.0
                + (pisqu * log(-(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7))))) / 6.0 + power_of<3>(log(-(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7))))) / 6.0 + (pisqu * log(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) / 6.0 + power_of<3>(log(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) / 6.0 + (pisqu * log((2.0 * (-1.0 + w7)) / (1.0 + w7))) / 3.0
                + power_of<3>(log((2.0 * (-1.0 + w7)) / (1.0 + w7))) / 3.0 - (pisqu * log((-2.0 * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7)))) / 6.0 - power_of<3>(log((-2.0 * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7)))) / 6.0 - (pisqu * log((2.0 * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7)))) / 6.0 - power_of<3>(log((2.0 * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7)))) / 6.0 + power_of<2>(lnhalf) * log(w7 / (1.0 + w7))
                - power_of<2>(log(1.0 / (1.0 + w4))) * log(w7 / (1.0 + w7)) - power_of<2>(log(1.0 / (1.0 - w5))) * log(w7 / (1.0 + w7)) - power_of<2>(lnhalf) * log((2.0 * w7) / (1.0 + w7)) + power_of<2>(log(1.0 / (1.0 - w5))) * log(((-1.0 + w5) * w7) / (w5 * (1.0 + w7))) - (power_of<2>(log(-(w7 / (w4 - w7)))) * log(1.0 + w7)) / 2.0 + (power_of<2>(log((tb - w7) / (w4 - w7))) * log((1.0 + w7) / (1.0 + tb))) / 2.0
                + (power_of<2>(log((1.0 + tb) / 2.0)) * log(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (tb - w7)))) / 2.0 + (power_of<2>(log(1.0 + tb)) * log((tb * (1.0 + w7)) / (tb - w7))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log(((tb - w4) * (1.0 + w7)) / ((1.0 + w4) * (tb - w7)))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log(-(((tb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (tb - w7))))) / 2.0
                - (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((tb - w4) * (1.0 + w7)) / ((1.0 + tb) * (w4 - w7))))) / 2.0 + (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 * (1.0 + w7)) / (w4 - w7))) / 2.0 - (pisqu * log((2.0 * (1.0 + w7)) / (-1.0 + w7))) / 3.0 - power_of<3>(log((2.0 * (1.0 + w7)) / (-1.0 + w7))) / 3.0 + (pisqu * log((2.0 * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7)))) / 6.0
                + power_of<3>(log((2.0 * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7)))) / 6.0 + (pisqu * log((-2.0 * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7)))) / 6.0 + power_of<3>(log((-2.0 * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7)))) / 6.0 - power_of<2>(lnhalf) * log((1.0 + w7) / (2.0 * w7)) + power_of<2>(log(1.0 / (1.0 - w5))) * log((w5 * (1.0 + w7)) / ((-1.0 + w5) * w7)) + (pisqu * log(1.0 / (-tb + w7))) / 6.0
                + power_of<3>(log(1.0 / (-tb + w7))) / 6.0 + (pisqu * log(2.0 / (-tb + w7))) / 6.0 + power_of<3>(log(2.0 / (-tb + w7))) / 6.0 + (pisqu * log((-1.0 + w4) / (-tb + w7))) / 6.0 + power_of<3>(log((-1.0 + w4) / (-tb + w7))) / 6.0 - (pisqu * log((1.0 + w4) / (-tb + w7))) / 6.0 - power_of<3>(log((1.0 + w4) / (-tb + w7))) / 6.0 - (pisqu * log(w5 / (-tb + w7))) / 6.0 - power_of<3>(log(w5 / (-tb + w7))) / 6.0
                + (power_of<2>(log((1.0 - tb) / 2.0)) * log((-1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log(1.0 - tb)) * log((-1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log((-1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log(1.0 - tb)) * log((tb * (-1.0 + w7)) / (-tb + w7))) / 2.0
                - (power_of<2>(log((1.0 + tb) / 2.0)) * log((1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log(1.0 + tb)) * log((1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log((1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log((1.0 - tb) / 2.0)) * log((-tb + w7) / (-1.0 + w7))) / 2.0
                + log((1.0 - tb) / 2.0) * log(1.0 + tb) * log((-tb + w7) / (-1.0 + w7)) - log(1.0 - tb) * log(1.0 + tb) * log((-tb + w7) / (-1.0 + w7)) - log(1.0 - tb / w4) * log((-1.0 + tb) / (-1.0 + w4)) * log((-tb + w7) / (-1.0 + w7)) - (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-tb + w7) / (-1.0 + w7))) / 2.0
                - (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log((-tb + w7) / (-1.0 + w7))) / 2.0 - log((1.0 - tb) / (1.0 + w5)) * log((tb + w5) / w5) * log((-tb + w7) / (-1.0 + w7)) - log(1.0 - tb) * log((1.0 + tb) / 2.0) * log((-tb + w7) / (1.0 + w7)) - (power_of<2>(log((1.0 + tb) / 2.0)) * log((-tb + w7) / (1.0 + w7))) / 2.0
                + log(1.0 - tb) * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7)) - power_of<2>(log(1.0 + tb)) * log((-tb + w7) / (1.0 + w7)) + log(1.0 - tb / w4) * log((1.0 + tb) / (1.0 + w4)) * log((-tb + w7) / (1.0 + w7)) + (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log((-tb + w7) / (1.0 + w7))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((-tb + w7) / (1.0 + w7))) / 2.0
                + log((1.0 + tb) / (1.0 - w5)) * log((tb + w5) / w5) * log((-tb + w7) / (1.0 + w7)) - (pisqu * log(-2.0 / (vb + w7))) / 6.0 - power_of<3>(log(-2.0 / (vb + w7))) / 6.0 + (pisqu * log(-1.0 / (vb + w7))) / 6.0 + power_of<3>(log(-1.0 / (vb + w7))) / 6.0 + (pisqu * log(1.0 / (vb + w7))) / 6.0 + power_of<3>(log(1.0 / (vb + w7))) / 6.0 + (pisqu * log(2.0 / (vb + w7))) / 6.0
                + power_of<3>(log(2.0 / (vb + w7))) / 6.0 + (pisqu * log((-1.0 + w4) / (vb + w7))) / 6.0 + power_of<3>(log((-1.0 + w4) / (vb + w7))) / 6.0 - (pisqu * log(-(w4 / (vb + w7)))) / 6.0 - power_of<3>(log(-(w4 / (vb + w7)))) / 6.0 - (pisqu * log((1.0 + w4) / (vb + w7))) / 6.0 - power_of<3>(log((1.0 + w4) / (vb + w7))) / 6.0 - (pisqu * log((1.0 - w5) / (vb + w7))) / 6.0 - power_of<3>(log((1.0 - w5) / (vb + w7))) / 6.0
                - (pisqu * log(w5 / (vb + w7))) / 6.0 - power_of<3>(log(w5 / (vb + w7))) / 6.0 + (pisqu * log(-((1.0 + w5) / (vb + w7)))) / 6.0 + power_of<3>(log(-((1.0 + w5) / (vb + w7)))) / 6.0 - (power_of<2>(log((vb + w4) / w4)) * log((vb * (w4 - w7)) / (w4 * (vb + w7)))) / 2.0 + (power_of<2>(log((1.0 + vb) / 2.0)) * log((-1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log(1.0 + vb)) * log((-1.0 + w7) / (vb + w7))) / 2.0
                - (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((-1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log((-1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log((1.0 + vb) / 2.0)) * log((-0.5) * (((-1.0 + vb) * (-1.0 + w7)) / (vb + w7)))) / 2.0 + (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log(((vb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (vb + w7)))) / 2.0
                + (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log(((-vb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (vb + w7)))) / 2.0 - (power_of<2>(log((1.0 - vb) / 2.0)) * log((1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log(1.0 - vb)) * log((1.0 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log((1.0 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((1.0 + w7) / (vb + w7))) / 2.0
                + (power_of<2>(log(1.0 - vb)) * log((vb * (1.0 + w7)) / (vb + w7))) / 2.0 + (power_of<2>(log((1.0 - vb) / 2.0)) * log(((1.0 + vb) * (1.0 + w7)) / (2.0 * (vb + w7)))) / 2.0 - (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log(((vb + w4) * (1.0 + w7)) / ((1.0 + w4) * (vb + w7)))) / 2.0 - (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log(((-vb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (vb + w7)))) / 2.0
                + dilog(((-1.0 + w4) * (vb + w7)) / ((1.0 + vb) * (w4 - w7))) * log(-((vb + w7) / (w4 - w7))) - dilog(((1.0 + w4) * (vb + w7)) / ((-1.0 + vb) * (w4 - w7))) * log(-((vb + w7) / (w4 - w7))) + dilog(((-1.0 + w4) * (vb + w7)) / ((vb + w4) * (-1.0 + w7))) * log(-((vb + w7) / (w4 - w7)))
                - dilog(((1.0 + w4) * (vb + w7)) / ((vb + w4) * (1.0 + w7))) * log(-((vb + w7) / (w4 - w7))) + (power_of<2>(log((vb + w4) / w4)) * log(-((vb + w7) / (w4 - w7)))) / 2.0 - log((vb + w4) / w4) * log((1.0 + vb) / (1.0 - w7)) * log(-((vb + w7) / (w4 - w7))) + log((vb + w4) / w4) * log((1.0 - vb) / (1.0 + w7)) * log(-((vb + w7) / (w4 - w7)))
                - (log((1.0 + vb) / (1.0 - w7)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (log((1.0 - w7) / (1.0 + vb)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 + (log(-(((1.0 + vb) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0
                + (log(-(((vb + w4) * (-1.0 + w7)) / ((1.0 + vb) * (w4 - w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 + (log((1.0 - vb) / (1.0 + w7)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (log(-(((-1.0 + vb) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0
                + (log((1.0 + w7) / (1.0 - vb)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (log(-(((vb + w4) * (1.0 + w7)) / ((-1.0 + vb) * (w4 - w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (power_of<2>(log((vb + w4) / w4)) * log((w4 * (vb + w7)) / (vb * (w4 - w7)))) / 2.0 + log(1.0 - vb) * log((1.0 + vb) / 2.0) * log((vb + w7) / (-1.0 + w7))
                + (power_of<2>(log((1.0 + vb) / 2.0)) * log((vb + w7) / (-1.0 + w7))) / 2.0 - log(1.0 - vb) * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) - (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((vb + w7) / (-1.0 + w7))) / 2.0 - log((1.0 + vb) / (1.0 - w4)) * log((vb + w4) / w4) * log((vb + w7) / (-1.0 + w7))
                - log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 + w5)) * log((vb + w7) / (-1.0 + w7)) - (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log((vb + w7) / (-1.0 + w7))) / 2.0 - (power_of<2>(log((1.0 + vb) / 2.0)) * log((-2.0 * (vb + w7)) / ((-1.0 + vb) * (-1.0 + w7)))) / 2.0 + (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log(((-1.0 + w4) * (vb + w7)) / ((vb + w4) * (-1.0 + w7)))) / 2.0
                + (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log(-(((1.0 + w5) * (vb + w7)) / ((vb - w5) * (-1.0 + w7))))) / 2.0 + dilog(-(w7 / (w4 - w7))) * log((vb + w7) / w7) - (log(1.0 - vb) * power_of<2>(log((vb + w7) / w7))) / 2.0 - (log(1.0 + vb) * power_of<2>(log((vb + w7) / w7))) / 2.0 + (log((vb + w4) / w4) * power_of<2>(log((vb + w7) / w7))) / 2.0
                + (log(1.0 - vb / w5) * power_of<2>(log((vb + w7) / w7))) / 2.0 + (log((1.0 + vb) / (1.0 - w7)) * power_of<2>(log((vb + w7) / w7))) / 2.0 - (log((vb + w4) / (w4 - w7)) * power_of<2>(log((vb + w7) / w7))) / 2.0 + (log((1.0 - vb) / (1.0 + w7)) * power_of<2>(log((vb + w7) / w7))) / 2.0 + dilog(w7 / w4) * (log(1.0 - tb / w7) + log((vb + w7) / w7))
                + dilog(-(w7 / w5)) * (log(1.0 - tb / w7) + log((vb + w7) / w7)) + dilog(w7 / (w5 + w7)) * (log(1.0 - tb / w7) + log((vb + w7) / w7)) - (power_of<2>(log((1.0 - vb) / 2.0)) * log((vb + w7) / (1.0 + w7))) / 2.0 - power_of<2>(log(1.0 - vb)) * log((vb + w7) / (1.0 + w7)) - log((1.0 - vb) / 2.0) * log(1.0 + vb) * log((vb + w7) / (1.0 + w7))
                + log(1.0 - vb) * log(1.0 + vb) * log((vb + w7) / (1.0 + w7)) + (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log((vb + w7) / (1.0 + w7))) / 2.0 + log((1.0 - vb) / (1.0 + w4)) * log((vb + w4) / w4) * log((vb + w7) / (1.0 + w7)) + log(1.0 - vb / w5) * log((-1.0 + vb) / (-1.0 + w5)) * log((vb + w7) / (1.0 + w7))
                + (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((vb + w7) / (1.0 + w7))) / 2.0 + (power_of<2>(log((1.0 - vb) / 2.0)) * log((2.0 * (vb + w7)) / ((1.0 + vb) * (1.0 + w7)))) / 2.0 - (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log(((1.0 + w4) * (vb + w7)) / ((vb + w4) * (1.0 + w7)))) / 2.0 - (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log(-(((-1.0 + w5) * (vb + w7)) / ((vb - w5) * (1.0 + w7))))) / 2.0
                + dilog(((-1.0 + w4) * w7) / (w4 - w7)) * (-log(-(w7 / (w4 - w7))) - log(w7 / (-w4 + w7))) + dilog(((-1.0 + w4) * w7) / (w4 * (-1.0 + w7))) * (-log(-(w7 / (w4 - w7))) - log(w7 / (-w4 + w7))) + (log(1.0 / (1.0 - w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 + (log(1.0 - w7) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0
                - (log(1.0 / (1.0 + w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 - (log(1.0 + w7) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 + (log((w4 * (1.0 + w7)) / (w4 - w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 - (log((w4 * (-1.0 + w7)) / (-w4 + w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 + dilog(-(((1.0 + w4) * w7) / (w4 - w7))) * (log(-(w7 / (w4 - w7))) + log(w7 / (-w4 + w7)))
                + dilog((w7 + w4 * w7) / (w4 + w4 * w7)) * (log(-(w7 / (w4 - w7))) + log(w7 / (-w4 + w7))) + (pisqu * log(-w4 + w7)) / 3.0 + power_of<3>(log(-w4 + w7)) / 3.0 + (pisqu * log((-w4 + w7) / (-1.0 + tb))) / 6.0 + power_of<3>(log((-w4 + w7) / (-1.0 + tb))) / 6.0 - (pisqu * log((-w4 + w7) / (1.0 + tb))) / 6.0 - power_of<3>(log((-w4 + w7) / (1.0 + tb))) / 6.0
                + (pisqu * log(((-1.0 + w4) * (-w4 + w7)) / (w4 * (-1.0 + w7)))) / 6.0 + power_of<3>(log(((-1.0 + w4) * (-w4 + w7)) / (w4 * (-1.0 + w7)))) / 6.0 - (pisqu * log(((1.0 + w4) * (-w4 + w7)) / (w4 * (1.0 + w7)))) / 6.0 - power_of<3>(log(((1.0 + w4) * (-w4 + w7)) / (w4 * (1.0 + w7)))) / 6.0 + (power_of<2>(log((vb + w4) / w4)) * log((-w4 + w7) / (vb + w7))) / 2.0
                - (power_of<2>(log(1.0 - tb / w7)) * log((tb + w5) / (w5 + w7))) / 2.0 - (power_of<2>(log((vb + w7) / w7)) * log((-vb + w5) / (w5 + w7))) / 2.0 - (power_of<2>(log((tb + w5) / w5)) * log((w5 * (tb - w7)) / (tb * (w5 + w7)))) / 2.0 + dilog(-w7) * (-log(1.0 - tb / w7) - log(-(w7 / (w4 - w7))) - log((vb + w7) / w7) - log(w7 / (-w4 + w7)) - 2.0 * log(w7 / (w5 + w7)))
                + dilog(w7 / (1.0 + w7)) * (-log(1.0 - tb / w7) - log(-(w7 / (w4 - w7))) - log((vb + w7) / w7) - log(w7 / (-w4 + w7)) - 2.0 * log(w7 / (w5 + w7))) - 2.0 * dilog(((1.0 + w5) * w7) / (w5 * (-1.0 + w7))) * log(w7 / (w5 + w7)) + 2.0 * dilog(((-1.0 + w5) * w7) / (w5 * (1.0 + w7))) * log(w7 / (w5 + w7))
                - 2.0 * dilog(((1.0 + w5) * w7) / (w5 + w7)) * log(w7 / (w5 + w7)) + 2.0 * dilog((w7 - w5 * w7) / (w5 + w7)) * log(w7 / (w5 + w7)) + log(1.0 / (1.0 - w7)) * power_of<2>(log(w7 / (w5 + w7))) + log(1.0 - w7) * power_of<2>(log(w7 / (w5 + w7))) - log(1.0 / (1.0 + w7)) * power_of<2>(log(w7 / (w5 + w7))) - log(1.0 + w7) * power_of<2>(log(w7 / (w5 + w7)))
                + dilog(w7) * (-log(1.0 - tb / w7) + log(-(w7 / (w4 - w7))) - log((vb + w7) / w7) + log(w7 / (-w4 + w7)) + 2.0 * log(w7 / (w5 + w7))) + dilog(w7 / (-1.0 + w7)) * (-log(1.0 - tb / w7) + log(-(w7 / (w4 - w7))) - log((vb + w7) / w7) + log(w7 / (-w4 + w7)) + 2.0 * log(w7 / (w5 + w7)))
                + power_of<2>(log(w7 / (w5 + w7))) * log((w5 * (1.0 + w7)) / (w5 + w7)) + dilog((tb - w7) / (-1.0 + tb)) * (-log((tb - w7) / (w4 - w7)) - log((-tb + w7) / (w5 + w7))) + dilog((-tb + w7) / (-1.0 + w7)) * (-log(1.0 - tb / w4) - log((tb + w5) / w5) - log((tb - w7) / (w4 - w7)) - log((-tb + w7) / (w5 + w7)))
                + dilog(-(((1.0 + w5) * (tb - w7)) / ((tb + w5) * (-1.0 + w7)))) * log((-tb + w7) / (w5 + w7)) - dilog(-(((-1.0 + w5) * (tb - w7)) / ((tb + w5) * (1.0 + w7)))) * log((-tb + w7) / (w5 + w7)) - dilog(((-1.0 + w5) * (tb - w7)) / ((1.0 + tb) * (w5 + w7))) * log((-tb + w7) / (w5 + w7))
                + dilog(((1.0 + w5) * (tb - w7)) / ((-1.0 + tb) * (w5 + w7))) * log((-tb + w7) / (w5 + w7)) + (power_of<2>(log((tb + w5) / w5)) * log((-tb + w7) / (w5 + w7))) / 2.0 - log((tb + w5) / w5) * log((-1.0 + tb) / (-1.0 + w7)) * log((-tb + w7) / (w5 + w7)) + log((tb + w5) / w5) * log((1.0 + tb) / (1.0 + w7)) * log((-tb + w7) / (w5 + w7))
                - (log((-1.0 + tb) / (-1.0 + w7)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 - (log((-1.0 + w7) / (-1.0 + tb)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 + (log((1.0 + tb) / (1.0 + w7)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 + (log((1.0 + w7) / (1.0 + tb)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0
                + (log(((tb + w5) * (-1.0 + w7)) / ((-1.0 + tb) * (w5 + w7))) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 - (log(((tb + w5) * (1.0 + w7)) / ((1.0 + tb) * (w5 + w7))) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 + dilog((tb - w7) / (1.0 + tb)) * (log((tb - w7) / (w4 - w7)) + log((-tb + w7) / (w5 + w7)))
                + dilog((-tb + w7) / (1.0 + w7)) * (log(1.0 - tb / w4) + log((tb + w5) / w5) + log((tb - w7) / (w4 - w7)) + log((-tb + w7) / (w5 + w7))) + dilog((vb + w7) / (1.0 + vb)) * (-log(-((vb + w7) / (w4 - w7))) - log((vb + w7) / (w5 + w7)))
                + dilog((vb + w7) / (-1.0 + w7)) * (-log((vb + w4) / w4) - log(1.0 - vb / w5) - log(-((vb + w7) / (w4 - w7))) - log((vb + w7) / (w5 + w7))) + dilog(-(((1.0 + w5) * (vb + w7)) / ((vb - w5) * (-1.0 + w7)))) * log((vb + w7) / (w5 + w7)) - dilog(-(((-1.0 + w5) * (vb + w7)) / ((vb - w5) * (1.0 + w7)))) * log((vb + w7) / (w5 + w7))
                - dilog(((-1.0 + w5) * (vb + w7)) / ((-1.0 + vb) * (w5 + w7))) * log((vb + w7) / (w5 + w7)) + dilog(((1.0 + w5) * (vb + w7)) / ((1.0 + vb) * (w5 + w7))) * log((vb + w7) / (w5 + w7)) + (power_of<2>(log(1.0 - vb / w5)) * log((vb + w7) / (w5 + w7))) / 2.0 - log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 - w7)) * log((vb + w7) / (w5 + w7))
                + log(1.0 - vb / w5) * log((1.0 - vb) / (1.0 + w7)) * log((vb + w7) / (w5 + w7)) - (log((1.0 + vb) / (1.0 - w7)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 - (log((1.0 - w7) / (1.0 + vb)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 + (log((1.0 - vb) / (1.0 + w7)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0
                + (log((1.0 + w7) / (1.0 - vb)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 + (log(((vb - w5) * (-1.0 + w7)) / ((1.0 + vb) * (w5 + w7))) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 - (log(((vb - w5) * (1.0 + w7)) / ((-1.0 + vb) * (w5 + w7))) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0
                + dilog((vb + w7) / (-1.0 + vb)) * (log(-((vb + w7) / (w4 - w7))) + log((vb + w7) / (w5 + w7))) + dilog((vb + w7) / (1.0 + w7)) * (log((vb + w4) / w4) + log(1.0 - vb / w5) + log(-((vb + w7) / (w4 - w7))) + log((vb + w7) / (w5 + w7))) - (power_of<2>(log(1.0 - vb / w5)) * log((w5 * (vb + w7)) / (vb * (w5 + w7)))) / 2.0
                + (pisqu * log(w5 + w7)) / 3.0 + power_of<3>(log(w5 + w7)) / 3.0 + (pisqu * log((w5 + w7) / (-1.0 + tb))) / 6.0 + power_of<3>(log((w5 + w7) / (-1.0 + tb))) / 6.0 - (pisqu * log((w5 + w7) / (1.0 + tb))) / 6.0 - power_of<3>(log((w5 + w7) / (1.0 + tb))) / 6.0 - (pisqu * log((w5 + w7) / (1.0 - vb))) / 6.0 - power_of<3>(log((w5 + w7) / (1.0 - vb))) / 6.0 + (pisqu * log(-((w5 + w7) / (1.0 + vb)))) / 6.0
                + power_of<3>(log(-((w5 + w7) / (1.0 + vb)))) / 6.0 - (power_of<2>(log((tb + w5) / w5)) * log((tb * (w5 + w7)) / (w5 * (tb - w7)))) / 2.0 + (power_of<2>(log((vb + w7) / (w5 + w7))) * log(((1.0 + vb) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))) / 2.0 - (pisqu * log(-(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))))) / 6.0
                - power_of<3>(log(-(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))))) / 6.0 - (pisqu * log(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))) / 6.0 - power_of<3>(log(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))) / 6.0 + (pisqu * log(((1.0 + w5) * (w5 + w7)) / (w5 * (-1.0 + w7)))) / 3.0 + power_of<3>(log(((1.0 + w5) * (w5 + w7)) / (w5 * (-1.0 + w7)))) / 3.0
                + (power_of<2>(log((-tb + w7) / (w5 + w7))) * log(((-1.0 + tb) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7)))) / 2.0 - (pisqu * log(-(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))))) / 6.0 - power_of<3>(log(-(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))))) / 6.0 - (pisqu * log(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7)))) / 6.0
                - power_of<3>(log(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7)))) / 6.0 - (power_of<2>(log((vb + w7) / (w5 + w7))) * log(((-1.0 + vb) * (w5 + w7)) / ((vb - w5) * (1.0 + w7)))) / 2.0 + (pisqu * log(-(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))))) / 6.0 + power_of<3>(log(-(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))))) / 6.0
                + (pisqu * log(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7)))) / 6.0 + power_of<3>(log(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7)))) / 6.0 - (pisqu * log(-(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7))))) / 3.0 - power_of<3>(log(-(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7))))) / 3.0 - (pisqu * log(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7)))) / 3.0
                - power_of<3>(log(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7)))) / 3.0 - (power_of<2>(log((-tb + w7) / (w5 + w7))) * log(((1.0 + tb) * (w5 + w7)) / ((tb + w5) * (1.0 + w7)))) / 2.0 + (pisqu * log(-(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))))) / 6.0 + power_of<3>(log(-(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))))) / 6.0
                + (pisqu * log(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7)))) / 6.0 + power_of<3>(log(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7)))) / 6.0 + (power_of<2>(log((tb + w5) / w5)) * log((w5 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log(1.0 - vb / w5)) * log((w5 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log(1.0 - vb / w5)) * log((vb * (w5 + w7)) / (w5 * (vb + w7)))) / 2.0
                + (power_of<2>(log(1.0 - tb)) * log((tb - w7) / (tb - tb * w7))) / 2.0 + (power_of<2>(log(1.0 + tb)) * log((tb - w7) / (tb + tb * w7))) / 2.0 - (pisqu * log(-(w7 / (tb + tb * w7)))) / 6.0 - power_of<3>(log(-(w7 / (tb + tb * w7)))) / 6.0 + (pisqu * log((w4 * w7) / (-(tb * w4) + tb * w7))) / 6.0 + power_of<3>(log((w4 * w7) / (-(tb * w4) + tb * w7))) / 6.0 + (pisqu * log(-((w5 * w7) / (tb * w5 + tb * w7)))) / 6.0
                + power_of<3>(log(-((w5 * w7) / (tb * w5 + tb * w7)))) / 6.0 - (pisqu * log(w7 / (vb - vb * w7))) / 6.0 - power_of<3>(log(w7 / (vb - vb * w7))) / 6.0 + (power_of<2>(log(1.0 + vb)) * log((vb + w7) / (vb - vb * w7))) / 2.0 + (power_of<2>(log(1.0 + vb)) * log((vb - vb * w7) / (vb + w7))) / 2.0 + (pisqu * log((w4 * w7) / (vb * w4 - vb * w7))) / 6.0 + power_of<3>(log((w4 * w7) / (vb * w4 - vb * w7))) / 6.0
                - (pisqu * log(w7 / (vb + vb * w7))) / 6.0 - power_of<3>(log(w7 / (vb + vb * w7))) / 6.0 + (power_of<2>(log(1.0 - vb)) * log((vb + w7) / (vb + vb * w7))) / 2.0 + (pisqu * log((w5 * w7) / (vb * w5 + vb * w7))) / 6.0 + power_of<3>(log((w5 * w7) / (vb * w5 + vb * w7))) / 6.0 - (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 - w7) / (w4 - w4 * w7))) / 2.0
                - (power_of<2>(log(w7 / (-w4 + w7))) * log((w4 - w7) / (w4 - w4 * w7))) / 2.0 - (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 - w4 * w7) / (w4 - w7))) / 2.0 + (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 - w7) / (w4 + w4 * w7))) / 2.0 + (power_of<2>(log(w7 / (-w4 + w7))) * log((w4 - w7) / (w4 + w4 * w7))) / 2.0 + power_of<2>(log(1.0 / (1.0 + w4))) * log((w4 + w4 * w7) / (w7 + w4 * w7))
                + power_of<2>(log(1.0 / (1.0 + w4))) * log((w7 + w4 * w7) / (w4 + w4 * w7)) - power_of<2>(log(w7 / (w5 + w7))) * log((w5 + w7) / (w5 - w5 * w7)) + (pisqu * log(((1.0 + w5) * (w5 + w7)) / (w5 - w5 * w7))) / 3.0 + power_of<3>(log(((1.0 + w5) * (w5 + w7)) / (w5 - w5 * w7))) / 3.0 - power_of<2>(log(w7 / (w5 + w7))) * log((w5 - w5 * w7) / (w5 + w7))
                + power_of<2>(log(w7 / (w5 + w7))) * log((w5 + w7) / (w5 + w5 * w7)) - (8.0 * pisqu * log((-2.0 * myi) / wx3)) / 3.0 - (8.0 * power_of<3>(log((-2.0 * myi) / wx3))) / 3.0 - (8.0 * pisqu * log((2.0 * myi) / wx3)) / 3.0 - (8.0 * power_of<3>(log((2.0 * myi) / wx3))) / 3.0 + 8.0 * power_of<2>(lnhalf) * log(wx3 / (-myi + wx3)) - 8.0 * power_of<2>(lnhalf) * log((2.0 * wx3) / (-myi + wx3)) - 8.0 * power_of<2>(lnhalf) * log((-myi + wx3) / (2.0 * wx3))
                + 8.0 * power_of<2>(lnhalf) * log((-myi + wx3) / wx3) + 8.0 * power_of<2>(lnhalf) * log(wx3 / (myi + wx3)) - 8.0 * power_of<2>(lnhalf) * log((2.0 * wx3) / (myi + wx3)) + (8.0 * pisqu * log((2.0 * (-myi + wx3)) / (myi + wx3))) / 3.0 + (8.0 * power_of<3>(log((2.0 * (-myi + wx3)) / (myi + wx3)))) / 3.0 - 8.0 * power_of<2>(lnhalf) * log((myi + wx3) / (2.0 * wx3)) + 8.0 * power_of<2>(lnhalf) * log((myi + wx3) / wx3)
                + (8.0 * pisqu * log((2.0 * (myi + wx3)) / (-myi + wx3))) / 3.0 + (8.0 * power_of<3>(log((2.0 * (myi + wx3)) / (-myi + wx3)))) / 3.0 - (8.0 * pisqu * log((-2.0 * myi) / wx4)) / 3.0 - (8.0 * power_of<3>(log((-2.0 * myi) / wx4))) / 3.0 - (8.0 * pisqu * log((2.0 * myi) / wx4)) / 3.0 - (8.0 * power_of<3>(log((2.0 * myi) / wx4))) / 3.0 + 8.0 * power_of<2>(lnhalf) * log(wx4 / (-myi + wx4)) - 8.0 * power_of<2>(lnhalf) * log((2.0 * wx4) / (-myi + wx4))
                - 8.0 * power_of<2>(lnhalf) * log((-myi + wx4) / (2.0 * wx4)) + 8.0 * power_of<2>(lnhalf) * log((-myi + wx4) / wx4) + 8.0 * power_of<2>(lnhalf) * log(wx4 / (myi + wx4)) - 8.0 * power_of<2>(lnhalf) * log((2.0 * wx4) / (myi + wx4)) + (8.0 * pisqu * log((2.0 * (-myi + wx4)) / (myi + wx4))) / 3.0 + (8.0 * power_of<3>(log((2.0 * (-myi + wx4)) / (myi + wx4)))) / 3.0 - 8.0 * power_of<2>(lnhalf) * log((myi + wx4) / (2.0 * wx4))
                + 8.0 * power_of<2>(lnhalf) * log((myi + wx4) / wx4) + (8.0 * pisqu * log((2.0 * (myi + wx4)) / (-myi + wx4))) / 3.0 + (8.0 * power_of<3>(log((2.0 * (myi + wx4)) / (-myi + wx4)))) / 3.0 + (2.0 * pisqu * log(wx3 / (myi - xb))) / 3.0 + (2.0 * power_of<3>(log(wx3 / (myi - xb)))) / 3.0 + (2.0 * pisqu * log(wx4 / (myi - xb))) / 3.0 + (2.0 * power_of<3>(log(wx4 / (myi - xb)))) / 3.0 + (4.0 * pisqu * log((-2.0 * myi) / (wx3 - xb))) / 3.0
                + (4.0 * power_of<3>(log((-2.0 * myi) / (wx3 - xb)))) / 3.0 + (4.0 * pisqu * log((2.0 * myi) / (wx3 - xb))) / 3.0 + (4.0 * power_of<3>(log((2.0 * myi) / (wx3 - xb)))) / 3.0 + (4.0 * pisqu * log((-2.0 * myi) / (wx4 - xb))) / 3.0 + (4.0 * power_of<3>(log((-2.0 * myi) / (wx4 - xb)))) / 3.0 + (4.0 * pisqu * log((2.0 * myi) / (wx4 - xb))) / 3.0 + (4.0 * power_of<3>(log((2.0 * myi) / (wx4 - xb)))) / 3.0
                + 8.0 * dilog(((-myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(((-myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(-((myi + xb) / (wx3 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(-((myi + xb) / (wx4 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb)
                + 8.0 * dilog(((-myi + wx3) * (myi + xb)) / ((myi + wx3) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(((myi + wx3) * (myi + xb)) / ((-myi + wx3) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(((-myi + wx4) * (myi + xb)) / ((myi + wx4) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb)
                + 8.0 * dilog(((myi + wx4) * (myi + xb)) / ((-myi + wx4) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(((myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog((myi + xb) / (wx3 + xb)) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(((myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb)
                - 8.0 * dilog((myi + xb) / (wx4 + xb)) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 4.0 * log((myi + wx3) / (wx3 - xb)) * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * xb)) + 8.0 * dilog(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 - xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 - xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb)
                + 8.0 * dilog(((-myi + wx3) * (-myi + xb)) / ((myi + wx3) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog(((myi + wx3) * (-myi + xb)) / ((-myi + wx3) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog(((-myi + wx4) * (-myi + xb)) / ((myi + wx4) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb)
                + 8.0 * dilog(((myi + wx4) * (-myi + xb)) / ((-myi + wx4) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog((-myi + xb) / (-wx3 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog(((-myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog((-myi + xb) / (wx3 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb)
                - 8.0 * dilog((-myi + xb) / (-wx4 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog(((-myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog((-myi + xb) / (wx4 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 4.0 * log((-myi + wx3) / (wx3 - xb)) * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * xb))
                + dilog((myi - xb) / (myi + wx3)) * (-8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) - 4.0 * log(1.0 - myi * xb)) + dilog((myi - xb) / (myi + wx4)) * (-8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) - 4.0 * log(1.0 - myi * xb)) + dilog((-myi + xb) / (-myi + wx3)) * (-8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) - 4.0 * log(1.0 - myi * xb))
                + dilog((-myi + xb) / (-myi + wx4)) * (-8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) - 4.0 * log(1.0 - myi * xb)) + 8.0 * dilog(1.0 - myi * xb) * log(1.0 - myi * xb) + 16.0 * dilog((myi + xb) * xbinv) * log(1.0 - myi * xb) - 4.0 * dilog((wx3 * (myi + xb)) / ((-myi + wx3) * xb)) * log(1.0 - myi * xb) - 4.0 * dilog((wx3 * (myi + xb)) / ((myi + wx3) * xb)) * log(1.0 - myi * xb)
                - 4.0 * dilog((wx4 * (myi + xb)) / ((-myi + wx4) * xb)) * log(1.0 - myi * xb) - 4.0 * dilog((wx4 * (myi + xb)) / ((myi + wx4) * xb)) * log(1.0 - myi * xb) + (8.0 * power_of<3>(log(1.0 - myi * xb))) / 3.0 + dilog(-myi / (-myi + wx3)) * (16.0 * lnhalf - 8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb))
                + dilog(myi / (myi + wx3)) * (16.0 * lnhalf - 8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb)) + dilog(-myi / (-myi + wx4)) * (16.0 * lnhalf - 8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb)) + dilog(myi / (myi + wx4)) * (16.0 * lnhalf - 8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb))
                + dilog((myi + xb) / (myi - wx3)) * (-8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) - 4.0 * log(1.0 + myi * xb)) + dilog((myi + xb) / (myi + wx3)) * (-8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) - 4.0 * log(1.0 + myi * xb)) + dilog((myi + xb) / (myi - wx4)) * (-8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) - 4.0 * log(1.0 + myi * xb))
                + dilog((myi + xb) / (myi + wx4)) * (-8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) - 4.0 * log(1.0 + myi * xb)) + dilog(-myi / wx3) * (16.0 * lnhalf - 4.0 * log(1.0 - myi * xb) - 4.0 * log(1.0 + myi * xb)) + dilog(myi / wx3) * (16.0 * lnhalf - 4.0 * log(1.0 - myi * xb) - 4.0 * log(1.0 + myi * xb)) + dilog(-myi / wx4) * (16.0 * lnhalf - 4.0 * log(1.0 - myi * xb) - 4.0 * log(1.0 + myi * xb))
                + dilog(myi / wx4) * (16.0 * lnhalf - 4.0 * log(1.0 - myi * xb) - 4.0 * log(1.0 + myi * xb)) + 8.0 * dilog(1.0 + myi * xb) * log(1.0 + myi * xb) + 16.0 * dilog((-myi + xb) * xbinv) * log(1.0 + myi * xb) - 4.0 * dilog((wx3 * (-myi + xb)) / ((-myi + wx3) * xb)) * log(1.0 + myi * xb) - 4.0 * dilog((wx3 * (-myi + xb)) / ((myi + wx3) * xb)) * log(1.0 + myi * xb)
                - 4.0 * dilog((wx4 * (-myi + xb)) / ((-myi + wx4) * xb)) * log(1.0 + myi * xb) - 4.0 * dilog((wx4 * (-myi + xb)) / ((myi + wx4) * xb)) * log(1.0 + myi * xb) + (8.0 * power_of<3>(log(1.0 + myi * xb))) / 3.0 + dilog((-2.0 * myi) / (-myi + wx3)) * (8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb)) + dilog((2.0 * myi) / (myi + wx3)) * (8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb))
                + dilog((-2.0 * myi) / (-myi + wx4)) * (8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb)) + dilog((2.0 * myi) / (myi + wx4)) * (8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb)) + log((wx3 - xb) / (myi + wx3)) * (2.0 * power_of<2>(log(1.0 - myi * xb)) + 4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb))
                + log((wx4 - xb) / (myi + wx4)) * (2.0 * power_of<2>(log(1.0 - myi * xb)) + 4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb)) + log((wx3 - xb) / (-myi + wx3)) * (4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb) + 2.0 * power_of<2>(log(1.0 + myi * xb))) + log((wx4 - xb) / (-myi + wx4)) * (4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb) + 2.0 * power_of<2>(log(1.0 + myi * xb))) - (8.0 * pisqu * log(-myi / xb)) / 3.0
                - (8.0 * power_of<3>(log(-myi / xb))) / 3.0 - (8.0 * pisqu * log(myi / xb)) / 3.0 - (8.0 * power_of<3>(log(myi / xb))) / 3.0 + ((-4.0 * pisqu) / 3.0 + 8.0 * ln2squ) * log((-myi) * xb) + dilog(((-0.5) * myi) * (myi + xb)) * (-16.0 * (log(xb) - log(myi * xb)) + 16.0 * log(1.0 - myi * xb) + 16.0 * log(1.0 + myi * xb) + 16.0 * log((-myi) * xb)) + ((-4.0 * pisqu) / 3.0 + 8.0 * ln2squ) * log(myi * xb)
                + dilog(1.0 / 2.0 + (myi / 2.0) * xb) * (-16.0 * log(myi) + 16.0 * log(1.0 - myi * xb) + 16.0 * log(1.0 + myi * xb) + 16.0 * log(myi * xb)) + 8.0 * dilog(wx3 / (-myi + wx3)) * log(xb) + 8.0 * dilog(wx3 / (myi + wx3)) * log(xb) + 8.0 * dilog(wx4 / (-myi + wx4)) * log(xb) + 8.0 * dilog(wx4 / (myi + wx4)) * log(xb) - 4.0 * dilog(-(xb / wx3)) * log(xb)
                - 4.0 * dilog(xb / wx3) * log(xb) - 4.0 * dilog(-(xb / wx4)) * log(xb) - 4.0 * dilog(xb / wx4) * log(xb) + dilog((-myi) * xb) * (-8.0 * log(1.0 - myi * xb) + 8.0 * log(xb)) + dilog(myi * xb) * (-8.0 * log(1.0 + myi * xb) + 8.0 * log(xb)) + (2.0 * pisqu * log(wx3 / (-myi + xb))) / 3.0 + (2.0 * power_of<3>(log(wx3 / (-myi + xb)))) / 3.0
                - (4.0 * pisqu * log((2.0 - (2.0 * myi) * wx3) / ((-myi + wx3) * (-myi + xb)))) / 3.0 - (4.0 * power_of<3>(log((2.0 - (2.0 * myi) * wx3) / ((-myi + wx3) * (-myi + xb))))) / 3.0 - (4.0 * pisqu * log((-2.0 - (2.0 * myi) * wx3) / ((myi + wx3) * (-myi + xb)))) / 3.0 - (4.0 * power_of<3>(log((-2.0 - (2.0 * myi) * wx3) / ((myi + wx3) * (-myi + xb))))) / 3.0 + (2.0 * pisqu * log(wx4 / (-myi + xb))) / 3.0 + (2.0 * power_of<3>(log(wx4 / (-myi + xb)))) / 3.0
                - (4.0 * pisqu * log((2.0 - (2.0 * myi) * wx4) / ((-myi + wx4) * (-myi + xb)))) / 3.0 - (4.0 * power_of<3>(log((2.0 - (2.0 * myi) * wx4) / ((-myi + wx4) * (-myi + xb))))) / 3.0 - (4.0 * pisqu * log((-2.0 - (2.0 * myi) * wx4) / ((myi + wx4) * (-myi + xb)))) / 3.0 - (4.0 * power_of<3>(log((-2.0 - (2.0 * myi) * wx4) / ((myi + wx4) * (-myi + xb))))) / 3.0 + (2.0 * pisqu * log(-(wx3 / (myi + xb)))) / 3.0 + (2.0 * power_of<3>(log(-(wx3 / (myi + xb))))) / 3.0
                + (2.0 * pisqu * log(wx3 / (myi + xb))) / 3.0 + (2.0 * power_of<3>(log(wx3 / (myi + xb)))) / 3.0 - (4.0 * pisqu * log((2.0 + (2.0 * myi) * wx3) / ((myi + wx3) * (myi + xb)))) / 3.0 - (4.0 * power_of<3>(log((2.0 + (2.0 * myi) * wx3) / ((myi + wx3) * (myi + xb))))) / 3.0 - (4.0 * pisqu * log(((2.0 * myi) * (myi + wx3)) / ((-myi + wx3) * (myi + xb)))) / 3.0 - (4.0 * power_of<3>(log(((2.0 * myi) * (myi + wx3)) / ((-myi + wx3) * (myi + xb))))) / 3.0
                + (2.0 * pisqu * log(-(wx4 / (myi + xb)))) / 3.0 + (2.0 * power_of<3>(log(-(wx4 / (myi + xb))))) / 3.0 + (2.0 * pisqu * log(wx4 / (myi + xb))) / 3.0 + (2.0 * power_of<3>(log(wx4 / (myi + xb)))) / 3.0 - (4.0 * pisqu * log((2.0 + (2.0 * myi) * wx4) / ((myi + wx4) * (myi + xb)))) / 3.0 - (4.0 * power_of<3>(log((2.0 + (2.0 * myi) * wx4) / ((myi + wx4) * (myi + xb))))) / 3.0 - (4.0 * pisqu * log(((2.0 * myi) * (myi + wx4)) / ((-myi + wx4) * (myi + xb)))) / 3.0
                - (4.0 * power_of<3>(log(((2.0 * myi) * (myi + wx4)) / ((-myi + wx4) * (myi + xb))))) / 3.0 + (4.0 * pisqu * log((-2.0 * myi) / (wx3 + xb))) / 3.0 + (4.0 * power_of<3>(log((-2.0 * myi) / (wx3 + xb)))) / 3.0 + (4.0 * pisqu * log((2.0 * myi) / (wx3 + xb))) / 3.0 + (4.0 * power_of<3>(log((2.0 * myi) / (wx3 + xb)))) / 3.0 + dilog((wx3 + xb) / (-myi + wx3)) * (-4.0 * log(xb) - 4.0 * log((wx3 + xb) / wx3))
                + dilog((wx3 + xb) / (myi + wx3)) * (-4.0 * log(xb) - 4.0 * log((wx3 + xb) / wx3)) + 4.0 * dilog(((-myi) * (wx3 + xb)) / ((-myi + wx3) * xb)) * log((wx3 + xb) / wx3) + 4.0 * dilog((myi * (wx3 + xb)) / ((myi + wx3) * xb)) * log((wx3 + xb) / wx3) - 4.0 * dilog((wx3 + xb) / (-myi + xb)) * log((wx3 + xb) / wx3)
                + 4.0 * dilog(((-myi) * (wx3 + xb)) / (wx3 * (-myi + xb))) * log((wx3 + xb) / wx3) - 4.0 * dilog((wx3 + xb) / (myi + xb)) * log((wx3 + xb) / wx3) + 4.0 * dilog((myi * (wx3 + xb)) / (wx3 * (myi + xb))) * log((wx3 + xb) / wx3)
                + (-2.0 * log((myi + wx3) / (myi - xb)) + 2.0 * log(((myi + wx3) * xb) / (wx3 * (-myi + xb))) + 2.0 * log((wx3 * (-myi + xb)) / ((myi + wx3) * xb)) - 2.0 * log((myi - wx3) / (myi + xb)) + 2.0 * log(((-myi + wx3) * xb) / (wx3 * (myi + xb))) - 2.0 * log((myi + xb) / (myi - wx3)) + 2.0 * log((wx3 * (myi + xb)) / ((-myi + wx3) * xb))) * power_of<2>(log((wx3 + xb) / wx3))
                + log((myi - xb) / (myi + wx3)) * (-4.0 * log(xb) * log((wx3 + xb) / wx3) - 2.0 * power_of<2>(log((wx3 + xb) / wx3))) + (4.0 * pisqu * log((-2.0 * myi) / (wx4 + xb))) / 3.0 + (4.0 * power_of<3>(log((-2.0 * myi) / (wx4 + xb)))) / 3.0 + (4.0 * pisqu * log((2.0 * myi) / (wx4 + xb))) / 3.0 + (4.0 * power_of<3>(log((2.0 * myi) / (wx4 + xb)))) / 3.0
                + dilog((wx4 + xb) / (-myi + wx4)) * (-4.0 * log(xb) - 4.0 * log((wx4 + xb) / wx4)) + dilog((wx4 + xb) / (myi + wx4)) * (-4.0 * log(xb) - 4.0 * log((wx4 + xb) / wx4)) + 4.0 * dilog(((-myi) * (wx4 + xb)) / ((-myi + wx4) * xb)) * log((wx4 + xb) / wx4) + 4.0 * dilog((myi * (wx4 + xb)) / ((myi + wx4) * xb)) * log((wx4 + xb) / wx4)
                - 4.0 * dilog((wx4 + xb) / (-myi + xb)) * log((wx4 + xb) / wx4) + 4.0 * dilog(((-myi) * (wx4 + xb)) / (wx4 * (-myi + xb))) * log((wx4 + xb) / wx4) - 4.0 * dilog((wx4 + xb) / (myi + xb)) * log((wx4 + xb) / wx4) + 4.0 * dilog((myi * (wx4 + xb)) / (wx4 * (myi + xb))) * log((wx4 + xb) / wx4) - 2.0 * log((myi - xb) / (myi + wx4)) * power_of<2>(log((wx4 + xb) / wx4))
                + (-2.0 * log((myi + wx4) / (myi - xb)) + 2.0 * log(((myi + wx4) * xb) / (wx4 * (-myi + xb))) + 2.0 * log((wx4 * (-myi + xb)) / ((myi + wx4) * xb)) - 2.0 * log((myi - wx4) / (myi + xb)) + 2.0 * log(((-myi + wx4) * xb) / (wx4 * (myi + xb))) - 2.0 * log((myi + xb) / (myi - wx4)) + 2.0 * log((wx4 * (myi + xb)) / ((-myi + wx4) * xb))) * power_of<2>(log((wx4 + xb) / wx4))
                + log(1.0 / 2.0 - (myi / 2.0) * xb) * (-8.0 * log((wx3 - xb) / (myi + wx3)) * log(1.0 + myi * xb) - 8.0 * log((wx4 - xb) / (myi + wx4)) * log(1.0 + myi * xb) + 8.0 * power_of<2>(log(1.0 + myi * xb)) + log(1.0 + myi * xb) * (-8.0 * log((wx3 + xb) / (-myi + wx3)) - 8.0 * log((wx4 + xb) / (-myi + wx4))))
                + log(1.0 / 2.0 + (myi / 2.0) * xb) * (-8.0 * log((wx3 - xb) / (-myi + wx3)) * log(1.0 - myi * xb) - 8.0 * log((wx4 - xb) / (-myi + wx4)) * log(1.0 - myi * xb) + 8.0 * power_of<2>(log(1.0 - myi * xb)) + log(1.0 - myi * xb) * (-8.0 * log((wx3 + xb) / (myi + wx3)) - 8.0 * log((wx4 + xb) / (myi + wx4))))
                + dilog(1.0 / 2.0 - (myi / 2.0) * wx4) * (16.0 * log(wx4 / (myi + wx4)) - 8.0 * log((wx4 - xb) / (myi + wx4)) - 8.0 * log((wx4 + xb) / (myi + wx4))) + power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * xb)) * (-4.0 * log((wx3 - xb) / (myi + wx3)) - 4.0 * log((myi + wx4) / (wx4 - xb)) - 4.0 * log((wx4 - xb) / (myi + wx4)) + 4.0 * log(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 - xb)))
                  + 4.0 * log(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 - xb))) + 4.0 * log(((-2.0 * myi) * (wx3 - xb)) / ((myi + wx3) * (-myi + xb))) + 4.0 * log(((-2.0 * myi) * (wx4 - xb)) / ((myi + wx4) * (-myi + xb))) - 4.0 * log((-myi + wx3) / (wx3 + xb)) + 4.0 * log(((-myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 + xb))) - 4.0 * log((wx3 + xb) / (-myi + wx3))
                  + 4.0 * log(((-2.0 * myi) * (wx3 + xb)) / ((-myi + wx3) * (-myi + xb))) - 4.0 * log((-myi + wx4) / (wx4 + xb)) + 4.0 * log(((-myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 + xb))) - 4.0 * log((wx4 + xb) / (-myi + wx4)) + 4.0 * log(((-2.0 * myi) * (wx4 + xb)) / ((-myi + wx4) * (-myi + xb))))
                + power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * xb)) * (-4.0 * log((wx3 - xb) / (-myi + wx3)) - 4.0 * log((-myi + wx4) / (wx4 - xb)) - 4.0 * log((wx4 - xb) / (-myi + wx4)) + 4.0 * log(((-myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 - xb))) + 4.0 * log(((-myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 - xb))) + 4.0 * log(((2.0 * myi) * (wx3 - xb)) / ((-myi + wx3) * (myi + xb)))
                  + 4.0 * log(((2.0 * myi) * (wx4 - xb)) / ((-myi + wx4) * (myi + xb))) - 4.0 * log((myi + wx3) / (wx3 + xb)) + 4.0 * log(((myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 + xb))) - 4.0 * log((wx3 + xb) / (myi + wx3)) + 4.0 * log(((2.0 * myi) * (wx3 + xb)) / ((myi + wx3) * (myi + xb))) - 4.0 * log((myi + wx4) / (wx4 + xb)) + 4.0 * log(((myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 + xb)))
                  - 4.0 * log((wx4 + xb) / (myi + wx4)) + 4.0 * log(((2.0 * myi) * (wx4 + xb)) / ((myi + wx4) * (myi + xb)))) + dilog((wx3 - xb) / (-myi + wx3)) * (-4.0 * log(xb) - 4.0 * log(1.0 - xb / wx3)) + dilog((wx3 - xb) / (myi + wx3)) * (-4.0 * log(xb) - 4.0 * log(1.0 - xb / wx3)) + 4.0 * dilog((myi * (wx3 - xb)) / ((-myi + wx3) * xb)) * log(1.0 - xb / wx3)
                + 4.0 * dilog(((-myi) * (wx3 - xb)) / ((myi + wx3) * xb)) * log(1.0 - xb / wx3) + 4.0 * dilog(((-myi) * (wx3 - xb)) / (wx3 * (-myi + xb))) * log(1.0 - xb / wx3) + 4.0 * dilog((myi * (wx3 - xb)) / (wx3 * (myi + xb))) * log(1.0 - xb / wx3) - 4.0 * dilog((-wx3 + xb) / (-myi + xb)) * log(1.0 - xb / wx3) - 4.0 * dilog((-wx3 + xb) / (myi + xb)) * log(1.0 - xb / wx3)
                - 2.0 * log((-myi + xb) / (-myi + wx3)) * power_of<2>(log(1.0 - xb / wx3)) + (-2.0 * log((-myi + wx3) / (-myi + xb)) + 2.0 * log(((-myi + wx3) * xb) / (wx3 * (-myi + xb))) + 2.0 * log((wx3 * (-myi + xb)) / ((-myi + wx3) * xb)) - 2.0 * log((myi + wx3) / (myi + xb)) + 2.0 * log(((myi + wx3) * xb) / (wx3 * (myi + xb))) - 2.0 * log((myi + xb) / (myi + wx3))
                  + 2.0 * log((wx3 * (myi + xb)) / ((myi + wx3) * xb))) * power_of<2>(log(1.0 - xb / wx3)) + dilog((wx4 - xb) / (-myi + wx4)) * (-4.0 * log(xb) - 4.0 * log(1.0 - xb / wx4)) + dilog((wx4 - xb) / (myi + wx4)) * (-4.0 * log(xb) - 4.0 * log(1.0 - xb / wx4)) + 4.0 * dilog((myi * (wx4 - xb)) / ((-myi + wx4) * xb)) * log(1.0 - xb / wx4)
                + 4.0 * dilog(((-myi) * (wx4 - xb)) / ((myi + wx4) * xb)) * log(1.0 - xb / wx4) + 4.0 * dilog(((-myi) * (wx4 - xb)) / (wx4 * (-myi + xb))) * log(1.0 - xb / wx4) + 4.0 * dilog((myi * (wx4 - xb)) / (wx4 * (myi + xb))) * log(1.0 - xb / wx4) - 4.0 * dilog((-wx4 + xb) / (-myi + xb)) * log(1.0 - xb / wx4) - 4.0 * dilog((-wx4 + xb) / (myi + xb)) * log(1.0 - xb / wx4)
                - 2.0 * log((-myi + xb) / (-myi + wx4)) * power_of<2>(log(1.0 - xb / wx4)) + (-2.0 * log((-myi + wx4) / (-myi + xb)) + 2.0 * log(((-myi + wx4) * xb) / (wx4 * (-myi + xb))) + 2.0 * log((wx4 * (-myi + xb)) / ((-myi + wx4) * xb)) - 2.0 * log((myi + wx4) / (myi + xb)) + 2.0 * log(((myi + wx4) * xb) / (wx4 * (myi + xb))) - 2.0 * log((myi + xb) / (myi + wx4))
                  + 2.0 * log((wx4 * (myi + xb)) / ((myi + wx4) * xb))) * power_of<2>(log(1.0 - xb / wx4)) - myi * M_PI * H1(-2.0 / (-1.0 + w7), -2.0 / (-1.0 + tb)) * power_of<2>(log((tb - w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - tb))) + myi * M_PI * H1((-1.0 + w7) / (-1.0 + tb), -2.0 / (-1.0 + tb)) * power_of<2>(log(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (-1.0 + w7)))) * my_sign(2.0 * imag(1.0 / (1.0 - tb)))
                + myi * M_PI * H1(w7 / tb, -1.0 / tb) * power_of<2>(log(tb * (1.0 + w7inv))) * my_sign(-imag(1.0 / tb)) - myi * M_PI * H1(-w7inv, -1.0 / tb) * power_of<2>(log(tb - w7)) * my_sign(-imag(1.0 / tb)) + myi * M_PI * H1(w7 / tb, 1.0 / tb) * power_of<2>(log(tb * (-1.0 + w7inv))) * my_sign(imag(1.0 / tb)) - myi * M_PI * H1(w7inv, 1.0 / tb) * power_of<2>(log(-tb + w7)) * my_sign(imag(1.0 / tb))
                - myi * M_PI * H1((1.0 + w7) / (1.0 + tb), 2.0 / (1.0 + tb)) * power_of<2>(log((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (1.0 + w7)))) * my_sign(2.0 * imag(1.0 / (1.0 + tb))) + myi * M_PI * H1(2.0 / (1.0 + w7), 2.0 / (1.0 + tb)) * power_of<2>(log((-tb + w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 + tb))) - myi * M_PI * H1((1.0 + w7) / (1.0 - vb), -2.0 / (-1.0 + vb)) * power_of<2>(log(((-1.0 + vb) * (-1.0 + w7)) / (2.0 * (1.0 + w7)))) * 
                 my_sign(2.0 * imag(1.0 / (1.0 - vb))) + myi * M_PI * H1(2.0 / (1.0 + w7), -2.0 / (-1.0 + vb)) * power_of<2>(log((vb + w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - vb))) + myi * M_PI * H1(-(w7 / vb), -1.0 / vb) * power_of<2>(log((vb * (-1.0 + w7)) / w7)) * my_sign(-imag(1.0 / vb)) - myi * M_PI * H1(w7inv, -1.0 / vb) * power_of<2>(log(vb + w7)) * my_sign(-imag(1.0 / vb))
                - myi * M_PI * H1(-w7inv, 1.0 / vb) * power_of<2>(log(-vb - w7)) * my_sign(imag(1.0 / vb)) + myi * M_PI * H1(-(w7 / vb), 1.0 / vb) * power_of<2>(log(-((vb * (1.0 + w7)) / w7))) * my_sign(imag(1.0 / vb)) - myi * M_PI * H1(-2.0 / (-1.0 + w7), 2.0 / (1.0 + vb)) * power_of<2>(log((-vb - w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 + vb)))
                + myi * M_PI * H1((1.0 - w7) / (1.0 + vb), 2.0 / (1.0 + vb)) * power_of<2>(log(((1.0 + vb) * (1.0 + w7)) / (2.0 - 2.0 * w7))) * my_sign(2.0 * imag(1.0 / (1.0 + vb))) - (2.0 * myi) * M_PI * H1((1.0 + w4) / (-1.0 + w4), 1.0 + w4inv) * power_of<2>(log(-1.0 / (1.0 + w4))) * my_sign(-imag(w4inv)) + (2.0 * myi) * M_PI * H1((-1.0 + w4) / w4, 1.0 + w4inv) * power_of<2>(log((2.0 * w4) / (-1.0 + power_of<2>(w4)))) * my_sign(-imag(w4inv))
                + (2.0 * myi) * M_PI * H1((1.0 + w4) / (w4 - w7), 1.0 + w4inv) * power_of<2>(log(-(w7 / (1.0 + w4)))) * my_sign(-imag(w4inv)) - (2.0 * myi) * M_PI * H1(1.0 - w7 / w4, 1.0 + w4inv) * power_of<2>(log((w4 * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(-imag(w4inv)) - (2.0 * myi) * M_PI * H1((-1.0 + w4) / (1.0 + w4), (-1.0 + w4) / w4) * power_of<2>(log(1.0 / (-1.0 + w4))) * my_sign(imag(w4inv))
                + (2.0 * myi) * M_PI * H1(1.0 + w4inv, (-1.0 + w4) / w4) * power_of<2>(log((-2.0 * w4) / (-1.0 + power_of<2>(w4)))) * my_sign(imag(w4inv)) + (2.0 * myi) * M_PI * H1(1.0 - w7 / w4, (-1.0 + w4) / w4) * power_of<2>(log((w4 * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag(w4inv)) - (2.0 * myi) * M_PI * H1((-1.0 + w4) / (w4 - w7), (-1.0 + w4) / w4) * power_of<2>(log(w7 / (1.0 - w4))) * my_sign(imag(w4inv))
                - myi * M_PI * H1(w4, w4 / tb) * power_of<2>(log((1.0 - tb) / w4)) * my_sign(imag(w4 / tb)) + myi * M_PI * H1(-w4, w4 / tb) * power_of<2>(log(-((1.0 + tb) / w4))) * my_sign(imag(w4 / tb)) + myi * M_PI * H1(1.0 / tb, w4 / tb) * power_of<2>(log((tb * (-1.0 + w4)) / w4)) * my_sign(imag(w4 / tb)) - myi * M_PI * H1(-1.0 / tb, w4 / tb) * power_of<2>(log(-((tb * (1.0 + w4)) / w4))) * my_sign(imag(w4 / tb))
                - myi * M_PI * H1(w7 / tb, w4 / tb) * power_of<2>(log(tb * (-w4inv + w7inv))) * my_sign(imag(w4 / tb)) + myi * M_PI * H1(w4 / w7, w4 / tb) * power_of<2>(log((-tb + w7) / w4)) * my_sign(imag(w4 / tb)) + myi * M_PI * H1(-1.0 / vb, -(w4 / vb)) * power_of<2>(log(vb * (-1.0 + w4inv))) * my_sign(-imag(w4 / vb)) - myi * M_PI * H1(1.0 / vb, -(w4 / vb)) * power_of<2>(log(vb * (1.0 + w4inv))) * my_sign(-imag(w4 / vb))
                + myi * M_PI * H1(-w4, -(w4 / vb)) * power_of<2>(log((-1.0 + vb) / w4)) * my_sign(-imag(w4 / vb)) - myi * M_PI * H1(w4, -(w4 / vb)) * power_of<2>(log((1.0 + vb) / w4)) * my_sign(-imag(w4 / vb)) - myi * M_PI * H1(-(w7 / vb), -(w4 / vb)) * power_of<2>(log(vb * (w4inv - w7inv))) * my_sign(-imag(w4 / vb)) + myi * M_PI * H1(w4 / w7, -(w4 / vb)) * power_of<2>(log((vb + w7) / w4)) * my_sign(-imag(w4 / vb))
                - myi * M_PI * H1((-1.0 + w4) / (1.0 + w4), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log((1.0 + tb) / (-1.0 + w4))) * my_sign(imag((-1.0 + w4) / (-tb + w4))) + myi * M_PI * H1((1.0 + w4) / (-tb + w4), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log((2.0 * (tb - w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((-1.0 + w4) / (-tb + w4)))
                - myi * M_PI * H1((-1.0 + w4) / (w4 - w7), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log((tb - w7) / (-1.0 + w4))) * my_sign(imag((-1.0 + w4) / (-tb + w4))) + myi * M_PI * H1((-w4 + w7) / (tb - w4), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log(((-tb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag((-1.0 + w4) / (-tb + w4)))
                - myi * M_PI * H1((1.0 + w4) / (-1.0 + w4), (1.0 + w4) / (-tb + w4)) * power_of<2>(log((-1.0 + tb) / (1.0 + w4))) * my_sign(imag((1.0 + w4) / (-tb + w4))) + myi * M_PI * H1((-1.0 + w4) / (-tb + w4), (1.0 + w4) / (-tb + w4)) * power_of<2>(log((2.0 * (-tb + w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((1.0 + w4) / (-tb + w4)))
                + myi * M_PI * H1((1.0 + w4) / (w4 - w7), (1.0 + w4) / (-tb + w4)) * power_of<2>(log((tb - w7) / (1.0 + w4))) * my_sign(imag((1.0 + w4) / (-tb + w4))) - myi * M_PI * H1((-w4 + w7) / (tb - w4), (1.0 + w4) / (-tb + w4)) * power_of<2>(log(((-tb + w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(imag((1.0 + w4) / (-tb + w4)))
                - myi * M_PI * H1((-1.0 + w4) / (1.0 + w4), (-1.0 + w4) / (vb + w4)) * power_of<2>(log((1.0 - vb) / (-1.0 + w4))) * my_sign(imag((-1.0 + w4) / (vb + w4))) + myi * M_PI * H1((1.0 + w4) / (vb + w4), (-1.0 + w4) / (vb + w4)) * power_of<2>(log((-2.0 * (vb + w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((-1.0 + w4) / (vb + w4)))
                + myi * M_PI * H1((w4 - w7) / (vb + w4), (-1.0 + w4) / (vb + w4)) * power_of<2>(log(((vb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag((-1.0 + w4) / (vb + w4))) - myi * M_PI * H1((-1.0 + w4) / (w4 - w7), (-1.0 + w4) / (vb + w4)) * power_of<2>(log((vb + w7) / (1.0 - w4))) * my_sign(imag((-1.0 + w4) / (vb + w4)))
                - myi * M_PI * H1((1.0 + w4) / (-1.0 + w4), (1.0 + w4) / (vb + w4)) * power_of<2>(log(-((1.0 + vb) / (1.0 + w4)))) * my_sign(imag((1.0 + w4) / (vb + w4))) + myi * M_PI * H1((-1.0 + w4) / (vb + w4), (1.0 + w4) / (vb + w4)) * power_of<2>(log((2.0 * (vb + w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((1.0 + w4) / (vb + w4)))
                - myi * M_PI * H1((w4 - w7) / (vb + w4), (1.0 + w4) / (vb + w4)) * power_of<2>(log(((vb + w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(imag((1.0 + w4) / (vb + w4))) + myi * M_PI * H1((1.0 + w4) / (w4 - w7), (1.0 + w4) / (vb + w4)) * power_of<2>(log(-((vb + w7) / (1.0 + w4)))) * my_sign(imag((1.0 + w4) / (vb + w4)))
                - (2.0 * myi) * M_PI * H1((1.0 + w5) / (-1.0 + w5), 1.0 + w5inv) * power_of<2>(log(-1.0 / (1.0 + w5))) * my_sign(-imag(w5inv)) + (2.0 * myi) * M_PI * H1((-1.0 + w5) / w5, 1.0 + w5inv) * power_of<2>(log((2.0 * w5) / (-1.0 + power_of<2>(w5)))) * my_sign(-imag(w5inv)) - (2.0 * myi) * M_PI * H1((1.0 + w5) / (w5 + w7), 1.0 + w5inv) * power_of<2>(log(w7 / (1.0 + w5))) * my_sign(-imag(w5inv))
                + (2.0 * myi) * M_PI * H1((w5 + w7) / w5, 1.0 + w5inv) * power_of<2>(log((w5 - w5 * w7) / (w5 + power_of<2>(w5) + w7 + w5 * w7))) * my_sign(-imag(w5inv)) - (2.0 * myi) * M_PI * H1((-1.0 + w5) / (1.0 + w5), (-1.0 + w5) / w5) * power_of<2>(log(1.0 / (-1.0 + w5))) * my_sign(imag(w5inv)) + (2.0 * myi) * M_PI * H1(1.0 + w5inv, (-1.0 + w5) / w5) * power_of<2>(log((-2.0 * w5) / (-1.0 + power_of<2>(w5)))) * my_sign(imag(w5inv))
                + (2.0 * myi) * M_PI * H1((-1.0 + w5) / (w5 + w7), (-1.0 + w5) / w5) * power_of<2>(log(w7 / (-1.0 + w5))) * my_sign(imag(w5inv)) - (2.0 * myi) * M_PI * H1((w5 + w7) / w5, (-1.0 + w5) / w5) * power_of<2>(log(-((w5 * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7))))) * my_sign(imag(w5inv)) - myi * M_PI * H1(-1.0 / tb, -(w5 / tb)) * power_of<2>(log(tb * (-1.0 + w5inv))) * my_sign(-imag(w5 / tb))
                + myi * M_PI * H1(1.0 / tb, -(w5 / tb)) * power_of<2>(log(tb * (1.0 + w5inv))) * my_sign(-imag(w5 / tb)) - myi * M_PI * H1(-w5, -(w5 / tb)) * power_of<2>(log((-1.0 + tb) / w5)) * my_sign(-imag(w5 / tb)) + myi * M_PI * H1(w5, -(w5 / tb)) * power_of<2>(log((1.0 + tb) / w5)) * my_sign(-imag(w5 / tb)) - myi * M_PI * H1(w7 / tb, -(w5 / tb)) * power_of<2>(log(tb * (w5inv + w7inv))) * my_sign(-imag(w5 / tb))
                + myi * M_PI * H1(-(w5 / w7), -(w5 / tb)) * power_of<2>(log((tb - w7) / w5)) * my_sign(-imag(w5 / tb)) + myi * M_PI * H1(w5, w5 / vb) * power_of<2>(log((1.0 - vb) / w5)) * my_sign(imag(w5 / vb)) - myi * M_PI * H1(-w5, w5 / vb) * power_of<2>(log(-((1.0 + vb) / w5))) * my_sign(imag(w5 / vb)) - myi * M_PI * H1(1.0 / vb, w5 / vb) * power_of<2>(log((vb * (-1.0 + w5)) / w5)) * my_sign(imag(w5 / vb))
                + myi * M_PI * H1(-1.0 / vb, w5 / vb) * power_of<2>(log(-((vb * (1.0 + w5)) / w5))) * my_sign(imag(w5 / vb)) + myi * M_PI * H1(-(w5 / w7), w5 / vb) * power_of<2>(log(-((vb + w7) / w5))) * my_sign(imag(w5 / vb)) - myi * M_PI * H1(-(w7 / vb), w5 / vb) * power_of<2>(log(-((vb * (w5 + w7)) / (w5 * w7)))) * my_sign(imag(w5 / vb))
                - myi * M_PI * H1((-1.0 + w5) / (1.0 + w5), (-1.0 + w5) / (tb + w5)) * power_of<2>(log((1.0 - tb) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (tb + w5))) + myi * M_PI * H1((1.0 + w5) / (tb + w5), (-1.0 + w5) / (tb + w5)) * power_of<2>(log((-2.0 * (tb + w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((-1.0 + w5) / (tb + w5)))
                + myi * M_PI * H1((-1.0 + w5) / (w5 + w7), (-1.0 + w5) / (tb + w5)) * power_of<2>(log((-tb + w7) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (tb + w5))) - myi * M_PI * H1((w5 + w7) / (tb + w5), (-1.0 + w5) / (tb + w5)) * power_of<2>(log(-(((tb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7))))) * my_sign(imag((-1.0 + w5) / (tb + w5)))
                - myi * M_PI * H1((1.0 + w5) / (-1.0 + w5), (1.0 + w5) / (tb + w5)) * power_of<2>(log(-((1.0 + tb) / (1.0 + w5)))) * my_sign(imag((1.0 + w5) / (tb + w5))) + myi * M_PI * H1((-1.0 + w5) / (tb + w5), (1.0 + w5) / (tb + w5)) * power_of<2>(log((2.0 * (tb + w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((1.0 + w5) / (tb + w5)))
                - myi * M_PI * H1((1.0 + w5) / (w5 + w7), (1.0 + w5) / (tb + w5)) * power_of<2>(log((-tb + w7) / (1.0 + w5))) * my_sign(imag((1.0 + w5) / (tb + w5))) + myi * M_PI * H1((w5 + w7) / (tb + w5), (1.0 + w5) / (tb + w5)) * power_of<2>(log(-(((tb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7))))) * my_sign(imag((1.0 + w5) / (tb + w5)))
                - myi * M_PI * H1((-1.0 + w5) / (1.0 + w5), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log((1.0 + vb) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (-vb + w5))) + myi * M_PI * H1((1.0 + w5) / (-vb + w5), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log((2.0 * (vb - w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((-1.0 + w5) / (-vb + w5)))
                + myi * M_PI * H1((-1.0 + w5) / (w5 + w7), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log((vb + w7) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (-vb + w5))) - myi * M_PI * H1((w5 + w7) / (-vb + w5), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log(((vb - w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(imag((-1.0 + w5) / (-vb + w5)))
                - myi * M_PI * H1((1.0 + w5) / (-1.0 + w5), (1.0 + w5) / (-vb + w5)) * power_of<2>(log((-1.0 + vb) / (1.0 + w5))) * my_sign(imag((1.0 + w5) / (-vb + w5))) + myi * M_PI * H1((-1.0 + w5) / (-vb + w5), (1.0 + w5) / (-vb + w5)) * power_of<2>(log((2.0 * (-vb + w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((1.0 + w5) / (-vb + w5)))
                - myi * M_PI * H1((1.0 + w5) / (w5 + w7), (1.0 + w5) / (-vb + w5)) * power_of<2>(log((vb + w7) / (1.0 + w5))) * my_sign(imag((1.0 + w5) / (-vb + w5))) + myi * M_PI * H1((w5 + w7) / (-vb + w5), (1.0 + w5) / (-vb + w5)) * power_of<2>(log(((vb - w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(imag((1.0 + w5) / (-vb + w5)))
                + myi * M_PI * H1((w4 - w7) / (1.0 + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log((1.0 - vb) / (w4 - w7))) * my_sign(imag((w4 - w7) / (vb + w4))) - myi * M_PI * H1((w4 - w7) / (-1.0 + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log(-((1.0 + vb) / (w4 - w7)))) * my_sign(imag((w4 - w7) / (vb + w4)))
                + myi * M_PI * H1((-1.0 + w4) / (vb + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log(-(((vb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7))))) * my_sign(imag((w4 - w7) / (vb + w4))) - myi * M_PI * H1((1.0 + w4) / (vb + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log(-(((vb + w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7))))) * my_sign(imag((w4 - w7) / (vb + w4)))
                + (2.0 * myi) * M_PI * H1((w4 - w7) / (1.0 + w4), 1.0 - w7 / w4) * power_of<2>(log(1.0 / (w4 - w7))) * my_sign(imag(w7 / w4)) + (2.0 * myi) * M_PI * H1((-1.0 + w4) / w4, 1.0 - w7 / w4) * power_of<2>(log(-((w4 * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7))))) * my_sign(imag(w7 / w4)) - (2.0 * myi) * M_PI * H1(1.0 + w4inv, 1.0 - w7 / w4) * power_of<2>(log(-((w4 * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7))))) * my_sign(imag(w7 / w4))
                - (2.0 * myi) * M_PI * H1((w4 - w7) / (-1.0 + w4), 1.0 - w7 / w4) * power_of<2>(log(1.0 / (-w4 + w7))) * my_sign(imag(w7 / w4)) + (2.0 * myi) * M_PI * H1((w5 + w7) / (-1.0 + w5), (w5 + w7) / w5) * power_of<2>(log(-1.0 / (w5 + w7))) * my_sign(-imag(w7 / w5)) - (2.0 * myi) * M_PI * H1((w5 + w7) / (1.0 + w5), (w5 + w7) / w5) * power_of<2>(log(1.0 / (w5 + w7))) * my_sign(-imag(w7 / w5))
                + (2.0 * myi) * M_PI * H1(1.0 + w5inv, (w5 + w7) / w5) * power_of<2>(log((w5 * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(-imag(w7 / w5)) - (2.0 * myi) * M_PI * H1((-1.0 + w5) / w5, (w5 + w7) / w5) * power_of<2>(log((w5 * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(-imag(w7 / w5))
                - myi * M_PI * H1((w4 - w7) / (-1.0 + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log((-1.0 + tb) / (w4 - w7))) * my_sign(imag((-w4 + w7) / (tb - w4))) + myi * M_PI * H1((w4 - w7) / (1.0 + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log((1.0 + tb) / (w4 - w7))) * my_sign(imag((-w4 + w7) / (tb - w4)))
                + myi * M_PI * H1((-1.0 + w4) / (-tb + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log(((tb - w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag((-w4 + w7) / (tb - w4))) - myi * M_PI * H1((1.0 + w4) / (-tb + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log(((tb - w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(imag((-w4 + w7) / (tb - w4)))
                - myi * M_PI * H1((w5 + w7) / (1.0 + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log((1.0 - tb) / (w5 + w7))) * my_sign(imag((w5 + w7) / (tb + w5))) + myi * M_PI * H1((w5 + w7) / (-1.0 + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log(-((1.0 + tb) / (w5 + w7)))) * my_sign(imag((w5 + w7) / (tb + w5)))
                + myi * M_PI * H1((1.0 + w5) / (tb + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log(((tb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (tb + w5))) - myi * M_PI * H1((-1.0 + w5) / (tb + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log(((tb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (tb + w5)))
                + myi * M_PI * H1((w5 + w7) / (-1.0 + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log((-1.0 + vb) / (w5 + w7))) * my_sign(imag((w5 + w7) / (-vb + w5))) - myi * M_PI * H1((w5 + w7) / (1.0 + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log((1.0 + vb) / (w5 + w7))) * my_sign(imag((w5 + w7) / (-vb + w5)))
                + myi * M_PI * H1((1.0 + w5) / (-vb + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log(((-vb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (-vb + w5))) - myi * M_PI * H1((-1.0 + w5) / (-vb + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log(((-vb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (-vb + w5)))
                - (4.0 * myi) * M_PI * H1(myi * wx3, -(wx3 * xbinv)) * power_of<2>(log((-myi + xb) / wx3)) * my_sign(-imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1((-myi) * wx3, -(wx3 * xbinv)) * power_of<2>(log((myi + xb) / wx3)) * my_sign(-imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1((-myi) * wx3, wx3 * xbinv) * power_of<2>(log((myi - xb) / wx3)) * my_sign(imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1(myi * wx3, wx3 * xbinv) * power_of<2>(log(-((myi + xb) / wx3))) * my_sign(imag(wx3 * xbinv))
                - (4.0 * myi) * M_PI * H1(myi * wx4, -(wx4 * xbinv)) * power_of<2>(log((-myi + xb) / wx4)) * my_sign(-imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1((-myi) * wx4, -(wx4 * xbinv)) * power_of<2>(log((myi + xb) / wx4)) * my_sign(-imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1((-myi) * wx4, wx4 * xbinv) * power_of<2>(log((myi - xb) / wx4)) * my_sign(imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1(myi * wx4, wx4 * xbinv) * power_of<2>(log(-((myi + xb) / wx4))) * my_sign(imag(wx4 * xbinv))
                - (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx3), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((myi / 2.0) * (wx3 - xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) - (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx4), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((myi / 2.0) * (wx4 - xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb)))
                + (8.0 * myi) * M_PI * H1((-myi + wx3) / (-myi + xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * myi - 2.0 * wx3))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) + (8.0 * myi) * M_PI * H1((-myi + wx4) / (-myi + xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * myi - 2.0 * wx4))) * my_sign(2.0 * std::real(1.0 / (myi - xb)))
                + (8.0 * myi) * M_PI * H1((myi + wx3) / (myi - xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((((-0.5) * myi) * (-myi + wx3) * (-myi + xb)) / (myi + wx3))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) + (8.0 * myi) * M_PI * H1((myi + wx4) / (myi - xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((((-0.5) * myi) * (-myi + wx4) * (-myi + xb)) / (myi + wx4))) * my_sign(2.0 * std::real(1.0 / (myi - xb)))
                - (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx3), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx3 + xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) - (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx4), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx4 + xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb)))
                + power_of<2>(log((-myi - wx3inv) * xb)) * ((4.0 * myi) * M_PI * H1(myi / xb, wx3 * xbinv) * my_sign(imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1(-(wx3 * xbinv), -myi / xb) * my_sign(-std::real(xbinv))) + power_of<2>(log((-myi + wx3inv) * xb)) * ((4.0 * myi) * M_PI * H1(myi / xb, -(wx3 * xbinv)) * my_sign(-imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1(wx3 * xbinv, -myi / xb) * my_sign(-std::real(xbinv)))
                + power_of<2>(log((-myi - wx4inv) * xb)) * ((4.0 * myi) * M_PI * H1(myi / xb, wx4 * xbinv) * my_sign(imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1(-(wx4 * xbinv), -myi / xb) * my_sign(-std::real(xbinv))) + power_of<2>(log((-myi + wx4inv) * xb)) * ((4.0 * myi) * M_PI * H1(myi / xb, -(wx4 * xbinv)) * my_sign(-imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1(wx4 * xbinv, -myi / xb) * my_sign(-std::real(xbinv)))
                + power_of<2>(log((myi - wx3inv) * xb)) * ((4.0 * myi) * M_PI * H1(-myi / xb, wx3 * xbinv) * my_sign(imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1(-(wx3 * xbinv), myi / xb) * my_sign(std::real(xbinv))) + power_of<2>(log((myi + wx3inv) * xb)) * ((4.0 * myi) * M_PI * H1(-myi / xb, -(wx3 * xbinv)) * my_sign(-imag(wx3 * xbinv)) - (4.0 * myi) * M_PI * H1(wx3 * xbinv, myi / xb) * my_sign(std::real(xbinv)))
                + power_of<2>(log((myi - wx4inv) * xb)) * ((4.0 * myi) * M_PI * H1(-myi / xb, wx4 * xbinv) * my_sign(imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1(-(wx4 * xbinv), myi / xb) * my_sign(std::real(xbinv))) + power_of<2>(log((myi + wx4inv) * xb)) * ((4.0 * myi) * M_PI * H1(-myi / xb, -(wx4 * xbinv)) * my_sign(-imag(wx4 * xbinv)) - (4.0 * myi) * M_PI * H1(wx4 * xbinv, myi / xb) * my_sign(std::real(xbinv)))
                - (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx3), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx3 - xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) - (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx4), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx4 - xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb)))
                + (8.0 * myi) * M_PI * H1((myi + wx3) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((1.0 + myi * wx3) * (myi + xb)) / (2.0 * (myi + wx3)))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) + (8.0 * myi) * M_PI * H1((myi + wx4) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((1.0 + myi * wx4) * (myi + xb)) / (2.0 * (myi + wx4)))) * my_sign(2.0 * std::real(1.0 / (myi + xb)))
                - (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx3), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi / 2.0) * (wx3 + xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) - (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx4), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi / 2.0) * (wx4 + xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) + (8.0 * myi) * M_PI * H1((myi - wx3) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi + wx3 + xb - myi * wx3 * xb) / (2.0 * myi - 2.0 * wx3))) * my_sign(2.0 * std::real(1.0 / (myi + xb)))
                + (8.0 * myi) * M_PI * H1((myi - wx4) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi + wx4 + xb - myi * wx4 * xb) / (2.0 * myi - 2.0 * wx4))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) + (2.0 * myi) * M_PI * power_of<2>(log((1.0 - w7) / 2.0)) * my_sign(imag(w7) / 2.0) * T(1.0, 1.0 / 2.0, (1.0 - w7) / 2.0) - myi * M_PI * power_of<2>(log(w7 / (-1.0 + w7))) * my_sign(-imag(1.0 / (1.0 - w7))) * T(1.0, 1.0 / 2.0, w7 / (-1.0 + w7))
                - myi * M_PI * power_of<2>(log(w7 / (-1.0 + w7))) * my_sign(imag(1.0 / (-1.0 + w7))) * T(1.0, 1.0 / 2.0, w7 / (-1.0 + w7)) + (2.0 * myi) * M_PI * power_of<2>(log(w7 / (1.0 + w7))) * my_sign(-imag(1.0 / (1.0 + w7))) * T(1.0, 1.0 / 2.0, w7 / (1.0 + w7)) - (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / 2.0)) * my_sign((-0.5) * imag(w7)) * T(1.0, 1.0 / 2.0, (1.0 + w7) / 2.0)
                - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx3)) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 - (myi / 2.0) * wx3) - (8.0 * myi) * M_PI * power_of<2>(log(((-0.5) * myi) * (myi + wx3))) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 - (myi / 2.0) * wx3) - (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx3)) * my_sign((-0.5) * std::real(wx3)) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 + (myi / 2.0) * wx3)
                - (8.0 * myi) * M_PI * power_of<2>(log(wx3 / (-myi + wx3))) * my_sign(-std::real(1.0 / (myi - wx3))) * T(1.0, 1.0 / 2.0, wx3 / (-myi + wx3)) - (8.0 * myi) * M_PI * power_of<2>(log(wx3 / (-myi + wx3))) * my_sign(std::real(1.0 / (-myi + wx3))) * T(1.0, 1.0 / 2.0, wx3 / (-myi + wx3)) - (16.0 * myi) * M_PI * power_of<2>(log(wx3 / (myi + wx3))) * my_sign(-std::real(1.0 / (myi + wx3))) * T(1.0, 1.0 / 2.0, wx3 / (myi + wx3))
                - (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx4)) * my_sign(std::real(wx4) / 2.0) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 - (myi / 2.0) * wx4) - (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx4)) * my_sign((-0.5) * std::real(wx4)) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 + (myi / 2.0) * wx4) - (8.0 * myi) * M_PI * power_of<2>(log(wx4 / (-myi + wx4))) * my_sign(-std::real(1.0 / (myi - wx4))) * T(1.0, 1.0 / 2.0, wx4 / (-myi + wx4))
                - (8.0 * myi) * M_PI * power_of<2>(log(wx4 / (-myi + wx4))) * my_sign(std::real(1.0 / (-myi + wx4))) * T(1.0, 1.0 / 2.0, wx4 / (-myi + wx4)) - (16.0 * myi) * M_PI * power_of<2>(log(wx4 / (myi + wx4))) * my_sign(-std::real(1.0 / (myi + wx4))) * T(1.0, 1.0 / 2.0, wx4 / (myi + wx4)) + (2.0 * myi) * M_PI * log(1.0 + tb) * log((1.0 - w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 + tb))) * T(1.0, (1.0 - tb) / 2.0, (1.0 - w7) / 2.0)
                - myi * M_PI * power_of<2>(log((1.0 - w7) / 2.0)) * my_sign(imag(w7) / 2.0) * T(1.0, (1.0 - tb) / 2.0, (1.0 - w7) / 2.0) + myi * M_PI * power_of<2>(log((-tb + w7) / (1.0 + w7))) * my_sign(imag((1.0 + tb) / (1.0 + w7))) * T(1.0, (1.0 - tb) / 2.0, (-tb + w7) / (1.0 + w7)) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - w4) * my_sign(imag(1.0 / tb)) * T(1.0, 1.0 - tb, 1.0 - w4)
                - myi * M_PI * power_of<2>(log(1.0 - w4)) * my_sign(imag(w4)) * T(1.0, 1.0 - tb, 1.0 - w4) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + w5) * my_sign(imag(1.0 / tb)) * T(1.0, 1.0 - tb, 1.0 + w5) - myi * M_PI * power_of<2>(log(1.0 + w5)) * my_sign(-imag(w5)) * T(1.0, 1.0 - tb, 1.0 + w5) - myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, 1.0 - tb, 1.0 - tb / w7)
                + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - w7) * my_sign(imag(1.0 / tb)) * T(1.0, 1.0 - tb, 1.0 - w7) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * M_PI * power_of<2>(log(1.0 - w7)) * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * M_PI * log(1.0 - w7) * log((1.0 + w7) / 2.0) * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7)
                - (2.0 * myi) * M_PI * log(1.0 - tb) * log((1.0 + w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 - tb))) * T(1.0, (1.0 + tb) / 2.0, (1.0 + w7) / 2.0) + myi * M_PI * power_of<2>(log((1.0 + w7) / 2.0)) * my_sign((-0.5) * imag(w7)) * T(1.0, (1.0 + tb) / 2.0, (1.0 + w7) / 2.0) - myi * M_PI * power_of<2>(log((-tb + w7) / (-1.0 + w7))) * my_sign(imag((-1.0 + tb) / (-1.0 + w7))) * T(1.0, (1.0 + tb) / 2.0, (-tb + w7) / (-1.0 + w7))
                - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + w4) * my_sign(-imag(1.0 / tb)) * T(1.0, 1.0 + tb, 1.0 + w4) - myi * M_PI * power_of<2>(log(1.0 + w4)) * my_sign(-imag(w4)) * T(1.0, 1.0 + tb, 1.0 + w4) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - w5) * my_sign(-imag(1.0 / tb)) * T(1.0, 1.0 + tb, 1.0 - w5) - myi * M_PI * power_of<2>(log(1.0 - w5)) * my_sign(imag(w5)) * T(1.0, 1.0 + tb, 1.0 - w5)
                - myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, 1.0 + tb, 1.0 - tb / w7) - (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + w7) * my_sign(-imag(1.0 / tb)) * T(1.0, 1.0 + tb, 1.0 + w7) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7)
                - (2.0 * myi) * M_PI * log((1.0 - w7) / 2.0) * log(1.0 + w7) * my_sign(-imag(w7)) * T(1.0, 1.0 + tb, 1.0 + w7) - (2.0 * myi) * M_PI * log(1.0 + vb) * log((1.0 + w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 + vb))) * T(1.0, (1.0 - vb) / 2.0, (1.0 + w7) / 2.0) + myi * M_PI * power_of<2>(log((1.0 + w7) / 2.0)) * my_sign((-0.5) * imag(w7)) * T(1.0, (1.0 - vb) / 2.0, (1.0 + w7) / 2.0)
                - myi * M_PI * power_of<2>(log((vb + w7) / (-1.0 + w7))) * my_sign(imag((1.0 + vb) / (1.0 - w7))) * T(1.0, (1.0 - vb) / 2.0, (vb + w7) / (-1.0 + w7)) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + w4) * my_sign(imag(1.0 / vb)) * T(1.0, 1.0 - vb, 1.0 + w4) - myi * M_PI * power_of<2>(log(1.0 + w4)) * my_sign(-imag(w4)) * T(1.0, 1.0 - vb, 1.0 + w4)
                - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - w5) * my_sign(imag(1.0 / vb)) * T(1.0, 1.0 - vb, 1.0 - w5) - myi * M_PI * power_of<2>(log(1.0 - w5)) * my_sign(imag(w5)) * T(1.0, 1.0 - vb, 1.0 - w5) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + w7) * my_sign(imag(1.0 / vb)) * T(1.0, 1.0 - vb, 1.0 + w7) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7)
                - (2.0 * myi) * M_PI * log((1.0 - w7) / 2.0) * log(1.0 + w7) * my_sign(-imag(w7)) * T(1.0, 1.0 - vb, 1.0 + w7) + dilog((1.0 + w7) / 2.0) * (-2.0 * log(w7 / (1.0 + w7)) + log((-tb + w7) / (1.0 + w7)) + log((vb + w7) / (1.0 + w7)) - (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 + tb, 1.0 + w7) - (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 - vb, 1.0 + w7))
                - myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, 1.0 - vb, (vb + w7) / w7) + (2.0 * myi) * M_PI * log(1.0 - vb) * log((1.0 - w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 - vb))) * T(1.0, (1.0 + vb) / 2.0, (1.0 - w7) / 2.0) - myi * M_PI * power_of<2>(log((1.0 - w7) / 2.0)) * my_sign(imag(w7) / 2.0) * T(1.0, (1.0 + vb) / 2.0, (1.0 - w7) / 2.0)
                + myi * M_PI * power_of<2>(log((vb + w7) / (1.0 + w7))) * my_sign(imag((1.0 - vb) / (1.0 + w7))) * T(1.0, (1.0 + vb) / 2.0, (vb + w7) / (1.0 + w7)) - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - w4) * my_sign(-imag(1.0 / vb)) * T(1.0, 1.0 + vb, 1.0 - w4) - myi * M_PI * power_of<2>(log(1.0 - w4)) * my_sign(imag(w4)) * T(1.0, 1.0 + vb, 1.0 - w4)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + w5) * my_sign(-imag(1.0 / vb)) * T(1.0, 1.0 + vb, 1.0 + w5) - myi * M_PI * power_of<2>(log(1.0 + w5)) * my_sign(-imag(w5)) * T(1.0, 1.0 + vb, 1.0 + w5) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - w7) * my_sign(-imag(1.0 / vb)) * T(1.0, 1.0 + vb, 1.0 - w7) - (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)
                + (2.0 * myi) * M_PI * power_of<2>(log(1.0 - w7)) * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7) + (2.0 * myi) * M_PI * log(1.0 - w7) * log((1.0 + w7) / 2.0) * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7) + dilog((1.0 - w7) / 2.0) * (2.0 * log(w7 / (-1.0 + w7)) - log((-tb + w7) / (-1.0 + w7)) - log((vb + w7) / (-1.0 + w7)) + (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7)
                  + (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7)) - myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, 1.0 + vb, (vb + w7) / w7) - myi * M_PI * power_of<2>(log(1.0 - tb)) * my_sign(imag(tb)) * T(1.0, 1.0 - tb / w4, 1.0 - tb) + myi * M_PI * power_of<2>(log(1.0 + tb)) * my_sign(-imag(tb)) * T(1.0, 1.0 - tb / w4, 1.0 + tb)
                - myi * M_PI * power_of<2>(log(1.0 + w4inv)) * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * log(1.0 + w4inv) * log((-1.0 + tb) / (-1.0 + w4)) * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * log(1.0 + w4inv) * log((tb - w7) / (w4 - w7)) * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv)
                + myi * M_PI * power_of<2>(log((-1.0 + w4) / w4)) * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) + (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log((1.0 + tb) / (1.0 + w4)) * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) + (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log((tb - w7) / (w4 - w7)) * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4)
                + myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, 1.0 - tb / w4, 1.0 - tb / w7) + (2.0 * myi) * M_PI * log((-1.0 + tb) / (-1.0 + w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) - (2.0 * myi) * M_PI * log((1.0 + tb) / (1.0 + w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4)
                - myi * M_PI * power_of<2>(log(1.0 - w7 / w4)) * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) - (2.0 * myi) * M_PI * power_of<2>(log(-2.0 / (-1.0 + w4))) * my_sign(imag((1.0 + w4) / (-1.0 + w4))) * T(1.0, 1.0 / (1.0 - w4), -2.0 / (-1.0 + w4)) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 + w4))) * my_sign(-imag(w4 / (1.0 + w4))) * T(1.0, 1.0 / (1.0 - w4), 1.0 / (1.0 + w4))
                - (2.0 * myi) * M_PI * power_of<2>(log((-1.0 + w7) / (-1.0 + w4))) * my_sign(imag((w4 - w7) / (-1.0 + w4))) * T(1.0, 1.0 / (1.0 - w4), (-1.0 + w7) / (-1.0 + w4)) - myi * M_PI * power_of<2>(log(-(w7 / (w4 - w7)))) * my_sign(-imag(w4 / (w4 - w7))) * T(1.0, 1.0 / (1.0 - w4), -(w7 / (w4 - w7))) - myi * M_PI * power_of<2>(log(w7 / (-w4 + w7))) * my_sign(imag(w4 / (-w4 + w7))) * T(1.0, 1.0 / (1.0 - w4), w7 / (-w4 + w7))
                + myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w4))) * my_sign(imag((1.0 + w4) / (-1.0 + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), -2.0 / (-1.0 + w4)) - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + w4)) * log((vb + w4) / w4) * my_sign(imag((-1.0 + w4) / (vb + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), -2.0 / (-1.0 + w4))
                - myi * M_PI * power_of<2>(log((1.0 - vb) / (1.0 + w4))) * my_sign(imag((vb + w4) / (1.0 + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), (1.0 - vb) / (1.0 + w4)) - (2.0 * myi) * M_PI * log((vb + w4) / w4) * log((-1.0 + w7) / (-1.0 + w4)) * my_sign(imag((-1.0 + w4) / (vb + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), (-1.0 + w7) / (-1.0 + w4))
                + myi * M_PI * power_of<2>(log((-1.0 + w7) / (-1.0 + w4))) * my_sign(imag((w4 - w7) / (-1.0 + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), (-1.0 + w7) / (-1.0 + w4)) - myi * M_PI * power_of<2>(log(-((vb + w7) / (w4 - w7)))) * my_sign(imag((vb + w4) / (w4 - w7))) * T(1.0, (1.0 + vb) / (1.0 - w4), -((vb + w7) / (w4 - w7)))
                + myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w4))) * my_sign(imag((1.0 + w4) / (-1.0 + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), -2.0 / (-1.0 + w4)) - (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log(-2.0 / (-1.0 + w4)) * my_sign(imag((-1.0 + w4) / (-tb + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), -2.0 / (-1.0 + w4))
                - myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 + w4))) * my_sign(imag((-tb + w4) / (1.0 + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (1.0 + tb) / (1.0 + w4)) - myi * M_PI * power_of<2>(log((tb - w7) / (w4 - w7))) * my_sign(imag((-tb + w4) / (w4 - w7))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (tb - w7) / (w4 - w7))
                - (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((-1.0 + w7) / (-1.0 + w4)) * my_sign(imag((-1.0 + w4) / (-tb + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (-1.0 + w7) / (-1.0 + w4)) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (-1.0 + w4))) * my_sign(imag((w4 - w7) / (-1.0 + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (-1.0 + w7) / (-1.0 + w4))
                - (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 - w4))) * my_sign(imag(w4 / (1.0 - w4))) * T(1.0, 1.0 / (1.0 + w4), 1.0 / (1.0 - w4)) - (2.0 * myi) * M_PI * power_of<2>(log(2.0 / (1.0 + w4))) * my_sign(imag((-1.0 + w4) / (1.0 + w4))) * T(1.0, 1.0 / (1.0 + w4), 2.0 / (1.0 + w4)) + myi * M_PI * power_of<2>(log(-(w7 / (w4 - w7)))) * my_sign(-imag(w4 / (w4 - w7))) * T(1.0, 1.0 / (1.0 + w4), -(w7 / (w4 - w7)))
                + (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / (1.0 + w4))) * my_sign(imag((w4 - w7) / (1.0 + w4))) * T(1.0, 1.0 / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) + myi * M_PI * power_of<2>(log(w7 / (-w4 + w7))) * my_sign(imag(w4 / (-w4 + w7))) * T(1.0, 1.0 / (1.0 + w4), w7 / (-w4 + w7))
                - myi * M_PI * power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * my_sign(imag((-tb + w4) / (-1.0 + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), (-1.0 + tb) / (-1.0 + w4)) + myi * M_PI * power_of<2>(log(2.0 / (1.0 + w4))) * my_sign(imag((-1.0 + w4) / (1.0 + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), 2.0 / (1.0 + w4))
                - (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log(2.0 / (1.0 + w4)) * my_sign(imag((1.0 + w4) / (-tb + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), 2.0 / (1.0 + w4)) + myi * M_PI * power_of<2>(log((tb - w7) / (w4 - w7))) * my_sign(imag((-tb + w4) / (w4 - w7))) * T(1.0, (1.0 + tb) / (1.0 + w4), (tb - w7) / (w4 - w7))
                + (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((1.0 + w7) / (1.0 + w4)) * my_sign(imag((1.0 + w4) / (-tb + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 + w4))) * my_sign(imag((w4 - w7) / (1.0 + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4))
                - myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 - w4))) * my_sign(imag((vb + w4) / (-1.0 + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), (1.0 + vb) / (1.0 - w4)) + myi * M_PI * power_of<2>(log(2.0 / (1.0 + w4))) * my_sign(imag((-1.0 + w4) / (1.0 + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), 2.0 / (1.0 + w4))
                - (2.0 * myi) * M_PI * log(2.0 / (1.0 + w4)) * log((vb + w4) / w4) * my_sign(imag((1.0 + w4) / (vb + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), 2.0 / (1.0 + w4)) + (2.0 * myi) * M_PI * log((vb + w4) / w4) * log((1.0 + w7) / (1.0 + w4)) * my_sign(imag((1.0 + w4) / (vb + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4))
                - myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 + w4))) * my_sign(imag((w4 - w7) / (1.0 + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) + myi * M_PI * power_of<2>(log(-((vb + w7) / (w4 - w7)))) * my_sign(imag((vb + w4) / (w4 - w7))) * T(1.0, (1.0 - vb) / (1.0 + w4), -((vb + w7) / (w4 - w7))) + myi * M_PI * power_of<2>(log(1.0 - vb)) * my_sign(imag(vb)) * T(1.0, (vb + w4) / w4, 1.0 - vb)
                - myi * M_PI * power_of<2>(log(1.0 + vb)) * my_sign(-imag(vb)) * T(1.0, (vb + w4) / w4, 1.0 + vb) - myi * M_PI * power_of<2>(log(1.0 + w4inv)) * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * log(1.0 + w4inv) * log((1.0 + vb) / (1.0 - w4)) * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv)
                - (2.0 * myi) * M_PI * log(1.0 + w4inv) * log(-((vb + w7) / (w4 - w7))) * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) + dilog((1.0 + w4) / (w4 - w7)) * (-2.0 * log(1.0 / (1.0 + w4)) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 - vb) / (1.0 + w4)) - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv)
                  - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv)) + dilog((1.0 + w4) / (-1.0 + w4)) * (2.0 * log(1.0 / (1.0 + w4)) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 - vb) / (1.0 + w4)) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv))
                + myi * M_PI * power_of<2>(log((-1.0 + w4) / w4)) * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) + (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log((1.0 - vb) / (1.0 + w4)) * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) + (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log(-((vb + w7) / (w4 - w7))) * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)
                + dilog(w4 / (w4 - w7)) * (-2.0 * log(1.0 / (1.0 - w4)) + log((1.0 + vb) / (1.0 - w4)) + log((-1.0 + tb) / (-1.0 + w4)) + 2.0 * log(1.0 / (1.0 + w4)) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 - vb) / (1.0 + w4)) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4)
                  + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)) + dilog((-1.0 + w4) / (1.0 + w4)) * (2.0 * log(1.0 / (1.0 - w4)) - log((1.0 + vb) / (1.0 - w4)) - log((-1.0 + tb) / (-1.0 + w4)) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4)
                  + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)) + dilog((-1.0 + w4) / (w4 - w7)) * (2.0 * log(1.0 / (1.0 - w4)) - log((1.0 + vb) / (1.0 - w4)) - log((-1.0 + tb) / (-1.0 + w4)) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4))
                + myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, (vb + w4) / w4, (vb + w7) / w7) + (2.0 * myi) * M_PI * log((1.0 + vb) / (1.0 - w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) - (2.0 * myi) * M_PI * log((1.0 - vb) / (1.0 + w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4)
                - myi * M_PI * power_of<2>(log(1.0 - w7 / w4)) * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) + dilog((w4 - w7) / (1.0 + w4)) * (log((tb - w7) / (w4 - w7)) - log(-(w7 / (w4 - w7))) + log(-((vb + w7) / (w4 - w7))) - log(w7 / (-w4 + w7)) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4)
                  - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4)) + dilog(w4 / (-1.0 + w4)) * (-2.0 * log(1.0 / (1.0 + w4)) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 - vb) / (1.0 + w4)) + log((tb - w7) / (w4 - w7)) - log(-(w7 / (w4 - w7))) + log(-((vb + w7) / (w4 - w7))) - log(w7 / (-w4 + w7))
                  - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4))
                + dilog((w4 - w7) / (-1.0 + w4)) * (-log((tb - w7) / (w4 - w7)) + log(-(w7 / (w4 - w7))) - log(-((vb + w7) / (w4 - w7))) + log(w7 / (-w4 + w7)) + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4))
                + dilog(w4 / (1.0 + w4)) * (-2.0 * log(1.0 / (1.0 - w4)) + log((1.0 + vb) / (1.0 - w4)) + log((-1.0 + tb) / (-1.0 + w4)) - log((tb - w7) / (w4 - w7)) + log(-(w7 / (w4 - w7))) - log(-((vb + w7) / (w4 - w7))) + log(w7 / (-w4 + w7)) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4)
                  + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4)) + myi * M_PI * power_of<2>(log(1.0 - vb)) * my_sign(imag(vb)) * T(1.0, 1.0 - vb / w5, 1.0 - vb) - myi * M_PI * power_of<2>(log(1.0 + vb)) * my_sign(-imag(vb)) * T(1.0, 1.0 - vb / w5, 1.0 + vb)
                + myi * M_PI * power_of<2>(log(1.0 + w5inv)) * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((-1.0 + vb) / (-1.0 + w5)) * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((vb + w7) / (w5 + w7)) * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                - myi * M_PI * power_of<2>(log((-1.0 + w5) / w5)) * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((1.0 + vb) / (1.0 + w5)) * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((vb + w7) / (w5 + w7)) * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5)
                + myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, 1.0 - vb / w5, (vb + w7) / w7) - (2.0 * myi) * M_PI * log((-1.0 + vb) / (-1.0 + w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * log((1.0 + vb) / (1.0 + w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5)
                - myi * M_PI * power_of<2>(log((w5 + w7) / w5)) * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * power_of<2>(log(-2.0 / (-1.0 + w5))) * my_sign(imag((1.0 + w5) / (-1.0 + w5))) * T(1.0, 1.0 / (1.0 - w5), -2.0 / (-1.0 + w5)) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 + w5))) * my_sign(-imag(w5 / (1.0 + w5))) * T(1.0, 1.0 / (1.0 - w5), 1.0 / (1.0 + w5))
                + (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / (1.0 - w5))) * my_sign(imag((w5 + w7) / (-1.0 + w5))) * T(1.0, 1.0 / (1.0 - w5), (1.0 + w7) / (1.0 - w5)) + (2.0 * myi) * M_PI * power_of<2>(log(w7 / (w5 + w7))) * my_sign(-imag(w5 / (w5 + w7))) * T(1.0, 1.0 / (1.0 - w5), w7 / (w5 + w7)) + myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w5))) * my_sign(imag((1.0 + w5) / (-1.0 + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), -2.0 / (-1.0 + w5))
                - (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + w5)) * log((tb + w5) / w5) * my_sign(imag((-1.0 + w5) / (tb + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), -2.0 / (-1.0 + w5)) - myi * M_PI * power_of<2>(log((1.0 - tb) / (1.0 + w5))) * my_sign(imag((tb + w5) / (1.0 + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), (1.0 - tb) / (1.0 + w5))
                + (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((1.0 + w7) / (1.0 - w5)) * my_sign(imag((-1.0 + w5) / (tb + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), (1.0 + w7) / (1.0 - w5)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 - w5))) * my_sign(imag((w5 + w7) / (-1.0 + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), (1.0 + w7) / (1.0 - w5))
                + myi * M_PI * power_of<2>(log((-tb + w7) / (w5 + w7))) * my_sign(imag((tb + w5) / (w5 + w7))) * T(1.0, (1.0 + tb) / (1.0 - w5), (-tb + w7) / (w5 + w7)) + myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w5))) * my_sign(imag((1.0 + w5) / (-1.0 + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), -2.0 / (-1.0 + w5))
                - (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log(-2.0 / (-1.0 + w5)) * my_sign(imag((-1.0 + w5) / (-vb + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), -2.0 / (-1.0 + w5)) - myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 + w5))) * my_sign(imag((-vb + w5) / (1.0 + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (1.0 + vb) / (1.0 + w5))
                + (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((1.0 + w7) / (1.0 - w5)) * my_sign(imag((-1.0 + w5) / (-vb + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (1.0 + w7) / (1.0 - w5)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 - w5))) * my_sign(imag((w5 + w7) / (-1.0 + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (1.0 + w7) / (1.0 - w5))
                + myi * M_PI * power_of<2>(log((vb + w7) / (w5 + w7))) * my_sign(imag((-vb + w5) / (w5 + w7))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (vb + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 - w5))) * my_sign(imag(w5 / (1.0 - w5))) * T(1.0, 1.0 / (1.0 + w5), 1.0 / (1.0 - w5)) - (2.0 * myi) * M_PI * power_of<2>(log(2.0 / (1.0 + w5))) * my_sign(imag((-1.0 + w5) / (1.0 + w5))) * T(1.0, 1.0 / (1.0 + w5), 2.0 / (1.0 + w5))
                - (2.0 * myi) * M_PI * power_of<2>(log((1.0 - w7) / (1.0 + w5))) * my_sign(imag((w5 + w7) / (1.0 + w5))) * T(1.0, 1.0 / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) - (2.0 * myi) * M_PI * power_of<2>(log(w7 / (w5 + w7))) * my_sign(-imag(w5 / (w5 + w7))) * T(1.0, 1.0 / (1.0 + w5), w7 / (w5 + w7))
                - myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 - w5))) * my_sign(imag((tb + w5) / (-1.0 + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), (1.0 + tb) / (1.0 - w5)) + myi * M_PI * power_of<2>(log(2.0 / (1.0 + w5))) * my_sign(imag((-1.0 + w5) / (1.0 + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), 2.0 / (1.0 + w5))
                - (2.0 * myi) * M_PI * log(2.0 / (1.0 + w5)) * log((tb + w5) / w5) * my_sign(imag((1.0 + w5) / (tb + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), 2.0 / (1.0 + w5)) - (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((1.0 - w7) / (1.0 + w5)) * my_sign(imag((1.0 + w5) / (tb + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5))
                + myi * M_PI * power_of<2>(log((1.0 - w7) / (1.0 + w5))) * my_sign(imag((w5 + w7) / (1.0 + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) - myi * M_PI * power_of<2>(log((-tb + w7) / (w5 + w7))) * my_sign(imag((tb + w5) / (w5 + w7))) * T(1.0, (1.0 - tb) / (1.0 + w5), (-tb + w7) / (w5 + w7))
                - myi * M_PI * power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * my_sign(imag((-vb + w5) / (-1.0 + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), (-1.0 + vb) / (-1.0 + w5)) + myi * M_PI * power_of<2>(log(2.0 / (1.0 + w5))) * my_sign(imag((-1.0 + w5) / (1.0 + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), 2.0 / (1.0 + w5))
                - (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log(2.0 / (1.0 + w5)) * my_sign(imag((1.0 + w5) / (-vb + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), 2.0 / (1.0 + w5)) - (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((1.0 - w7) / (1.0 + w5)) * my_sign(imag((1.0 + w5) / (-vb + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5))
                + myi * M_PI * power_of<2>(log((1.0 - w7) / (1.0 + w5))) * my_sign(imag((w5 + w7) / (1.0 + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) - myi * M_PI * power_of<2>(log((vb + w7) / (w5 + w7))) * my_sign(imag((-vb + w5) / (w5 + w7))) * T(1.0, (1.0 + vb) / (1.0 + w5), (vb + w7) / (w5 + w7)) - myi * M_PI * power_of<2>(log(1.0 - tb)) * my_sign(imag(tb)) * T(1.0, (tb + w5) / w5, 1.0 - tb)
                + myi * M_PI * power_of<2>(log(1.0 + tb)) * my_sign(-imag(tb)) * T(1.0, (tb + w5) / w5, 1.0 + tb) + myi * M_PI * power_of<2>(log(1.0 + w5inv)) * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((1.0 + tb) / (1.0 - w5)) * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv)
                + (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((-tb + w7) / (w5 + w7)) * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) + dilog((1.0 + w5) / (-1.0 + w5)) * (2.0 * log(1.0 / (1.0 + w5)) - log((1.0 - tb) / (1.0 + w5)) - log((1.0 + vb) / (1.0 + w5)) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                  + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv)) + dilog((1.0 + w5) / (w5 + w7)) * (2.0 * log(1.0 / (1.0 + w5)) - log((1.0 - tb) / (1.0 + w5)) - log((1.0 + vb) / (1.0 + w5)) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv))
                - myi * M_PI * power_of<2>(log((-1.0 + w5) / w5)) * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((1.0 - tb) / (1.0 + w5)) * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((-tb + w7) / (w5 + w7)) * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)
                + dilog((-1.0 + w5) / (w5 + w7)) * (-2.0 * log(1.0 / (1.0 - w5)) + log((1.0 + tb) / (1.0 - w5)) + log((-1.0 + vb) / (-1.0 + w5)) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5))
                + dilog((-1.0 + w5) / (1.0 + w5)) * (2.0 * log(1.0 / (1.0 - w5)) - log((1.0 + tb) / (1.0 - w5)) - log((-1.0 + vb) / (-1.0 + w5)) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5))
                + dilog(w5 / (w5 + w7)) * (2.0 * log(1.0 / (1.0 - w5)) - log((1.0 + tb) / (1.0 - w5)) - log((-1.0 + vb) / (-1.0 + w5)) - 2.0 * log(1.0 / (1.0 + w5)) + log((1.0 - tb) / (1.0 + w5)) + log((1.0 + vb) / (1.0 + w5)) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5)
                  - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)) + myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, (tb + w5) / w5, 1.0 - tb / w7)
                - (2.0 * myi) * M_PI * log((1.0 + tb) / (1.0 - w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * log((1.0 - tb) / (1.0 + w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) - myi * M_PI * power_of<2>(log((w5 + w7) / w5)) * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)
                + dilog((w5 + w7) / (-1.0 + w5)) * (-2.0 * log(w7 / (w5 + w7)) + log((-tb + w7) / (w5 + w7)) + log((vb + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5))
                + dilog(w5 / (1.0 + w5)) * (-2.0 * log(1.0 / (1.0 - w5)) + log((1.0 + tb) / (1.0 - w5)) + log((-1.0 + vb) / (-1.0 + w5)) - 2.0 * log(w7 / (w5 + w7)) + log((-tb + w7) / (w5 + w7)) + log((vb + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5)
                  - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5))
                + dilog((w5 + w7) / (1.0 + w5)) * (2.0 * log(w7 / (w5 + w7)) - log((-tb + w7) / (w5 + w7)) - log((vb + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5))
                + dilog(w5 / (-1.0 + w5)) * (-2.0 * log(1.0 / (1.0 + w5)) + log((1.0 - tb) / (1.0 + w5)) + log((1.0 + vb) / (1.0 + w5)) + 2.0 * log(w7 / (w5 + w7)) - log((-tb + w7) / (w5 + w7)) - log((vb + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                  + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)) + myi * M_PI * power_of<2>(log(1.0 + w7inv)) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - tb / w7, 1.0 + w7inv)
                + (2.0 * myi) * M_PI * log(1.0 + w7inv) * log(1.0 - tb / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, 1.0 + w7inv) - myi * M_PI * power_of<2>(log(1.0 - w4 / w7)) * my_sign(imag(w4 / w7)) * T(1.0, 1.0 - tb / w7, 1.0 - w4 / w7) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - w4 / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, 1.0 - w4 / w7)
                + myi * M_PI * power_of<2>(log((-1.0 + w7) / w7)) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb / w7, (-1.0 + w7) / w7) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log((-1.0 + w7) / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, (-1.0 + w7) / w7) - myi * M_PI * power_of<2>(log((w5 + w7) / w7)) * my_sign(-imag(w5 / w7)) * T(1.0, 1.0 - tb / w7, (w5 + w7) / w7)
                - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log((w5 + w7) / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, (w5 + w7) / w7) - myi * M_PI * power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * my_sign(imag((-tb + w4) / (-1.0 + w4))) * T(1.0, (tb - w7) / (w4 - w7), (-1.0 + tb) / (-1.0 + w4))
                + myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 + w4))) * my_sign(imag((-tb + w4) / (1.0 + w4))) * T(1.0, (tb - w7) / (w4 - w7), (1.0 + tb) / (1.0 + w4)) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, (tb - w7) / (w4 - w7), (-1.0 + w7) / (-w4 + w7))
                - (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((-1.0 + w7) / (-w4 + w7)) * my_sign(imag((-w4 + w7) / (tb - w4))) * T(1.0, (tb - w7) / (w4 - w7), (-1.0 + w7) / (-w4 + w7)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (-w4 + w7))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, (tb - w7) / (w4 - w7), (1.0 + w7) / (-w4 + w7))
                + (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((1.0 + w7) / (-w4 + w7)) * my_sign(imag((-w4 + w7) / (tb - w4))) * T(1.0, (tb - w7) / (w4 - w7), (1.0 + w7) / (-w4 + w7)) - myi * M_PI * power_of<2>(log(1.0 / (1.0 - w4))) * my_sign(imag(w4 / (1.0 - w4))) * T(1.0, -(w7 / (w4 - w7)), 1.0 / (1.0 - w4))
                + myi * M_PI * power_of<2>(log(1.0 / (1.0 + w4))) * my_sign(-imag(w4 / (1.0 + w4))) * T(1.0, -(w7 / (w4 - w7)), 1.0 / (1.0 + w4)) + myi * M_PI * power_of<2>(log(-((1.0 + w7) / (w4 - w7)))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, -(w7 / (w4 - w7)), -((1.0 + w7) / (w4 - w7)))
                - myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, -(w7 / (w4 - w7)), (-1.0 + w7) / (-w4 + w7)) - myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 - w4))) * my_sign(imag((vb + w4) / (-1.0 + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), (1.0 + vb) / (1.0 - w4))
                + myi * M_PI * power_of<2>(log((1.0 - vb) / (1.0 + w4))) * my_sign(imag((vb + w4) / (1.0 + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), (1.0 - vb) / (1.0 + w4)) - myi * M_PI * power_of<2>(log(-((1.0 + w7) / (w4 - w7)))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, -((vb + w7) / (w4 - w7)), -((1.0 + w7) / (w4 - w7)))
                + (2.0 * myi) * M_PI * log((vb + w4) / w4) * log(-((1.0 + w7) / (w4 - w7))) * my_sign(imag((w4 - w7) / (vb + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), -((1.0 + w7) / (w4 - w7))) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, -((vb + w7) / (w4 - w7)), (-1.0 + w7) / (-w4 + w7))
                - (2.0 * myi) * M_PI * log((vb + w4) / w4) * log((-1.0 + w7) / (-w4 + w7)) * my_sign(imag((w4 - w7) / (vb + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), (-1.0 + w7) / (-w4 + w7)) + myi * M_PI * power_of<2>(log(1.0 + w7inv)) * my_sign(-imag(w7inv)) * T(1.0, (vb + w7) / w7, 1.0 + w7inv)
                + (2.0 * myi) * M_PI * log(1.0 + w7inv) * log((vb + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, 1.0 + w7inv) - myi * M_PI * power_of<2>(log(1.0 - w4 / w7)) * my_sign(imag(w4 / w7)) * T(1.0, (vb + w7) / w7, 1.0 - w4 / w7) - (2.0 * myi) * M_PI * log(1.0 - w4 / w7) * log((vb + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, 1.0 - w4 / w7)
                + myi * M_PI * power_of<2>(log((-1.0 + w7) / w7)) * my_sign(imag(w7inv)) * T(1.0, (vb + w7) / w7, (-1.0 + w7) / w7) + (2.0 * myi) * M_PI * log((-1.0 + w7) / w7) * log((vb + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, (-1.0 + w7) / w7) - myi * M_PI * power_of<2>(log((w5 + w7) / w7)) * my_sign(-imag(w5 / w7)) * T(1.0, (vb + w7) / w7, (w5 + w7) / w7)
                - (2.0 * myi) * M_PI * log((vb + w7) / w7) * log((w5 + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, (w5 + w7) / w7) - myi * M_PI * power_of<2>(log(1.0 / (1.0 - w4))) * my_sign(imag(w4 / (1.0 - w4))) * T(1.0, w7 / (-w4 + w7), 1.0 / (1.0 - w4)) + myi * M_PI * power_of<2>(log(1.0 / (1.0 + w4))) * my_sign(-imag(w4 / (1.0 + w4))) * T(1.0, w7 / (-w4 + w7), 1.0 / (1.0 + w4))
                - myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, w7 / (-w4 + w7), (-1.0 + w7) / (-w4 + w7)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (-w4 + w7))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, w7 / (-w4 + w7), (1.0 + w7) / (-w4 + w7))
                + (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 - w5))) * my_sign(imag(w5 / (1.0 - w5))) * T(1.0, w7 / (w5 + w7), 1.0 / (1.0 - w5)) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 + w5))) * my_sign(-imag(w5 / (1.0 + w5))) * T(1.0, w7 / (w5 + w7), 1.0 / (1.0 + w5)) - (2.0 * myi) * M_PI * power_of<2>(log((-1.0 + w7) / (w5 + w7))) * my_sign(imag((1.0 + w5) / (w5 + w7))) * T(1.0, w7 / (w5 + w7), (-1.0 + w7) / (w5 + w7))
                + (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / (w5 + w7))) * my_sign(imag((-1.0 + w5) / (w5 + w7))) * T(1.0, w7 / (w5 + w7), (1.0 + w7) / (w5 + w7)) + myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 - w5))) * my_sign(imag((tb + w5) / (-1.0 + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 + tb) / (1.0 - w5))
                - myi * M_PI * power_of<2>(log((1.0 - tb) / (1.0 + w5))) * my_sign(imag((tb + w5) / (1.0 + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 - tb) / (1.0 + w5)) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (w5 + w7))) * my_sign(imag((1.0 + w5) / (w5 + w7))) * T(1.0, (-tb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7))
                - (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((-1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (tb + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (w5 + w7))) * my_sign(imag((-1.0 + w5) / (w5 + w7))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7))
                + (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (tb + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7)) + myi * M_PI * power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * my_sign(imag((-vb + w5) / (-1.0 + w5))) * T(1.0, (vb + w7) / (w5 + w7), (-1.0 + vb) / (-1.0 + w5))
                - myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 + w5))) * my_sign(imag((-vb + w5) / (1.0 + w5))) * T(1.0, (vb + w7) / (w5 + w7), (1.0 + vb) / (1.0 + w5)) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (w5 + w7))) * my_sign(imag((1.0 + w5) / (w5 + w7))) * T(1.0, (vb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7))
                - (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((-1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (-vb + w5))) * T(1.0, (vb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (w5 + w7))) * my_sign(imag((-1.0 + w5) / (w5 + w7))) * T(1.0, (vb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7))
                + (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (-vb + w5))) * T(1.0, (vb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7)) + (8.0 * myi) * M_PI * power_of<2>(log(((-0.5) * myi) * (myi + wx3))) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3)
                + (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx3)) * my_sign((-0.5) * std::real(wx3)) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3) + (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx4)) * my_sign(std::real(wx4) / 2.0) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4) + (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx4)) * my_sign((-0.5) * std::real(wx4)) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4)
                - (8.0 * myi) * M_PI * power_of<2>(log((wx3 + xb) / (myi + wx3))) * my_sign(imag((myi - xb) / (myi + wx3))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, (wx3 + xb) / (myi + wx3)) - (8.0 * myi) * M_PI * power_of<2>(log((wx4 + xb) / (myi + wx4))) * my_sign(imag((myi - xb) / (myi + wx4))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, (wx4 + xb) / (myi + wx4))
                + (8.0 * myi) * M_PI * power_of<2>(log(((-0.5) * myi) * (myi + wx3))) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3) + (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx3)) * my_sign((-0.5) * std::real(wx3)) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3) + (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx4)) * my_sign(std::real(wx4) / 2.0) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4)
                + (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx4)) * my_sign((-0.5) * std::real(wx4)) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4) - (8.0 * myi) * M_PI * power_of<2>(log((wx3 - xb) / (myi + wx3))) * my_sign(imag((myi + xb) / (myi + wx3))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, (wx3 - xb) / (myi + wx3))
                - (8.0 * myi) * M_PI * power_of<2>(log((wx4 - xb) / (myi + wx4))) * my_sign(imag((myi + xb) / (myi + wx4))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, (wx4 - xb) / (myi + wx4)) + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * log(1.0 - myi * wx3) * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx3)) * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                + (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx3)) * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (16.0 * myi) * M_PI * log(1.0 + myi * wx3) * log(((-0.5) * myi) * (myi + wx3)) * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * log(1.0 - myi * wx4) * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                + (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx4)) * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * log(1.0 + myi * wx4) * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx4)) * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                - (8.0 * myi) * M_PI * power_of<2>(log((wx3 + xb) / (-myi + wx3))) * my_sign(imag((myi + xb) / (myi - wx3))) * T(1.0, (1.0 + myi * xb) / 2.0, (wx3 + xb) / (-myi + wx3)) - (8.0 * myi) * M_PI * power_of<2>(log((wx4 + xb) / (-myi + wx4))) * my_sign(imag((myi + xb) / (myi - wx4))) * T(1.0, (1.0 + myi * xb) / 2.0, (wx4 + xb) / (-myi + wx4))
                + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * log(1.0 - myi * wx3) * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx3)) * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + dilog(1.0 / 2.0 - (myi / 2.0) * wx3) * (16.0 * log(wx3 / (myi + wx3)) - 8.0 * log((wx3 - xb) / (myi + wx3)) - 8.0 * log((wx3 + xb) / (myi + wx3))
                  + (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)) + (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx3)) * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (16.0 * myi) * M_PI * log(1.0 + myi * wx3) * log(((-0.5) * myi) * (myi + wx3)) * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                + dilog(1.0 / 2.0 + (myi / 2.0) * wx3) * (16.0 * log(wx3 / (-myi + wx3)) - 8.0 * log((wx3 - xb) / (-myi + wx3)) - 8.0 * log((wx3 + xb) / (-myi + wx3)) + (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3))
                + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * log(1.0 - myi * wx4) * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx4)) * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                + dilog(((-0.5) * myi) * (myi + wx4)) * ((16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)) + (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * log(1.0 + myi * wx4) * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                + (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx4)) * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) + log(1.0 - myi * xb) * ((-2.0 * pisqu) / 3.0 + 16.0 * (log(xb) - log(myi * xb)) * ln2 + 20.0 * ln2squ - 16.0 * ln2 * log((-myi) * xb) + log(1.0 + myi * xb) * (-32.0 * ln2 + 16.0 * log((-myi) * xb) + 16.0 * log(myi * xb) + 4.0 * log((wx3 + xb) / (-myi + wx3))
                    + 4.0 * log((wx3 + xb) / (myi + wx3)) + 4.0 * log((wx4 + xb) / (-myi + wx4)) + 4.0 * log((wx4 + xb) / (myi + wx4))) - (16.0 * myi) * M_PI * log(((-0.5) * myi) * (myi + wx3)) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3)
                  - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3) - (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4) - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4)
                  + (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                  + (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4))
                + li2half * (16.0 * (log(xb) - log(myi * xb)) + 16.0 * log(myi) + 2.0 * log(1.0 / (1.0 - w4)) + 2.0 * log(1.0 / (1.0 + w4)) + 2.0 * log(1.0 / (1.0 - w5)) + 2.0 * log(1.0 / (1.0 + w5)) - 2.0 * log(w7 / (-1.0 + w7)) + 2.0 * log(w7 / (1.0 + w7)) + log((-tb + w7) / (-1.0 + w7)) - log((-tb + w7) / (1.0 + w7)) + log((vb + w7) / (-1.0 + w7))
                  - log((vb + w7) / (1.0 + w7)) - 16.0 * log(wx3 / (-myi + wx3)) - 16.0 * log(wx3 / (myi + wx3)) - 16.0 * log(wx4 / (-myi + wx4)) - 16.0 * log(wx4 / (myi + wx4)) + 8.0 * log((wx3 - xb) / (-myi + wx3)) + 8.0 * log((wx3 - xb) / (myi + wx3)) + 8.0 * log((wx4 - xb) / (-myi + wx4)) + 8.0 * log((wx4 - xb) / (myi + wx4)) + 8.0 * log((wx3 + xb) / (-myi + wx3))
                  + 8.0 * log((wx3 + xb) / (myi + wx3)) + 8.0 * log((wx4 + xb) / (-myi + wx4)) + 8.0 * log((wx4 + xb) / (myi + wx4)) - (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 + tb, 1.0 + w7) + (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 - vb, 1.0 + w7) - (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7)
                  - (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                  - (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + dilog(1.0 / 2.0 + (myi / 2.0) * wx4) * (16.0 * log(wx4 / (-myi + wx4)) - 8.0 * log((wx4 - xb) / (-myi + wx4)) - 8.0 * log((wx4 + xb) / (-myi + wx4))
                  + (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + log(1.0 + myi * xb) * ((-2.0 * pisqu) / 3.0 + 16.0 * log(myi) * ln2 + 20.0 * ln2squ - 16.0 * ln2 * log(myi * xb) - (16.0 * myi) * M_PI * log(((-0.5) * myi) * (myi + wx3)) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3)
                  - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3) - (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4)
                  - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4) + (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                  + (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                  + (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) - (8.0 * myi) * M_PI * power_of<2>(log((wx3 - xb) / (-myi + wx3))) * my_sign(imag((-myi + xb) / (-myi + wx3))) * T(1.0, ((-0.5) * myi) * (myi + xb), (wx3 - xb) / (-myi + wx3))
                - (8.0 * myi) * M_PI * power_of<2>(log((wx4 - xb) / (-myi + wx4))) * my_sign(imag((-myi + xb) / (-myi + wx4))) * T(1.0, ((-0.5) * myi) * (myi + xb), (wx4 - xb) / (-myi + wx4)) + (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx3) / wx3)) * my_sign(std::real(wx3inv)) * T(1.0, (wx3 + xb) / wx3, (-myi + wx3) / wx3)
                + (4.0 * myi) * M_PI * power_of<2>(log((myi + wx3) / wx3)) * my_sign(-std::real(wx3inv)) * T(1.0, (wx3 + xb) / wx3, (myi + wx3) / wx3) + (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx4) / wx4)) * my_sign(std::real(wx4inv)) * T(1.0, (wx4 + xb) / wx4, (-myi + wx4) / wx4) + (4.0 * myi) * M_PI * power_of<2>(log((myi + wx4) / wx4)) * my_sign(-std::real(wx4inv)) * T(1.0, (wx4 + xb) / wx4, (myi + wx4) / wx4)
                + (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx3) / wx3)) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - xb / wx3, (-myi + wx3) / wx3) + (4.0 * myi) * M_PI * power_of<2>(log((myi + wx3) / wx3)) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - xb / wx3, (myi + wx3) / wx3) + (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx4) / wx4)) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - xb / wx4, (-myi + wx4) / wx4)
                + (4.0 * myi) * M_PI * power_of<2>(log((myi + wx4) / wx4)) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - xb / wx4, (myi + wx4) / wx4) + log(xb) * (-4.0 * log((myi + xb) / (myi - wx3)) * log((wx3 + xb) / wx3) - 4.0 * log((myi - xb) / (myi + wx4)) * log((wx4 + xb) / wx4) - 4.0 * log((myi + xb) / (myi - wx4)) * log((wx4 + xb) / wx4)
                  - 4.0 * log((-myi + xb) / (-myi + wx3)) * log(1.0 - xb / wx3) - 4.0 * log((myi + xb) / (myi + wx3)) * log(1.0 - xb / wx3) - 4.0 * log((-myi + xb) / (-myi + wx4)) * log(1.0 - xb / wx4) - 4.0 * log((myi + xb) / (myi + wx4)) * log(1.0 - xb / wx4) - (8.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(-imag(wx3 * xbinv)) * T(1.0, (wx3 + xb) / wx3, (-myi + wx3) / wx3)
                  - (8.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(-imag(wx3 * xbinv)) * T(1.0, (wx3 + xb) / wx3, (myi + wx3) / wx3) - (8.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(-imag(wx4 * xbinv)) * T(1.0, (wx4 + xb) / wx4, (-myi + wx4) / wx4) - (8.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(-imag(wx4 * xbinv)) * T(1.0, (wx4 + xb) / wx4, (myi + wx4) / wx4)
                  - (8.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(imag(wx3 * xbinv)) * T(1.0, 1.0 - xb / wx3, (-myi + wx3) / wx3) - (8.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(imag(wx3 * xbinv)) * T(1.0, 1.0 - xb / wx3, (myi + wx3) / wx3) - (8.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(imag(wx4 * xbinv)) * T(1.0, 1.0 - xb / wx4, (-myi + wx4) / wx4)
                  - (8.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(imag(wx4 * xbinv)) * T(1.0, 1.0 - xb / wx4, (myi + wx4) / wx4)) + power_of<2>(log(1.0 - myi * xb)) * (-4.0 * ln2 + 8.0 * log(-myi / xb) - 2.0 * log(((-myi) * (wx3 - xb)) / ((myi + wx3) * xb)) - 2.0 * log(((-myi) * (wx4 - xb)) / ((myi + wx4) * xb)) + 4.0 * log(myi * xb) - 8.0 * log((2.0 * myi) * xb) + 2.0 * log((wx3 + xb) / (-myi + wx3))
                  - 2.0 * log(((-myi) * (wx3 + xb)) / ((-myi + wx3) * xb)) + 2.0 * log((wx4 + xb) / (-myi + wx4)) - 2.0 * log(((-myi) * (wx4 + xb)) / ((-myi + wx4) * xb)) - (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, (wx3 + xb) / wx3, 1.0 - myi * xb) - (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, (wx4 + xb) / wx4, 1.0 - myi * xb) - (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, 1.0 - xb / wx3, 1.0 - myi * xb)
                  - (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, 1.0 - xb / wx4, 1.0 - myi * xb)) + power_of<2>(log(1.0 + myi * xb)) * (-4.0 * ln2 + 8.0 * log(myi / xb) - 2.0 * log((myi * (wx3 - xb)) / ((-myi + wx3) * xb)) - 2.0 * log((myi * (wx4 - xb)) / ((-myi + wx4) * xb)) + 4.0 * log((-myi) * xb) - 8.0 * log((-2.0 * myi) * xb) + 2.0 * log((wx3 + xb) / (myi + wx3)) - 2.0 * log((myi * (wx3 + xb)) / ((myi + wx3) * xb))
                  + 2.0 * log((wx4 + xb) / (myi + wx4)) - 2.0 * log((myi * (wx4 + xb)) / ((myi + wx4) * xb)) - (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, (wx3 + xb) / wx3, 1.0 + myi * xb) - (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, (wx4 + xb) / wx4, 1.0 + myi * xb) - (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, 1.0 - xb / wx3, 1.0 + myi * xb) - (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, 1.0 - xb / wx4, 1.0 + myi * xb))
                + 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) * T(p(-w4inv, 1.0 - tb / w4), 1.0 - tb / w4, (-1.0 + w4) / w4) - 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) * T(p(-w4inv, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 - w7 / w4)
                + 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) * T(p(-w4inv, (vb + w4) / w4), (vb + w4) / w4, (-1.0 + w4) / w4) - 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) * T(p(-w4inv, (vb + w4) / w4), (vb + w4) / w4, 1.0 - w7 / w4)
                + 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) * T(p(w4inv, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 + w4inv) + 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) * T(p(w4inv, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 - w7 / w4)
                + 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) * T(p(w4inv, (vb + w4) / w4), (vb + w4) / w4, 1.0 + w4inv) + 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) * T(p(w4inv, (vb + w4) / w4), (vb + w4) / w4, 1.0 - w7 / w4)
                + 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) * T(p(-w5inv, 1.0 - vb / w5), 1.0 - vb / w5, (-1.0 + w5) / w5) + 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) * T(p(-w5inv, 1.0 - vb / w5), 1.0 - vb / w5, (w5 + w7) / w5)
                + 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) * T(p(-w5inv, (tb + w5) / w5), (tb + w5) / w5, (-1.0 + w5) / w5) + 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) * T(p(-w5inv, (tb + w5) / w5), (tb + w5) / w5, (w5 + w7) / w5)
                + 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) * T(p(w5inv, 1.0 - vb / w5), 1.0 - vb / w5, 1.0 + w5inv) - 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) * T(p(w5inv, 1.0 - vb / w5), 1.0 - vb / w5, (w5 + w7) / w5)
                + 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) * T(p(w5inv, (tb + w5) / w5), (tb + w5) / w5, 1.0 + w5inv) - 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) * T(p(w5inv, (tb + w5) / w5), (tb + w5) / w5, (w5 + w7) / w5)
                - 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) * T(p(w7 / w4, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 + w4inv) + 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) * T(p(w7 / w4, 1.0 - tb / w4), 1.0 - tb / w4, (-1.0 + w4) / w4)
                - 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) * T(p(w7 / w4, (vb + w4) / w4), (vb + w4) / w4, 1.0 + w4inv) + 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) * T(p(w7 / w4, (vb + w4) / w4), (vb + w4) / w4, (-1.0 + w4) / w4)
                + 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), 1.0 - vb / w5), 1.0 - vb / w5, 1.0 + w5inv) - 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), 1.0 - vb / w5), 1.0 - vb / w5, (-1.0 + w5) / w5)
                + 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), (tb + w5) / w5), (tb + w5) / w5, 1.0 + w5inv) - 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), (tb + w5) / w5), (tb + w5) / w5, (-1.0 + w5) / w5) + (103.0 * zeta3) / 2.0)) / denom7;

            const complex<double> f27bpart4 = (num12 * ln2 * (16.0 * dilog(wx3 / (-myi + wx3)) + 16.0 * dilog(wx3 / (myi + wx3)) + 16.0 * dilog(wx4 / (-myi + wx4)) + 16.0 * dilog(wx4 / (myi + wx4))
                    - 8.0 * dilog((wx3 - xb) / (-myi + wx3)) - 8.0 * dilog((wx3 - xb) / (myi + wx3)) - 8.0 * dilog((wx4 - xb) / (-myi + wx4)) - 8.0 * dilog((wx4 - xb) / (myi + wx4)) + 16.0 * dilog((-myi) * xb)
                    + 16.0 * dilog(myi * xb) - 8.0 * dilog(-(xb / wx3)) - 8.0 * dilog(xb / wx3) - 8.0 * dilog(-(xb / wx4)) - 8.0 * dilog(xb / wx4) - 8.0 * dilog((wx3 + xb) / (-myi + wx3))
                    - 8.0 * dilog((wx3 + xb) / (myi + wx3)) - 8.0 * dilog((wx4 + xb) / (-myi + wx4)) - 8.0 * dilog((wx4 + xb) / (myi + wx4))
                    + (4.0 * log(tb) + 4.0 * log(vb) - 4.0 * log(1.0 - tb / w7) - 4.0 * log((vb + w7) / w7)) * log(1.0 - myi * xb) + (4.0 * log(tb) + 4.0 * log(vb) - 4.0 * log(1.0 - tb / w7) - 4.0 * log((vb + w7) / w7)) * log(1.0 + myi * xb)
                    + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7)
                        - 8.0 * log((myi - xb) / (myi + wx3)) - 8.0 * log((myi + xb) / (myi - wx3))) * log((wx3 + xb) / wx3) + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb)
                        - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 8.0 * log((myi - xb) / (myi + wx4)) - 8.0 * log((myi + xb) / (myi - wx4))) * log((wx4 + xb) / wx4)
                    + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7)
                        - 8.0 * log((-myi + xb) / (-myi + wx3)) - 8.0 * log((myi + xb) / (myi + wx3))) * log(1.0 - xb / wx3) + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb)
                        - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 8.0 * log((-myi + xb) / (-myi + wx4)) - 8.0 * log((myi + xb) / (myi + wx4))) * log(1.0 - xb / wx4)
                    + (4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb) - 2.0 * log((wx3 + xb) / wx3) - 2.0 * log((wx4 + xb) / wx4) - 2.0 * log(1.0 - xb / wx3) - 2.0 * log(1.0 - xb / wx4)) * ln1myb
                    + (-8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb) + 4.0 * log((wx3 + xb) / wx3) + 4.0 * log((wx4 + xb) / wx4) + 4.0 * log(1.0 - xb / wx3) + 4.0 * log(1.0 - xb / wx4)) * log(yb)
                    + (4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb) - 2.0 * log((wx3 + xb) / wx3) - 2.0 * log((wx4 + xb) / wx4) - 2.0 * log(1.0 - xb / wx3) - 2.0 * log(1.0 - xb / wx4)) * ln1pyb
                    - (16.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(-std::real(wx3)) * T(1.0, (wx3 + xb) / wx3, (-myi + wx3) / wx3) - (16.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(std::real(wx3)) * T(1.0, (wx3 + xb) / wx3, (myi + wx3) / wx3)
                    - (16.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(-std::real(wx4)) * T(1.0, (wx4 + xb) / wx4, (-myi + wx4) / wx4)
                    - (16.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(std::real(wx4)) * T(1.0, (wx4 + xb) / wx4, (myi + wx4) / wx4) - (16.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(-std::real(wx3)) * T(1.0, 1.0 - xb / wx3, (-myi + wx3) / wx3)
                    - (16.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(std::real(wx3)) * T(1.0, 1.0 - xb / wx3, (myi + wx3) / wx3) - (16.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(-std::real(wx4)) * T(1.0, 1.0 - xb / wx4, (-myi + wx4) / wx4)
                    - (16.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(std::real(wx4)) * T(1.0, 1.0 - xb / wx4, (myi + wx4) / wx4))) / denom7;

            const complex<double> f27bpart5 = term1 + (logs9 * log(1.0 - myi * xb) + logs10 * log(1.0 + myi * xb)) / denom10 + ((-logs1 - logs2) * li2half + logs1 * dilog(1.0 / 2.0 + (myi / 2.0) * xb)
                    + logs2 * dilog(((-0.5) * myi) * (myi + xb)) + logs2 * log(1.0 / 2.0 + (myi / 2.0) * xb) * log(1.0 - myi * xb) + logs1 * log(1.0 / 2.0 - (myi / 2.0) * xb) * log(1.0 + myi * xb)) / denom3
                + ((-logs4 - logs7) * li2half + logs4 * dilog((1.0 - tb) / 2.0) + logs4 * dilog(-tb) - logs7 * dilog(tb) + logs7 * dilog((1.0 + tb) / 2.0) + logs7 * dilog(1.0 / (1.0 - w7))
                    - logs7 * dilog((-1.0 + tb) / (-1.0 + w7)) - logs4 * dilog(1.0 / (1.0 + w7)) + logs4 * dilog((1.0 + tb) / (1.0 + w7)) - logs4 * ln2 * log(1.0 - tb) + (logs7 * power_of<2>(log(1.0 - tb))) / 2.0
                    - logs7 * ln2 * log(1.0 + tb) + (logs4 * power_of<2>(log(1.0 + tb))) / 2.0 - logs7 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) + logs4 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7))
                    + (logs5 * log(1.0 - tb) - logs5 * log(1.0 + tb)) * log(1.0 - myi * xb) + (logs5 * log(1.0 - tb) - logs5 * log(1.0 + tb)) * log(1.0 + myi * xb)
                    - (2.0 * myi) * logs7 * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * logs4 * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7)) / denom9
                + ((-logs3 - logs8) * li2half + logs8 * dilog((1.0 - vb) / 2.0) - logs8 * dilog(-vb) + logs3 * dilog(vb) + logs3 * dilog((1.0 + vb) / 2.0) + logs8 * dilog(1.0 / (1.0 - w7))
                    - logs8 * dilog((1.0 + vb) / (1.0 - w7)) - logs3 * dilog(1.0 / (1.0 + w7)) + logs3 * dilog((1.0 - vb) / (1.0 + w7)) - logs8 * ln2 * log(1.0 - vb) + (logs3 * power_of<2>(log(1.0 - vb))) / 2.0
                    - logs3 * ln2 * log(1.0 + vb) + (logs8 * power_of<2>(log(1.0 + vb))) / 2.0 - logs8 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) + logs3 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7))
                    + (-(logs6 * log(1.0 - vb)) + logs6 * log(1.0 + vb)) * log(1.0 - myi * xb) + (-(logs6 * log(1.0 - vb)) + logs6 * log(1.0 + vb)) * log(1.0 + myi * xb)
                    + (2.0 * myi) * logs3 * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7) - (2.0 * myi) * logs8 * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)) / denom8;

            return f27bpart1 + f27bpart2 +f27bpart3 + f27bpart4 + f27bpart5;
        }

        complex<double> f29b(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xb = clp.x_b;
            const complex<double> yb = clp.y_b;

            const complex<double> xbinv = 1.0 / xb;

            // Powers of xd and yd

            const complex<double> xb2 = power_of<2>(xb);
            const complex<double> xb3 = power_of<3>(xb);
            const complex<double> xb4 = power_of<4>(xb);
            const complex<double> xb5 = power_of<5>(xb);
            const complex<double> xb6 = power_of<6>(xb);
            const complex<double> xb7 = power_of<7>(xb);
            const complex<double> xb8 = power_of<8>(xb);
            const complex<double> xb9 = power_of<9>(xb);
            const complex<double> xb10 = power_of<10>(xb);
            const complex<double> xb11 = power_of<11>(xb);
            const complex<double> xb12 = power_of<12>(xb);
            const complex<double> xb13 = power_of<13>(xb);
            const complex<double> xb14 = power_of<14>(xb);
            const complex<double> xb15 = power_of<15>(xb);
            const complex<double> xb16 = power_of<16>(xb);

            const complex<double> yb2 = power_of<2>(yb);
            const complex<double> yb3 = power_of<3>(yb);
            const complex<double> yb4 = power_of<4>(yb);
            const complex<double> yb5 = power_of<5>(yb);
            const complex<double> yb6 = power_of<6>(yb);
            const complex<double> yb7 = power_of<7>(yb);
            const complex<double> yb8 = power_of<8>(yb);
            const complex<double> yb9 = power_of<9>(yb);
            const complex<double> yb10 = power_of<10>(yb);
            const complex<double> yb11 = power_of<11>(yb);

            // weights appearing in the GPLs [AGV:2019A] p. 34

            const double wx3 = 2.0 + sqrt(3);
            const double wx4 = 2.0 - sqrt(3);

            const complex<double> w4 = (2.0 * xb) / power_of<2>(1.0 - xb);
            const complex<double> w5 = (2.0 * xb) / power_of<2>(1.0 + xb);
            const complex<double> w7 = (8.0 * xb2) / (1.0 - 6.0 * xb2 + xb4);

            const double wx3inv = wx4;
            const double wx4inv = wx3;

            const complex<double> w4inv = 1.0 / w4;
            const complex<double> w5inv = 1.0 / w5;
            const complex<double> w7inv = 1.0 / w7;

            const complex<double> tb = (2.0 * (-2.0 * xb2 + 2.0 * xb2 * yb + sqrt(2) * xb2 * (1.0 + yb) * sqrt((2.0 * xb4 - xb2 * yb + 2.0 * xb4 * yb - xb6 * yb + xb2 * yb2 + 4.0 * xb4 * yb2 + xb6 * yb2) / (xb4 * power_of<2>(1.0 + yb))))) / (-1.0 + 6.0 * xb2 - xb4 + yb + 2.0 * xb2 * yb + xb4 * yb);
            const complex<double> vb = (2.0 * (-2.0 * xb2 - 2.0 * xb2 * yb + sqrt(2) * xb2 * (1.0 - yb) * sqrt((2.0 * xb4 + xb2 * yb - 2.0 * xb4 * yb + xb6 * yb + xb2 * yb2 + 4.0 * xb4 * yb2 + xb6 * yb2) / (xb4 * power_of<2>(1.0 - yb))))) / (1.0 - 6.0 * xb2 + xb4 + yb + 2.0 * xb2 * yb + xb4 * yb);

            const complex<double> tb2 = power_of<2>(tb);
            const complex<double> vb2 = power_of<2>(vb);

            // Logs of yb

            const complex<double> ln1pyb = log(1.0 + yb);
            const complex<double> ln1myb = log(1.0 - yb);

            const complex<double> num1 = 16.0 - 48.0 * yb2;
            const complex<double> num2 = 4.0 * tb * xb2 * (16.0 * vb * xb2 * power_of<2>(myi + xb) * yb * (6.0 * myi * xb * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) + 6.0 * myi * xb9 * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8)
                    + xb6 * (-68.0 - 222.0 * yb2 + 1242.0 * yb4 + 6334.0 * yb6 + 4578.0 * yb8 - 3672.0 * yb10) - 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + 3.0 * xb10 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    - 8.0 * myi * xb3 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10) - 8.0 * myi * xb7 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10)
                    - xb2 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10) + xb8 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10)
                    + 2.0 * xb4 * (34.0 + 111.0 * yb2 - 621.0 * yb4 - 3167.0 * yb6 - 2289.0 * yb8 + 1836.0 * yb10) - 4.0 * myi * xb5 * (-36.0 - 543.0 * yb2 - 1857.0 * yb4 - 4851.0 * yb6 + 3529.0 * yb8 + 7854.0 * yb10))
                  - 4.0 * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10) - 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1623.0 * yb3 - 366.0 * yb4 - 6384.0 * yb5 + 36.0 * yb6 - 27874.0 * yb7 + 2646.0 * yb8 + 6654.0 * yb9 + 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8
                      + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 1599.0 * yb3 + 6430.0 * yb4 + 11580.0 * yb5 - 952.0 * yb6 + 128218.0 * yb7 - 47070.0 * yb8 + 26004.0 * yb9 - 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)))
                + tb2 * ((-vb2) * power_of<2>(myi + xb - myi * xb2 - xb3) * yb * (xb10 * yb2 * (22.0 - 12477.0 * yb2 + 12675.0 * yb4 + 1001.0 * yb6 - 1221.0 * yb8) + 3.0 * yb2 * (2.0 + 3.0 * yb2 - 5.0 * yb4 + 9.0 * yb6 - 9.0 * yb8)
                    + 6.0 * myi * xb * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) + 6.0 * myi * xb13 * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) + 3.0 * xb14 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 3.0 * xb2 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) + 3.0 * xb12 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) - 4.0 * myi * xb3 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8)
                    - 4.0 * myi * xb11 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8) + xb4 * yb2 * (-22.0 + 12477.0 * yb2 - 12675.0 * yb4 - 1001.0 * yb6 + 1221.0 * yb8)
                    - 2.0 * myi * xb5 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8) - 2.0 * myi * xb9 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8)
                    + xb6 * (896.0 + 6022.0 * yb2 + 12885.0 * yb4 - 6451.0 * yb6 - 44481.0 * yb8 - 34407.0 * yb10) + 8.0 * myi * xb7 * (224.0 + 1020.0 * yb2 + 3339.0 * yb4 - 11161.0 * yb6 - 10415.0 * yb8 + 609.0 * yb10)
                    + xb8 * (-896.0 - 6022.0 * yb2 - 12885.0 * yb4 + 6451.0 * yb6 + 44481.0 * yb8 + 34407.0 * yb10)) - 4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8
                      - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 1599.0 * yb3 - 6430.0 * yb4 + 11580.0 * yb5 + 952.0 * yb6 + 128218.0 * yb7 + 47070.0 * yb8 + 26004.0 * yb9 + 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11))
                  + 4.0 * xb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8
                      + 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 478.0 * yb3 + 2928.0 * yb4 - 4461.0 * yb5 - 288.0 * yb6 - 65749.0 * yb7 - 21168.0 * yb8 - 15767.0 * yb9 - 14904.0 * yb10 + 53223.0 * yb11)))
                + 4.0 * xb2 * (-4.0 * xb2 * power_of<2>(myi + xb) * yb * (-1.0 + yb2) * (6.0 * myi * xb * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) + 6.0 * myi * xb9 * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) - 3.0 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6) + 3.0 * xb10 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6)
                    - 8.0 * myi * xb3 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) - 8.0 * myi * xb7 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) + 3.0 * xb8 * yb2 * (-22.0 - 5.0 * yb2 + 252.0 * yb4 + 207.0 * yb6)
                    + xb2 * (66.0 * yb2 + 15.0 * yb4 - 756.0 * yb6 - 621.0 * yb8) - 2.0 * xb6 * (16.0 + 212.0 * yb2 + 1247.0 * yb4 + 3222.0 * yb6 + 2871.0 * yb8) + xb4 * (32.0 + 424.0 * yb2 + 2494.0 * yb4 + 6444.0 * yb6 + 5742.0 * yb8)
                    - 4.0 * myi * xb5 * (-16.0 + 210.0 * yb2 + 717.0 * yb4 + 7232.0 * yb6 + 6465.0 * yb8)) + 4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11) - 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1623.0 * yb3 + 366.0 * yb4 - 6384.0 * yb5 - 36.0 * yb6 - 27874.0 * yb7 - 2646.0 * yb8 + 6654.0 * yb9 - 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8
                      - 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 478.0 * yb3 - 2928.0 * yb4 - 4461.0 * yb5 + 288.0 * yb6 - 65749.0 * yb7 + 21168.0 * yb8 - 15767.0 * yb9 + 14904.0 * yb10 + 53223.0 * yb11)));
            const complex<double> num3 = -4.0 * tb * xb2 * (16.0 * vb * xb2 * power_of<2>(myi + xb) * yb * (6.0 * myi * xb * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) + 6.0 * myi * xb9 * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8)
                    + xb6 * (-68.0 - 222.0 * yb2 + 1242.0 * yb4 + 6334.0 * yb6 + 4578.0 * yb8 - 3672.0 * yb10) - 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + 3.0 * xb10 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    - 8.0 * myi * xb3 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10) - 8.0 * myi * xb7 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10)
                    - xb2 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10) + xb8 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10)
                    + 2.0 * xb4 * (34.0 + 111.0 * yb2 - 621.0 * yb4 - 3167.0 * yb6 - 2289.0 * yb8 + 1836.0 * yb10) - 4.0 * myi * xb5 * (-36.0 - 543.0 * yb2 - 1857.0 * yb4 - 4851.0 * yb6 + 3529.0 * yb8 + 7854.0 * yb10))
                  - 4.0 * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10) - 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1623.0 * yb3 - 366.0 * yb4 - 6384.0 * yb5 + 36.0 * yb6 - 27874.0 * yb7 + 2646.0 * yb8 + 6654.0 * yb9 + 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8
                      + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 1599.0 * yb3 + 6430.0 * yb4 + 11580.0 * yb5 - 952.0 * yb6 + 128218.0 * yb7 - 47070.0 * yb8 + 26004.0 * yb9 - 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)))
                + tb2 * (vb2 * power_of<2>(myi + xb - myi * xb2 - xb3) * yb * (xb10 * yb2 * (22.0 - 12477.0 * yb2 + 12675.0 * yb4 + 1001.0 * yb6 - 1221.0 * yb8) + 3.0 * yb2 * (2.0 + 3.0 * yb2 - 5.0 * yb4 + 9.0 * yb6 - 9.0 * yb8)
                    + 6.0 * myi * xb * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) + 6.0 * myi * xb13 * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) + 3.0 * xb14 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 3.0 * xb2 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) + 3.0 * xb12 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) - 4.0 * myi * xb3 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8)
                    - 4.0 * myi * xb11 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8) + xb4 * yb2 * (-22.0 + 12477.0 * yb2 - 12675.0 * yb4 - 1001.0 * yb6 + 1221.0 * yb8)
                    - 2.0 * myi * xb5 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8) - 2.0 * myi * xb9 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8)
                    + xb6 * (896.0 + 6022.0 * yb2 + 12885.0 * yb4 - 6451.0 * yb6 - 44481.0 * yb8 - 34407.0 * yb10) + 8.0 * myi * xb7 * (224.0 + 1020.0 * yb2 + 3339.0 * yb4 - 11161.0 * yb6 - 10415.0 * yb8 + 609.0 * yb10)
                    + xb8 * (-896.0 - 6022.0 * yb2 - 12885.0 * yb4 + 6451.0 * yb6 + 44481.0 * yb8 + 34407.0 * yb10)) + 4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8
                      - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 1599.0 * yb3 - 6430.0 * yb4 + 11580.0 * yb5 + 952.0 * yb6 + 128218.0 * yb7 + 47070.0 * yb8 + 26004.0 * yb9 + 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11))
                  - 4.0 * xb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8
                      + 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 478.0 * yb3 + 2928.0 * yb4 - 4461.0 * yb5 - 288.0 * yb6 - 65749.0 * yb7 - 21168.0 * yb8 - 15767.0 * yb9 - 14904.0 * yb10 + 53223.0 * yb11)))
                - 4.0 * xb2 * (-4.0 * xb2 * power_of<2>(myi + xb) * yb * (-1.0 + yb2) * (6.0 * myi * xb * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) + 6.0 * myi * xb9 * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) - 3.0 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6) + 3.0 * xb10 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6)
                    - 8.0 * myi * xb3 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) - 8.0 * myi * xb7 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) + 3.0 * xb8 * yb2 * (-22.0 - 5.0 * yb2 + 252.0 * yb4 + 207.0 * yb6)
                    + xb2 * (66.0 * yb2 + 15.0 * yb4 - 756.0 * yb6 - 621.0 * yb8) - 2.0 * xb6 * (16.0 + 212.0 * yb2 + 1247.0 * yb4 + 3222.0 * yb6 + 2871.0 * yb8) + xb4 * (32.0 + 424.0 * yb2 + 2494.0 * yb4 + 6444.0 * yb6 + 5742.0 * yb8)
                    - 4.0 * myi * xb5 * (-16.0 + 210.0 * yb2 + 717.0 * yb4 + 7232.0 * yb6 + 6465.0 * yb8)) + 4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11) - 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1623.0 * yb3 + 366.0 * yb4 - 6384.0 * yb5 - 36.0 * yb6 - 27874.0 * yb7 - 2646.0 * yb8 + 6654.0 * yb9 - 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8
                      - 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 478.0 * yb3 - 2928.0 * yb4 - 4461.0 * yb5 + 288.0 * yb6 - 65749.0 * yb7 + 21168.0 * yb8 - 15767.0 * yb9 + 14904.0 * yb10 + 53223.0 * yb11)));
            const complex<double> num4 = 4.0 * tb * xb2 * (16.0 * vb * xb2 * power_of<2>(-myi + xb) * yb * (-6.0 * myi * xb * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) - 6.0 * myi * xb9 * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8)
                    + xb6 * (-68.0 - 222.0 * yb2 + 1242.0 * yb4 + 6334.0 * yb6 + 4578.0 * yb8 - 3672.0 * yb10) - 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + 3.0 * xb10 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    + 8.0 * myi * xb3 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10) + 8.0 * myi * xb7 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10)
                    - xb2 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10) + xb8 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10)
                    + 2.0 * xb4 * (34.0 + 111.0 * yb2 - 621.0 * yb4 - 3167.0 * yb6 - 2289.0 * yb8 + 1836.0 * yb10) + 4.0 * myi * xb5 * (-36.0 - 543.0 * yb2 - 1857.0 * yb4 - 4851.0 * yb6 + 3529.0 * yb8 + 7854.0 * yb10))
                  - 4.0 * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10) + 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    - 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1623.0 * yb3 - 366.0 * yb4 - 6384.0 * yb5 + 36.0 * yb6 - 27874.0 * yb7 + 2646.0 * yb8 + 6654.0 * yb9 + 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8
                      + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 1599.0 * yb3 + 6430.0 * yb4 + 11580.0 * yb5 - 952.0 * yb6 + 128218.0 * yb7 - 47070.0 * yb8 + 26004.0 * yb9 - 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)))
                + tb2 * ((-vb2) * power_of<2>(myi - xb - myi * xb2 + xb3) * yb * (xb10 * yb2 * (22.0 - 12477.0 * yb2 + 12675.0 * yb4 + 1001.0 * yb6 - 1221.0 * yb8) + 3.0 * yb2 * (2.0 + 3.0 * yb2 - 5.0 * yb4 + 9.0 * yb6 - 9.0 * yb8)
                    - 6.0 * myi * xb * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) - 6.0 * myi * xb13 * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) + 3.0 * xb14 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 3.0 * xb2 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) + 3.0 * xb12 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) + 4.0 * myi * xb3 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8)
                    + 4.0 * myi * xb11 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8) + xb4 * yb2 * (-22.0 + 12477.0 * yb2 - 12675.0 * yb4 - 1001.0 * yb6 + 1221.0 * yb8)
                    + 2.0 * myi * xb5 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8) + 2.0 * myi * xb9 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8)
                    + xb6 * (896.0 + 6022.0 * yb2 + 12885.0 * yb4 - 6451.0 * yb6 - 44481.0 * yb8 - 34407.0 * yb10) - 8.0 * myi * xb7 * (224.0 + 1020.0 * yb2 + 3339.0 * yb4 - 11161.0 * yb6 - 10415.0 * yb8 + 609.0 * yb10)
                    + xb8 * (-896.0 - 6022.0 * yb2 - 12885.0 * yb4 + 6451.0 * yb6 + 44481.0 * yb8 + 34407.0 * yb10)) - 4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8
                      - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 1599.0 * yb3 - 6430.0 * yb4 + 11580.0 * yb5 + 952.0 * yb6 + 128218.0 * yb7 + 47070.0 * yb8 + 26004.0 * yb9 + 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11))
                  + 4.0 * xb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8
                      + 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 478.0 * yb3 + 2928.0 * yb4 - 4461.0 * yb5 - 288.0 * yb6 - 65749.0 * yb7 - 21168.0 * yb8 - 15767.0 * yb9 - 14904.0 * yb10 + 53223.0 * yb11)))
                + 4.0 * xb2 * (-4.0 * xb2 * power_of<2>(-myi + xb) * yb * (-1.0 + yb2) * (-6.0 * myi * xb * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) - 6.0 * myi * xb9 * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) - 3.0 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6)
                    + 3.0 * xb10 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6) + 8.0 * myi * xb3 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) + 8.0 * myi * xb7 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) + 3.0 * xb8 * yb2 * (-22.0 - 5.0 * yb2 + 252.0 * yb4 + 207.0 * yb6)
                    + xb2 * (66.0 * yb2 + 15.0 * yb4 - 756.0 * yb6 - 621.0 * yb8) - 2.0 * xb6 * (16.0 + 212.0 * yb2 + 1247.0 * yb4 + 3222.0 * yb6 + 2871.0 * yb8) + xb4 * (32.0 + 424.0 * yb2 + 2494.0 * yb4 + 6444.0 * yb6 + 5742.0 * yb8)
                    + 4.0 * myi * xb5 * (-16.0 + 210.0 * yb2 + 717.0 * yb4 + 7232.0 * yb6 + 6465.0 * yb8)) + 4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11) + 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    - 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1623.0 * yb3 + 366.0 * yb4 - 6384.0 * yb5 - 36.0 * yb6 - 27874.0 * yb7 - 2646.0 * yb8 + 6654.0 * yb9 - 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8
                      - 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 478.0 * yb3 - 2928.0 * yb4 - 4461.0 * yb5 + 288.0 * yb6 - 65749.0 * yb7 + 21168.0 * yb8 - 15767.0 * yb9 + 14904.0 * yb10 + 53223.0 * yb11)));
            const complex<double> num5 = -4.0 * tb * xb2 * (16.0 * vb * xb2 * power_of<2>(-myi + xb) * yb * (-6.0 * myi * xb * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) - 6.0 * myi * xb9 * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8)
                    + xb6 * (-68.0 - 222.0 * yb2 + 1242.0 * yb4 + 6334.0 * yb6 + 4578.0 * yb8 - 3672.0 * yb10) - 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + 3.0 * xb10 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    + 8.0 * myi * xb3 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10) + 8.0 * myi * xb7 * (-1.0 + 6.0 * yb2 + 309.0 * yb4 - 769.0 * yb6 + 128.0 * yb8 + 327.0 * yb10)
                    - xb2 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10) + xb8 * (-4.0 + 37.0 * yb2 - 1881.0 * yb4 + 125.0 * yb6 + 385.0 * yb8 + 1338.0 * yb10)
                    + 2.0 * xb4 * (34.0 + 111.0 * yb2 - 621.0 * yb4 - 3167.0 * yb6 - 2289.0 * yb8 + 1836.0 * yb10) + 4.0 * myi * xb5 * (-36.0 - 543.0 * yb2 - 1857.0 * yb4 - 4851.0 * yb6 + 3529.0 * yb8 + 7854.0 * yb10))
                  - 4.0 * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10) + 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    - 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1623.0 * yb3 - 366.0 * yb4 - 6384.0 * yb5 + 36.0 * yb6 - 27874.0 * yb7 + 2646.0 * yb8 + 6654.0 * yb9 + 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8
                      + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 1599.0 * yb3 + 6430.0 * yb4 + 11580.0 * yb5 - 952.0 * yb6 + 128218.0 * yb7 - 47070.0 * yb8 + 26004.0 * yb9 - 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3123.0 * yb3 + 1818.0 * yb4 - 31050.0 * yb5 + 534.0 * yb6 - 9010.0 * yb7 - 11826.0 * yb8 + 15753.0 * yb9 - 7236.0 * yb10 + 44037.0 * yb11)))
                + tb2 * (vb2 * power_of<2>(myi - xb - myi * xb2 + xb3) * yb * (xb10 * yb2 * (22.0 - 12477.0 * yb2 + 12675.0 * yb4 + 1001.0 * yb6 - 1221.0 * yb8) + 3.0 * yb2 * (2.0 + 3.0 * yb2 - 5.0 * yb4 + 9.0 * yb6 - 9.0 * yb8)
                    - 6.0 * myi * xb * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) - 6.0 * myi * xb13 * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) + 3.0 * xb14 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 3.0 * xb2 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) + 3.0 * xb12 * yb2 * (50.0 - 123.0 * yb2 - 139.0 * yb4 + 47.0 * yb6 + 165.0 * yb8) + 4.0 * myi * xb3 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8)
                    + 4.0 * myi * xb11 * yb2 * (76.0 + 1323.0 * yb2 - 1689.0 * yb4 + 17.0 * yb6 + 273.0 * yb8) + xb4 * yb2 * (-22.0 + 12477.0 * yb2 - 12675.0 * yb4 - 1001.0 * yb6 + 1221.0 * yb8)
                    + 2.0 * myi * xb5 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8) + 2.0 * myi * xb9 * yb2 * (-718.0 - 22143.0 * yb2 + 2433.0 * yb4 + 3043.0 * yb6 + 17385.0 * yb8)
                    + xb6 * (896.0 + 6022.0 * yb2 + 12885.0 * yb4 - 6451.0 * yb6 - 44481.0 * yb8 - 34407.0 * yb10) - 8.0 * myi * xb7 * (224.0 + 1020.0 * yb2 + 3339.0 * yb4 - 11161.0 * yb6 - 10415.0 * yb8 + 609.0 * yb10)
                    + xb8 * (-896.0 - 6022.0 * yb2 - 12885.0 * yb4 + 6451.0 * yb6 + 44481.0 * yb8 + 34407.0 * yb10)) + 4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8
                      - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10)
                    + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 1599.0 * yb3 - 6430.0 * yb4 + 11580.0 * yb5 + 952.0 * yb6 + 128218.0 * yb7 + 47070.0 * yb8 + 26004.0 * yb9 + 33633.0 * yb10 - 109233.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3123.0 * yb3 - 1818.0 * yb4 - 31050.0 * yb5 - 534.0 * yb6 - 9010.0 * yb7 + 11826.0 * yb8 + 15753.0 * yb9 + 7236.0 * yb10 + 44037.0 * yb11))
                  - 4.0 * xb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8
                      + 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1564.0 * yb3 - 890.0 * yb4 - 15759.0 * yb5 - 232.0 * yb6 - 4387.0 * yb7 + 5850.0 * yb8 + 7907.0 * yb9 + 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 478.0 * yb3 + 2928.0 * yb4 - 4461.0 * yb5 - 288.0 * yb6 - 65749.0 * yb7 - 21168.0 * yb8 - 15767.0 * yb9 - 14904.0 * yb10 + 53223.0 * yb11)))
                - 4.0 * xb2 * (-4.0 * xb2 * power_of<2>(-myi + xb) * yb * (-1.0 + yb2) * (-6.0 * myi * xb * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) - 6.0 * myi * xb9 * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) - 3.0 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6)
                    + 3.0 * xb10 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6) + 8.0 * myi * xb3 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) + 8.0 * myi * xb7 * yb2 * (-11.0 - 788.0 * yb2 + 217.0 * yb4 + 150.0 * yb6) + 3.0 * xb8 * yb2 * (-22.0 - 5.0 * yb2 + 252.0 * yb4 + 207.0 * yb6)
                    + xb2 * (66.0 * yb2 + 15.0 * yb4 - 756.0 * yb6 - 621.0 * yb8) - 2.0 * xb6 * (16.0 + 212.0 * yb2 + 1247.0 * yb4 + 3222.0 * yb6 + 2871.0 * yb8) + xb4 * (32.0 + 424.0 * yb2 + 2494.0 * yb4 + 6444.0 * yb6 + 5742.0 * yb8)
                    + 4.0 * myi * xb5 * (-16.0 + 210.0 * yb2 + 717.0 * yb4 + 7232.0 * yb6 + 6465.0 * yb8)) + 4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11) + 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    - 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1623.0 * yb3 + 366.0 * yb4 - 6384.0 * yb5 - 36.0 * yb6 - 27874.0 * yb7 - 2646.0 * yb8 + 6654.0 * yb9 - 1863.0 * yb10 + 33345.0 * yb11))
                  + vb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9)
                    + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8
                      - 126.0 * yb9 + 573.0 * yb10) - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1564.0 * yb3 + 890.0 * yb4 - 15759.0 * yb5 + 232.0 * yb6 - 4387.0 * yb7 - 5850.0 * yb8 + 7907.0 * yb9 - 3627.0 * yb10 + 22107.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 478.0 * yb3 - 2928.0 * yb4 - 4461.0 * yb5 + 288.0 * yb6 - 65749.0 * yb7 + 21168.0 * yb8 - 15767.0 * yb9 + 14904.0 * yb10 + 53223.0 * yb11)));
            const complex<double> num6 = 8.0 * (-1.0 + 3.0 * yb2);
            const complex<double> num7 = 8.0 - 24.0 * yb2;
            const complex<double> num8 = 4.0 * xb2 * (-4.0 * xb2 * yb * (96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 6.0 * xb2 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6)
                    + 6.0 * xb10 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb12 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + xb4 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10) + xb8 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 776.0 * yb2 - 3585.0 * yb4 - 21917.0 * yb6 - 11939.0 * yb8 + 5433.0 * yb10)) + vb2 * (96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8
                      + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 990.0 * yb3 - 2928.0 * yb4 - 10605.0 * yb5 + 288.0 * yb6 - 93397.0 * yb7 + 21168.0 * yb8 - 71063.0 * yb9 + 14904.0 * yb10 + 11751.0 * yb11))
                  + 4.0 * vb * xb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1879.0 * yb3 + 366.0 * yb4 - 9456.0 * yb5 - 36.0 * yb6 - 41698.0 * yb7 - 2646.0 * yb8 - 20994.0 * yb9 - 1863.0 * yb10 + 12609.0 * yb11)))
                + 4.0 * tb * xb2 * (16.0 * vb * xb2 * yb * (96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    + 3.0 * xb12 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + xb4 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10) + xb8 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10)
                    + 2.0 * xb2 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10) + 2.0 * xb10 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10)
                    + 4.0 * xb6 * (-38.0 - 1103.0 * yb2 - 5871.0 * yb4 - 19781.0 * yb6 - 9055.0 * yb8 + 7176.0 * yb10)) - 4.0 * xb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10)
                    - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1879.0 * yb3 - 366.0 * yb4 - 9456.0 * yb5 + 36.0 * yb6 - 41698.0 * yb7 + 2646.0 * yb8 - 20994.0 * yb9 + 1863.0 * yb10 + 12609.0 * yb11))
                  + vb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7
                      + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 2623.0 * yb3 + 6430.0 * yb4 + 23868.0 * yb5 - 952.0 * yb6 + 183514.0 * yb7 - 47070.0 * yb8 + 136596.0 * yb9 - 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)))
                + tb2 * ((-vb2) * power_of<2>(-1.0 + xb2) * yb * (96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb11 * yb2 * power_of<4>(1.0 + 3.0 * yb2)
                    + 96.0 * xb13 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 12.0 * xb2 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8)
                    + 12.0 * xb14 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8) + 12.0 * xb4 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8) + 12.0 * xb12 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8)
                    + 2.0 * xb8 * (-896.0 - 1626.0 * yb2 - 7683.0 * yb4 + 110485.0 * yb6 + 94135.0 * yb8 + 2193.0 * yb10) + 4.0 * xb6 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)
                    + 4.0 * xb10 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)) + 4.0 * xb2 * (96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 990.0 * yb3 + 2928.0 * yb4 - 10605.0 * yb5 - 288.0 * yb6 - 93397.0 * yb7 - 21168.0 * yb8 - 71063.0 * yb9 - 14904.0 * yb10 + 11751.0 * yb11))
                  - 4.0 * vb * xb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7
                      + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 2623.0 * yb3 - 6430.0 * yb4 + 23868.0 * yb5 + 952.0 * yb6 + 183514.0 * yb7 + 47070.0 * yb8 + 136596.0 * yb9 + 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)));
            const complex<double> num9 = 4.0 * xb2 * (-4.0 * xb2 * yb * (-96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 6.0 * xb2 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6)
                    + 6.0 * xb10 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb12 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + xb4 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10) + xb8 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 776.0 * yb2 - 3585.0 * yb4 - 21917.0 * yb6 - 11939.0 * yb8 + 5433.0 * yb10)) + vb2 * (-96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8
                      + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 990.0 * yb3 - 2928.0 * yb4 - 10605.0 * yb5 + 288.0 * yb6 - 93397.0 * yb7 + 21168.0 * yb8 - 71063.0 * yb9 + 14904.0 * yb10 + 11751.0 * yb11))
                  + 4.0 * vb * xb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1879.0 * yb3 + 366.0 * yb4 - 9456.0 * yb5 - 36.0 * yb6 - 41698.0 * yb7 - 2646.0 * yb8 - 20994.0 * yb9 - 1863.0 * yb10 + 12609.0 * yb11)))
                + 4.0 * tb * xb2 * (16.0 * vb * xb2 * yb * (-96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    + 3.0 * xb12 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + xb4 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10) + xb8 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10)
                    + 2.0 * xb2 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10) + 2.0 * xb10 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10)
                    + 4.0 * xb6 * (-38.0 - 1103.0 * yb2 - 5871.0 * yb4 - 19781.0 * yb6 - 9055.0 * yb8 + 7176.0 * yb10)) - 4.0 * xb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10)
                    - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1879.0 * yb3 - 366.0 * yb4 - 9456.0 * yb5 + 36.0 * yb6 - 41698.0 * yb7 + 2646.0 * yb8 - 20994.0 * yb9 + 1863.0 * yb10 + 12609.0 * yb11))
                  + vb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7
                      + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 2623.0 * yb3 + 6430.0 * yb4 + 23868.0 * yb5 - 952.0 * yb6 + 183514.0 * yb7 - 47070.0 * yb8 + 136596.0 * yb9 - 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)))
                + tb2 * ((-vb2) * power_of<2>(-1.0 + xb2) * yb * (-96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb11 * yb2 * power_of<4>(1.0 + 3.0 * yb2)
                    - 96.0 * xb13 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 12.0 * xb2 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8)
                    + 12.0 * xb14 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8) + 12.0 * xb4 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8) + 12.0 * xb12 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8)
                    + 2.0 * xb8 * (-896.0 - 1626.0 * yb2 - 7683.0 * yb4 + 110485.0 * yb6 + 94135.0 * yb8 + 2193.0 * yb10) + 4.0 * xb6 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)
                    + 4.0 * xb10 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)) + 4.0 * xb2 * (-96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 990.0 * yb3 + 2928.0 * yb4 - 10605.0 * yb5 - 288.0 * yb6 - 93397.0 * yb7 - 21168.0 * yb8 - 71063.0 * yb9 - 14904.0 * yb10 + 11751.0 * yb11))
                  - 4.0 * vb * xb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7
                      + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 2623.0 * yb3 - 6430.0 * yb4 + 23868.0 * yb5 + 952.0 * yb6 + 183514.0 * yb7 + 47070.0 * yb8 + 136596.0 * yb9 + 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)));
            const complex<double> num10 = (-4.0 * xb2 - 4.0 * tb2 * xb2 + tb * (1.0 - 6.0 * xb2 + xb4)) * (1.0 + yb) * (3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<4>(1.0 + yb) * (-1.0 + 3.0 * yb2) + 3.0 * xb8 * power_of<2>(-1.0 + yb) * yb2 * power_of<4>(1.0 + yb) * (-1.0 + 3.0 * yb2)
                 - 4.0 * xb2 * yb * (-1.0 + yb - 6.0 * yb2 - 32.0 * yb3 - 436.0 * yb4 + 366.0 * yb5 - 130.0 * yb6 + 256.0 * yb7 - 195.0 * yb8 + 177.0 * yb9) - 4.0 * xb6 * yb * (-1.0 + yb - 6.0 * yb2 - 32.0 * yb3 - 436.0 * yb4 + 366.0 * yb5 - 130.0 * yb6 + 256.0 * yb7 - 195.0 * yb8
                   + 177.0 * yb9) + xb4 * (16.0 + 88.0 * yb + 62.0 * yb2 + 572.0 * yb3 + 8.0 * yb4 + 2692.0 * yb5 - 3044.0 * yb6 - 284.0 * yb7 - 4504.0 * yb8 - 1020.0 * yb9 - 2778.0 * yb10));
            const complex<double> num11 = (4.0 * xb2 + 4.0 * tb2 * xb2 - tb * (1.0 - 6.0 * xb2 + xb4)) * (1.0 + yb) * (3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<4>(1.0 + yb) * (-1.0 + 3.0 * yb2) + 3.0 * xb8 * power_of<2>(-1.0 + yb) * yb2 * power_of<4>(1.0 + yb) * (-1.0 + 3.0 * yb2)
                 - 4.0 * xb2 * yb * (-1.0 + yb - 6.0 * yb2 - 32.0 * yb3 - 436.0 * yb4 + 366.0 * yb5 - 130.0 * yb6 + 256.0 * yb7 - 195.0 * yb8 + 177.0 * yb9) - 4.0 * xb6 * yb * (-1.0 + yb - 6.0 * yb2 - 32.0 * yb3 - 436.0 * yb4 + 366.0 * yb5 - 130.0 * yb6 + 256.0 * yb7 - 195.0 * yb8
                   + 177.0 * yb9) + xb4 * (16.0 + 88.0 * yb + 62.0 * yb2 + 572.0 * yb3 + 8.0 * yb4 + 2692.0 * yb5 - 3044.0 * yb6 - 284.0 * yb7 - 4504.0 * yb8 - 1020.0 * yb9 - 2778.0 * yb10));
            const complex<double> num12 = (4.0 * xb2 + 4.0 * vb2 * xb2 + vb * (1.0 - 6.0 * xb2 + xb4)) * (-1.0 + yb) * (3.0 * power_of<4>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) + 3.0 * xb8 * power_of<4>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2)
                 - 4.0 * xb2 * yb * (1.0 + yb + 6.0 * yb2 - 32.0 * yb3 + 436.0 * yb4 + 366.0 * yb5 + 130.0 * yb6 + 256.0 * yb7 + 195.0 * yb8 + 177.0 * yb9) - 4.0 * xb6 * yb * (1.0 + yb + 6.0 * yb2 - 32.0 * yb3 + 436.0 * yb4 + 366.0 * yb5 + 130.0 * yb6 + 256.0 * yb7 + 195.0 * yb8
                   + 177.0 * yb9) - 2.0 * xb4 * (-8.0 + 44.0 * yb - 31.0 * yb2 + 286.0 * yb3 - 4.0 * yb4 + 1346.0 * yb5 + 1522.0 * yb6 - 142.0 * yb7 + 2252.0 * yb8 - 510.0 * yb9 + 1389.0 * yb10));
            const complex<double> num13 = -4.0 * xb2 * (-4.0 * xb2 * yb * (96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 6.0 * xb2 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6)
                    + 6.0 * xb10 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb12 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + xb4 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10) + xb8 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 776.0 * yb2 - 3585.0 * yb4 - 21917.0 * yb6 - 11939.0 * yb8 + 5433.0 * yb10)) + vb2 * (96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8
                      + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 990.0 * yb3 - 2928.0 * yb4 - 10605.0 * yb5 + 288.0 * yb6 - 93397.0 * yb7 + 21168.0 * yb8 - 71063.0 * yb9 + 14904.0 * yb10 + 11751.0 * yb11))
                  + 4.0 * vb * xb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1879.0 * yb3 + 366.0 * yb4 - 9456.0 * yb5 - 36.0 * yb6 - 41698.0 * yb7 - 2646.0 * yb8 - 20994.0 * yb9 - 1863.0 * yb10 + 12609.0 * yb11)))
                - 4.0 * tb * xb2 * (16.0 * vb * xb2 * yb * (96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    + 3.0 * xb12 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + xb4 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10) + xb8 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10)
                    + 2.0 * xb2 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10) + 2.0 * xb10 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10)
                    + 4.0 * xb6 * (-38.0 - 1103.0 * yb2 - 5871.0 * yb4 - 19781.0 * yb6 - 9055.0 * yb8 + 7176.0 * yb10)) - 4.0 * xb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10)
                    - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1879.0 * yb3 - 366.0 * yb4 - 9456.0 * yb5 + 36.0 * yb6 - 41698.0 * yb7 + 2646.0 * yb8 - 20994.0 * yb9 + 1863.0 * yb10 + 12609.0 * yb11))
                  + vb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7
                      + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 2623.0 * yb3 + 6430.0 * yb4 + 23868.0 * yb5 - 952.0 * yb6 + 183514.0 * yb7 - 47070.0 * yb8 + 136596.0 * yb9 - 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)))
                + tb2 * (vb2 * power_of<2>(-1.0 + xb2) * yb * (96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb11 * yb2 * power_of<4>(1.0 + 3.0 * yb2)
                    + 96.0 * xb13 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 12.0 * xb2 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8)
                    + 12.0 * xb14 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8) + 12.0 * xb4 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8) + 12.0 * xb12 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8)
                    + 2.0 * xb8 * (-896.0 - 1626.0 * yb2 - 7683.0 * yb4 + 110485.0 * yb6 + 94135.0 * yb8 + 2193.0 * yb10) + 4.0 * xb6 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)
                    + 4.0 * xb10 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)) - 4.0 * xb2 * (96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 990.0 * yb3 + 2928.0 * yb4 - 10605.0 * yb5 - 288.0 * yb6 - 93397.0 * yb7 - 21168.0 * yb8 - 71063.0 * yb9 - 14904.0 * yb10 + 11751.0 * yb11))
                  + 4.0 * vb * xb2 * (192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7
                      + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 2623.0 * yb3 - 6430.0 * yb4 + 23868.0 * yb5 + 952.0 * yb6 + 183514.0 * yb7 + 47070.0 * yb8 + 136596.0 * yb9 + 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)));
            const complex<double> num14 = -4.0 * xb2 * (-4.0 * xb2 * yb * (-96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 6.0 * xb2 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6)
                    + 6.0 * xb10 * yb4 * (35.0 - 217.0 * yb2 + 89.0 * yb4 + 93.0 * yb6) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb12 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + xb4 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10) + xb8 * (32.0 + 502.0 * yb2 + 14553.0 * yb4 - 11359.0 * yb6 + 235.0 * yb8 - 3963.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 776.0 * yb2 - 3585.0 * yb4 - 21917.0 * yb6 - 11939.0 * yb8 + 5433.0 * yb10)) + vb2 * (-96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (-1.0 + 4.0 * yb + 2.0 * yb2 + 5.0 * yb3 + 8.0 * yb4 - 95.0 * yb5 - 18.0 * yb6 + 47.0 * yb7 + 9.0 * yb8
                      + 39.0 * yb9) - 4.0 * xb4 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 + 6.0 * yb - 122.0 * yb2 - 164.0 * yb3 - 1575.0 * yb4 - 328.0 * yb5 + 1145.0 * yb6 + 612.0 * yb7 - 17.0 * yb8 - 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 - 1692.0 * yb3 + 890.0 * yb4 - 17295.0 * yb5 + 232.0 * yb6 - 11299.0 * yb7 - 5850.0 * yb8 - 5917.0 * yb9 - 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (-64.0 + 464.0 * yb - 600.0 * yb2 - 990.0 * yb3 - 2928.0 * yb4 - 10605.0 * yb5 + 288.0 * yb6 - 93397.0 * yb7 + 21168.0 * yb8 - 71063.0 * yb9 + 14904.0 * yb10 + 11751.0 * yb11))
                  + 4.0 * vb * xb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb12 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 2.0 * xb2 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7 + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 - 3.0 * yb - yb2 + 82.0 * yb3 - 768.0 * yb4 + 164.0 * yb5 - 782.0 * yb6 - 306.0 * yb7
                      + 650.0 * yb8 + 63.0 * yb9 + 903.0 * yb10) + xb4 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + xb8 * (16.0 - 48.0 * yb + 147.0 * yb2 + 339.0 * yb3 + 890.0 * yb4 + 22620.0 * yb5 + 232.0 * yb6 - 17454.0 * yb7 - 5850.0 * yb8 + 6476.0 * yb9 - 3627.0 * yb10 - 3741.0 * yb11)
                    + 4.0 * xb6 * (8.0 - 22.0 * yb + 75.0 * yb2 - 1879.0 * yb3 + 366.0 * yb4 - 9456.0 * yb5 - 36.0 * yb6 - 41698.0 * yb7 - 2646.0 * yb8 - 20994.0 * yb9 - 1863.0 * yb10 + 12609.0 * yb11)))
                - 4.0 * tb * xb2 * (16.0 * vb * xb2 * yb * (-96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 288.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10)
                    + 3.0 * xb12 * (yb2 - 17.0 * yb4 + 21.0 * yb6 - 11.0 * yb8 + 6.0 * yb10) + xb4 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10) + xb8 * (-80.0 - 163.0 * yb2 + 8067.0 * yb4 - 6095.0 * yb6 + 6241.0 * yb8 + 222.0 * yb10)
                    + 2.0 * xb2 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10) + 2.0 * xb10 * (-2.0 - yb2 - 873.0 * yb4 - 131.0 * yb6 + 383.0 * yb8 + 624.0 * yb10)
                    + 4.0 * xb6 * (-38.0 - 1103.0 * yb2 - 5871.0 * yb4 - 19781.0 * yb6 - 9055.0 * yb8 + 7176.0 * yb10)) - 4.0 * xb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 576.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    - 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 3.0 * xb12 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 2.0 * xb2 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8
                      - 63.0 * yb9 + 903.0 * yb10) + 2.0 * xb10 * yb * (-2.0 + 3.0 * yb - yb2 - 82.0 * yb3 - 768.0 * yb4 - 164.0 * yb5 - 782.0 * yb6 + 306.0 * yb7 + 650.0 * yb8 - 63.0 * yb9 + 903.0 * yb10)
                    - xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    - xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 - 339.0 * yb3 + 890.0 * yb4 - 22620.0 * yb5 + 232.0 * yb6 + 17454.0 * yb7 - 5850.0 * yb8 - 6476.0 * yb9 - 3627.0 * yb10 + 3741.0 * yb11)
                    + 4.0 * xb6 * (-8.0 - 22.0 * yb - 75.0 * yb2 - 1879.0 * yb3 - 366.0 * yb4 - 9456.0 * yb5 + 36.0 * yb6 - 41698.0 * yb7 + 2646.0 * yb8 - 20994.0 * yb9 + 1863.0 * yb10 + 12609.0 * yb11))
                  + vb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (1.0 - yb - 2.0 * yb2 - 20.0 * yb3 - 8.0 * yb4 + 26.0 * yb5 + 18.0 * yb6 - 20.0 * yb7 - 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7 + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 - 6.0 * yb + 19.0 * yb2 - 26.0 * yb3 - 438.0 * yb4 - 22.0 * yb5 - 334.0 * yb6 + 18.0 * yb7
                      + 343.0 * yb8 + 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 2623.0 * yb3 + 6430.0 * yb4 + 23868.0 * yb5 - 952.0 * yb6 + 183514.0 * yb7 - 47070.0 * yb8 + 136596.0 * yb9 - 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 81.0 * yb3 - 186.0 * yb4 - 2496.0 * yb5 - 756.0 * yb6 + 1482.0 * yb7 + 54.0 * yb8 - 1418.0 * yb9 - 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 - 3379.0 * yb3 + 1818.0 * yb4 - 34122.0 * yb5 + 534.0 * yb6 - 22834.0 * yb7 - 11826.0 * yb8 - 11895.0 * yb9 - 7236.0 * yb10 + 23301.0 * yb11)))
                + tb2 * (vb2 * power_of<2>(-1.0 + xb2) * yb * (-96.0 * xb3 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb5 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb9 * yb2 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb11 * yb2 * power_of<4>(1.0 + 3.0 * yb2)
                    - 96.0 * xb13 * yb2 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 12.0 * xb2 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8)
                    + 12.0 * xb14 * yb2 * (7.0 - 9.0 * yb2 - 79.0 * yb4 + 45.0 * yb6 + 36.0 * yb8) + 12.0 * xb4 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8) + 12.0 * xb12 * yb2 * (40.0 - 127.0 * yb2 - 35.0 * yb4 + 83.0 * yb6 + 39.0 * yb8)
                    + 2.0 * xb8 * (-896.0 - 1626.0 * yb2 - 7683.0 * yb4 + 110485.0 * yb6 + 94135.0 * yb8 + 2193.0 * yb10) + 4.0 * xb6 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)
                    + 4.0 * xb10 * (-224.0 - 2357.0 * yb2 - 23781.0 * yb4 - 6035.0 * yb6 + 89.0 * yb8 + 15924.0 * yb10)) - 4.0 * xb2 * (-96.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 192.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 192.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 96.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8)
                    + 12.0 * xb2 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9) + 12.0 * xb14 * yb2 * (1.0 + 4.0 * yb - 2.0 * yb2 + 5.0 * yb3 - 8.0 * yb4 - 95.0 * yb5 + 18.0 * yb6 + 47.0 * yb7 - 9.0 * yb8 + 39.0 * yb9)
                    - 4.0 * xb4 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    - 4.0 * xb12 * yb * (-4.0 - 6.0 * yb - 122.0 * yb2 + 164.0 * yb3 - 1575.0 * yb4 + 328.0 * yb5 + 1145.0 * yb6 - 612.0 * yb7 - 17.0 * yb8 + 126.0 * yb9 + 573.0 * yb10)
                    + 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    + 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 1692.0 * yb3 - 890.0 * yb4 - 17295.0 * yb5 - 232.0 * yb6 - 11299.0 * yb7 + 5850.0 * yb8 - 5917.0 * yb9 + 3627.0 * yb10 + 11739.0 * yb11)
                    - 2.0 * xb8 * (64.0 + 464.0 * yb + 600.0 * yb2 - 990.0 * yb3 + 2928.0 * yb4 - 10605.0 * yb5 - 288.0 * yb6 - 93397.0 * yb7 - 21168.0 * yb8 - 71063.0 * yb9 - 14904.0 * yb10 + 11751.0 * yb11))
                  + 4.0 * vb * xb2 * (-192.0 * xb3 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb5 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb7 * yb3 * power_of<4>(1.0 + 3.0 * yb2) + 384.0 * xb9 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb11 * yb3 * power_of<4>(1.0 + 3.0 * yb2) - 192.0 * xb13 * yb3 * power_of<4>(1.0 + 3.0 * yb2)
                    + 3.0 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9) + 3.0 * xb16 * yb2 * (-1.0 - yb + 2.0 * yb2 - 20.0 * yb3 + 8.0 * yb4 + 26.0 * yb5 - 18.0 * yb6 - 20.0 * yb7 + 9.0 * yb8 + 15.0 * yb9)
                    + 4.0 * xb2 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7 + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 4.0 * xb14 * yb * (-1.0 + 6.0 * yb + 19.0 * yb2 + 26.0 * yb3 - 438.0 * yb4 + 22.0 * yb5 - 334.0 * yb6 - 18.0 * yb7
                      + 343.0 * yb8 - 36.0 * yb9 + 411.0 * yb10) + 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 + 2623.0 * yb3 - 6430.0 * yb4 + 23868.0 * yb5 + 952.0 * yb6 + 183514.0 * yb7 + 47070.0 * yb8 + 136596.0 * yb9 + 33633.0 * yb10 - 26289.0 * yb11)
                    - 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    - 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 - 81.0 * yb3 + 186.0 * yb4 - 2496.0 * yb5 + 756.0 * yb6 + 1482.0 * yb7 - 54.0 * yb8 - 1418.0 * yb9 + 1215.0 * yb10 + 447.0 * yb11)
                    + 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)
                    + 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 3379.0 * yb3 - 1818.0 * yb4 - 34122.0 * yb5 - 534.0 * yb6 - 22834.0 * yb7 + 11826.0 * yb8 - 11895.0 * yb9 + 7236.0 * yb10 + 23301.0 * yb11)));
            const complex<double> num15 = power_of<4>(1.0 + xb2) * power_of<2>(-1.0 + yb2) * (1.0 - 4.0 * yb2 + 3.0 * yb4 + xb4 * (1.0 - 4.0 * yb2 + 3.0 * yb4) + 2.0 * xb2 * (-5.0 + 80.0 * yb2 + 21.0 * yb4));

            const complex<double> denom0 = 81.0 * yb3;
            const complex<double> denom1 = 648.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom2 = 1296.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom3 = 324.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(xb + 3.0 * xb * yb2);
            const complex<double> denom4 = 324.0 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(xb + 3.0 * xb * yb2);
            const complex<double> denom5 = 432.0 * xb6 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom6 = 324.0 * xb6 * yb3 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom7 = 81.0 * xb4 * power_of<2>(1.0 + 3.0 * yb2);
            const complex<double> denom8 = 81.0 * xb6 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom9 = 486.0 * xb4 * power_of<3>(yb + 3.0 * yb3);
            const complex<double> denom10 = 324.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom11 = 324.0 * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom12 = 324.0 * (tb * power_of<2>(-1.0 + xb) - 2.0 * xb) * xb6 * (vb * power_of<2>(-1.0 + xb) + 2.0 * xb) * (2.0 * xb + tb * power_of<2>(1.0 + xb)) * (-2.0 * xb + vb * power_of<2>(1.0 + xb)) * yb3 * power_of<4>(1.0 + 3.0 * yb2);
            const complex<double> denom13 = (243.0 * yb3) / 16.0;

            const complex<double> logs1 = 3.0 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 3.0 * xb12 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 18.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 24.0 * yb2 + 9.0 * yb4) * ln2
                + 18.0 * xb10 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 24.0 * yb2 + 9.0 * yb4) * ln2 + 9.0 * xb4 * yb3 * power_of<2>(-1.0 + yb2) * (-11.0 + 204.0 * yb2 + 63.0 * yb4) * ln2 + 9.0 * xb8 * yb3 * power_of<2>(-1.0 + yb2) * (-11.0 + 204.0 * yb2 + 63.0 * yb4) * ln2
                + 4.0 * xb6 * (16.0 + 144.0 * yb2 + 288.0 * yb4 - 864.0 * yb6 - 3888.0 * yb8 - 3888.0 * yb10 - 39.0 * yb3 * ln2 + 774.0 * yb5 * ln2 - 1224.0 * yb7 * ln2 + 282.0 * yb9 * ln2 + 207.0 * yb11 * ln2);
            const complex<double> logs2 = 3.0 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 3.0 * xb12 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 18.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 24.0 * yb2 + 9.0 * yb4) * ln2
                + 18.0 * xb10 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 24.0 * yb2 + 9.0 * yb4) * ln2 + 9.0 * xb4 * yb3 * power_of<2>(-1.0 + yb2) * (-11.0 + 204.0 * yb2 + 63.0 * yb4) * ln2 + 9.0 * xb8 * yb3 * power_of<2>(-1.0 + yb2) * (-11.0 + 204.0 * yb2 + 63.0 * yb4) * ln2
                + 4.0 * xb6 * (-16.0 - 144.0 * yb2 - 288.0 * yb4 + 864.0 * yb6 + 3888.0 * yb8 + 3888.0 * yb10 - 39.0 * yb3 * ln2 + 774.0 * yb5 * ln2 - 1224.0 * yb7 * ln2 + 282.0 * yb9 * ln2 + 207.0 * yb11 * ln2);
            const complex<double> logs3 = 3.0 * (-1.0 + yb2) + 3.0 * xb8 * (-1.0 + yb2) - 4.0 * xb2 * (4.0 - 7.0 * yb2 + 3.0 * yb4) - 4.0 * xb6 * (4.0 - 7.0 * yb2 + 3.0 * yb4) + 2.0 * xb4 * (-13.0 + 64.0 * ln2 + 12.0 * yb4 * (-1.0 + 48.0 * ln2) + yb2 * (25.0 + 384.0 * ln2));
            const complex<double> logs4 = -18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + 18.0 * xb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 24.0 * yb2 + 9.0 * yb4) * ln2 + 18.0 * xb10 * power_of<2>(-1.0 + yb2) * (-1.0 + 24.0 * yb2 + 9.0 * yb4) * ln2
                + 9.0 * xb4 * power_of<2>(-1.0 + yb2) * (-11.0 + 204.0 * yb2 + 63.0 * yb4) * ln2 + 9.0 * xb8 * power_of<2>(-1.0 + yb2) * (-11.0 + 204.0 * yb2 + 63.0 * yb4) * ln2
                + 4.0 * xb6 * (-16.0 - 39.0 * ln2 - 72.0 * yb4 * (12.0 + 17.0 * ln2) + 9.0 * yb8 * (-144.0 + 23.0 * ln2) + 6.0 * yb6 * (-288.0 + 47.0 * ln2) + 6.0 * yb2 * (-32.0 + 129.0 * ln2)) + log(8.0)
                + xb12 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0));
            const complex<double> logs5 = 9.0 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 9.0 * xb8 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 12.0 * xb2 * yb2 * (-3.0 - 163.0 * yb2 + 151.0 * yb4 + 15.0 * yb6) - 12.0 * xb6 * yb2 * (-3.0 - 163.0 * yb2 + 151.0 * yb4 + 15.0 * yb6)
                - 2.0 * xb4 * (-543.0 * yb4 - 3.0 * yb2 * (103.0 + 192.0 * ln2) + 9.0 * yb8 * (607.0 + 864.0 * ln2) + yb6 * (5181.0 + 5184.0 * ln2) - 32.0 * (2.0 + log(8.0)));
            const complex<double> logs6 = -9.0 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 9.0 * xb8 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 12.0 * xb2 * yb2 * (-3.0 - 163.0 * yb2 + 151.0 * yb4 + 15.0 * yb6) + 12.0 * xb6 * yb2 * (-3.0 - 163.0 * yb2 + 151.0 * yb4 + 15.0 * yb6)
                + 2.0 * xb4 * (-543.0 * yb4 - 3.0 * yb2 * (103.0 + 192.0 * ln2) + 9.0 * yb8 * (607.0 + 864.0 * ln2) + yb6 * (5181.0 + 5184.0 * ln2) - 32.0 * (2.0 + log(8.0)));
            const complex<double> logs7 = -4.0 * xb2 * (2.0 * xb6 * (8.0 + 52.0 * yb + 75.0 * yb2 + 290.0 * yb4 - 176.0 * yb6 - 2394.0 * yb8 - 1899.0 * yb10 + yb3 * (317.0 - 78.0 * ln2) + 18.0 * yb5 * (75.0 + 86.0 * ln2) + 3.0 * yb11 * (-463.0 + 138.0 * ln2) - 16.0 * yb7 * (104.0 + 153.0 * ln2)
                    + yb9 * (-2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (-4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (-4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + 3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2) - 3.0 * yb * (1.0 + ln4)) + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2)
                    - 3.0 * yb * (1.0 + ln4)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                + tb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (32.0 + 208.0 * yb + 300.0 * yb2 + 1160.0 * yb4 - 704.0 * yb6 - 9576.0 * yb8 - 7596.0 * yb10 + yb3 * (1268.0 - 57.0 * ln2) + 18.0 * yb5 * (300.0 + 59.0 * ln2) + 3.0 * yb11 * (-1852.0 + 87.0 * ln2) + 2.0 * yb9 * (-5524.0 + 213.0 * ln2)
                    - 4.0 * yb7 * (1664.0 + 423.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (-2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2) + 3.0 * yb5 * (-1.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2)
                    + 3.0 * yb5 * (-1.0 + log(128.0)))) + tb * xb2 * (-2.0 * xb2 * yb * (-1.0 + yb2) * (2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2)
                    + yb6 * (521.0 + 1080.0 * ln2)) - 2.0 * xb10 * yb * (-1.0 + yb2) * (2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2) + yb6 * (521.0 + 1080.0 * ln2))
                - 4.0 * xb6 * (24.0 + 154.0 * yb + 225.0 * yb2 + 794.0 * yb4 - 668.0 * yb6 - 6930.0 * yb8 - 5733.0 * yb10 + yb3 * (941.0 - 312.0 * ln2) + 18.0 * yb5 * (173.0 + 344.0 * ln2) + 3.0 * yb11 * (-1271.0 + 552.0 * ln2) + 4.0 * yb9 * (-2041.0 + 564.0 * ln2)
                    - 8.0 * yb7 * (565.0 + 1224.0 * ln2)) + xb4 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb11 * (1479.0 - 4536.0 * ln2) + yb3 * (505.0 + 792.0 * ln2) + 16.0 * yb7 * (143.0 + 1602.0 * ln2)
                    - 6.0 * yb5 * (1415.0 + 2712.0 * ln2) - 2.0 * yb9 * (2027.0 + 2808.0 * ln2)) + xb8 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb11 * (1479.0 - 4536.0 * ln2) + yb3 * (505.0 + 792.0 * ln2)
                    + 16.0 * yb7 * (143.0 + 1602.0 * ln2) - 6.0 * yb5 * (1415.0 + 2712.0 * ln2) - 2.0 * yb9 * (2027.0 + 2808.0 * ln2)) - 3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 - 2.0 * yb * (1.0 + log(16.0)) + yb2 * (-1.0 + ln256))
                - 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 - 2.0 * yb * (1.0 + log(16.0)) + yb2 * (-1.0 + ln256)));
            const complex<double> logs8 = 4.0 * xb2 * (2.0 * xb6 * (8.0 + 52.0 * yb + 75.0 * yb2 + 290.0 * yb4 - 176.0 * yb6 - 2394.0 * yb8 - 1899.0 * yb10 + yb3 * (317.0 - 78.0 * ln2) + 18.0 * yb5 * (75.0 + 86.0 * ln2) + 3.0 * yb11 * (-463.0 + 138.0 * ln2) - 16.0 * yb7 * (104.0 + 153.0 * ln2)
                    + yb9 * (-2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (-4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (-4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + 3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2) - 3.0 * yb * (1.0 + ln4)) + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2)
                    - 3.0 * yb * (1.0 + ln4)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                + tb2 * (-3.0 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 3.0 * xb16 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 2.0 * xb8 * (32.0 + 208.0 * yb + 300.0 * yb2 + 1160.0 * yb4 - 704.0 * yb6 - 9576.0 * yb8 - 7596.0 * yb10 + yb3 * (1268.0 - 57.0 * ln2) + 18.0 * yb5 * (300.0 + 59.0 * ln2)
                    + 3.0 * yb11 * (-1852.0 + 87.0 * ln2) + 2.0 * yb9 * (-5524.0 + 213.0 * ln2) - 4.0 * yb7 * (1664.0 + 423.0 * ln2)) + 8.0 * xb6 * yb * (-1.0 + yb2) * (-2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0))
                    + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0))) + 8.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0))
                    - 12.0 * yb4 * (79.0 + log(32.0))) - 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2) + 3.0 * yb5 * (-1.0 + log(128.0)))
                - 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2) + 3.0 * yb5 * (-1.0 + log(128.0))))
                + tb * xb2 * (2.0 * xb2 * yb * (-1.0 + yb2) * (2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2) + yb6 * (521.0 + 1080.0 * ln2))
                + 2.0 * xb10 * yb * (-1.0 + yb2) * (2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2) + yb6 * (521.0 + 1080.0 * ln2))
                + 4.0 * xb6 * (24.0 + 154.0 * yb + 225.0 * yb2 + 794.0 * yb4 - 668.0 * yb6 - 6930.0 * yb8 - 5733.0 * yb10 + yb3 * (941.0 - 312.0 * ln2) + 18.0 * yb5 * (173.0 + 344.0 * ln2) + 3.0 * yb11 * (-1271.0 + 552.0 * ln2) + 4.0 * yb9 * (-2041.0 + 564.0 * ln2)
                    - 8.0 * yb7 * (565.0 + 1224.0 * ln2)) + xb4 * (-16.0 - 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 - yb3 * (505.0 + 792.0 * ln2) + 3.0 * yb11 * (-493.0 + 1512.0 * ln2) - 16.0 * yb7 * (143.0 + 1602.0 * ln2)
                    + 6.0 * yb5 * (1415.0 + 2712.0 * ln2) + yb9 * (4054.0 + 5616.0 * ln2)) + xb8 * (-16.0 - 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 - yb3 * (505.0 + 792.0 * ln2) + 3.0 * yb11 * (-493.0 + 1512.0 * ln2)
                    - 16.0 * yb7 * (143.0 + 1602.0 * ln2) + 6.0 * yb5 * (1415.0 + 2712.0 * ln2) + yb9 * (4054.0 + 5616.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 - 2.0 * yb * (1.0 + log(16.0)) + yb2 * (-1.0 + ln256))
                + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 - 2.0 * yb * (1.0 + log(16.0)) + yb2 * (-1.0 + ln256)));
            const complex<double> logs9 = -4.0 * xb2 * (3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 2.0 * xb6 * (-8.0 - 52.0 * yb - 75.0 * yb2 - 290.0 * yb4 + 176.0 * yb6 + 2394.0 * yb8 + 1899.0 * yb10 + yb7 * (1664.0 - 2448.0 * ln2) - yb3 * (317.0 + 78.0 * ln2) + 18.0 * yb5 * (-75.0 + 86.0 * ln2) + 3.0 * yb11 * (463.0 + 138.0 * ln2)
                    + yb9 * (2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                + tb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (-32.0 - 208.0 * yb - 300.0 * yb2 - 1160.0 * yb4 + 704.0 * yb6 + 9576.0 * yb8 + 7596.0 * yb10 + yb7 * (6656.0 - 1692.0 * ln2) - yb3 * (1268.0 + 57.0 * ln2) + 18.0 * yb5 * (-300.0 + 59.0 * ln2) + 3.0 * yb11 * (1852.0 + 87.0 * ln2)
                    + 2.0 * yb9 * (5524.0 + 213.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0)) + 3.0 * yb5 * (1.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0))
                    + 3.0 * yb5 * (1.0 + log(128.0)))) - tb * xb2 * (4.0 * xb6 * (-24.0 - 154.0 * yb - 225.0 * yb2 - 794.0 * yb4 + 668.0 * yb6 + 6930.0 * yb8 + 5733.0 * yb10 + yb7 * (4520.0 - 9792.0 * ln2) - yb3 * (941.0 + 312.0 * ln2) + 18.0 * yb5 * (-173.0 + 344.0 * ln2)
                    + 3.0 * yb11 * (1271.0 + 552.0 * ln2) + 4.0 * yb9 * (2041.0 + 564.0 * ln2)) + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2)
                    + yb8 * (-381.0 + 648.0 * ln2) + yb6 * (-521.0 + 1080.0 * ln2)) + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2) + yb8 * (-381.0 + 648.0 * ln2)
                    + yb6 * (-521.0 + 1080.0 * ln2)) + xb4 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2) + 3.0 * yb11 * (493.0 + 1512.0 * ln2)
                    + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + xb8 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2)
                    + 3.0 * yb11 * (493.0 + 1512.0 * ln2) + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 8.0 * ln2) + yb2 * (1.0 + ln256))
                + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 8.0 * ln2) + yb2 * (1.0 + ln256)));
            const complex<double> logs10 = 4.0 * xb2 * (3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 2.0 * xb6 * (-8.0 - 52.0 * yb - 75.0 * yb2 - 290.0 * yb4 + 176.0 * yb6 + 2394.0 * yb8 + 1899.0 * yb10 + yb7 * (1664.0 - 2448.0 * ln2) - yb3 * (317.0 + 78.0 * ln2) + 18.0 * yb5 * (-75.0 + 86.0 * ln2) + 3.0 * yb11 * (463.0 + 138.0 * ln2)
                    + yb9 * (2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                - tb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (-32.0 - 208.0 * yb - 300.0 * yb2 - 1160.0 * yb4 + 704.0 * yb6 + 9576.0 * yb8 + 7596.0 * yb10 + yb7 * (6656.0 - 1692.0 * ln2) - yb3 * (1268.0 + 57.0 * ln2) + 18.0 * yb5 * (-300.0 + 59.0 * ln2) + 3.0 * yb11 * (1852.0 + 87.0 * ln2)
                    + 2.0 * yb9 * (5524.0 + 213.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0)) + 3.0 * yb5 * (1.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0))
                    + 3.0 * yb5 * (1.0 + log(128.0)))) + tb * xb2 * (4.0 * xb6 * (-24.0 - 154.0 * yb - 225.0 * yb2 - 794.0 * yb4 + 668.0 * yb6 + 6930.0 * yb8 + 5733.0 * yb10 + yb7 * (4520.0 - 9792.0 * ln2) - yb3 * (941.0 + 312.0 * ln2) + 18.0 * yb5 * (-173.0 + 344.0 * ln2)
                    + 3.0 * yb11 * (1271.0 + 552.0 * ln2) + 4.0 * yb9 * (2041.0 + 564.0 * ln2)) + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2)
                    + yb8 * (-381.0 + 648.0 * ln2) + yb6 * (-521.0 + 1080.0 * ln2)) + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2) + yb8 * (-381.0 + 648.0 * ln2)
                    + yb6 * (-521.0 + 1080.0 * ln2)) + xb4 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2) + 3.0 * yb11 * (493.0 + 1512.0 * ln2)
                    + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + xb8 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2)
                    + 3.0 * yb11 * (493.0 + 1512.0 * ln2) + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 8.0 * ln2) + yb2 * (1.0 + ln256))
                + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 8.0 * ln2) + yb2 * (1.0 + ln256)));
            const complex<double> logs11 = 4.0 * xb2 * (3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 2.0 * xb6 * (8.0 - 52.0 * yb + 75.0 * yb2 + 290.0 * yb4 - 176.0 * yb6 - 2394.0 * yb8 - 1899.0 * yb10 + yb7 * (1664.0 - 2448.0 * ln2) - yb3 * (317.0 + 78.0 * ln2) + 18.0 * yb5 * (-75.0 + 86.0 * ln2) + 3.0 * yb11 * (463.0 + 138.0 * ln2)
                    + yb9 * (2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                + vb2 * (-3.0 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 3.0 * xb16 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 2.0 * xb8 * (32.0 - 208.0 * yb + 300.0 * yb2 + 1160.0 * yb4 - 704.0 * yb6 - 9576.0 * yb8 - 7596.0 * yb10 + yb7 * (6656.0 - 1692.0 * ln2) - yb3 * (1268.0 + 57.0 * ln2)
                    + 18.0 * yb5 * (-300.0 + 59.0 * ln2) + 3.0 * yb11 * (1852.0 + 87.0 * ln2) + 2.0 * yb9 * (5524.0 + 213.0 * ln2)) + 8.0 * xb6 * yb * (-1.0 + yb2) * (2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2)
                    + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0))) + 8.0 * xb10 * yb * (-1.0 + yb2) * (2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                - 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0)) + 3.0 * yb5 * (1.0 + log(128.0))) - 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0))
                    + 3.0 * yb5 * (1.0 + log(128.0)))) - vb * xb2 * (4.0 * xb6 * (24.0 - 154.0 * yb + 225.0 * yb2 + 794.0 * yb4 - 668.0 * yb6 - 6930.0 * yb8 - 5733.0 * yb10 + yb7 * (4520.0 - 9792.0 * ln2) - yb3 * (941.0 + 312.0 * ln2) + 18.0 * yb5 * (-173.0 + 344.0 * ln2)
                    + 3.0 * yb11 * (1271.0 + 552.0 * ln2) + 4.0 * yb9 * (2041.0 + 564.0 * ln2)) + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2)
                    + yb8 * (-381.0 + 648.0 * ln2) + yb6 * (-521.0 + 1080.0 * ln2)) + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2) + yb8 * (-381.0 + 648.0 * ln2)
                    + yb6 * (-521.0 + 1080.0 * ln2)) + xb4 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2) + 3.0 * yb11 * (493.0 + 1512.0 * ln2)
                    + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + xb8 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2)
                    + 3.0 * yb11 * (493.0 + 1512.0 * ln2) + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + 3.0 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + ln256) + yb2 * (1.0 + ln256))
                + 3.0 * xb12 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + ln256) + yb2 * (1.0 + ln256)));
            const complex<double> logs12 = -4.0 * xb2 * (3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 6.0 * ln2) + 8.0 * yb3 * (-1.0 + 18.0 * ln2) + yb5 * (-3.0 + 54.0 * ln2))
                + 2.0 * xb6 * (8.0 - 52.0 * yb + 75.0 * yb2 + 290.0 * yb4 - 176.0 * yb6 - 2394.0 * yb8 - 1899.0 * yb10 + yb7 * (1664.0 - 2448.0 * ln2) - yb3 * (317.0 + 78.0 * ln2) + 18.0 * yb5 * (-75.0 + 86.0 * ln2) + 3.0 * yb11 * (463.0 + 138.0 * ln2)
                    + yb9 * (2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + 3.0 * yb2 * (8.0 + 33.0 * ln2) + yb8 * (708.0 + 567.0 * ln2) - 3.0 * yb4 * (-632.0 + 645.0 * ln2) + yb6 * (952.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                + vb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (32.0 - 208.0 * yb + 300.0 * yb2 + 1160.0 * yb4 - 704.0 * yb6 - 9576.0 * yb8 - 7596.0 * yb10 + yb7 * (6656.0 - 1692.0 * ln2) - yb3 * (1268.0 + 57.0 * ln2) + 18.0 * yb5 * (-300.0 + 59.0 * ln2) + 3.0 * yb11 * (1852.0 + 87.0 * ln2)
                    + 2.0 * yb9 * (5524.0 + 213.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (2.0 - 76.0 * yb3 - 216.0 * yb5 + 36.0 * yb7 + yb4 * (948.0 - 60.0 * ln2) + yb6 * (476.0 + 39.0 * ln2) + yb2 * (12.0 + log(8.0)) + 6.0 * yb8 * (59.0 + log(8.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0)) + 3.0 * yb5 * (1.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + yb3 * (8.0 + 80.0 * ln2) - yb * (3.0 + log(32.0))
                    + 3.0 * yb5 * (1.0 + log(128.0)))) + vb * xb2 * (4.0 * xb6 * (24.0 - 154.0 * yb + 225.0 * yb2 + 794.0 * yb4 - 668.0 * yb6 - 6930.0 * yb8 - 5733.0 * yb10 + yb7 * (4520.0 - 9792.0 * ln2) - yb3 * (941.0 + 312.0 * ln2) + 18.0 * yb5 * (-173.0 + 344.0 * ln2)
                    + 3.0 * yb11 * (1271.0 + 552.0 * ln2) + 4.0 * yb9 * (2041.0 + 564.0 * ln2)) + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2)
                    + yb8 * (-381.0 + 648.0 * ln2) + yb6 * (-521.0 + 1080.0 * ln2)) + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 72.0 * ln2) - 3.0 * yb4 * (283.0 + 600.0 * ln2) + yb8 * (-381.0 + 648.0 * ln2)
                    + yb6 * (-521.0 + 1080.0 * ln2)) + xb4 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2) + 3.0 * yb11 * (493.0 + 1512.0 * ln2)
                    + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + xb8 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb7 * (2288.0 - 25632.0 * ln2) + yb3 * (505.0 - 792.0 * ln2)
                    + 3.0 * yb11 * (493.0 + 1512.0 * ln2) + 6.0 * yb5 * (-1415.0 + 2712.0 * ln2) + yb9 * (-4054.0 + 5616.0 * ln2)) + 3.0 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + ln256) + yb2 * (1.0 + ln256))
                + 3.0 * xb12 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + ln256) + yb2 * (1.0 + ln256)));
            const complex<double> logs13 = 4.0 * xb2 * (2.0 * xb6 * (-8.0 + 52.0 * yb - 75.0 * yb2 - 290.0 * yb4 + 176.0 * yb6 + 2394.0 * yb8 + 1899.0 * yb10 + yb3 * (317.0 - 78.0 * ln2) + 18.0 * yb5 * (75.0 + 86.0 * ln2) + 3.0 * yb11 * (-463.0 + 138.0 * ln2) - 16.0 * yb7 * (104.0 + 153.0 * ln2)
                    + yb9 * (-2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (-4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (-4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + 3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2) - 3.0 * yb * (1.0 + ln4)) + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2)
                    - 3.0 * yb * (1.0 + ln4)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                - vb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (-32.0 + 208.0 * yb - 300.0 * yb2 - 1160.0 * yb4 + 704.0 * yb6 + 9576.0 * yb8 + 7596.0 * yb10 + yb3 * (1268.0 - 57.0 * ln2) + 18.0 * yb5 * (300.0 + 59.0 * ln2) + 3.0 * yb11 * (-1852.0 + 87.0 * ln2) + 2.0 * yb9 * (-5524.0 + 213.0 * ln2)
                    - 4.0 * yb7 * (1664.0 + 423.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (-2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2) + 3.0 * yb5 * (-1.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2)
                    + 3.0 * yb5 * (-1.0 + log(128.0)))) + vb * xb2 * (-2.0 * xb2 * yb * (-1.0 + yb2) * (2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2)
                    + yb6 * (521.0 + 1080.0 * ln2)) - 2.0 * xb10 * yb * (-1.0 + yb2) * (2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2) + yb6 * (521.0 + 1080.0 * ln2))
                - 4.0 * xb6 * (-24.0 + 154.0 * yb - 225.0 * yb2 - 794.0 * yb4 + 668.0 * yb6 + 6930.0 * yb8 + 5733.0 * yb10 + yb3 * (941.0 - 312.0 * ln2) + 18.0 * yb5 * (173.0 + 344.0 * ln2) + 3.0 * yb11 * (-1271.0 + 552.0 * ln2) + 4.0 * yb9 * (-2041.0 + 564.0 * ln2)
                    - 8.0 * yb7 * (565.0 + 1224.0 * ln2)) + xb4 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb11 * (1479.0 - 4536.0 * ln2) + yb3 * (505.0 + 792.0 * ln2) + 16.0 * yb7 * (143.0 + 1602.0 * ln2)
                    - 6.0 * yb5 * (1415.0 + 2712.0 * ln2) - 2.0 * yb9 * (2027.0 + 2808.0 * ln2)) + xb8 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb11 * (1479.0 - 4536.0 * ln2) + yb3 * (505.0 + 792.0 * ln2)
                    + 16.0 * yb7 * (143.0 + 1602.0 * ln2) - 6.0 * yb5 * (1415.0 + 2712.0 * ln2) - 2.0 * yb9 * (2027.0 + 2808.0 * ln2)) - 3.0 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 + yb2 * (-1.0 + ln256) + yb * (2.0 + ln256))
                - 3.0 * xb12 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 + yb2 * (-1.0 + ln256) + yb * (2.0 + ln256)));
            const complex<double> logs14 = -4.0 * xb2 * (2.0 * xb6 * (-8.0 + 52.0 * yb - 75.0 * yb2 - 290.0 * yb4 + 176.0 * yb6 + 2394.0 * yb8 + 1899.0 * yb10 + yb3 * (317.0 - 78.0 * ln2) + 18.0 * yb5 * (75.0 + 86.0 * ln2) + 3.0 * yb11 * (-463.0 + 138.0 * ln2) - 16.0 * yb7 * (104.0 + 153.0 * ln2)
                    + yb9 * (-2762.0 + 564.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (-4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + xb8 * yb * (-1.0 + yb2) * (-4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + 3.0 * yb2 * (-8.0 + 33.0 * ln2) + yb8 * (-708.0 + 567.0 * ln2) - 3.0 * yb4 * (632.0 + 645.0 * ln2) + yb6 * (-952.0 + 1269.0 * ln2))
                + 3.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2) - 3.0 * yb * (1.0 + ln4)) + 3.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 + 8.0 * yb3 * (1.0 + 18.0 * ln2) + yb5 * (3.0 + 54.0 * ln2)
                    - 3.0 * yb * (1.0 + ln4)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)))
                + vb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (-32.0 + 208.0 * yb - 300.0 * yb2 - 1160.0 * yb4 + 704.0 * yb6 + 9576.0 * yb8 + 7596.0 * yb10 + yb3 * (1268.0 - 57.0 * ln2) + 18.0 * yb5 * (300.0 + 59.0 * ln2) + 3.0 * yb11 * (-1852.0 + 87.0 * ln2) + 2.0 * yb9 * (-5524.0 + 213.0 * ln2)
                    - 4.0 * yb7 * (1664.0 + 423.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (-2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 76.0 * yb3 + 216.0 * yb5 - 36.0 * yb7 + yb6 * (-476.0 + 39.0 * ln2) + 6.0 * yb8 * (-59.0 + log(8.0)) + yb2 * (-12.0 + log(8.0)) - 12.0 * yb4 * (79.0 + log(32.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2) + 3.0 * yb5 * (-1.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 + yb * (3.0 - 5.0 * ln2) + yb3 * (-8.0 + 80.0 * ln2)
                    + 3.0 * yb5 * (-1.0 + log(128.0)))) + vb * xb2 * (2.0 * xb2 * yb * (-1.0 + yb2) * (2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2)
                    + yb6 * (521.0 + 1080.0 * ln2)) + 2.0 * xb10 * yb * (-1.0 + yb2) * (2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb4 * (849.0 - 1800.0 * ln2) + yb2 * (39.0 + 72.0 * ln2) + yb8 * (381.0 + 648.0 * ln2) + yb6 * (521.0 + 1080.0 * ln2))
                + 4.0 * xb6 * (-24.0 + 154.0 * yb - 225.0 * yb2 - 794.0 * yb4 + 668.0 * yb6 + 6930.0 * yb8 + 5733.0 * yb10 + yb3 * (941.0 - 312.0 * ln2) + 18.0 * yb5 * (173.0 + 344.0 * ln2) + 3.0 * yb11 * (-1271.0 + 552.0 * ln2) + 4.0 * yb9 * (-2041.0 + 564.0 * ln2)
                    - 8.0 * yb7 * (565.0 + 1224.0 * ln2)) + xb4 * (16.0 - 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 - yb3 * (505.0 + 792.0 * ln2) + 3.0 * yb11 * (-493.0 + 1512.0 * ln2) - 16.0 * yb7 * (143.0 + 1602.0 * ln2)
                    + 6.0 * yb5 * (1415.0 + 2712.0 * ln2) + yb9 * (4054.0 + 5616.0 * ln2)) + xb8 * (16.0 - 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 - yb3 * (505.0 + 792.0 * ln2) + 3.0 * yb11 * (-493.0 + 1512.0 * ln2)
                    - 16.0 * yb7 * (143.0 + 1602.0 * ln2) + 6.0 * yb5 * (1415.0 + 2712.0 * ln2) + yb9 * (4054.0 + 5616.0 * ln2)) + 3.0 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 + yb2 * (-1.0 + ln256) + yb * (2.0 + ln256))
                + 3.0 * xb12 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (-1.0 + yb2 * (-1.0 + ln256) + yb * (2.0 + ln256)));
            const complex<double> logs15 = 4.0 * tb * xb2 * (16.0 * vb * xb2 * power_of<2>(myi + xb) * yb * (6.0 * myi * xb * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) * ln2 + 6.0 * myi * xb9 * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) * ln2
                    - 8.0 * myi * xb3 * (-1.0 + yb2) * (yb4 * (18.0 - 314.0 * ln2) + yb2 * (3.0 - 5.0 * ln2) + ln2 + 327.0 * yb8 * ln2 + yb6 * (27.0 + 455.0 * ln2))
                    - 8.0 * myi * xb7 * (-1.0 + yb2) * (yb4 * (18.0 - 314.0 * ln2) + yb2 * (3.0 - 5.0 * ln2) + ln2 + 327.0 * yb8 * ln2 + yb6 * (27.0 + 455.0 * ln2))
                    + 2.0 * xb4 * (yb4 * (46.0 - 621.0 * ln2) + 34.0 * ln2 + 108.0 * yb10 * (2.0 + 17.0 * ln2) + yb2 * (14.0 + 111.0 * ln2) - 3.0 * yb8 * (66.0 + 763.0 * ln2) - yb6 * (78.0 + 3167.0 * ln2))
                    - 2.0 * xb6 * (yb4 * (46.0 - 621.0 * ln2) + 34.0 * ln2 + 108.0 * yb10 * (2.0 + 17.0 * ln2) + yb2 * (14.0 + 111.0 * ln2) - 3.0 * yb8 * (66.0 + 763.0 * ln2) - yb6 * (78.0 + 3167.0 * ln2))
                    - 4.0 * myi * xb5 * (yb6 * (60.0 - 4851.0 * ln2) - 36.0 * ln2 - yb2 * (20.0 + 543.0 * ln2) + 6.0 * yb10 * (-36.0 + 1309.0 * ln2) - yb4 * (76.0 + 1857.0 * ln2) + yb8 * (252.0 + 3529.0 * ln2))
                    - yb2 * (-51.0 * yb2 * ln2 + 63.0 * yb4 * ln2 - 33.0 * yb6 * ln2 + 18.0 * yb8 * ln2 + log(8.0)) + xb10 * yb2 * (-51.0 * yb2 * ln2 + 63.0 * yb4 * ln2 - 33.0 * yb6 * ln2 + 18.0 * yb8 * ln2 + log(8.0))
                    + xb2 * (yb6 * (36.0 - 125.0 * ln2) + yb2 * (12.0 - 37.0 * ln2) - 1338.0 * yb10 * ln2 - yb8 * (108.0 + 385.0 * ln2) + 3.0 * yb4 * (20.0 + 627.0 * ln2) + log(16.0))
                    + xb8 * (-1.0 + yb2) * (yb2 * (12.0 - 33.0 * ln2) + 1338.0 * yb8 * ln2 + 24.0 * yb4 * (3.0 + 77.0 * ln2) + yb6 * (108.0 + 1723.0 * ln2) + log(16.0)))
                - 4.0 * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 16.0 * myi * xb3 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2
                    + 16.0 * myi * xb9 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2 + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * ln2
                    - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * ln2 - xb4 * (yb5 * (544.0 - 22620.0 * ln2) + yb3 * (128.0 - 339.0 * ln2) + 16.0 * ln2 + 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2
                    + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 - 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 6.0 * yb7 * (-16.0 + 2909.0 * ln2) + yb11 * (864.0 + 3741.0 * ln2))
                    - xb8 * (yb5 * (544.0 - 22620.0 * ln2) + yb3 * (128.0 - 339.0 * ln2) + 16.0 * ln2 + 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2
                    - 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 6.0 * yb7 * (-16.0 + 2909.0 * ln2) + yb11 * (864.0 + 3741.0 * ln2)) + 4.0 * xb6 * (yb7 * (84.0 - 27874.0 * ln2) - 8.0 * ln2 - 22.0 * yb * ln2 - 75.0 * yb2 * ln2 - 366.0 * yb4 * ln2 + 36.0 * yb6 * ln2
                    + 2646.0 * yb8 * ln2 + 1863.0 * yb10 * ln2 + 27.0 * yb11 * (-16.0 + 1235.0 * ln2) - 4.0 * yb5 * (53.0 + 1596.0 * ln2) - yb3 * (52.0 + 1623.0 * ln2) + yb9 * (612.0 + 6654.0 * ln2))
                    + xb2 * yb * (-4.0 * ln2 - 164.0 * yb3 * ln2 - 328.0 * yb5 * ln2 + 612.0 * yb7 * ln2 - 126.0 * yb9 * ln2 + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2) - 4.0 * yb6 * (18.0 + 391.0 * ln2)
                    - yb2 * (24.0 + ln4) + yb * ln64) + xb10 * yb * (-4.0 * ln2 - 164.0 * yb3 * ln2 - 328.0 * yb5 * ln2 + 612.0 * yb7 * ln2 - 126.0 * yb9 * ln2 + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2)
                    - 4.0 * yb6 * (18.0 + 391.0 * ln2) - yb2 * (24.0 + ln4) + yb * ln64) + (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0)
                    + yb2 * ln64) + xb12 * (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0) + yb2 * ln64))
                + vb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 + 4.0 * xb6 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2) + 32.0 * ln2 - 223.0 * yb * ln2
                    + 294.0 * yb2 * ln2 + 1818.0 * yb4 * ln2 + 534.0 * yb6 * ln2 - 11826.0 * yb8 * ln2 - 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2))
                    + 4.0 * xb10 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2) + 32.0 * ln2 - 223.0 * yb * ln2 + 294.0 * yb2 * ln2 + 1818.0 * yb4 * ln2 + 534.0 * yb6 * ln2 - 11826.0 * yb8 * ln2
                    - 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2)) - 2.0 * xb8 * (yb7 * (240.0 - 128218.0 * ln2) - 144.0 * ln2 + 824.0 * yb * ln2 - 1353.0 * yb2 * ln2 - 6430.0 * yb4 * ln2 + 952.0 * yb6 * ln2
                    + 47070.0 * yb8 * ln2 + 33633.0 * yb10 * ln2 - yb3 * (80.0 + 1599.0 * ln2) - 12.0 * yb9 * (-84.0 + 2167.0 * ln2) - 4.0 * yb5 * (76.0 + 2895.0 * ln2) + 9.0 * yb11 * (-96.0 + 12137.0 * ln2))
                    - 4.0 * xb4 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) + 18.0 * yb * ln2 + 51.0 * yb2 * ln2 - 186.0 * yb4 * ln2 - 756.0 * yb6 * ln2 + 54.0 * yb8 * ln2 - 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2)
                    + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2) + log(16.0)) - 4.0 * xb12 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) + 18.0 * yb * ln2 + 51.0 * yb2 * ln2 - 186.0 * yb4 * ln2 - 756.0 * yb6 * ln2
                    + 54.0 * yb8 * ln2 - 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2) + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2) + log(16.0))
                    + 4.0 * xb2 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 + 32.0 * yb3 * ln2 + 54.0 * yb5 * ln2 + 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2 + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2) + yb * ln64)
                    + 4.0 * xb14 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 + 32.0 * yb3 * ln2 + 54.0 * yb5 * ln2 + 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2 + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2) + yb * ln64)
                    + (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0) + yb2 * ln64)
                    + xb16 * (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0) + yb2 * ln64)))
                + tb2 * ((-vb2) * power_of<2>(myi + xb - myi * xb2 - xb3) * yb * (6.0 * myi * xb * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) * ln2 + 6.0 * myi * xb13 * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) * ln2
                    + 3.0 * xb14 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 - 3.0 * xb2 * yb2 * (-1.0 + yb2) * (4.0 - 50.0 * ln2 + 165.0 * yb6 * ln2 + 4.0 * yb4 * (9.0 + 53.0 * ln2) + yb2 * (24.0 + 73.0 * ln2))
                    + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (4.0 - 50.0 * ln2 + 165.0 * yb6 * ln2 + 4.0 * yb4 * (9.0 + 53.0 * ln2) + yb2 * (24.0 + 73.0 * ln2)) - 4.0 * myi * xb3 * yb2 * (-1.0 + yb2) * (6.0 + yb2 * (36.0 - 1399.0 * ln2) - 76.0 * ln2 + 273.0 * yb6 * ln2
                    + yb4 * (54.0 + 290.0 * ln2)) - 4.0 * myi * xb11 * yb2 * (-1.0 + yb2) * (6.0 + yb2 * (36.0 - 1399.0 * ln2) - 76.0 * ln2 + 273.0 * yb6 * ln2 + yb4 * (54.0 + 290.0 * ln2))
                    + xb4 * yb2 * (-1.0 + yb2) * (-4.0 + yb2 * (24.0 - 12455.0 * ln2) + 22.0 * ln2 + 4.0 * yb4 * (63.0 + 55.0 * ln2) + 3.0 * yb6 * (144.0 + 407.0 * ln2))
                    - xb10 * yb2 * (-1.0 + yb2) * (-4.0 + yb2 * (24.0 - 12455.0 * ln2) + 22.0 * ln2 + 4.0 * yb4 * (63.0 + 55.0 * ln2) + 3.0 * yb6 * (144.0 + 407.0 * ln2))
                    + 8.0 * myi * xb7 * (yb6 * (78.0 - 11161.0 * ln2) + yb8 * (198.0 - 10415.0 * ln2) + 224.0 * ln2 + 3.0 * yb10 * (-72.0 + 203.0 * ln2) + 2.0 * yb2 * (-7.0 + 510.0 * ln2) + yb4 * (-46.0 + 3339.0 * ln2))
                    + xb6 * (yb8 * (1080.0 - 44481.0 * ln2) + yb6 * (504.0 - 6451.0 * ln2) + 896.0 * ln2 - 9.0 * yb10 * (144.0 + 3823.0 * ln2) + 3.0 * yb4 * (-72.0 + 4295.0 * ln2) + yb2 * (-72.0 + 6022.0 * ln2))
                    + xb8 * (yb2 * (72.0 - 6022.0 * ln2) - 896.0 * ln2 + 9.0 * yb10 * (144.0 + 3823.0 * ln2) - 3.0 * yb4 * (-72.0 + 4295.0 * ln2) + yb6 * (-504.0 + 6451.0 * ln2) + 3.0 * yb8 * (-360.0 + 14827.0 * ln2))
                    - 2.0 * myi * xb5 * yb2 * (-1.0 + yb2) * (16.0 + 718.0 * ln2 + 4.0 * yb4 * (-36.0 + 5107.0 * ln2) + 3.0 * yb6 * (-144.0 + 5795.0 * ln2) + yb2 * (48.0 + 22861.0 * ln2))
                    - 2.0 * myi * xb9 * yb2 * (-1.0 + yb2) * (16.0 + 718.0 * ln2 + 4.0 * yb4 * (-36.0 + 5107.0 * ln2) + 3.0 * yb6 * (-144.0 + 5795.0 * ln2) + yb2 * (48.0 + 22861.0 * ln2))
                    + yb2 * (9.0 * yb2 * ln2 - 15.0 * yb4 * ln2 + 27.0 * yb6 * ln2 - 27.0 * yb8 * ln2 + ln64)) + 4.0 * xb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                    + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) - ln2 - 4.0 * yb * ln2 + yb2 * ln2 + 9.0 * yb4 * ln2 - 9.0 * yb6 * ln2
                    + 39.0 * yb7 * ln2 + yb5 * (9.0 + 86.0 * ln2)) + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) - ln2 - 4.0 * yb * ln2 + yb2 * ln2 + 9.0 * yb4 * ln2 - 9.0 * yb6 * ln2 + 39.0 * yb7 * ln2
                    + yb5 * (9.0 + 86.0 * ln2)) + 4.0 * xb6 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) - 16.0 * ln2 - 112.0 * yb * ln2 - 147.0 * yb2 * ln2 - 890.0 * yb4 * ln2 - 232.0 * yb6 * ln2 + 5850.0 * yb8 * ln2 + 3627.0 * yb10 * ln2
                    + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2)) + 4.0 * xb10 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) - 16.0 * ln2 - 112.0 * yb * ln2 - 147.0 * yb2 * ln2 - 890.0 * yb4 * ln2
                    - 232.0 * yb6 * ln2 + 5850.0 * yb8 * ln2 + 3627.0 * yb10 * ln2 + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2))
                    - 2.0 * xb8 * (yb7 * (120.0 - 65749.0 * ln2) + yb9 * (504.0 - 15767.0 * ln2) + 64.0 * ln2 + 464.0 * yb * ln2 + 600.0 * yb2 * ln2 + 2928.0 * yb4 * ln2 - 288.0 * yb6 * ln2 - 21168.0 * yb8 * ln2 - 14904.0 * yb10 * ln2
                    - 2.0 * yb3 * (20.0 + 239.0 * ln2) - yb5 * (152.0 + 4461.0 * ln2) + yb11 * (-432.0 + 53223.0 * ln2)) - 4.0 * xb4 * yb * (-1.0 + yb2) * (-158.0 * yb3 * ln2 - 486.0 * yb5 * ln2 + 126.0 * yb7 * ln2 + 2.0 * yb2 * (-5.0 + 63.0 * ln2)
                    + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0) + yb * ln64) - 4.0 * xb12 * yb * (-1.0 + yb2) * (-158.0 * yb3 * ln2 - 486.0 * yb5 * ln2 + 126.0 * yb7 * ln2
                    + 2.0 * yb2 * (-5.0 + 63.0 * ln2) + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0) + yb * ln64))
                - 4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 - 4.0 * xb4 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) - 4.0 * ln2 + 18.0 * yb * ln2 - 51.0 * yb2 * ln2 + 186.0 * yb4 * ln2
                    + 756.0 * yb6 * ln2 - 54.0 * yb8 * ln2 + 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2) + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2))
                    - 4.0 * xb12 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) - 4.0 * ln2 + 18.0 * yb * ln2 - 51.0 * yb2 * ln2 + 186.0 * yb4 * ln2 + 756.0 * yb6 * ln2 - 54.0 * yb8 * ln2 + 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2)
                    + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2)) + 4.0 * xb2 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 - 6.0 * yb * ln2 - 32.0 * yb3 * ln2 - 54.0 * yb5 * ln2 - 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2
                    + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2)) + 4.0 * xb14 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 - 6.0 * yb * ln2 - 32.0 * yb3 * ln2 - 54.0 * yb5 * ln2 - 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2
                    + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2)) + 4.0 * xb6 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2) - 32.0 * ln2 - 223.0 * yb * ln2 - 294.0 * yb2 * ln2 - 1818.0 * yb4 * ln2
                    - 534.0 * yb6 * ln2 + 11826.0 * yb8 * ln2 + 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2)) + 4.0 * xb10 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2)
                    - 32.0 * ln2 - 223.0 * yb * ln2 - 294.0 * yb2 * ln2 - 1818.0 * yb4 * ln2 - 534.0 * yb6 * ln2 + 11826.0 * yb8 * ln2 + 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2))
                    - 2.0 * xb8 * (yb7 * (240.0 - 128218.0 * ln2) + 144.0 * ln2 + 824.0 * yb * ln2 + 1353.0 * yb2 * ln2 + 6430.0 * yb4 * ln2 - 952.0 * yb6 * ln2 - 47070.0 * yb8 * ln2 - 33633.0 * yb10 * ln2 - yb3 * (80.0 + 1599.0 * ln2)
                    - 12.0 * yb9 * (-84.0 + 2167.0 * ln2) - 4.0 * yb5 * (76.0 + 2895.0 * ln2) + 9.0 * yb11 * (-96.0 + 12137.0 * ln2)) + yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2
                    + 45.0 * yb9 * ln2 - log(8.0) - yb * log(8.0) + yb2 * ln64) + xb16 * yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2 + 45.0 * yb9 * ln2 - log(8.0)
                    - yb * log(8.0) + yb2 * ln64))) + 4.0 * xb2 * (vb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                    + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) + ln2 - 4.0 * yb * ln2 - yb2 * ln2 - 9.0 * yb4 * ln2 + 9.0 * yb6 * ln2
                    + 39.0 * yb7 * ln2 + yb5 * (9.0 + 86.0 * ln2)) + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) + ln2 - 4.0 * yb * ln2 - yb2 * ln2 - 9.0 * yb4 * ln2 + 9.0 * yb6 * ln2 + 39.0 * yb7 * ln2
                    + yb5 * (9.0 + 86.0 * ln2)) + 4.0 * xb6 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) + 16.0 * ln2 - 112.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2
                    + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2)) + 4.0 * xb10 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) + 16.0 * ln2 - 112.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2
                    + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2))
                    - 2.0 * xb8 * (yb7 * (120.0 - 65749.0 * ln2) + yb9 * (504.0 - 15767.0 * ln2) - 64.0 * ln2 + 464.0 * yb * ln2 - 600.0 * yb2 * ln2 - 2928.0 * yb4 * ln2 + 288.0 * yb6 * ln2 + 21168.0 * yb8 * ln2 + 14904.0 * yb10 * ln2
                    - 2.0 * yb3 * (20.0 + 239.0 * ln2) - yb5 * (152.0 + 4461.0 * ln2) + yb11 * (-432.0 + 53223.0 * ln2)) - 4.0 * xb4 * yb * (-1.0 + yb2) * (-6.0 * yb * ln2 + 158.0 * yb3 * ln2 + 486.0 * yb5 * ln2 - 126.0 * yb7 * ln2 + 2.0 * yb2 * (-5.0 + 63.0 * ln2)
                    + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0)) - 4.0 * xb12 * yb * (-1.0 + yb2) * (-6.0 * yb * ln2 + 158.0 * yb3 * ln2 + 486.0 * yb5 * ln2 - 126.0 * yb7 * ln2
                    + 2.0 * yb2 * (-5.0 + 63.0 * ln2) + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0)))
                - 4.0 * xb2 * power_of<2>(myi + xb) * yb * (-1.0 + yb2) * (6.0 * myi * xb * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) * ln2 + 6.0 * myi * xb9 * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) * ln2 - 3.0 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6) * ln2
                    - 3.0 * xb2 * yb2 * (1.0 + 3.0 * yb2) * (4.0 - 22.0 * ln2 + 69.0 * yb4 * ln2 + yb2 * (12.0 + 61.0 * ln2)) + 3.0 * xb8 * yb2 * (1.0 + 3.0 * yb2) * (4.0 - 22.0 * ln2 + 69.0 * yb4 * ln2 + yb2 * (12.0 + 61.0 * ln2))
                    - 8.0 * myi * xb3 * yb2 * (3.0 + yb2 * (18.0 - 788.0 * ln2) - 11.0 * ln2 + 150.0 * yb6 * ln2 + yb4 * (27.0 + 217.0 * ln2)) - 8.0 * myi * xb7 * yb2 * (3.0 + yb2 * (18.0 - 788.0 * ln2) - 11.0 * ln2 + 150.0 * yb6 * ln2 + yb4 * (27.0 + 217.0 * ln2))
                    + 2.0 * xb4 * (1.0 + 3.0 * yb2) * (16.0 * ln2 + 2.0 * yb2 * (-7.0 + 82.0 * ln2) + yb4 * (-18.0 + 755.0 * ln2) + yb6 * (72.0 + 957.0 * ln2)) - 2.0 * xb6 * (1.0 + 3.0 * yb2) * (16.0 * ln2 + 2.0 * yb2 * (-7.0 + 82.0 * ln2) + yb4 * (-18.0 + 755.0 * ln2)
                    + yb6 * (72.0 + 957.0 * ln2)) - 4.0 * myi * xb5 * (-16.0 * ln2 + 10.0 * yb2 * (2.0 + 21.0 * ln2) + yb4 * (96.0 + 717.0 * ln2) + 4.0 * yb6 * (9.0 + 1808.0 * ln2) + 3.0 * yb8 * (-72.0 + 2155.0 * ln2))
                    + xb10 * yb2 * (15.0 * yb2 * ln2 + 27.0 * yb6 * ln2 + ln64)) + 4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                    - 16.0 * myi * xb3 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2 + 16.0 * myi * xb9 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2 + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * 
                    ln2 - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * ln2 + xb4 * (yb7 * (96.0 - 17454.0 * ln2) + 16.0 * ln2 - 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2
                    - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 + yb3 * (-128.0 + 339.0 * ln2) - 3.0 * yb11 * (288.0 + 1247.0 * ln2) + 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 4.0 * yb5 * (-136.0 + 5655.0 * ln2))
                    + xb8 * (yb7 * (96.0 - 17454.0 * ln2) + 16.0 * ln2 - 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 + yb3 * (-128.0 + 339.0 * ln2)
                    - 3.0 * yb11 * (288.0 + 1247.0 * ln2) + 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 4.0 * yb5 * (-136.0 + 5655.0 * ln2)) + xb2 * yb * (-4.0 * ln2 - 6.0 * yb * ln2 + 164.0 * yb3 * ln2 + 328.0 * yb5 * ln2 - 612.0 * yb7 * ln2 + 126.0 * yb9 * ln2
                    + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2) - 4.0 * yb6 * (18.0 + 391.0 * ln2) - yb2 * (24.0 + ln4))
                    + xb10 * yb * (-4.0 * ln2 - 6.0 * yb * ln2 + 164.0 * yb3 * ln2 + 328.0 * yb5 * ln2 - 612.0 * yb7 * ln2 + 126.0 * yb9 * ln2 + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2)
                    - 4.0 * yb6 * (18.0 + 391.0 * ln2) - yb2 * (24.0 + ln4)) + yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2 + 45.0 * yb9 * ln2 - log(8.0) - yb * log(8.0)
                    + yb2 * ln64) + xb12 * yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2 + 45.0 * yb9 * ln2 - log(8.0) - yb * log(8.0) + yb2 * ln64)
                    + 4.0 * xb6 * (yb7 * (84.0 - 27874.0 * ln2) - 22.0 * yb * ln2 + 75.0 * yb2 * ln2 + 366.0 * yb4 * ln2 - 36.0 * yb6 * ln2 - 2646.0 * yb8 * ln2 - 1863.0 * yb10 * ln2 + 27.0 * yb11 * (-16.0 + 1235.0 * ln2) - 4.0 * yb5 * (53.0 + 1596.0 * ln2)
                    - yb3 * (52.0 + 1623.0 * ln2) + yb9 * (612.0 + 6654.0 * ln2) + ln256)));
            const complex<double> logs16 = 4.0 * tb * xb2 * (16.0 * vb * xb2 * power_of<2>(-myi + xb) * yb * (-6.0 * myi * xb * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) * ln2 - 6.0 * myi * xb9 * yb2 * (3.0 - 7.0 * yb2 + 27.0 * yb4 - 29.0 * yb6 + 6.0 * yb8) * ln2
                    + 8.0 * myi * xb3 * (-1.0 + yb2) * (yb4 * (18.0 - 314.0 * ln2) + yb2 * (3.0 - 5.0 * ln2) + ln2 + 327.0 * yb8 * ln2 + yb6 * (27.0 + 455.0 * ln2))
                    + 8.0 * myi * xb7 * (-1.0 + yb2) * (yb4 * (18.0 - 314.0 * ln2) + yb2 * (3.0 - 5.0 * ln2) + ln2 + 327.0 * yb8 * ln2 + yb6 * (27.0 + 455.0 * ln2))
                    + 2.0 * xb4 * (yb4 * (46.0 - 621.0 * ln2) + 34.0 * ln2 + 108.0 * yb10 * (2.0 + 17.0 * ln2) + yb2 * (14.0 + 111.0 * ln2) - 3.0 * yb8 * (66.0 + 763.0 * ln2) - yb6 * (78.0 + 3167.0 * ln2))
                    - 2.0 * xb6 * (yb4 * (46.0 - 621.0 * ln2) + 34.0 * ln2 + 108.0 * yb10 * (2.0 + 17.0 * ln2) + yb2 * (14.0 + 111.0 * ln2) - 3.0 * yb8 * (66.0 + 763.0 * ln2) - yb6 * (78.0 + 3167.0 * ln2))
                    + 4.0 * myi * xb5 * (yb6 * (60.0 - 4851.0 * ln2) - 36.0 * ln2 - yb2 * (20.0 + 543.0 * ln2) + 6.0 * yb10 * (-36.0 + 1309.0 * ln2) - yb4 * (76.0 + 1857.0 * ln2) + yb8 * (252.0 + 3529.0 * ln2))
                    - yb2 * (-51.0 * yb2 * ln2 + 63.0 * yb4 * ln2 - 33.0 * yb6 * ln2 + 18.0 * yb8 * ln2 + log(8.0)) + xb10 * yb2 * (-51.0 * yb2 * ln2 + 63.0 * yb4 * ln2 - 33.0 * yb6 * ln2 + 18.0 * yb8 * ln2 + log(8.0))
                    + xb2 * (yb6 * (36.0 - 125.0 * ln2) + yb2 * (12.0 - 37.0 * ln2) - 1338.0 * yb10 * ln2 - yb8 * (108.0 + 385.0 * ln2) + 3.0 * yb4 * (20.0 + 627.0 * ln2) + log(16.0))
                    + xb8 * (-1.0 + yb2) * (yb2 * (12.0 - 33.0 * ln2) + 1338.0 * yb8 * ln2 + 24.0 * yb4 * (3.0 + 77.0 * ln2) + yb6 * (108.0 + 1723.0 * ln2) + log(16.0)))
                - 4.0 * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 + 16.0 * myi * xb3 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2
                    - 16.0 * myi * xb9 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2 - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * ln2
                    + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * ln2 - xb4 * (yb5 * (544.0 - 22620.0 * ln2) + yb3 * (128.0 - 339.0 * ln2) + 16.0 * ln2 + 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2
                    + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 - 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 6.0 * yb7 * (-16.0 + 2909.0 * ln2) + yb11 * (864.0 + 3741.0 * ln2))
                    - xb8 * (yb5 * (544.0 - 22620.0 * ln2) + yb3 * (128.0 - 339.0 * ln2) + 16.0 * ln2 + 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2
                    - 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 6.0 * yb7 * (-16.0 + 2909.0 * ln2) + yb11 * (864.0 + 3741.0 * ln2)) + 4.0 * xb6 * (yb7 * (84.0 - 27874.0 * ln2) - 8.0 * ln2 - 22.0 * yb * ln2 - 75.0 * yb2 * ln2 - 366.0 * yb4 * ln2 + 36.0 * yb6 * ln2
                    + 2646.0 * yb8 * ln2 + 1863.0 * yb10 * ln2 + 27.0 * yb11 * (-16.0 + 1235.0 * ln2) - 4.0 * yb5 * (53.0 + 1596.0 * ln2) - yb3 * (52.0 + 1623.0 * ln2) + yb9 * (612.0 + 6654.0 * ln2))
                    + xb2 * yb * (-4.0 * ln2 - 164.0 * yb3 * ln2 - 328.0 * yb5 * ln2 + 612.0 * yb7 * ln2 - 126.0 * yb9 * ln2 + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2) - 4.0 * yb6 * (18.0 + 391.0 * ln2)
                    - yb2 * (24.0 + ln4) + yb * ln64) + xb10 * yb * (-4.0 * ln2 - 164.0 * yb3 * ln2 - 328.0 * yb5 * ln2 + 612.0 * yb7 * ln2 - 126.0 * yb9 * ln2 + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2)
                    - 4.0 * yb6 * (18.0 + 391.0 * ln2) - yb2 * (24.0 + ln4) + yb * ln64) + (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0)
                    + yb2 * ln64) + xb12 * (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0) + yb2 * ln64))
                + vb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 + 4.0 * xb6 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2) + 32.0 * ln2 - 223.0 * yb * ln2
                    + 294.0 * yb2 * ln2 + 1818.0 * yb4 * ln2 + 534.0 * yb6 * ln2 - 11826.0 * yb8 * ln2 - 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2))
                    + 4.0 * xb10 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2) + 32.0 * ln2 - 223.0 * yb * ln2 + 294.0 * yb2 * ln2 + 1818.0 * yb4 * ln2 + 534.0 * yb6 * ln2 - 11826.0 * yb8 * ln2
                    - 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2)) - 2.0 * xb8 * (yb7 * (240.0 - 128218.0 * ln2) - 144.0 * ln2 + 824.0 * yb * ln2 - 1353.0 * yb2 * ln2 - 6430.0 * yb4 * ln2 + 952.0 * yb6 * ln2
                    + 47070.0 * yb8 * ln2 + 33633.0 * yb10 * ln2 - yb3 * (80.0 + 1599.0 * ln2) - 12.0 * yb9 * (-84.0 + 2167.0 * ln2) - 4.0 * yb5 * (76.0 + 2895.0 * ln2) + 9.0 * yb11 * (-96.0 + 12137.0 * ln2))
                    - 4.0 * xb4 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) + 18.0 * yb * ln2 + 51.0 * yb2 * ln2 - 186.0 * yb4 * ln2 - 756.0 * yb6 * ln2 + 54.0 * yb8 * ln2 - 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2)
                    + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2) + log(16.0)) - 4.0 * xb12 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) + 18.0 * yb * ln2 + 51.0 * yb2 * ln2 - 186.0 * yb4 * ln2 - 756.0 * yb6 * ln2
                    + 54.0 * yb8 * ln2 - 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2) + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2) + log(16.0))
                    + 4.0 * xb2 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 + 32.0 * yb3 * ln2 + 54.0 * yb5 * ln2 + 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2 + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2) + yb * ln64)
                    + 4.0 * xb14 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 + 32.0 * yb3 * ln2 + 54.0 * yb5 * ln2 + 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2 + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2) + yb * ln64)
                    + (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0) + yb2 * ln64)
                    + xb16 * (-1.0 + yb) * yb2 * (66.0 * yb3 * ln2 + 90.0 * yb4 * ln2 + 12.0 * yb5 * ln2 - 42.0 * yb6 * ln2 + 18.0 * yb7 * ln2 + 45.0 * yb8 * ln2 - log(8.0) + yb2 * ln64)))
                + tb2 * ((-vb2) * power_of<2>(myi - xb - myi * xb2 + xb3) * yb * (-6.0 * myi * xb * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) * ln2 - 6.0 * myi * xb13 * yb2 * (6.0 - 21.0 * yb2 + 43.0 * yb4 - 31.0 * yb6 + 3.0 * yb8) * ln2
                    + 3.0 * xb14 * yb2 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 - 3.0 * xb2 * yb2 * (-1.0 + yb2) * (4.0 - 50.0 * ln2 + 165.0 * yb6 * ln2 + 4.0 * yb4 * (9.0 + 53.0 * ln2) + yb2 * (24.0 + 73.0 * ln2))
                    + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (4.0 - 50.0 * ln2 + 165.0 * yb6 * ln2 + 4.0 * yb4 * (9.0 + 53.0 * ln2) + yb2 * (24.0 + 73.0 * ln2)) + 4.0 * myi * xb3 * yb2 * (-1.0 + yb2) * (6.0 + yb2 * (36.0 - 1399.0 * ln2) - 76.0 * ln2 + 273.0 * yb6 * ln2
                    + yb4 * (54.0 + 290.0 * ln2)) + 4.0 * myi * xb11 * yb2 * (-1.0 + yb2) * (6.0 + yb2 * (36.0 - 1399.0 * ln2) - 76.0 * ln2 + 273.0 * yb6 * ln2 + yb4 * (54.0 + 290.0 * ln2))
                    + xb4 * yb2 * (-1.0 + yb2) * (-4.0 + yb2 * (24.0 - 12455.0 * ln2) + 22.0 * ln2 + 4.0 * yb4 * (63.0 + 55.0 * ln2) + 3.0 * yb6 * (144.0 + 407.0 * ln2))
                    - xb10 * yb2 * (-1.0 + yb2) * (-4.0 + yb2 * (24.0 - 12455.0 * ln2) + 22.0 * ln2 + 4.0 * yb4 * (63.0 + 55.0 * ln2) + 3.0 * yb6 * (144.0 + 407.0 * ln2))
                    - 8.0 * myi * xb7 * (yb6 * (78.0 - 11161.0 * ln2) + yb8 * (198.0 - 10415.0 * ln2) + 224.0 * ln2 + 3.0 * yb10 * (-72.0 + 203.0 * ln2) + 2.0 * yb2 * (-7.0 + 510.0 * ln2) + yb4 * (-46.0 + 3339.0 * ln2))
                    + xb6 * (yb8 * (1080.0 - 44481.0 * ln2) + yb6 * (504.0 - 6451.0 * ln2) + 896.0 * ln2 - 9.0 * yb10 * (144.0 + 3823.0 * ln2) + 3.0 * yb4 * (-72.0 + 4295.0 * ln2) + yb2 * (-72.0 + 6022.0 * ln2))
                    + xb8 * (yb2 * (72.0 - 6022.0 * ln2) - 896.0 * ln2 + 9.0 * yb10 * (144.0 + 3823.0 * ln2) - 3.0 * yb4 * (-72.0 + 4295.0 * ln2) + yb6 * (-504.0 + 6451.0 * ln2) + 3.0 * yb8 * (-360.0 + 14827.0 * ln2))
                    + 2.0 * myi * xb5 * yb2 * (-1.0 + yb2) * (16.0 + 718.0 * ln2 + 4.0 * yb4 * (-36.0 + 5107.0 * ln2) + 3.0 * yb6 * (-144.0 + 5795.0 * ln2) + yb2 * (48.0 + 22861.0 * ln2))
                    + 2.0 * myi * xb9 * yb2 * (-1.0 + yb2) * (16.0 + 718.0 * ln2 + 4.0 * yb4 * (-36.0 + 5107.0 * ln2) + 3.0 * yb6 * (-144.0 + 5795.0 * ln2) + yb2 * (48.0 + 22861.0 * ln2))
                    + yb2 * (9.0 * yb2 * ln2 - 15.0 * yb4 * ln2 + 27.0 * yb6 * ln2 - 27.0 * yb8 * ln2 + ln64)) + 4.0 * xb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                    + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) - ln2 - 4.0 * yb * ln2 + yb2 * ln2 + 9.0 * yb4 * ln2 - 9.0 * yb6 * ln2
                    + 39.0 * yb7 * ln2 + yb5 * (9.0 + 86.0 * ln2)) + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) - ln2 - 4.0 * yb * ln2 + yb2 * ln2 + 9.0 * yb4 * ln2 - 9.0 * yb6 * ln2 + 39.0 * yb7 * ln2
                    + yb5 * (9.0 + 86.0 * ln2)) + 4.0 * xb6 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) - 16.0 * ln2 - 112.0 * yb * ln2 - 147.0 * yb2 * ln2 - 890.0 * yb4 * ln2 - 232.0 * yb6 * ln2 + 5850.0 * yb8 * ln2 + 3627.0 * yb10 * ln2
                    + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2)) + 4.0 * xb10 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) - 16.0 * ln2 - 112.0 * yb * ln2 - 147.0 * yb2 * ln2 - 890.0 * yb4 * ln2
                    - 232.0 * yb6 * ln2 + 5850.0 * yb8 * ln2 + 3627.0 * yb10 * ln2 + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2))
                    - 2.0 * xb8 * (yb7 * (120.0 - 65749.0 * ln2) + yb9 * (504.0 - 15767.0 * ln2) + 64.0 * ln2 + 464.0 * yb * ln2 + 600.0 * yb2 * ln2 + 2928.0 * yb4 * ln2 - 288.0 * yb6 * ln2 - 21168.0 * yb8 * ln2 - 14904.0 * yb10 * ln2
                    - 2.0 * yb3 * (20.0 + 239.0 * ln2) - yb5 * (152.0 + 4461.0 * ln2) + yb11 * (-432.0 + 53223.0 * ln2)) - 4.0 * xb4 * yb * (-1.0 + yb2) * (-158.0 * yb3 * ln2 - 486.0 * yb5 * ln2 + 126.0 * yb7 * ln2 + 2.0 * yb2 * (-5.0 + 63.0 * ln2)
                    + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0) + yb * ln64) - 4.0 * xb12 * yb * (-1.0 + yb2) * (-158.0 * yb3 * ln2 - 486.0 * yb5 * ln2 + 126.0 * yb7 * ln2
                    + 2.0 * yb2 * (-5.0 + 63.0 * ln2) + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0) + yb * ln64))
                - 4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 - 4.0 * xb4 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) - 4.0 * ln2 + 18.0 * yb * ln2 - 51.0 * yb2 * ln2 + 186.0 * yb4 * ln2
                    + 756.0 * yb6 * ln2 - 54.0 * yb8 * ln2 + 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2) + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2))
                    - 4.0 * xb12 * (yb5 * (76.0 - 2496.0 * ln2) + yb3 * (20.0 - 81.0 * ln2) - 4.0 * ln2 + 18.0 * yb * ln2 - 51.0 * yb2 * ln2 + 186.0 * yb4 * ln2 + 756.0 * yb6 * ln2 - 54.0 * yb8 * ln2 + 1215.0 * yb10 * ln2 + 3.0 * yb11 * (72.0 + 149.0 * ln2)
                    + 6.0 * yb7 * (-10.0 + 247.0 * ln2) - 2.0 * yb9 * (126.0 + 709.0 * ln2)) + 4.0 * xb2 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 - 6.0 * yb * ln2 - 32.0 * yb3 * ln2 - 54.0 * yb5 * ln2 - 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2
                    + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2)) + 4.0 * xb14 * yb * (-1.0 + yb2) * (yb2 * (6.0 - 18.0 * ln2) + ln2 - 6.0 * yb * ln2 - 32.0 * yb3 * ln2 - 54.0 * yb5 * ln2 - 36.0 * yb7 * ln2 + 411.0 * yb8 * ln2
                    + 12.0 * yb4 * (3.0 + 35.0 * ln2) + yb6 * (54.0 + 754.0 * ln2)) + 4.0 * xb6 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2) - 32.0 * ln2 - 223.0 * yb * ln2 - 294.0 * yb2 * ln2 - 1818.0 * yb4 * ln2
                    - 534.0 * yb6 * ln2 + 11826.0 * yb8 * ln2 + 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2)) + 4.0 * xb10 * (yb5 * (30.0 - 31050.0 * ln2) + yb7 * (18.0 - 9010.0 * ln2) + yb3 * (6.0 - 3123.0 * ln2)
                    - 32.0 * ln2 - 223.0 * yb * ln2 - 294.0 * yb2 * ln2 - 1818.0 * yb4 * ln2 - 534.0 * yb6 * ln2 + 11826.0 * yb8 * ln2 + 7236.0 * yb10 * ln2 + 44037.0 * yb11 * ln2 + 3.0 * yb9 * (-18.0 + 5251.0 * ln2))
                    - 2.0 * xb8 * (yb7 * (240.0 - 128218.0 * ln2) + 144.0 * ln2 + 824.0 * yb * ln2 + 1353.0 * yb2 * ln2 + 6430.0 * yb4 * ln2 - 952.0 * yb6 * ln2 - 47070.0 * yb8 * ln2 - 33633.0 * yb10 * ln2 - yb3 * (80.0 + 1599.0 * ln2)
                    - 12.0 * yb9 * (-84.0 + 2167.0 * ln2) - 4.0 * yb5 * (76.0 + 2895.0 * ln2) + 9.0 * yb11 * (-96.0 + 12137.0 * ln2)) + yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2
                    + 45.0 * yb9 * ln2 - log(8.0) - yb * log(8.0) + yb2 * ln64) + xb16 * yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2 + 45.0 * yb9 * ln2 - log(8.0)
                    - yb * log(8.0) + yb2 * ln64))) + 4.0 * xb2 * (vb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                    + 3.0 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 + 3.0 * xb16 * yb3 * (-2.0 - 3.0 * yb2 + 5.0 * yb4 - 9.0 * yb6 + 9.0 * yb8) * ln2 - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2
                    + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) * ln2 - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) * ln2 + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) * ln2 + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) + ln2 - 4.0 * yb * ln2 - yb2 * ln2 - 9.0 * yb4 * ln2 + 9.0 * yb6 * ln2
                    + 39.0 * yb7 * ln2 + yb5 * (9.0 + 86.0 * ln2)) + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (yb + yb3 * (6.0 - 9.0 * ln2) + ln2 - 4.0 * yb * ln2 - yb2 * ln2 - 9.0 * yb4 * ln2 + 9.0 * yb6 * ln2 + 39.0 * yb7 * ln2
                    + yb5 * (9.0 + 86.0 * ln2)) + 4.0 * xb6 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) + 16.0 * ln2 - 112.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2
                    + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2)) + 4.0 * xb10 * (yb7 * (9.0 - 4387.0 * ln2) + yb3 * (3.0 - 1564.0 * ln2) + 16.0 * ln2 - 112.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2
                    + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 + 22107.0 * yb11 * ln2 - 3.0 * yb5 * (-5.0 + 5253.0 * ln2) + yb9 * (-27.0 + 7907.0 * ln2))
                    - 2.0 * xb8 * (yb7 * (120.0 - 65749.0 * ln2) + yb9 * (504.0 - 15767.0 * ln2) - 64.0 * ln2 + 464.0 * yb * ln2 - 600.0 * yb2 * ln2 - 2928.0 * yb4 * ln2 + 288.0 * yb6 * ln2 + 21168.0 * yb8 * ln2 + 14904.0 * yb10 * ln2
                    - 2.0 * yb3 * (20.0 + 239.0 * ln2) - yb5 * (152.0 + 4461.0 * ln2) + yb11 * (-432.0 + 53223.0 * ln2)) - 4.0 * xb4 * yb * (-1.0 + yb2) * (-6.0 * yb * ln2 + 158.0 * yb3 * ln2 + 486.0 * yb5 * ln2 - 126.0 * yb7 * ln2 + 2.0 * yb2 * (-5.0 + 63.0 * ln2)
                    + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0)) - 4.0 * xb12 * yb * (-1.0 + yb2) * (-6.0 * yb * ln2 + 158.0 * yb3 * ln2 + 486.0 * yb5 * ln2 - 126.0 * yb7 * ln2
                    + 2.0 * yb2 * (-5.0 + 63.0 * ln2) + 3.0 * yb8 * (36.0 + 191.0 * ln2) + 2.0 * yb6 * (-9.0 + 278.0 * ln2) + 3.0 * yb4 * (-16.0 + 567.0 * ln2) + log(16.0)))
                - 4.0 * xb2 * power_of<2>(-myi + xb) * yb * (-1.0 + yb2) * (-6.0 * myi * xb * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) * ln2 - 6.0 * myi * xb9 * yb2 * (-6.0 + 15.0 * yb2 - 28.0 * yb4 + 3.0 * yb6) * ln2 - 3.0 * yb2 * (2.0 + 5.0 * yb2 + 9.0 * yb6) * ln2
                    - 3.0 * xb2 * yb2 * (1.0 + 3.0 * yb2) * (4.0 - 22.0 * ln2 + 69.0 * yb4 * ln2 + yb2 * (12.0 + 61.0 * ln2)) + 3.0 * xb8 * yb2 * (1.0 + 3.0 * yb2) * (4.0 - 22.0 * ln2 + 69.0 * yb4 * ln2 + yb2 * (12.0 + 61.0 * ln2))
                    + 8.0 * myi * xb3 * yb2 * (3.0 + yb2 * (18.0 - 788.0 * ln2) - 11.0 * ln2 + 150.0 * yb6 * ln2 + yb4 * (27.0 + 217.0 * ln2)) + 8.0 * myi * xb7 * yb2 * (3.0 + yb2 * (18.0 - 788.0 * ln2) - 11.0 * ln2 + 150.0 * yb6 * ln2 + yb4 * (27.0 + 217.0 * ln2))
                    + 2.0 * xb4 * (1.0 + 3.0 * yb2) * (16.0 * ln2 + 2.0 * yb2 * (-7.0 + 82.0 * ln2) + yb4 * (-18.0 + 755.0 * ln2) + yb6 * (72.0 + 957.0 * ln2)) - 2.0 * xb6 * (1.0 + 3.0 * yb2) * (16.0 * ln2 + 2.0 * yb2 * (-7.0 + 82.0 * ln2) + yb4 * (-18.0 + 755.0 * ln2)
                    + yb6 * (72.0 + 957.0 * ln2)) + 4.0 * myi * xb5 * (-16.0 * ln2 + 10.0 * yb2 * (2.0 + 21.0 * ln2) + yb4 * (96.0 + 717.0 * ln2) + 4.0 * yb6 * (9.0 + 1808.0 * ln2) + 3.0 * yb8 * (-72.0 + 2155.0 * ln2))
                    + xb10 * yb2 * (15.0 * yb2 * ln2 + 27.0 * yb6 * ln2 + ln64)) + 4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                    + 16.0 * myi * xb3 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2 - 16.0 * myi * xb9 * yb3 * (1.0 - 774.0 * yb2 + 780.0 * yb4 - 10.0 * yb6 + 3.0 * yb8) * ln2 - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * 
                    ln2 + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) * ln2 + xb4 * (yb7 * (96.0 - 17454.0 * ln2) + 16.0 * ln2 - 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2
                    - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 + yb3 * (-128.0 + 339.0 * ln2) - 3.0 * yb11 * (288.0 + 1247.0 * ln2) + 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 4.0 * yb5 * (-136.0 + 5655.0 * ln2))
                    + xb8 * (yb7 * (96.0 - 17454.0 * ln2) + 16.0 * ln2 - 48.0 * yb * ln2 + 147.0 * yb2 * ln2 + 890.0 * yb4 * ln2 + 232.0 * yb6 * ln2 - 5850.0 * yb8 * ln2 - 3627.0 * yb10 * ln2 + yb3 * (-128.0 + 339.0 * ln2)
                    - 3.0 * yb11 * (288.0 + 1247.0 * ln2) + 4.0 * yb9 * (360.0 + 1619.0 * ln2) + 4.0 * yb5 * (-136.0 + 5655.0 * ln2)) + xb2 * yb * (-4.0 * ln2 - 6.0 * yb * ln2 + 164.0 * yb3 * ln2 + 328.0 * yb5 * ln2 - 612.0 * yb7 * ln2 + 126.0 * yb9 * ln2
                    + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2) - 4.0 * yb6 * (18.0 + 391.0 * ln2) - yb2 * (24.0 + ln4))
                    + xb10 * yb * (-4.0 * ln2 - 6.0 * yb * ln2 + 164.0 * yb3 * ln2 + 328.0 * yb5 * ln2 - 612.0 * yb7 * ln2 + 126.0 * yb9 * ln2 + 1806.0 * yb10 * ln2 - 24.0 * yb4 * (5.0 + 64.0 * ln2) + 4.0 * yb8 * (54.0 + 325.0 * ln2)
                    - 4.0 * yb6 * (18.0 + 391.0 * ln2) - yb2 * (24.0 + ln4)) + yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2 + 45.0 * yb9 * ln2 - log(8.0) - yb * log(8.0)
                    + yb2 * ln64) + xb12 * yb2 * (-60.0 * yb3 * ln2 + 24.0 * yb4 * ln2 + 78.0 * yb5 * ln2 - 54.0 * yb6 * ln2 - 60.0 * yb7 * ln2 + 27.0 * yb8 * ln2 + 45.0 * yb9 * ln2 - log(8.0) - yb * log(8.0) + yb2 * ln64)
                    + 4.0 * xb6 * (yb7 * (84.0 - 27874.0 * ln2) - 22.0 * yb * ln2 + 75.0 * yb2 * ln2 + 366.0 * yb4 * ln2 - 36.0 * yb6 * ln2 - 2646.0 * yb8 * ln2 - 1863.0 * yb10 * ln2 + 27.0 * yb11 * (-16.0 + 1235.0 * ln2) - 4.0 * yb5 * (53.0 + 1596.0 * ln2)
                    - yb3 * (52.0 + 1623.0 * ln2) + yb9 * (612.0 + 6654.0 * ln2) + ln256)));
            const complex<double> logs17 = 4.0 * tb * xb2 * (vb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2)
                    + yb3 * (-21.0 + 160.0 * ln2)) + 3.0 * xb16 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 4.0 * xb2 * yb * (-1.0 + yb2) * (-1.0 - 6.0 * yb - 32.0 * yb3 - 54.0 * yb5 - 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb14 * yb * (-1.0 + yb2) * (-1.0 - 6.0 * yb - 32.0 * yb3 - 54.0 * yb5 - 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 186.0 * yb4 - 756.0 * yb6 + 54.0 * yb8 - 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2) + 2.0 * yb9 * (-709.0 + 1824.0 * ln2)
                    - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) + 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 186.0 * yb4 - 756.0 * yb6 + 54.0 * yb8 - 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2)
                    + 2.0 * yb9 * (-709.0 + 1824.0 * ln2) - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) - 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 6430.0 * yb4 - 952.0 * yb6 - 47070.0 * yb8 - 33633.0 * yb10 + yb7 * (128218.0 - 54144.0 * ln2)
                    - 3.0 * yb3 * (-533.0 + 608.0 * ln2) + 9.0 * yb11 * (-12137.0 + 928.0 * ln2) + 12.0 * yb9 * (2167.0 + 1136.0 * ln2) + 12.0 * yb5 * (965.0 + 2832.0 * ln2))
                    - 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 + 1818.0 * yb4 + 534.0 * yb6 - 11826.0 * yb8 - 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2) + 18.0 * yb5 * (-1725.0 + 224.0 * ln2) + 3.0 * yb9 * (5251.0 + 448.0 * ln2)
                    - 2.0 * yb7 * (4505.0 + 3168.0 * ln2)) - 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 + 1818.0 * yb4 + 534.0 * yb6 - 11826.0 * yb8 - 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2) + 18.0 * yb5 * (-1725.0 + 224.0 * ln2)
                    + 3.0 * yb9 * (5251.0 + 448.0 * ln2) - 2.0 * yb7 * (4505.0 + 3168.0 * ln2))) - 4.0 * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    - 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 3.0 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2)
                    + yb3 * (-21.0 + 160.0 * ln2)) + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 + 3.0 * yb - 79.0 * yb3 - 243.0 * yb5 + 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 3.0 * yb - 79.0 * yb3 - 243.0 * yb5 + 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 4.0 * xb6 * (8.0 + 22.0 * yb + 75.0 * yb2 + 366.0 * yb4 - 36.0 * yb6 - 2646.0 * yb8 - 1863.0 * yb10 + yb7 * (27874.0 - 39168.0 * ln2) - 3.0 * yb3 * (-541.0 + 416.0 * ln2) + 48.0 * yb5 * (133.0 + 516.0 * ln2) + 9.0 * yb11 * (-3705.0 + 736.0 * ln2)
                    + yb9 * (-6654.0 + 9024.0 * ln2)) + xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2) + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2)
                    + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2)) + xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2)
                    + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2) + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2))) + 16.0 * vb * xb2 * yb * (24.0 * myi * xb * yb2 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb11 * yb2 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 48.0 * myi * xb5 * yb2 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 48.0 * myi * xb7 * yb2 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 8.0 * myi * xb3 * (yb2 - 774.0 * yb4 + 780.0 * yb6 - 10.0 * yb8 + 3.0 * yb10)
                    - 8.0 * myi * xb9 * (yb2 - 774.0 * yb4 + 780.0 * yb6 - 10.0 * yb8 + 3.0 * yb10) + 2.0 * xb2 * (-1.0 + yb2) * (-2.0 + 48.0 * yb8 * (-13.0 + 27.0 * ln2) + 3.0 * yb2 * (-1.0 + 48.0 * ln2) - 12.0 * yb4 * (73.0 + 300.0 * ln2) + yb6 * (-1007.0 + 2160.0 * ln2))
                    + 2.0 * xb10 * (-1.0 + yb2) * (-2.0 + 48.0 * yb8 * (-13.0 + 27.0 * ln2) + 3.0 * yb2 * (-1.0 + 48.0 * ln2) - 12.0 * yb4 * (73.0 + 300.0 * ln2) + yb6 * (-1007.0 + 2160.0 * ln2))
                    + 4.0 * xb6 * (38.0 + yb2 * (975.0 - 624.0 * ln2) + 24.0 * yb10 * (-731.0 + 138.0 * ln2) - 17.0 * yb6 * (-757.0 + 1152.0 * ln2) + 3.0 * yb4 * (1445.0 + 4128.0 * ln2) + yb8 * (-4769.0 + 4512.0 * ln2))
                    + xb4 * (80.0 + yb6 * (6095.0 - 51264.0 * ln2) + yb2 * (163.0 - 1584.0 * ln2) + 6.0 * yb10 * (-37.0 + 1512.0 * ln2) + yb8 * (-6241.0 + 11232.0 * ln2) + yb4 * (-8067.0 + 32544.0 * ln2))
                    + xb8 * (80.0 + yb6 * (6095.0 - 51264.0 * ln2) + yb2 * (163.0 - 1584.0 * ln2) + 6.0 * yb10 * (-37.0 + 1512.0 * ln2) + yb8 * (-6241.0 + 11232.0 * ln2) + yb4 * (-8067.0 + 32544.0 * ln2))
                    + 3.0 * yb2 * (-1.0 + yb2) * (1.0 + yb4 * (5.0 - 112.0 * ln2) - 16.0 * ln2 + 16.0 * yb2 * (-1.0 + log(32.0)) + 6.0 * yb6 * (-1.0 + ln256)) + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (1.0 + yb4 * (5.0 - 112.0 * ln2) - 16.0 * ln2 + 16.0 * yb2 * (-1.0 + log(32.0))
                    + 6.0 * yb6 * (-1.0 + ln256)))) + 4.0 * xb2 * (4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    + 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) + 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) - 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 3.0 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 - 3.0 * yb + 79.0 * yb3 + 243.0 * yb5 - 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 3.0 * yb + 79.0 * yb3 + 243.0 * yb5 - 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 4.0 * xb6 * (-8.0 + 22.0 * yb - 75.0 * yb2 - 366.0 * yb4 + 36.0 * yb6 + 2646.0 * yb8 + 1863.0 * yb10 + yb7 * (27874.0 - 39168.0 * ln2) - 3.0 * yb3 * (-541.0 + 416.0 * ln2) + 48.0 * yb5 * (133.0 + 516.0 * ln2) + 9.0 * yb11 * (-3705.0 + 736.0 * ln2)
                    + yb9 * (-6654.0 + 9024.0 * ln2)) + xb4 * (-16.0 + 48.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2) + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2)
                    + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2)) + xb8 * (-16.0 + 48.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2)
                    + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2) + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2))) + vb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 4.0 * xb4 * yb * (-1.0 + yb2) * (4.0 - 6.0 * yb + 158.0 * yb3 + 486.0 * yb5 - 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) + 4.0 * xb12 * yb * (-1.0 + yb2) * (4.0 - 6.0 * yb + 158.0 * yb3 + 486.0 * yb5 - 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) - 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2) + 3.0 * yb11 * (7369.0 + 192.0 * ln2)
                    + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2)
                    + 3.0 * yb11 * (7369.0 + 192.0 * ln2) + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 2.0 * xb8 * (64.0 - 464.0 * yb + 600.0 * yb2 + 2928.0 * yb4 - 288.0 * yb6 - 21168.0 * yb8 - 14904.0 * yb10
                    + yb7 * (65749.0 - 27072.0 * ln2) + yb3 * (478.0 - 912.0 * ln2) + yb11 * (-53223.0 + 4176.0 * ln2) + 3.0 * yb5 * (1487.0 + 5664.0 * ln2) + yb9 * (15767.0 + 6816.0 * ln2))
                    + 3.0 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 3.0 * xb16 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2)
                    - 2.0 * (1.0 + ln256)) + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256))
                    + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256)))
                - 4.0 * xb2 * power_of<2>(myi + xb) * yb * (-1.0 + yb2) * (3.0 * yb2 * (2.0 + yb2 * (5.0 - 80.0 * ln2) + yb6 * (9.0 - 48.0 * ln2) + 16.0 * ln2 + 112.0 * yb4 * ln2)
                    - 3.0 * xb2 * yb2 * (22.0 + yb2 * (5.0 - 2640.0 * ln2) + 144.0 * ln2 + 9.0 * yb6 * (-23.0 + 80.0 * ln2) + 12.0 * yb4 * (-21.0 + 148.0 * ln2)) + 3.0 * xb8 * yb2 * (22.0 + yb2 * (5.0 - 2640.0 * ln2) + 144.0 * ln2 + 9.0 * yb6 * (-23.0 + 80.0 * ln2)
                    + 12.0 * yb4 * (-21.0 + 148.0 * ln2)) - 2.0 * xb4 * (16.0 + yb4 * (1247.0 - 4080.0 * ln2) + 4.0 * yb2 * (53.0 + 60.0 * ln2) + 9.0 * yb8 * (319.0 + 112.0 * ln2) + 6.0 * yb6 * (537.0 + 472.0 * ln2))
                    + xb6 * (32.0 + yb4 * (2494.0 - 8160.0 * ln2) + 8.0 * yb2 * (53.0 + 60.0 * ln2) + 18.0 * yb8 * (319.0 + 112.0 * ln2) + 12.0 * yb6 * (537.0 + 472.0 * ln2))
                    - 8.0 * myi * xb3 * yb2 * (11.0 + yb2 * (788.0 - 1920.0 * ln2) + 96.0 * ln2 + 6.0 * yb6 * (-25.0 + 96.0 * ln2) + yb4 * (-217.0 + 1248.0 * ln2)) - 8.0 * myi * xb7 * yb2 * (11.0 + yb2 * (788.0 - 1920.0 * ln2) + 96.0 * ln2 + 6.0 * yb6 * (-25.0 + 96.0 * ln2)
                    + yb4 * (-217.0 + 1248.0 * ln2)) - 4.0 * myi * xb5 * (16.0 + 6.0 * yb2 * (-35.0 + 72.0 * ln2) + 15.0 * yb8 * (-431.0 + 144.0 * ln2) + 16.0 * yb6 * (-452.0 + 333.0 * ln2) - 3.0 * yb4 * (239.0 + 2640.0 * ln2))
                    + 3.0 * xb10 * yb2 * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) - 6.0 * myi * xb * yb2 * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0))
                    - 2.0 * (3.0 + ln256)) - 6.0 * myi * xb9 * yb2 * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0)) - 2.0 * (3.0 + ln256))))
                - tb2 * (4.0 * vb * xb2 * (48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    + 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2)
                    + yb3 * (-21.0 + 160.0 * ln2)) + 3.0 * xb16 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 4.0 * xb2 * yb * (-1.0 + yb2) * (-1.0 + 6.0 * yb + 32.0 * yb3 + 54.0 * yb5 + 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb14 * yb * (-1.0 + yb2) * (-1.0 + 6.0 * yb + 32.0 * yb3 + 54.0 * yb5 + 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 + 186.0 * yb4 + 756.0 * yb6 - 54.0 * yb8 + 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2) + 2.0 * yb9 * (-709.0 + 1824.0 * ln2)
                    - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) + 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 + 186.0 * yb4 + 756.0 * yb6 - 54.0 * yb8 + 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2)
                    + 2.0 * yb9 * (-709.0 + 1824.0 * ln2) - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) - 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 - 6430.0 * yb4 + 952.0 * yb6 + 47070.0 * yb8 + 33633.0 * yb10 + yb7 * (128218.0 - 54144.0 * ln2)
                    - 3.0 * yb3 * (-533.0 + 608.0 * ln2) + 9.0 * yb11 * (-12137.0 + 928.0 * ln2) + 12.0 * yb9 * (2167.0 + 1136.0 * ln2) + 12.0 * yb5 * (965.0 + 2832.0 * ln2))
                    - 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 1818.0 * yb4 - 534.0 * yb6 + 11826.0 * yb8 + 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2) + 18.0 * yb5 * (-1725.0 + 224.0 * ln2) + 3.0 * yb9 * (5251.0 + 448.0 * ln2)
                    - 2.0 * yb7 * (4505.0 + 3168.0 * ln2)) - 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 1818.0 * yb4 - 534.0 * yb6 + 11826.0 * yb8 + 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2)
                    + 18.0 * yb5 * (-1725.0 + 224.0 * ln2) + 3.0 * yb9 * (5251.0 + 448.0 * ln2) - 2.0 * yb7 * (4505.0 + 3168.0 * ln2))) - 4.0 * xb2 * (24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) - 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    - 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    + 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) + 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    - 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 4.0 * xb4 * yb * (-1.0 + yb2) * (4.0 + 6.0 * yb - 158.0 * yb3 - 486.0 * yb5 + 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) + 4.0 * xb12 * yb * (-1.0 + yb2) * (4.0 + 6.0 * yb - 158.0 * yb3 - 486.0 * yb5 + 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) - 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2) + 3.0 * yb11 * (7369.0 + 192.0 * ln2)
                    + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2)
                    + 3.0 * yb11 * (7369.0 + 192.0 * ln2) + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 2.0 * xb8 * (-64.0 - 464.0 * yb - 600.0 * yb2 - 2928.0 * yb4 + 288.0 * yb6 + 21168.0 * yb8 + 14904.0 * yb10
                    + yb7 * (65749.0 - 27072.0 * ln2) + yb3 * (478.0 - 912.0 * ln2) + yb11 * (-53223.0 + 4176.0 * ln2) + 3.0 * yb5 * (1487.0 + 5664.0 * ln2) + yb9 * (15767.0 + 6816.0 * ln2))
                    + 3.0 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 3.0 * xb16 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2)
                    - 2.0 * (1.0 + ln256)) + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256))
                    + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256)))
                + vb2 * power_of<2>(myi + xb - myi * xb2 - xb3) * yb * (2.0 * myi * xb5 * yb2 * (-1.0 + yb2) * (718.0 - 48.0 * ln2 + 3.0 * yb6 * (5795.0 + 48.0 * ln2) - 4.0 * yb4 * (-5107.0 + 84.0 * ln2) + yb2 * (22861.0 + 240.0 * ln2))
                    + 2.0 * myi * xb9 * yb2 * (-1.0 + yb2) * (718.0 - 48.0 * ln2 + 3.0 * yb6 * (5795.0 + 48.0 * ln2) - 4.0 * yb4 * (-5107.0 + 84.0 * ln2) + yb2 * (22861.0 + 240.0 * ln2))
                    + xb4 * yb2 * (-1.0 + yb2) * (-22.0 + yb2 * (12455.0 - 7920.0 * ln2) + 432.0 * ln2 + 3.0 * yb6 * (-407.0 + 720.0 * ln2) + 4.0 * yb4 * (-55.0 + 1332.0 * ln2))
                    - xb10 * yb2 * (-1.0 + yb2) * (-22.0 + yb2 * (12455.0 - 7920.0 * ln2) + 432.0 * ln2 + 3.0 * yb6 * (-407.0 + 720.0 * ln2) + 4.0 * yb4 * (-55.0 + 1332.0 * ln2))
                    - 3.0 * xb2 * yb2 * (-1.0 + yb2) * (50.0 + 176.0 * ln2 + 3.0 * yb6 * (-55.0 + 208.0 * ln2) + 4.0 * yb4 * (-53.0 + 500.0 * ln2) - yb2 * (73.0 + 2800.0 * ln2))
                    + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (50.0 + 176.0 * ln2 + 3.0 * yb6 * (-55.0 + 208.0 * ln2) + 4.0 * yb4 * (-53.0 + 500.0 * ln2) - yb2 * (73.0 + 2800.0 * ln2))
                    - 4.0 * myi * xb3 * yb2 * (-1.0 + yb2) * (76.0 + yb2 * (1399.0 - 4080.0 * ln2) + 240.0 * ln2 + 21.0 * yb6 * (-13.0 + 48.0 * ln2) + yb4 * (-290.0 + 2832.0 * ln2))
                    - 4.0 * myi * xb11 * yb2 * (-1.0 + yb2) * (76.0 + yb2 * (1399.0 - 4080.0 * ln2) + 240.0 * ln2 + 21.0 * yb6 * (-13.0 + 48.0 * ln2) + yb4 * (-290.0 + 2832.0 * ln2))
                    + xb6 * (-896.0 + yb6 * (6451.0 - 28224.0 * ln2) + 9.0 * yb10 * (3823.0 + 432.0 * ln2) - 2.0 * yb2 * (3011.0 + 504.0 * ln2) + 3.0 * yb4 * (-4295.0 + 5856.0 * ln2) + yb8 * (44481.0 + 7776.0 * ln2))
                    + xb8 * (896.0 - 9.0 * yb10 * (3823.0 + 432.0 * ln2) + 2.0 * yb2 * (3011.0 + 504.0 * ln2) - 3.0 * yb8 * (14827.0 + 2592.0 * ln2) - 3.0 * yb4 * (-4295.0 + 5856.0 * ln2) + yb6 * (-6451.0 + 28224.0 * ln2))
                    + 8.0 * myi * xb7 * (-224.0 + yb6 * (11161.0 - 6912.0 * ln2) + 21.0 * yb10 * (-29.0 + 48.0 * ln2) + 9.0 * yb4 * (-371.0 + 480.0 * ln2) + yb8 * (10415.0 + 1824.0 * ln2) - 60.0 * yb2 * (17.0 + log(16.0)))
                    - 3.0 * yb2 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 3.0 * xb14 * yb2 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2)
                    - 2.0 * (1.0 + ln256)) - 6.0 * myi * xb * yb2 * (-1.0 + yb2) * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0)) - 2.0 * (3.0 + ln256))
                    - 6.0 * myi * xb13 * yb2 * (-1.0 + yb2) * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0)) - 2.0 * (3.0 + ln256))));
            const complex<double> logs18 = 4.0 * tb * xb2 * (vb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2)
                    + yb3 * (-21.0 + 160.0 * ln2)) + 3.0 * xb16 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 4.0 * xb2 * yb * (-1.0 + yb2) * (-1.0 - 6.0 * yb - 32.0 * yb3 - 54.0 * yb5 - 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb14 * yb * (-1.0 + yb2) * (-1.0 - 6.0 * yb - 32.0 * yb3 - 54.0 * yb5 - 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb4 * (4.0 + 18.0 * yb + 51.0 * yb2 - 186.0 * yb4 - 756.0 * yb6 + 54.0 * yb8 - 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2) + 2.0 * yb9 * (-709.0 + 1824.0 * ln2)
                    - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) + 4.0 * xb12 * (4.0 + 18.0 * yb + 51.0 * yb2 - 186.0 * yb4 - 756.0 * yb6 + 54.0 * yb8 - 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2)
                    + 2.0 * yb9 * (-709.0 + 1824.0 * ln2) - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) - 2.0 * xb8 * (144.0 - 824.0 * yb + 1353.0 * yb2 + 6430.0 * yb4 - 952.0 * yb6 - 47070.0 * yb8 - 33633.0 * yb10 + yb7 * (128218.0 - 54144.0 * ln2)
                    - 3.0 * yb3 * (-533.0 + 608.0 * ln2) + 9.0 * yb11 * (-12137.0 + 928.0 * ln2) + 12.0 * yb9 * (2167.0 + 1136.0 * ln2) + 12.0 * yb5 * (965.0 + 2832.0 * ln2))
                    - 4.0 * xb6 * (32.0 - 223.0 * yb + 294.0 * yb2 + 1818.0 * yb4 + 534.0 * yb6 - 11826.0 * yb8 - 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2) + 18.0 * yb5 * (-1725.0 + 224.0 * ln2) + 3.0 * yb9 * (5251.0 + 448.0 * ln2)
                    - 2.0 * yb7 * (4505.0 + 3168.0 * ln2)) - 4.0 * xb10 * (32.0 - 223.0 * yb + 294.0 * yb2 + 1818.0 * yb4 + 534.0 * yb6 - 11826.0 * yb8 - 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2) + 18.0 * yb5 * (-1725.0 + 224.0 * ln2)
                    + 3.0 * yb9 * (5251.0 + 448.0 * ln2) - 2.0 * yb7 * (4505.0 + 3168.0 * ln2))) - 4.0 * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 3.0 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2)
                    + yb3 * (-21.0 + 160.0 * ln2)) + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 + 3.0 * yb - 79.0 * yb3 - 243.0 * yb5 + 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 3.0 * yb - 79.0 * yb3 - 243.0 * yb5 + 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 4.0 * xb6 * (8.0 + 22.0 * yb + 75.0 * yb2 + 366.0 * yb4 - 36.0 * yb6 - 2646.0 * yb8 - 1863.0 * yb10 + yb7 * (27874.0 - 39168.0 * ln2) - 3.0 * yb3 * (-541.0 + 416.0 * ln2) + 48.0 * yb5 * (133.0 + 516.0 * ln2) + 9.0 * yb11 * (-3705.0 + 736.0 * ln2)
                    + yb9 * (-6654.0 + 9024.0 * ln2)) + xb4 * (16.0 + 48.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2) + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2)
                    + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2)) + xb8 * (16.0 + 48.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2)
                    + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2) + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2))) + 16.0 * vb * xb2 * yb * (-24.0 * myi * xb * yb2 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb11 * yb2 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 48.0 * myi * xb5 * yb2 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 48.0 * myi * xb7 * yb2 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 8.0 * myi * xb3 * (yb2 - 774.0 * yb4 + 780.0 * yb6 - 10.0 * yb8 + 3.0 * yb10)
                    + 8.0 * myi * xb9 * (yb2 - 774.0 * yb4 + 780.0 * yb6 - 10.0 * yb8 + 3.0 * yb10) + 2.0 * xb2 * (-1.0 + yb2) * (-2.0 + 48.0 * yb8 * (-13.0 + 27.0 * ln2) + 3.0 * yb2 * (-1.0 + 48.0 * ln2) - 12.0 * yb4 * (73.0 + 300.0 * ln2) + yb6 * (-1007.0 + 2160.0 * ln2))
                    + 2.0 * xb10 * (-1.0 + yb2) * (-2.0 + 48.0 * yb8 * (-13.0 + 27.0 * ln2) + 3.0 * yb2 * (-1.0 + 48.0 * ln2) - 12.0 * yb4 * (73.0 + 300.0 * ln2) + yb6 * (-1007.0 + 2160.0 * ln2))
                    + 4.0 * xb6 * (38.0 + yb2 * (975.0 - 624.0 * ln2) + 24.0 * yb10 * (-731.0 + 138.0 * ln2) - 17.0 * yb6 * (-757.0 + 1152.0 * ln2) + 3.0 * yb4 * (1445.0 + 4128.0 * ln2) + yb8 * (-4769.0 + 4512.0 * ln2))
                    + xb4 * (80.0 + yb6 * (6095.0 - 51264.0 * ln2) + yb2 * (163.0 - 1584.0 * ln2) + 6.0 * yb10 * (-37.0 + 1512.0 * ln2) + yb8 * (-6241.0 + 11232.0 * ln2) + yb4 * (-8067.0 + 32544.0 * ln2))
                    + xb8 * (80.0 + yb6 * (6095.0 - 51264.0 * ln2) + yb2 * (163.0 - 1584.0 * ln2) + 6.0 * yb10 * (-37.0 + 1512.0 * ln2) + yb8 * (-6241.0 + 11232.0 * ln2) + yb4 * (-8067.0 + 32544.0 * ln2))
                    + 3.0 * yb2 * (-1.0 + yb2) * (1.0 + yb4 * (5.0 - 112.0 * ln2) - 16.0 * ln2 + 16.0 * yb2 * (-1.0 + log(32.0)) + 6.0 * yb6 * (-1.0 + ln256)) + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (1.0 + yb4 * (5.0 - 112.0 * ln2) - 16.0 * ln2 + 16.0 * yb2 * (-1.0 + log(32.0))
                    + 6.0 * yb6 * (-1.0 + ln256)))) + 4.0 * xb2 * (4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb11 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 96.0 * myi * xb5 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8)
                    - 96.0 * myi * xb7 * yb3 * (-37.0 - 258.0 * yb2 - 540.0 * yb4 + 82.0 * yb6 + 753.0 * yb8) - 16.0 * myi * xb3 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11) + 16.0 * myi * xb9 * (yb3 - 774.0 * yb5 + 780.0 * yb7 - 10.0 * yb9 + 3.0 * yb11)
                    + 3.0 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 - 3.0 * yb + 79.0 * yb3 + 243.0 * yb5 - 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 3.0 * yb + 79.0 * yb3 + 243.0 * yb5 - 63.0 * yb7 + 3.0 * yb2 * (-1.0 + 96.0 * ln2) + 3.0 * yb8 * (-301.0 + 864.0 * ln2) - 3.0 * yb4 * (257.0 + 2400.0 * ln2) + yb6 * (-1553.0 + 4320.0 * ln2))
                    + 4.0 * xb6 * (-8.0 + 22.0 * yb - 75.0 * yb2 - 366.0 * yb4 + 36.0 * yb6 + 2646.0 * yb8 + 1863.0 * yb10 + yb7 * (27874.0 - 39168.0 * ln2) - 3.0 * yb3 * (-541.0 + 416.0 * ln2) + 48.0 * yb5 * (133.0 + 516.0 * ln2) + 9.0 * yb11 * (-3705.0 + 736.0 * ln2)
                    + yb9 * (-6654.0 + 9024.0 * ln2)) + xb4 * (-16.0 + 48.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2) + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2)
                    + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2)) + xb8 * (-16.0 + 48.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 3.0 * yb3 * (113.0 + 1056.0 * ln2) + 12.0 * yb5 * (-1885.0 + 5424.0 * ln2)
                    + 4.0 * yb9 * (-1619.0 + 5616.0 * ln2) + 3.0 * yb11 * (1247.0 + 6048.0 * ln2) - 6.0 * yb7 * (-2909.0 + 17088.0 * ln2))) + vb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 4.0 * xb4 * yb * (-1.0 + yb2) * (4.0 - 6.0 * yb + 158.0 * yb3 + 486.0 * yb5 - 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) + 4.0 * xb12 * yb * (-1.0 + yb2) * (4.0 - 6.0 * yb + 158.0 * yb3 + 486.0 * yb5 - 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) - 4.0 * xb6 * (16.0 - 112.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2) + 3.0 * yb11 * (7369.0 + 192.0 * ln2)
                    + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 4.0 * xb10 * (16.0 - 112.0 * yb + 147.0 * yb2 + 890.0 * yb4 + 232.0 * yb6 - 5850.0 * yb8 - 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2)
                    + 3.0 * yb11 * (7369.0 + 192.0 * ln2) + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 2.0 * xb8 * (64.0 - 464.0 * yb + 600.0 * yb2 + 2928.0 * yb4 - 288.0 * yb6 - 21168.0 * yb8 - 14904.0 * yb10
                    + yb7 * (65749.0 - 27072.0 * ln2) + yb3 * (478.0 - 912.0 * ln2) + yb11 * (-53223.0 + 4176.0 * ln2) + 3.0 * yb5 * (1487.0 + 5664.0 * ln2) + yb9 * (15767.0 + 6816.0 * ln2))
                    + 3.0 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 3.0 * xb16 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2)
                    - 2.0 * (1.0 + ln256)) + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256))
                    + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256)))
                - 4.0 * xb2 * power_of<2>(-myi + xb) * yb * (-1.0 + yb2) * (3.0 * yb2 * (2.0 + yb2 * (5.0 - 80.0 * ln2) + yb6 * (9.0 - 48.0 * ln2) + 16.0 * ln2 + 112.0 * yb4 * ln2)
                    - 3.0 * xb2 * yb2 * (22.0 + yb2 * (5.0 - 2640.0 * ln2) + 144.0 * ln2 + 9.0 * yb6 * (-23.0 + 80.0 * ln2) + 12.0 * yb4 * (-21.0 + 148.0 * ln2)) + 3.0 * xb8 * yb2 * (22.0 + yb2 * (5.0 - 2640.0 * ln2) + 144.0 * ln2 + 9.0 * yb6 * (-23.0 + 80.0 * ln2)
                    + 12.0 * yb4 * (-21.0 + 148.0 * ln2)) - 2.0 * xb4 * (16.0 + yb4 * (1247.0 - 4080.0 * ln2) + 4.0 * yb2 * (53.0 + 60.0 * ln2) + 9.0 * yb8 * (319.0 + 112.0 * ln2) + 6.0 * yb6 * (537.0 + 472.0 * ln2))
                    + xb6 * (32.0 + yb4 * (2494.0 - 8160.0 * ln2) + 8.0 * yb2 * (53.0 + 60.0 * ln2) + 18.0 * yb8 * (319.0 + 112.0 * ln2) + 12.0 * yb6 * (537.0 + 472.0 * ln2))
                    + 8.0 * myi * xb3 * yb2 * (11.0 + yb2 * (788.0 - 1920.0 * ln2) + 96.0 * ln2 + 6.0 * yb6 * (-25.0 + 96.0 * ln2) + yb4 * (-217.0 + 1248.0 * ln2)) + 8.0 * myi * xb7 * yb2 * (11.0 + yb2 * (788.0 - 1920.0 * ln2) + 96.0 * ln2 + 6.0 * yb6 * (-25.0 + 96.0 * ln2)
                    + yb4 * (-217.0 + 1248.0 * ln2)) + 4.0 * myi * xb5 * (16.0 + 6.0 * yb2 * (-35.0 + 72.0 * ln2) + 15.0 * yb8 * (-431.0 + 144.0 * ln2) + 16.0 * yb6 * (-452.0 + 333.0 * ln2) - 3.0 * yb4 * (239.0 + 2640.0 * ln2))
                    + 3.0 * xb10 * yb2 * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 6.0 * myi * xb * yb2 * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0))
                    - 2.0 * (3.0 + ln256)) + 6.0 * myi * xb9 * yb2 * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0)) - 2.0 * (3.0 + ln256))))
                - tb2 * (4.0 * vb * xb2 * (-48.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 48.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 16.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8)
                    - 16.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 16.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 16.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 16.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 16.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 3.0 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2)
                    + yb3 * (-21.0 + 160.0 * ln2)) + 3.0 * xb16 * yb2 * (-1.0 + yb2) * (-1.0 + yb2 + 9.0 * yb4 - 9.0 * yb6 + yb5 * (5.0 - 224.0 * ln2) + 3.0 * yb7 * (-5.0 + 32.0 * ln2) - yb * (1.0 + 32.0 * ln2) + yb3 * (-21.0 + 160.0 * ln2))
                    + 4.0 * xb2 * yb * (-1.0 + yb2) * (-1.0 + 6.0 * yb + 32.0 * yb3 + 54.0 * yb5 + 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb14 * yb * (-1.0 + yb2) * (-1.0 + 6.0 * yb + 32.0 * yb3 + 54.0 * yb5 + 36.0 * yb7 + 6.0 * yb2 * (3.0 + 32.0 * ln2) - 60.0 * yb4 * (7.0 + 64.0 * ln2) + 26.0 * yb6 * (-29.0 + 96.0 * ln2) + 3.0 * yb8 * (-137.0 + 384.0 * ln2))
                    + 4.0 * xb4 * (-4.0 + 18.0 * yb - 51.0 * yb2 + 186.0 * yb4 + 756.0 * yb6 - 54.0 * yb8 + 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2) + 2.0 * yb9 * (-709.0 + 1824.0 * ln2)
                    - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) + 4.0 * xb12 * (-4.0 + 18.0 * yb - 51.0 * yb2 + 186.0 * yb4 + 756.0 * yb6 - 54.0 * yb8 + 1215.0 * yb10 + 192.0 * yb5 * (-13.0 + 45.0 * ln2) - 3.0 * yb3 * (27.0 + 160.0 * ln2) + 3.0 * yb11 * (149.0 + 672.0 * ln2)
                    + 2.0 * yb9 * (-709.0 + 1824.0 * ln2) - 6.0 * yb7 * (-247.0 + 2304.0 * ln2)) - 2.0 * xb8 * (-144.0 - 824.0 * yb - 1353.0 * yb2 - 6430.0 * yb4 + 952.0 * yb6 + 47070.0 * yb8 + 33633.0 * yb10 + yb7 * (128218.0 - 54144.0 * ln2)
                    - 3.0 * yb3 * (-533.0 + 608.0 * ln2) + 9.0 * yb11 * (-12137.0 + 928.0 * ln2) + 12.0 * yb9 * (2167.0 + 1136.0 * ln2) + 12.0 * yb5 * (965.0 + 2832.0 * ln2))
                    - 4.0 * xb6 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 1818.0 * yb4 - 534.0 * yb6 + 11826.0 * yb8 + 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2) + 18.0 * yb5 * (-1725.0 + 224.0 * ln2) + 3.0 * yb9 * (5251.0 + 448.0 * ln2)
                    - 2.0 * yb7 * (4505.0 + 3168.0 * ln2)) - 4.0 * xb10 * (-32.0 - 223.0 * yb - 294.0 * yb2 - 1818.0 * yb4 - 534.0 * yb6 + 11826.0 * yb8 + 7236.0 * yb10 - 3.0 * yb3 * (1041.0 + 64.0 * ln2) + 9.0 * yb11 * (4893.0 + 128.0 * ln2)
                    + 18.0 * yb5 * (-1725.0 + 224.0 * ln2) + 3.0 * yb9 * (5251.0 + 448.0 * ln2) - 2.0 * yb7 * (4505.0 + 3168.0 * ln2))) - 4.0 * xb2 * (-24.0 * myi * xb * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) + 24.0 * myi * xb15 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2)
                    + 8.0 * myi * xb3 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) - 8.0 * myi * xb13 * yb3 * (5.0 + 738.0 * yb2 - 708.0 * yb4 - 50.0 * yb6 + 15.0 * yb8) + 8.0 * myi * xb5 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8)
                    - 8.0 * myi * xb11 * yb3 * (-223.0 - 3078.0 * yb2 - 1716.0 * yb4 + 502.0 * yb6 + 4515.0 * yb8) - 8.0 * myi * xb7 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8)
                    + 8.0 * myi * xb9 * yb3 * (-665.0 - 5418.0 * yb2 - 8940.0 * yb4 + 1466.0 * yb6 + 13557.0 * yb8) + 4.0 * xb4 * yb * (-1.0 + yb2) * (4.0 + 6.0 * yb - 158.0 * yb3 - 486.0 * yb5 + 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) + 4.0 * xb12 * yb * (-1.0 + yb2) * (4.0 + 6.0 * yb - 158.0 * yb3 - 486.0 * yb5 + 126.0 * yb7 + yb4 * (1701.0 - 4080.0 * ln2) + 6.0 * yb2 * (21.0 + 40.0 * ln2)
                    + 3.0 * yb8 * (191.0 + 336.0 * ln2) + 4.0 * yb6 * (139.0 + 708.0 * ln2)) - 4.0 * xb6 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2) + 3.0 * yb11 * (7369.0 + 192.0 * ln2)
                    + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 4.0 * xb10 * (-16.0 - 112.0 * yb - 147.0 * yb2 - 890.0 * yb4 - 232.0 * yb6 + 5850.0 * yb8 + 3627.0 * yb10 - 4.0 * yb3 * (391.0 + 24.0 * ln2)
                    + 3.0 * yb11 * (7369.0 + 192.0 * ln2) + 9.0 * yb5 * (-1751.0 + 224.0 * ln2) + yb9 * (7907.0 + 672.0 * ln2) - yb7 * (4387.0 + 3168.0 * ln2)) - 2.0 * xb8 * (-64.0 - 464.0 * yb - 600.0 * yb2 - 2928.0 * yb4 + 288.0 * yb6 + 21168.0 * yb8 + 14904.0 * yb10
                    + yb7 * (65749.0 - 27072.0 * ln2) + yb3 * (478.0 - 912.0 * ln2) + yb11 * (-53223.0 + 4176.0 * ln2) + 3.0 * yb5 * (1487.0 + 5664.0 * ln2) + yb9 * (15767.0 + 6816.0 * ln2))
                    + 3.0 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 3.0 * xb16 * yb3 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2)
                    - 2.0 * (1.0 + ln256)) + 12.0 * xb2 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256))
                    + 12.0 * xb14 * yb2 * (-1.0 + yb2) * (1.0 - yb2 - 9.0 * yb4 + 9.0 * yb6 + yb3 * (9.0 - 640.0 * ln2) + 3.0 * yb7 * (-13.0 + 64.0 * ln2) + yb5 * (-86.0 + 416.0 * ln2) + 4.0 * yb * (1.0 + ln256)))
                + vb2 * power_of<2>(myi - xb - myi * xb2 + xb3) * yb * (-2.0 * myi * xb5 * yb2 * (-1.0 + yb2) * (718.0 - 48.0 * ln2 + 3.0 * yb6 * (5795.0 + 48.0 * ln2) - 4.0 * yb4 * (-5107.0 + 84.0 * ln2) + yb2 * (22861.0 + 240.0 * ln2))
                    - 2.0 * myi * xb9 * yb2 * (-1.0 + yb2) * (718.0 - 48.0 * ln2 + 3.0 * yb6 * (5795.0 + 48.0 * ln2) - 4.0 * yb4 * (-5107.0 + 84.0 * ln2) + yb2 * (22861.0 + 240.0 * ln2))
                    + xb4 * yb2 * (-1.0 + yb2) * (-22.0 + yb2 * (12455.0 - 7920.0 * ln2) + 432.0 * ln2 + 3.0 * yb6 * (-407.0 + 720.0 * ln2) + 4.0 * yb4 * (-55.0 + 1332.0 * ln2))
                    - xb10 * yb2 * (-1.0 + yb2) * (-22.0 + yb2 * (12455.0 - 7920.0 * ln2) + 432.0 * ln2 + 3.0 * yb6 * (-407.0 + 720.0 * ln2) + 4.0 * yb4 * (-55.0 + 1332.0 * ln2))
                    - 3.0 * xb2 * yb2 * (-1.0 + yb2) * (50.0 + 176.0 * ln2 + 3.0 * yb6 * (-55.0 + 208.0 * ln2) + 4.0 * yb4 * (-53.0 + 500.0 * ln2) - yb2 * (73.0 + 2800.0 * ln2))
                    + 3.0 * xb12 * yb2 * (-1.0 + yb2) * (50.0 + 176.0 * ln2 + 3.0 * yb6 * (-55.0 + 208.0 * ln2) + 4.0 * yb4 * (-53.0 + 500.0 * ln2) - yb2 * (73.0 + 2800.0 * ln2))
                    + 4.0 * myi * xb3 * yb2 * (-1.0 + yb2) * (76.0 + yb2 * (1399.0 - 4080.0 * ln2) + 240.0 * ln2 + 21.0 * yb6 * (-13.0 + 48.0 * ln2) + yb4 * (-290.0 + 2832.0 * ln2))
                    + 4.0 * myi * xb11 * yb2 * (-1.0 + yb2) * (76.0 + yb2 * (1399.0 - 4080.0 * ln2) + 240.0 * ln2 + 21.0 * yb6 * (-13.0 + 48.0 * ln2) + yb4 * (-290.0 + 2832.0 * ln2))
                    + xb6 * (-896.0 + yb6 * (6451.0 - 28224.0 * ln2) + 9.0 * yb10 * (3823.0 + 432.0 * ln2) - 2.0 * yb2 * (3011.0 + 504.0 * ln2) + 3.0 * yb4 * (-4295.0 + 5856.0 * ln2) + yb8 * (44481.0 + 7776.0 * ln2))
                    + xb8 * (896.0 - 9.0 * yb10 * (3823.0 + 432.0 * ln2) + 2.0 * yb2 * (3011.0 + 504.0 * ln2) - 3.0 * yb8 * (14827.0 + 2592.0 * ln2) - 3.0 * yb4 * (-4295.0 + 5856.0 * ln2) + yb6 * (-6451.0 + 28224.0 * ln2))
                    - 8.0 * myi * xb7 * (-224.0 + yb6 * (11161.0 - 6912.0 * ln2) + 21.0 * yb10 * (-29.0 + 48.0 * ln2) + 9.0 * yb4 * (-371.0 + 480.0 * ln2) + yb8 * (10415.0 + 1824.0 * ln2) - 60.0 * yb2 * (17.0 + log(16.0)))
                    - 3.0 * yb2 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2) - 2.0 * (1.0 + ln256)) + 3.0 * xb14 * yb2 * (-1.0 + yb2) * (-112.0 * yb4 * ln2 + yb6 * (-9.0 + 48.0 * ln2) + yb2 * (-5.0 + 80.0 * ln2)
                    - 2.0 * (1.0 + ln256)) + 6.0 * myi * xb * yb2 * (-1.0 + yb2) * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0)) - 2.0 * (3.0 + ln256))
                    + 6.0 * myi * xb13 * yb2 * (-1.0 + yb2) * (5.0 * yb2 * (3.0 + 16.0 * ln2) + yb6 * (3.0 + 48.0 * ln2) - 28.0 * yb4 * (1.0 + log(16.0)) - 2.0 * (3.0 + ln256))));
            const complex<double> logs19 = -2.0 * tb * xb2 * (2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 4.0 * xb6 * (-24.0 - 154.0 * yb - 225.0 * yb2 - 794.0 * yb4 + 668.0 * yb6 + 6930.0 * yb8 + 5733.0 * yb10 - yb3 * (941.0 + 156.0 * ln2) + 18.0 * yb5 * (-173.0 + 172.0 * ln2) + 4.0 * yb9 * (2041.0 + 282.0 * ln2) - 8.0 * yb7 * (-565.0 + 612.0 * ln2)
                    + yb11 * (3813.0 + 828.0 * ln2)) + xb4 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2) - 16.0 * yb7 * (-143.0 + 801.0 * ln2)
                    + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + xb8 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2)
                    - 16.0 * yb7 * (-143.0 + 801.0 * ln2) + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 4.0 * ln2) + yb2 * (1.0 + log(16.0)))
                + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 4.0 * ln2) + yb2 * (1.0 + log(16.0))))
                + tb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (-64.0 - 416.0 * yb - 600.0 * yb2 - 2320.0 * yb4 + 1408.0 * yb6 + 19152.0 * yb8 + 15192.0 * yb10 - yb3 * (2536.0 + 57.0 * ln2) + 18.0 * yb5 * (-600.0 + 59.0 * ln2) + 3.0 * yb11 * (3704.0 + 87.0 * ln2) - 4.0 * yb7 * (-3328.0 + 423.0 * ln2)
                    + yb9 * (22096.0 + 426.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (-2.0 + 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0)) + 3.0 * yb5 * (2.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (-2.0 + 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0))
                    + 3.0 * yb5 * (2.0 + log(128.0)))) - 4.0 * xb2 * (4.0 * xb6 * (-8.0 - 52.0 * yb - 75.0 * yb2 - 290.0 * yb4 + 176.0 * yb6 + 2394.0 * yb8 + 1899.0 * yb10 - yb3 * (317.0 + 39.0 * ln2) + 18.0 * yb5 * (-75.0 + 43.0 * ln2) + 3.0 * yb11 * (463.0 + 69.0 * ln2)
                    - 8.0 * yb7 * (-208.0 + 153.0 * ln2) + yb9 * (2762.0 + 282.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (8.0 + 304.0 * yb3 + 864.0 * yb5 - 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2)
                    + yb6 * (1904.0 + 1269.0 * ln2)) + xb8 * yb * (-1.0 + yb2) * (8.0 + 304.0 * yb3 + 864.0 * yb5 - 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2) + yb6 * (1904.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                + 6.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0)) + 3.0 * yb5 * (-1.0 + log(512.0))) + 6.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0))
                    + 3.0 * yb5 * (-1.0 + log(512.0))));
            const complex<double> logs20 = 2.0 * tb * xb2 * (2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 - 9.0 * yb - 67.0 * yb3 - 135.0 * yb5 - 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 4.0 * xb6 * (-24.0 - 154.0 * yb - 225.0 * yb2 - 794.0 * yb4 + 668.0 * yb6 + 6930.0 * yb8 + 5733.0 * yb10 - yb3 * (941.0 + 156.0 * ln2) + 18.0 * yb5 * (-173.0 + 172.0 * ln2) + 4.0 * yb9 * (2041.0 + 282.0 * ln2) - 8.0 * yb7 * (-565.0 + 612.0 * ln2)
                    + yb11 * (3813.0 + 828.0 * ln2)) + xb4 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2) - 16.0 * yb7 * (-143.0 + 801.0 * ln2)
                    + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + xb8 * (16.0 + 80.0 * yb + 147.0 * yb2 - 326.0 * yb4 - 2008.0 * yb6 - 1818.0 * yb8 - 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2)
                    - 16.0 * yb7 * (-143.0 + 801.0 * ln2) + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + 3.0 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 4.0 * ln2) + yb2 * (1.0 + log(16.0)))
                + 3.0 * xb12 * power_of<2>(-1.0 + yb) * yb2 * power_of<3>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (2.0 - 4.0 * ln2) + yb2 * (1.0 + log(16.0))))
                - tb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (-64.0 - 416.0 * yb - 600.0 * yb2 - 2320.0 * yb4 + 1408.0 * yb6 + 19152.0 * yb8 + 15192.0 * yb10 - yb3 * (2536.0 + 57.0 * ln2) + 18.0 * yb5 * (-600.0 + 59.0 * ln2) + 3.0 * yb11 * (3704.0 + 87.0 * ln2) - 4.0 * yb7 * (-3328.0 + 423.0 * ln2)
                    + yb9 * (22096.0 + 426.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (4.0 + 152.0 * yb3 + 432.0 * yb5 - 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (-2.0 + 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0)) + 3.0 * yb5 * (2.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (-2.0 + 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0))
                    + 3.0 * yb5 * (2.0 + log(128.0)))) + 4.0 * xb2 * (4.0 * xb6 * (-8.0 - 52.0 * yb - 75.0 * yb2 - 290.0 * yb4 + 176.0 * yb6 + 2394.0 * yb8 + 1899.0 * yb10 - yb3 * (317.0 + 39.0 * ln2) + 18.0 * yb5 * (-75.0 + 43.0 * ln2) + 3.0 * yb11 * (463.0 + 69.0 * ln2)
                    - 8.0 * yb7 * (-208.0 + 153.0 * ln2) + yb9 * (2762.0 + 282.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (8.0 + 304.0 * yb3 + 864.0 * yb5 - 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2)
                    + yb6 * (1904.0 + 1269.0 * ln2)) + xb8 * yb * (-1.0 + yb2) * (8.0 + 304.0 * yb3 + 864.0 * yb5 - 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2) + yb6 * (1904.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                + 6.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0)) + 3.0 * yb5 * (-1.0 + log(512.0))) + 6.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (1.0 - 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0))
                    + 3.0 * yb5 * (-1.0 + log(512.0))));
            const complex<double> logs21 = 2.0 * vb * xb2 * (2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 4.0 * xb6 * (24.0 - 154.0 * yb + 225.0 * yb2 + 794.0 * yb4 - 668.0 * yb6 - 6930.0 * yb8 - 5733.0 * yb10 - yb3 * (941.0 + 156.0 * ln2) + 18.0 * yb5 * (-173.0 + 172.0 * ln2) + 4.0 * yb9 * (2041.0 + 282.0 * ln2) - 8.0 * yb7 * (-565.0 + 612.0 * ln2)
                    + yb11 * (3813.0 + 828.0 * ln2)) + xb4 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2) - 16.0 * yb7 * (-143.0 + 801.0 * ln2)
                    + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + xb8 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2)
                    - 16.0 * yb7 * (-143.0 + 801.0 * ln2) + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + 3.0 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + log(16.0)) + yb2 * (1.0 + log(16.0)))
                + 3.0 * xb12 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + log(16.0)) + yb2 * (1.0 + log(16.0))))
                + vb2 * (24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 + 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                - 2.0 * xb8 * (64.0 - 416.0 * yb + 600.0 * yb2 + 2320.0 * yb4 - 1408.0 * yb6 - 19152.0 * yb8 - 15192.0 * yb10 - yb3 * (2536.0 + 57.0 * ln2) + 18.0 * yb5 * (-600.0 + 59.0 * ln2) + 3.0 * yb11 * (3704.0 + 87.0 * ln2) - 4.0 * yb7 * (-3328.0 + 423.0 * ln2)
                    + yb9 * (22096.0 + 426.0 * ln2)) + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb16 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                - 8.0 * xb6 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                - 8.0 * xb10 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                + 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (2.0 - 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0)) + 3.0 * yb5 * (2.0 + log(128.0))) + 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (2.0 - 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0))
                    + 3.0 * yb5 * (2.0 + log(128.0)))) - 4.0 * xb2 * (4.0 * xb6 * (8.0 - 52.0 * yb + 75.0 * yb2 + 290.0 * yb4 - 176.0 * yb6 - 2394.0 * yb8 - 1899.0 * yb10 - yb3 * (317.0 + 39.0 * ln2) + 18.0 * yb5 * (-75.0 + 43.0 * ln2) + 3.0 * yb11 * (463.0 + 69.0 * ln2)
                    - 8.0 * yb7 * (-208.0 + 153.0 * ln2) + yb9 * (2762.0 + 282.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (8.0 - 304.0 * yb3 - 864.0 * yb5 + 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2)
                    + yb6 * (1904.0 + 1269.0 * ln2)) + xb8 * yb * (-1.0 + yb2) * (8.0 - 304.0 * yb3 - 864.0 * yb5 + 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2) + yb6 * (1904.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                + 6.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0)) + 3.0 * yb5 * (-1.0 + log(512.0))) + 6.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0))
                    + 3.0 * yb5 * (-1.0 + log(512.0))));
            const complex<double> logs22 = -2.0 * vb * xb2 * (2.0 * xb2 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 2.0 * xb10 * yb * (-1.0 + yb2) * (-2.0 + 9.0 * yb + 67.0 * yb3 + 135.0 * yb5 + 45.0 * yb7 + yb2 * (-39.0 + 36.0 * ln2) - 3.0 * yb4 * (283.0 + 300.0 * ln2) + yb8 * (-381.0 + 324.0 * ln2) + yb6 * (-521.0 + 540.0 * ln2))
                + 4.0 * xb6 * (24.0 - 154.0 * yb + 225.0 * yb2 + 794.0 * yb4 - 668.0 * yb6 - 6930.0 * yb8 - 5733.0 * yb10 - yb3 * (941.0 + 156.0 * ln2) + 18.0 * yb5 * (-173.0 + 172.0 * ln2) + 4.0 * yb9 * (2041.0 + 282.0 * ln2) - 8.0 * yb7 * (-565.0 + 612.0 * ln2)
                    + yb11 * (3813.0 + 828.0 * ln2)) + xb4 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2) - 16.0 * yb7 * (-143.0 + 801.0 * ln2)
                    + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + xb8 * (-16.0 + 80.0 * yb - 147.0 * yb2 + 326.0 * yb4 + 2008.0 * yb6 + 1818.0 * yb8 + 4203.0 * yb10 + yb3 * (505.0 - 396.0 * ln2) + 3.0 * yb11 * (493.0 + 756.0 * ln2)
                    - 16.0 * yb7 * (-143.0 + 801.0 * ln2) + yb9 * (-4054.0 + 2808.0 * ln2) + yb5 * (-8490.0 + 8136.0 * ln2)) + 3.0 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + log(16.0)) + yb2 * (1.0 + log(16.0)))
                + 3.0 * xb12 * power_of<3>(-1.0 + yb) * yb2 * power_of<2>(1.0 + yb) * (-1.0 + 3.0 * yb2) * (1.0 + yb * (-2.0 + log(16.0)) + yb2 * (1.0 + log(16.0)))) + vb2 * (-3.0 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2 - 3.0 * xb16 * yb3 * power_of<3>(-1.0 + yb2) * (-1.0 + 3.0 * yb2) * ln2
                - 24.0 * xb2 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2 - 24.0 * xb14 * yb3 * power_of<2>(-1.0 + yb2) * (-1.0 + 19.0 * yb2 + 6.0 * yb4) * ln2
                + 2.0 * xb8 * (64.0 - 416.0 * yb + 600.0 * yb2 + 2320.0 * yb4 - 1408.0 * yb6 - 19152.0 * yb8 - 15192.0 * yb10 - yb3 * (2536.0 + 57.0 * ln2) + 18.0 * yb5 * (-600.0 + 59.0 * ln2) + 3.0 * yb11 * (3704.0 + 87.0 * ln2) - 4.0 * yb7 * (-3328.0 + 423.0 * ln2)
                    + yb9 * (22096.0 + 426.0 * ln2)) + 8.0 * xb6 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                + 8.0 * xb10 * yb * (-1.0 + yb2) * (4.0 - 152.0 * yb3 - 432.0 * yb5 + 72.0 * yb7 + yb4 * (1896.0 - 60.0 * ln2) + yb6 * (952.0 + 39.0 * ln2) + yb2 * (24.0 + log(8.0)) + 6.0 * yb8 * (118.0 + log(8.0)))
                - 12.0 * xb4 * yb2 * power_of<2>(-1.0 + yb2) * (2.0 - 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0)) + 3.0 * yb5 * (2.0 + log(128.0))) - 12.0 * xb12 * yb2 * power_of<2>(-1.0 + yb2) * (2.0 - 18.0 * yb4 + 16.0 * yb3 * (1.0 + log(32.0)) - yb * (6.0 + log(32.0))
                    + 3.0 * yb5 * (2.0 + log(128.0)))) + 4.0 * xb2 * (4.0 * xb6 * (8.0 - 52.0 * yb + 75.0 * yb2 + 290.0 * yb4 - 176.0 * yb6 - 2394.0 * yb8 - 1899.0 * yb10 - yb3 * (317.0 + 39.0 * ln2) + 18.0 * yb5 * (-75.0 + 43.0 * ln2) + 3.0 * yb11 * (463.0 + 69.0 * ln2)
                    - 8.0 * yb7 * (-208.0 + 153.0 * ln2) + yb9 * (2762.0 + 282.0 * ln2)) + xb4 * yb * (-1.0 + yb2) * (8.0 - 304.0 * yb3 - 864.0 * yb5 + 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2)
                    + yb6 * (1904.0 + 1269.0 * ln2)) + xb8 * yb * (-1.0 + yb2) * (8.0 - 304.0 * yb3 - 864.0 * yb5 + 144.0 * yb7 + yb4 * (3792.0 - 1935.0 * ln2) + yb2 * (48.0 + 99.0 * ln2) + 3.0 * yb8 * (472.0 + 189.0 * ln2) + yb6 * (1904.0 + 1269.0 * ln2))
                + yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0)) + xb12 * yb3 * (-18.0 * yb2 * ln2 + 36.0 * yb4 * ln2 - 30.0 * yb6 * ln2 + 9.0 * yb8 * ln2 + log(8.0))
                + 6.0 * xb2 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0)) + 3.0 * yb5 * (-1.0 + log(512.0))) + 6.0 * xb10 * yb2 * power_of<2>(-1.0 + yb2) * (-1.0 + 9.0 * yb4 - yb * (-3.0 + log(8.0)) + 8.0 * yb3 * (-1.0 + log(512.0))
                    + 3.0 * yb5 * (-1.0 + log(512.0))));

            const complex<double> term1 = -(64.0 * power_of<2>(lnmuhat)) / 81.0 + (1.0 / (1458.0 * xb4 * power_of<2>(yb + 3.0 * yb3))) * (27.0 * yb2 * (-1.0 + yb2) * (-1.0 + log(16.0)) + 27.0 * xb8 * yb2 * (-1.0 + yb2) * (-1.0 + log(16.0)) - 18.0 * xb2 * yb2 * (-1.0 + yb2) * (31.0 - 32.0 * ln2 + 3.0 * yb2 * (-7.0 + ln256))
                - 18.0 * xb6 * yb2 * (-1.0 + yb2) * (31.0 - 32.0 * ln2 + 3.0 * yb2 * (-7.0 + ln256)) - 2.0 * xb4 * (-528.0 + yb4 * (4449.0 + 72.0 * pisqu - 900.0 * ln2 - 6912.0 * ln2squ) + yb2 * (-2029.0 + 12.0 * pisqu + 468.0 * ln2 - 1152.0 * ln2squ) + 36.0 * yb6 * (359.0 + 3.0 * pisqu - 288.0 * ln2squ + log(4096.0))));

            const complex<double> f29bpart1 = (32.0 * power_of<2>(log(xb))) / 81.0 + (num4 * dilog((-myi) * xb) + num2 * dilog(myi * xb) + (num3 * power_of<2>(log(1.0 - myi * xb))) / 2.0 + (num5 * power_of<2>(log(1.0 + myi * xb))) / 2.0 + num2 * log(1.0 - myi * xb) * log(xb) + num4 * log(1.0 + myi * xb) * log(xb)) / denom1
                + ((num6 + num7) * li2half - num6 * dilog((1.0 - yb) / 2.0) - num7 * dilog((1.0 + yb) / 2.0) + (num6 * ln2 + num1 * log(xb)) * ln1myb + (num7 * power_of<2>(ln1myb)) / 2.0
                  + (num7 * ln2 + 2.0 * num6 * log(xb)) * ln1pyb + (num6 * power_of<2>(ln1pyb)) / 2.0) / denom0 + (-(num12 * dilog(-(vb / w4))) - num12 * dilog(w4 / (-1.0 + w4)) + num12 * dilog(w4 / (1.0 + w4))
                  + num12 * dilog((vb + w4) / (-1.0 + w4)) - num12 * dilog((vb + w4) / (1.0 + w4)) - num12 * dilog(vb / w5) + num12 * dilog(w5 / (-1.0 + w5)) - num12 * dilog(w5 / (1.0 + w5)) - num12 * dilog((-vb + w5) / (-1.0 + w5))
                  + num12 * dilog((-vb + w5) / (1.0 + w5)) + num12 * dilog(w4 / (w4 - w7)) - num12 * dilog((vb + w4) / (w4 - w7)) + num12 * dilog(w5 / (w5 + w7)) - num12 * dilog((-vb + w5) / (w5 + w7)) - 4.0 * num12 * ln2 * log(1.0 - vb)
                  + 4.0 * num12 * ln2 * log(1.0 + vb) + num12 * log((1.0 + vb) / (1.0 - w4)) * log((vb + w4) / w4) - num12 * log((1.0 - vb) / (1.0 + w4)) * log((vb + w4) / w4) - num12 * log(1.0 - vb / w5) * log((-1.0 + vb) / (-1.0 + w5))
                  + num12 * log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 + w5)) - num12 * log((vb + w4) / w4) * log(-((vb + w7) / (w4 - w7))) - num12 * log(1.0 - vb / w5) * log((vb + w7) / (w5 + w7))
                  + (-2.0 * num12 * log(1.0 - vb) + 2.0 * num12 * log(1.0 + vb)) * log(xb) - (2.0 * myi) * num12 * M_PI * log(1.0 + w4inv) * my_sign(-imag(w4)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv)
                  + (2.0 * myi) * num12 * M_PI * log((-1.0 + w4) / w4) * my_sign(imag(w4)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) - (2.0 * myi) * num12 * M_PI * log(1.0 - w7 / w4) * my_sign(imag(w4 / w7)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4)
                  + (2.0 * myi) * num12 * M_PI * log(1.0 + w5inv) * my_sign(-imag(w5)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) - (2.0 * myi) * num12 * M_PI * log((-1.0 + w5) / w5) * my_sign(imag(w5)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5)
                  - (2.0 * myi) * num12 * M_PI * log((w5 + w7) / w5) * my_sign(-imag(w5 / w7)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5)) / denom4 + (-(num11 * dilog(tb / w4)) - num11 * dilog(w4 / (-1.0 + w4)) - num10 * dilog(w4 / (1.0 + w4))
                  + num11 * dilog((-tb + w4) / (-1.0 + w4)) + num10 * dilog((-tb + w4) / (1.0 + w4)) - num11 * dilog(-(tb / w5)) - num10 * dilog(w5 / (-1.0 + w5)) - num11 * dilog(w5 / (1.0 + w5)) + num10 * dilog((tb + w5) / (-1.0 + w5))
                  + num11 * dilog((tb + w5) / (1.0 + w5)) - num10 * dilog(w4 / (w4 - w7)) + num10 * dilog((-tb + w4) / (w4 - w7)) - num10 * dilog(w5 / (w5 + w7)) + num10 * dilog((tb + w5) / (w5 + w7)) + 4.0 * num11 * ln2 * log(1.0 - tb)
                  + 4.0 * num10 * ln2 * log(1.0 + tb) + num11 * log(1.0 - tb / w4) * log((-1.0 + tb) / (-1.0 + w4)) + num10 * log(1.0 - tb / w4) * log((1.0 + tb) / (1.0 + w4)) + num10 * log((1.0 + tb) / (1.0 - w5)) * log((tb + w5) / w5)
                  + num11 * log((1.0 - tb) / (1.0 + w5)) * log((tb + w5) / w5) + num10 * log(1.0 - tb / w4) * log((tb - w7) / (w4 - w7)) + num10 * log((tb + w5) / w5) * log((-tb + w7) / (w5 + w7))
                  + (2.0 * num11 * log(1.0 - tb) + 2.0 * num10 * log(1.0 + tb)) * log(xb) + (2.0 * myi) * num10 * M_PI * log(1.0 + w4inv) * my_sign(-imag(w4)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv)
                  + (2.0 * myi) * num11 * M_PI * log((-1.0 + w4) / w4) * my_sign(imag(w4)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) + (2.0 * myi) * num10 * M_PI * log(1.0 - w7 / w4) * my_sign(imag(w4 / w7)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4)
                  + (2.0 * myi) * num11 * M_PI * log(1.0 + w5inv) * my_sign(-imag(w5)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) + (2.0 * myi) * num10 * M_PI * log((-1.0 + w5) / w5) * my_sign(imag(w5)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)
                  + (2.0 * myi) * num10 * M_PI * log((w5 + w7) / w5) * my_sign(-imag(w5 / w7)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)) / denom3 + ((-num8 - num9) * dilog(-myi / (-myi + wx3)) + (-num8 - num9) * dilog(myi / (myi + wx3))
                  + (-num8 - num9) * dilog(-myi / (-myi + wx4)) + (-num8 - num9) * dilog(myi / (myi + wx4)) + num8 * dilog((myi - xb) / (myi + wx3)) + num8 * dilog((myi - xb) / (myi + wx4)) + num13 * dilog(-(xb / wx3)) + num14 * dilog(xb / wx3)
                  + num13 * dilog(-(xb / wx4)) + num14 * dilog(xb / wx4) + num9 * dilog((-myi + xb) / (-myi + wx3)) + num9 * dilog((-myi + xb) / (-myi + wx4)) + num8 * dilog((myi + xb) / (myi - wx3)) + num9 * dilog((myi + xb) / (myi + wx3))
                  + num8 * dilog((myi + xb) / (myi - wx4)) + num9 * dilog((myi + xb) / (myi + wx4)) + num9 * log((wx3 - xb) / (myi + wx3)) * log(1.0 - myi * xb) + num9 * log((wx3 - xb) / (-myi + wx3)) * log(1.0 + myi * xb)
                  + (2.0 * num13 * ln2 + num13 * log(xb)) * log((wx3 + xb) / wx3) + 2.0 * num13 * ln2 * log((wx4 + xb) / wx4) + log(1.0 - myi * xb) * (num9 * log((wx4 - xb) / (myi + wx4)) + num8 * log((wx3 + xb) / (-myi + wx3))
                    + num8 * log((wx4 + xb) / (-myi + wx4))) + log(1.0 + myi * xb) * (num9 * log((wx4 - xb) / (-myi + wx4)) + num8 * log((wx3 + xb) / (myi + wx3)) + num8 * log((wx4 + xb) / (myi + wx4))) + 2.0 * num14 * ln2 * log(1.0 - xb / wx3)
                  + 2.0 * num14 * ln2 * log(1.0 - xb / wx4) + log(xb) * (num13 * log((wx4 + xb) / wx4) + num14 * log(1.0 - xb / wx3) + num14 * log(1.0 - xb / wx4)) + (2.0 * myi) * num9 * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                  + (2.0 * myi) * num8 * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * num9 * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                  + (2.0 * myi) * num8 * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * num8 * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                  + (2.0 * myi) * num9 * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * num8 * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                  + (2.0 * myi) * num9 * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) / denom2;

            const complex<double> f29bpart2 = num15 * (((log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * power_of<2>(log(1.0 - myi * xb))
                + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * power_of<2>(log(1.0 + myi * xb))
                + dilog(1.0 / (1.0 - w7)) * (4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb) - 4.0 * log(xb)) + dilog((1.0 - tb) / 2.0) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb))
                + dilog(-tb) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog((1.0 + tb) / 2.0) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb))
                + dilog((1.0 - vb) / 2.0) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog(vb) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb))
                + dilog((1.0 + vb) / 2.0) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog((1.0 + tb) / (1.0 + w7)) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb))
                + dilog((1.0 - vb) / (1.0 + w7)) * (2.0 * log(1.0 - myi * xb) + 2.0 * log(1.0 + myi * xb) - 2.0 * log(xb)) + dilog(tb) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb))
                + dilog(-vb) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog((1.0 + vb) / (1.0 - w7)) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb))
                + dilog((-1.0 + tb) / (-1.0 + w7)) * (-2.0 * log(1.0 - myi * xb) - 2.0 * log(1.0 + myi * xb) + 2.0 * log(xb)) + dilog(1.0 / (1.0 + w7)) * (-4.0 * log(1.0 - myi * xb) - 4.0 * log(1.0 + myi * xb) + 4.0 * log(xb))
                + dilog(1.0 / 2.0 - (myi / 2.0) * xb) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb)
                    - 2.0 * ln1pyb) + dilog((1.0 + myi * xb) / 2.0) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb
                    + 4.0 * log(yb) - 2.0 * ln1pyb) + dilog((-myi) * xb) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7)
                    - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb) + dilog(myi * xb) * (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7)
                    + 2.0 * log((vb + w7) / w7) - 2.0 * ln1myb + 4.0 * log(yb) - 2.0 * ln1pyb) + dilog((myi - xb) / (myi + wx3)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb)
                    + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb) + dilog((myi - xb) / (myi + wx4)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb)
                    + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb) + dilog((-myi + xb) / (-myi + wx3)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb)
                    - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb) + dilog((-myi + xb) / (-myi + wx4)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb)
                    - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog((myi + xb) / (myi - wx3)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog((myi + xb) / (myi + wx3)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog((myi + xb) / (myi - wx4)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog((myi + xb) / (myi + wx4)) * (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7) - ln1myb + 2.0 * log(yb) - ln1pyb)
                + dilog(-(xb / wx3)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog(xb / wx3) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog(-(xb / wx4)) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog(xb / wx4) * (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7) + ln1myb - 2.0 * log(yb) + ln1pyb)
                + dilog(-myi / (-myi + wx3)) * (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 2.0 * ln1myb - 4.0 * log(yb)
                    + 2.0 * ln1pyb) + dilog(myi / (myi + wx3)) * (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 2.0 * ln1myb
                    - 4.0 * log(yb) + 2.0 * ln1pyb) + dilog(-myi / (-myi + wx4)) * (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7)
                    + 2.0 * ln1myb - 4.0 * log(yb) + 2.0 * ln1pyb) + dilog(myi / (myi + wx4)) * (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7)
                    - 2.0 * log((vb + w7) / w7) + 2.0 * ln1myb - 4.0 * log(yb) + 2.0 * ln1pyb) + li2half * (4.0 * log(1.0 - tb) + 4.0 * log(tb) - 4.0 * log(1.0 + tb) - 4.0 * log(1.0 - vb) + 4.0 * log(vb) + 4.0 * log(1.0 + vb)
                    - 4.0 * log(1.0 - tb / w7) - 4.0 * log((vb + w7) / w7) - 8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb) + 8.0 * log(xb) + 4.0 * ln1myb - 8.0 * log(yb) + 4.0 * ln1pyb)
                + log(1.0 - myi * xb) * (power_of<2>(log(1.0 - tb)) + 2.0 * ln2 * log(tb) - 4.0 * ln2 * log(1.0 + tb) + power_of<2>(log(1.0 + tb)) - 4.0 * ln2 * log(1.0 - vb) + power_of<2>(log(1.0 - vb)) + 2.0 * ln2 * log(vb) + power_of<2>(log(1.0 + vb))
                    - 2.0 * ln2 * log(1.0 - tb / w7) - 2.0 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) + 2.0 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7)) - 2.0 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) - 2.0 * ln2 * log((vb + w7) / w7)
                    + 2.0 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7)) + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx3 - xb) / (myi + wx3))
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx4 - xb) / (myi + wx4))
                    + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7)) * log(xb)
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx3 + xb) / (-myi + wx3))
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx4 + xb) / (-myi + wx4))
                    - (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) + (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7) + (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7)
                    - (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)) + log(1.0 + myi * xb) * (power_of<2>(log(1.0 - tb)) + 2.0 * ln2 * log(tb) - 4.0 * ln2 * log(1.0 + tb) + power_of<2>(log(1.0 + tb)) - 4.0 * ln2 * log(1.0 - vb)
                    + power_of<2>(log(1.0 - vb)) + 2.0 * ln2 * log(vb) + power_of<2>(log(1.0 + vb)) - 2.0 * ln2 * log(1.0 - tb / w7) - 2.0 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) + 2.0 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7))
                    - 2.0 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) - 2.0 * ln2 * log((vb + w7) / w7) + 2.0 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7))
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx3 - xb) / (-myi + wx3))
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx4 - xb) / (-myi + wx4))
                    + (-2.0 * log(1.0 - tb) - 2.0 * log(tb) + 2.0 * log(1.0 + tb) + 2.0 * log(1.0 - vb) - 2.0 * log(vb) - 2.0 * log(1.0 + vb) + 2.0 * log(1.0 - tb / w7) + 2.0 * log((vb + w7) / w7)) * log(xb)
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx3 + xb) / (myi + wx3))
                    + (-log(1.0 - tb) - log(tb) + log(1.0 + tb) + log(1.0 - vb) - log(vb) - log(1.0 + vb) + log(1.0 - tb / w7) + log((vb + w7) / w7)) * log((wx4 + xb) / (myi + wx4))
                    - (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) + (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7) + (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7)
                    - (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)) + log(xb) * (2.0 * ln2 * log(1.0 - tb) - power_of<2>(log(1.0 - tb)) + 2.0 * ln2 * log(1.0 + tb) - power_of<2>(log(1.0 + tb)) + 2.0 * ln2 * log(1.0 - vb)
                    - power_of<2>(log(1.0 - vb)) + 2.0 * ln2 * log(1.0 + vb) - power_of<2>(log(1.0 + vb)) + 2.0 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) - 2.0 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7)) + 2.0 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7))
                    - 2.0 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7)) + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx3 + xb) / wx3)
                    + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log((wx4 + xb) / wx4)
                    + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log(1.0 - xb / wx3)
                    + (log(1.0 - tb) + log(tb) - log(1.0 + tb) - log(1.0 - vb) + log(vb) + log(1.0 + vb) - log(1.0 - tb / w7) - log((vb + w7) / w7)) * log(1.0 - xb / wx4)
                    + (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) - (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7) - (4.0 * myi) * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7)
                    + (4.0 * myi) * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log(tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) + ln1myb * (power_of<2>(log(1.0 - myi * xb)) + power_of<2>(log(1.0 + myi * xb))
                    + log(1.0 - myi * xb) * (2.0 * ln2 - log((wx3 - xb) / (myi + wx3)) - log((wx4 - xb) / (myi + wx4)) - 2.0 * log(xb) - log((wx3 + xb) / (-myi + wx3)) - log((wx4 + xb) / (-myi + wx4)))
                    + log(1.0 + myi * xb) * (2.0 * ln2 - log((wx3 - xb) / (-myi + wx3)) - log((wx4 - xb) / (-myi + wx4)) - 2.0 * log(xb) - log((wx3 + xb) / (myi + wx3)) - log((wx4 + xb) / (myi + wx4)))
                    + log(xb) * (log((wx3 + xb) / wx3) + log((wx4 + xb) / wx4) + log(1.0 - xb / wx3) + log(1.0 - xb / wx4)) - (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + ln1pyb * (power_of<2>(log(1.0 - myi * xb)) + power_of<2>(log(1.0 + myi * xb))
                    + log(1.0 - myi * xb) * (2.0 * ln2 - log((wx3 - xb) / (myi + wx3)) - log((wx4 - xb) / (myi + wx4)) - 2.0 * log(xb) - log((wx3 + xb) / (-myi + wx3)) - log((wx4 + xb) / (-myi + wx4)))
                    + log(1.0 + myi * xb) * (2.0 * ln2 - log((wx3 - xb) / (-myi + wx3)) - log((wx4 - xb) / (-myi + wx4)) - 2.0 * log(xb) - log((wx3 + xb) / (myi + wx3)) - log((wx4 + xb) / (myi + wx4)))
                    + log(xb) * (log((wx3 + xb) / wx3) + log((wx4 + xb) / wx4) + log(1.0 - xb / wx3) + log(1.0 - xb / wx4)) - (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (2.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (2.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                    - (2.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + log(yb) * (-2.0 * power_of<2>(log(1.0 - myi * xb)) - 2.0 * power_of<2>(log(1.0 + myi * xb))
                    + log(1.0 - myi * xb) * (-4.0 * ln2 + 2.0 * log((wx3 - xb) / (myi + wx3)) + 2.0 * log((wx4 - xb) / (myi + wx4)) + 4.0 * log(xb) + 2.0 * log((wx3 + xb) / (-myi + wx3)) + 2.0 * log((wx4 + xb) / (-myi + wx4)))
                    + log(1.0 + myi * xb) * (-4.0 * ln2 + 2.0 * log((wx3 - xb) / (-myi + wx3)) + 2.0 * log((wx4 - xb) / (-myi + wx4)) + 4.0 * log(xb) + 2.0 * log((wx3 + xb) / (myi + wx3)) + 2.0 * log((wx4 + xb) / (myi + wx4)))
                    + log(xb) * (-2.0 * log((wx3 + xb) / wx3) - 2.0 * log((wx4 + xb) / wx4) - 2.0 * log(1.0 - xb / wx3) - 2.0 * log(1.0 - xb / wx4)) + (4.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                    + (4.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (4.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4)
                    + (4.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (4.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                    + (4.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (4.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                    + (4.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4))) / denom5);

            const complex<double> f27bpart3 = (num15 * ((-1.0 / 3.0) * (pisqu * ln2) + 8.0 * trilog(-1.0) - 28.0 * li3half - 2.0 * trilog(1.0 / (1.0 - tb)) - 4.0 * trilog((1.0 - tb) / 2.0) + 2.0 * trilog(-tb) - 2.0 * trilog(tb) - 2.0 * trilog(tb / (-1.0 + tb)) + trilog((2.0 * tb) / (-1.0 + tb)) + 2.0 * trilog(1.0 / (1.0 + tb)) - 2.0 * trilog((-1.0 + tb) / (1.0 + tb)) + 2.0 * trilog(tb / (1.0 + tb)) - trilog((2.0 * tb) / (1.0 + tb)) - 4.0 * trilog((1.0 + tb) / 2.0) - 2.0 * trilog((1.0 + tb) / (-1.0 + tb)) + 2.0 * trilog(1.0 / (1.0 - vb)) - 4.0 * trilog((1.0 - vb) / 2.0) - 2.0 * trilog(-vb) + 2.0 * trilog(vb) + 2.0 * trilog(vb / (-1.0 + vb)) - trilog((2.0 * vb) / (-1.0 + vb))
                - 2.0 * trilog(1.0 / (1.0 + vb)) - 2.0 * trilog((-1.0 + vb) / (1.0 + vb)) - 2.0 * trilog(vb / (1.0 + vb)) + trilog((2.0 * vb) / (1.0 + vb)) - 4.0 * trilog((1.0 + vb) / 2.0) - 2.0 * trilog((1.0 + vb) / (-1.0 + vb)) - 2.0 * trilog(1.0 / (1.0 - w4)) + trilog((1.0 + vb) / (1.0 - w4)) + 4.0 * trilog(1.0 - w4) - 2.0 * trilog((1.0 - w4) / (1.0 + vb)) - trilog((tb - w4) / (-1.0 + tb)) + trilog((tb - w4) / (1.0 + tb)) + trilog((-1.0 + tb) / (-1.0 + w4)) - 2.0 * trilog((-1.0 + w4) / (-1.0 + tb)) + trilog((-0.5) * (((1.0 + tb) * (-1.0 + w4)) / (tb - w4))) - 2.0 * trilog(-w4inv) + 2.0 * trilog(w4inv)
                + trilog((tb - w4) / ((-1.0 + tb) * w4)) - 2.0 * trilog((-1.0 + w4) / (2.0 * w4)) + 2.0 * trilog(w4 / (-1.0 + w4)) - 2.0 * trilog(1.0 / (1.0 + w4)) + trilog((1.0 + tb) / (1.0 + w4)) + trilog((1.0 - vb) / (1.0 + w4)) - 2.0 * trilog((1.0 - w4) / (1.0 + w4)) + trilog(((1.0 + tb) * (-1.0 + w4)) / ((-1.0 + tb) * (1.0 + w4))) + trilog(((-1.0 + vb) * (-1.0 + w4)) / ((1.0 + vb) * (1.0 + w4))) - 2.0 * trilog(w4 / (1.0 + w4)) - 2.0 * trilog((1.0 + w4) / (1.0 - w4)) + trilog(((-1.0 + tb) * (1.0 + w4)) / (2.0 * (tb - w4))) + trilog(((-1.0 + tb) * (1.0 + w4)) / ((1.0 + tb) * (-1.0 + w4))) + trilog(((1.0 + vb) * (1.0 + w4)) / ((-1.0 + vb) * (-1.0 + w4)))
                - 2.0 * trilog((1.0 + w4) / (2.0 * w4)) - trilog((-tb + w4) / (-1.0 + w4)) + trilog((-tb + w4) / (1.0 + w4)) + trilog((-0.5) * (((-1.0 + vb) * (-1.0 + w4)) / (vb + w4))) + trilog(((1.0 + vb) * (1.0 + w4)) / (2.0 * (vb + w4))) + trilog((vb + w4) / (-1.0 + vb)) - trilog((vb + w4) / (1.0 + vb)) - trilog((vb + w4) / (-1.0 + w4)) + trilog((vb + w4) / (1.0 + w4)) + trilog((tb - w4) / (tb - tb * w4)) - trilog((tb - w4) / (tb + tb * w4)) - trilog(-((tb - w4) / (w4 + tb * w4))) + trilog((vb + w4) / (vb - vb * w4)) - trilog((vb + w4) / (w4 - vb * w4)) - trilog((vb + w4) / (vb + vb * w4))
                + trilog((vb + w4) / (w4 + vb * w4)) - 2.0 * trilog(1.0 / (1.0 - w5)) + trilog((1.0 + tb) / (1.0 - w5)) + trilog((vb - w5) / (-1.0 + vb)) - trilog((vb - w5) / (1.0 + vb)) + trilog((-1.0 + vb) / (-1.0 + w5)) + trilog((-0.5) * (((1.0 + vb) * (-1.0 + w5)) / (vb - w5))) + 2.0 * trilog(-w5inv) - 2.0 * trilog(w5inv) - trilog((vb - w5) / ((-1.0 + vb) * w5)) - 2.0 * trilog((-1.0 + w5) / (2.0 * w5)) - 2.0 * trilog(w5 / (-1.0 + w5)) - 2.0 * trilog(1.0 / (1.0 + w5)) + trilog((1.0 - tb) / (1.0 + w5)) + trilog((1.0 + vb) / (1.0 + w5)) - 2.0 * trilog((1.0 - w5) / (1.0 + w5))
                + trilog(((-1.0 + tb) * (-1.0 + w5)) / ((1.0 + tb) * (1.0 + w5))) + trilog(((1.0 + vb) * (-1.0 + w5)) / ((-1.0 + vb) * (1.0 + w5))) + 2.0 * trilog(w5 / (1.0 + w5)) + 4.0 * trilog(1.0 + w5) - 2.0 * trilog((1.0 + w5) / (1.0 - tb)) - 2.0 * trilog((1.0 + w5) / (1.0 + vb)) - 2.0 * trilog((1.0 + w5) / (1.0 - w5)) + trilog(((-1.0 + vb) * (1.0 + w5)) / (2.0 * (vb - w5))) + trilog(((1.0 + tb) * (1.0 + w5)) / ((-1.0 + tb) * (-1.0 + w5))) + trilog(((-1.0 + vb) * (1.0 + w5)) / ((1.0 + vb) * (-1.0 + w5))) - 2.0 * trilog((1.0 + w5) / (2.0 * w5)) + trilog((-0.5) * (((-1.0 + tb) * (-1.0 + w5)) / (tb + w5))) + trilog(((1.0 + tb) * (1.0 + w5)) / (2.0 * (tb + w5)))
                - trilog((tb + w5) / (-1.0 + tb)) + trilog((tb + w5) / (1.0 + tb)) + trilog((tb + w5) / (-1.0 + w5)) - trilog((tb + w5) / (1.0 + w5)) + trilog((-vb + w5) / (-1.0 + w5)) - trilog((-vb + w5) / (1.0 + w5)) - trilog((tb + w5) / (tb - tb * w5)) + trilog((tb + w5) / (w5 - tb * w5)) + trilog((tb + w5) / (tb + tb * w5)) - trilog((tb + w5) / (w5 + tb * w5)) - trilog((vb - w5) / (vb - vb * w5)) + trilog((vb - w5) / (vb + vb * w5)) + trilog(-((vb - w5) / (w5 + vb * w5))) - 2.0 * trilog(1.0 + w7inv) + 8.0 * trilog(1.0 / (1.0 - w7)) - 4.0 * trilog((1.0 + vb) / (1.0 - w7))
                - 2.0 * trilog((-1.0 + tb) / (tb - w7)) + trilog((tb - w4) / (tb - w7)) + trilog((tb + w5) / (tb - w7)) - 2.0 * trilog((tb - w7) / (-1.0 + tb)) + 2.0 * trilog((tb - w7) / (1.0 + tb)) - 2.0 * trilog(w4 / (w4 - w7)) + trilog((-tb + w4) / (w4 - w7)) + trilog((vb + w4) / (w4 - w7)) + trilog((tb - w7) / (w4 - w7)) + trilog(((-1.0 + w4) * (tb - w7)) / ((-1.0 + tb) * (w4 - w7))) - trilog(((1.0 + w4) * (tb - w7)) / ((1.0 + tb) * (w4 - w7))) + trilog(((-1.0 + tb) * (w4 - w7)) / ((-1.0 + w4) * (tb - w7))) - trilog(((1.0 + tb) * (w4 - w7)) / ((1.0 + w4) * (tb - w7)))
                - 4.0 * trilog((-1.0 + tb) / (-1.0 + w7)) + trilog(((-1.0 + w4) * (tb - w7)) / ((tb - w4) * (-1.0 + w7))) + trilog(-(((1.0 + w5) * (tb - w7)) / ((tb + w5) * (-1.0 + w7)))) + trilog(-(((-1.0 + tb) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) + trilog(-(((1.0 + vb) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) + trilog((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (tb - w7))) - 2.0 * trilog(-w7inv) + 2.0 * trilog(w7inv) - 2.0 * trilog((w4 - w7) / ((-1.0 + w4) * w7)) - 2.0 * trilog((-1.0 + w7) / (2.0 * w7)) + 2.0 * trilog((-1.0 + w7) / w7) - 2.0 * trilog(-w7) + 6.0 * trilog(w7) - 2.0 * trilog(w7 / w4) - 2.0 * trilog(-(w7 / w5))
                + trilog(((-1.0 + tb) * w7) / (tb - w7)) + trilog(-(((1.0 + tb) * w7) / (tb - w7))) - trilog(-(((tb + w5) * w7) / (w5 * (tb - w7)))) - trilog(-(w7 / (w4 - w7))) - 2.0 * trilog(((-1.0 + w4) * w7) / (w4 - w7)) + 2.0 * trilog(-(((1.0 + w4) * w7) / (w4 - w7))) - trilog(-(((vb + w4) * w7) / (vb * (w4 - w7)))) + 6.0 * trilog(w7 / (-1.0 + w7)) + trilog(((-1.0 + tb) * w7) / (tb * (-1.0 + w7))) + trilog(((1.0 + vb) * w7) / (vb * (-1.0 + w7))) - 2.0 * trilog(((-1.0 + w4) * w7) / (w4 * (-1.0 + w7))) - 2.0 * trilog(((1.0 + w5) * w7) / (w5 * (-1.0 + w7))) - 4.0 * trilog(1.0 / (1.0 + w7)) + 2.0 * trilog((1.0 + tb) / (1.0 + w7))
                + 2.0 * trilog((1.0 - vb) / (1.0 + w7)) - 2.0 * trilog((1.0 - w7) / (1.0 + w7)) - trilog(((1.0 + w4) * (tb - w7)) / ((tb - w4) * (1.0 + w7))) - trilog(-(((-1.0 + w5) * (tb - w7)) / ((tb + w5) * (1.0 + w7)))) - trilog(-(((1.0 + tb) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) - trilog(-(((-1.0 + vb) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) + trilog(((1.0 + tb) * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7))) + trilog(((-1.0 + vb) * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7))) - 2.0 * trilog(w7 / (1.0 + w7)) + trilog(((-1.0 + vb) * w7) / (vb * (1.0 + w7))) + 2.0 * trilog(((-1.0 + w5) * w7) / (w5 * (1.0 + w7)))
                + 2.0 * trilog((1.0 + w7) / (1.0 - w7)) - trilog(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (tb - w7))) - trilog(((-1.0 + tb) * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7))) - trilog(((1.0 + vb) * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7))) + 2.0 * trilog((1.0 + w7) / (2.0 * w7)) - trilog((-1.0 + w7) / (-tb + w7)) - trilog(((-tb + w4) * w7) / (w4 * (-tb + w7))) + trilog((1.0 + w7) / (-tb + w7)) - 3.0 * trilog((-tb + w7) / (-1.0 + w7)) + trilog((-tb + w7) / (1.0 + w7)) - 2.0 * trilog((1.0 + vb) / (vb + w7)) + trilog((vb + w4) / (vb + w7)) + trilog((vb - w5) / (vb + w7))
                + trilog(((1.0 + vb) * (w4 - w7)) / ((-1.0 + w4) * (vb + w7))) - trilog(((-1.0 + vb) * (w4 - w7)) / ((1.0 + w4) * (vb + w7))) - trilog((-1.0 + w7) / (vb + w7)) + trilog((-0.5) * (((-1.0 + vb) * (-1.0 + w7)) / (vb + w7))) + trilog(((1.0 + vb) * w7) / (vb + w7)) - trilog(((vb + w4) * w7) / (w4 * (vb + w7))) - trilog(((-vb + w5) * w7) / (w5 * (vb + w7))) + trilog((1.0 + w7) / (vb + w7)) - trilog(((1.0 + vb) * (1.0 + w7)) / (2.0 * (vb + w7))) + 2.0 * trilog((vb + w7) / (-1.0 + vb)) - 2.0 * trilog((vb + w7) / (1.0 + vb)) + trilog(-((vb + w7) / (w4 - w7)))
                + trilog(((-1.0 + w4) * (vb + w7)) / ((1.0 + vb) * (w4 - w7))) - trilog(((1.0 + w4) * (vb + w7)) / ((-1.0 + vb) * (w4 - w7))) - 3.0 * trilog((vb + w7) / (-1.0 + w7)) + trilog(((-1.0 + w4) * (vb + w7)) / ((vb + w4) * (-1.0 + w7))) + trilog(-(((1.0 + w5) * (vb + w7)) / ((vb - w5) * (-1.0 + w7)))) + trilog((vb + w7) / (1.0 + w7)) - trilog(((1.0 + w4) * (vb + w7)) / ((vb + w4) * (1.0 + w7))) - trilog(-(((-1.0 + w5) * (vb + w7)) / ((vb - w5) * (1.0 + w7)))) - trilog(w7 / (-w4 + w7)) - trilog(((tb - w4) * w7) / (tb * (-w4 + w7))) - 2.0 * trilog(w5 / (w5 + w7)) + trilog((tb + w5) / (w5 + w7))
                + trilog((-vb + w5) / (w5 + w7)) - trilog(((-1.0 + w5) * (tb - w7)) / ((1.0 + tb) * (w5 + w7))) + trilog(((1.0 + w5) * (tb - w7)) / ((-1.0 + tb) * (w5 + w7))) - 2.0 * trilog(w7 / (w5 + w7)) - trilog(((vb - w5) * w7) / (vb * (w5 + w7))) - 2.0 * trilog(((1.0 + w5) * w7) / (w5 + w7)) - trilog(((tb + w5) * w7) / (tb * (w5 + w7))) + trilog((-tb + w7) / (w5 + w7)) + trilog((vb + w7) / (w5 + w7)) - trilog(((-1.0 + w5) * (vb + w7)) / ((-1.0 + vb) * (w5 + w7))) + trilog(((1.0 + w5) * (vb + w7)) / ((1.0 + vb) * (w5 + w7))) - trilog(((1.0 + tb) * (w5 + w7)) / ((-1.0 + w5) * (tb - w7)))
                + trilog(((-1.0 + tb) * (w5 + w7)) / ((1.0 + w5) * (tb - w7))) + trilog(((1.0 + vb) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))) + trilog(((-1.0 + tb) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))) - trilog(((-1.0 + vb) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))) - trilog(((1.0 + tb) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))) - trilog(((-1.0 + vb) * (w5 + w7)) / ((-1.0 + w5) * (vb + w7))) + trilog(((1.0 + vb) * (w5 + w7)) / ((1.0 + w5) * (vb + w7))) + trilog((w7 + tb * w7) / (tb + tb * w7)) + trilog((w7 - vb * w7) / (vb + w7)) - 2.0 * trilog((w4 - w7) / (w4 - w4 * w7)) + 2.0 * trilog((w4 - w7) / (w4 + w4 * w7))
                + 2.0 * trilog(-((w4 - w7) / (w7 + w4 * w7))) + 2.0 * trilog((w7 + w4 * w7) / (w4 + w4 * w7)) - 2.0 * trilog((w5 + w7) / (w5 - w5 * w7)) + 2.0 * trilog((w5 + w7) / (w7 - w5 * w7)) + 2.0 * trilog((w7 - w5 * w7) / (w5 + w7)) + 2.0 * trilog((w5 + w7) / (w5 + w5 * w7)) - 2.0 * trilog((w5 + w7) / (w7 + w5 * w7)) + 24.0 * trilog(-myi / wx3) + 24.0 * trilog(myi / wx3) + 40.0 * trilog(-myi / (-myi + wx3)) + 8.0 * trilog(wx3 / (-myi + wx3)) - 16.0 * trilog((-myi + wx3) / (2.0 * wx3)) + 16.0 * trilog((-myi + wx3) / wx3) + 40.0 * trilog(myi / (myi + wx3)) - 16.0 * trilog((myi - wx3) / (myi + wx3)) + 8.0 * trilog(wx3 / (myi + wx3))
                - 16.0 * trilog((myi + wx3) / (myi - wx3)) - 16.0 * trilog((myi + wx3) / (2.0 * wx3)) + 16.0 * trilog((myi + wx3) / wx3) + 24.0 * trilog(-myi / wx4) + 24.0 * trilog(myi / wx4) + 40.0 * trilog(-myi / (-myi + wx4)) + 8.0 * trilog(wx4 / (-myi + wx4)) - 16.0 * trilog((-myi + wx4) / (2.0 * wx4)) + 16.0 * trilog((-myi + wx4) / wx4) + 40.0 * trilog(myi / (myi + wx4)) - 16.0 * trilog((myi - wx4) / (myi + wx4)) + 8.0 * trilog(wx4 / (myi + wx4)) - 16.0 * trilog((myi + wx4) / (myi - wx4)) - 16.0 * trilog((myi + wx4) / (2.0 * wx4)) + 16.0 * trilog((myi + wx4) / wx4) - 20.0 * trilog((myi - xb) / (myi + wx3)) - 20.0 * trilog((myi - xb) / (myi + wx4))
                - 8.0 * trilog((-myi + wx3) / (wx3 - xb)) - 8.0 * trilog((myi + wx3) / (wx3 - xb)) - 4.0 * trilog((wx3 - xb) / (-myi + wx3)) - 4.0 * trilog((wx3 - xb) / (myi + wx3)) - 8.0 * trilog((-myi + wx4) / (wx4 - xb)) - 8.0 * trilog((myi + wx4) / (wx4 - xb)) - 4.0 * trilog((wx4 - xb) / (-myi + wx4)) - 4.0 * trilog((wx4 - xb) / (myi + wx4)) + 24.0 * trilog(1.0 / 2.0 - (myi / 2.0) * xb) + 24.0 * trilog(1.0 - myi * xb) + 8.0 * trilog(((-myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 - xb))) + 8.0 * trilog(((-myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 - xb))) + 24.0 * trilog((1.0 + myi * xb) / 2.0) + 24.0 * trilog(1.0 + myi * xb)
                + 8.0 * trilog(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 - xb))) + 8.0 * trilog(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 - xb))) + 4.0 * trilog((myi * (wx3 - xb)) / ((-myi + wx3) * xb)) + 4.0 * trilog(((-myi) * (wx3 - xb)) / ((myi + wx3) * xb)) + 4.0 * trilog((myi * (wx4 - xb)) / ((-myi + wx4) * xb)) + 4.0 * trilog(((-myi) * (wx4 - xb)) / ((myi + wx4) * xb)) + 24.0 * trilog((-myi) * xb) + 24.0 * trilog(myi * xb) + 8.0 * trilog(-(xb / wx3)) + 8.0 * trilog(xb / wx3) + 8.0 * trilog(-(xb / wx4)) + 8.0 * trilog(xb / wx4) - 8.0 * trilog(-xb2) - 16.0 * trilog(-myi / (-myi + xb)) + 4.0 * trilog(((-myi) * (wx3 - xb)) / (wx3 * (-myi + xb)))
                + 4.0 * trilog(((-myi) * (wx4 - xb)) / (wx4 * (-myi + xb))) - 8.0 * trilog(xb / (-myi + xb)) + 24.0 * trilog((2.0 * xb) / (-myi + xb)) - 20.0 * trilog((-myi + xb) / (-myi + wx3)) - 20.0 * trilog((-myi + xb) / (-myi + wx4)) + 16.0 * trilog((-myi + xb) * xbinv) - 4.0 * trilog((wx3 * (-myi + xb)) / ((-myi + wx3) * xb)) - 4.0 * trilog((wx3 * (-myi + xb)) / ((myi + wx3) * xb)) - 4.0 * trilog((wx4 * (-myi + xb)) / ((-myi + wx4) * xb)) - 4.0 * trilog((wx4 * (-myi + xb)) / ((myi + wx4) * xb)) - 16.0 * trilog(myi / (myi + xb)) + 4.0 * trilog((myi * (wx3 - xb)) / (wx3 * (myi + xb))) + 4.0 * trilog((myi * (wx4 - xb)) / (wx4 * (myi + xb))) - 8.0 * trilog(xb / (myi + xb))
                + 24.0 * trilog((2.0 * xb) / (myi + xb)) + 8.0 * trilog(((-myi + wx3) * (-myi + xb)) / ((myi + wx3) * (myi + xb))) + 8.0 * trilog(((myi + wx3) * (-myi + xb)) / ((-myi + wx3) * (myi + xb))) + 8.0 * trilog(((-myi + wx4) * (-myi + xb)) / ((myi + wx4) * (myi + xb))) + 8.0 * trilog(((myi + wx4) * (-myi + xb)) / ((-myi + wx4) * (myi + xb))) - 20.0 * trilog((myi + xb) / (myi - wx3)) - 20.0 * trilog((myi + xb) / (myi + wx3)) - 20.0 * trilog((myi + xb) / (myi - wx4)) - 20.0 * trilog((myi + xb) / (myi + wx4)) - 8.0 * trilog(-((myi + xb) / (wx3 - xb))) - 8.0 * trilog(-((myi + xb) / (wx4 - xb))) + 16.0 * trilog((myi + xb) * xbinv)
                - 4.0 * trilog((wx3 * (myi + xb)) / ((-myi + wx3) * xb)) - 4.0 * trilog((wx3 * (myi + xb)) / ((myi + wx3) * xb)) - 4.0 * trilog((wx4 * (myi + xb)) / ((-myi + wx4) * xb)) - 4.0 * trilog((wx4 * (myi + xb)) / ((myi + wx4) * xb)) + 8.0 * trilog(((-myi + wx3) * (myi + xb)) / ((myi + wx3) * (-myi + xb))) + 8.0 * trilog(((myi + wx3) * (myi + xb)) / ((-myi + wx3) * (-myi + xb))) + 8.0 * trilog(((-myi + wx4) * (myi + xb)) / ((myi + wx4) * (-myi + xb))) + 8.0 * trilog(((myi + wx4) * (myi + xb)) / ((-myi + wx4) * (-myi + xb))) - 8.0 * trilog((-myi + xb) / (-wx3 + xb)) - 4.0 * trilog((-wx3 + xb) / (-myi + xb)) - 4.0 * trilog((-wx3 + xb) / (myi + xb))
                - 8.0 * trilog((-myi + wx3) / (wx3 + xb)) - 8.0 * trilog((myi + wx3) / (wx3 + xb)) + 8.0 * trilog(((myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 + xb))) + 8.0 * trilog(((-myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 + xb))) - 8.0 * trilog((-myi + xb) / (wx3 + xb)) - 8.0 * trilog((myi + xb) / (wx3 + xb)) - 4.0 * trilog((wx3 + xb) / (-myi + wx3)) - 4.0 * trilog((wx3 + xb) / (myi + wx3)) + 4.0 * trilog(((-myi) * (wx3 + xb)) / ((-myi + wx3) * xb)) + 4.0 * trilog((myi * (wx3 + xb)) / ((myi + wx3) * xb)) - 4.0 * trilog((wx3 + xb) / (-myi + xb)) + 4.0 * trilog(((-myi) * (wx3 + xb)) / (wx3 * (-myi + xb))) - 4.0 * trilog((wx3 + xb) / (myi + xb))
                + 4.0 * trilog((myi * (wx3 + xb)) / (wx3 * (myi + xb))) - 8.0 * trilog((-myi + xb) / (-wx4 + xb)) - 4.0 * trilog((-wx4 + xb) / (-myi + xb)) - 4.0 * trilog((-wx4 + xb) / (myi + xb)) - 8.0 * trilog((-myi + wx4) / (wx4 + xb)) - 8.0 * trilog((myi + wx4) / (wx4 + xb)) + 8.0 * trilog(((myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 + xb))) + 8.0 * trilog(((-myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 + xb))) - 8.0 * trilog((-myi + xb) / (wx4 + xb)) - 8.0 * trilog((myi + xb) / (wx4 + xb)) - 4.0 * trilog((wx4 + xb) / (-myi + wx4)) - 4.0 * trilog((wx4 + xb) / (myi + wx4)) + 4.0 * trilog(((-myi) * (wx4 + xb)) / ((-myi + wx4) * xb))
                + 4.0 * trilog((myi * (wx4 + xb)) / ((myi + wx4) * xb)) - 4.0 * trilog((wx4 + xb) / (-myi + xb)) + 4.0 * trilog(((-myi) * (wx4 + xb)) / (wx4 * (-myi + xb))) - 4.0 * trilog((wx4 + xb) / (myi + xb)) + 4.0 * trilog((myi * (wx4 + xb)) / (wx4 * (myi + xb))) + 2.0 * dilog((-1.0 + w7) / (2.0 * w7)) * lnhalf + 2.0 * dilog((1.0 - w7) / (1.0 + w7)) * lnhalf - 2.0 * dilog((1.0 + w7) / (1.0 - w7)) * lnhalf - 2.0 * dilog((1.0 + w7) / (2.0 * w7)) * lnhalf + 16.0 * dilog((-myi + wx3) / (2.0 * wx3)) * lnhalf + 16.0 * dilog((myi - wx3) / (myi + wx3)) * lnhalf + 16.0 * dilog((myi + wx3) / (myi - wx3)) * lnhalf
                + 16.0 * dilog((myi + wx3) / (2.0 * wx3)) * lnhalf + 16.0 * dilog((-myi + wx4) / (2.0 * wx4)) * lnhalf + 16.0 * dilog((myi - wx4) / (myi + wx4)) * lnhalf + 16.0 * dilog((myi + wx4) / (myi - wx4)) * lnhalf + 16.0 * dilog((myi + wx4) / (2.0 * wx4)) * lnhalf + (10.0 * pisqu * ln2) / 3.0 - (2.0 * power_of<3>(ln2)) / 3.0 - (4.0 * pisqu * ln4) / 3.0 + dilog(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (tb - w7))) * log((1.0 - tb) / 2.0) + dilog(((-1.0 + tb) * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7))) * log((1.0 - tb) / 2.0) + (pisqu * log(1.0 - tb)) / 12.0 + (ln2squ * log(1.0 - tb)) / 2.0 - dilog(1.0 - tb) * log(1.0 - tb)
                - dilog(tb) * log(1.0 - tb) - dilog(((-1.0 + tb) * w7) / (tb - w7)) * log(1.0 - tb) - dilog(((-1.0 + tb) * w7) / (tb * (-1.0 + w7))) * log(1.0 - tb) + (ln2 * power_of<2>(log(1.0 - tb))) / 2.0 + (log((1.0 - tb) / 8.0) * power_of<2>(log(1.0 - tb))) / 6.0 + power_of<3>(log(1.0 - tb)) / 6.0 - power_of<2>(log(1.0 - tb)) * log(tb) - dilog((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (tb - w7))) * log((1.0 + tb) / 2.0) - dilog(((1.0 + tb) * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7))) * log((1.0 + tb) / 2.0) + (power_of<2>(log(1.0 - tb)) * log((1.0 + tb) / 2.0)) / 2.0 - (5.0 * pisqu * log(1.0 + tb)) / 12.0 + (ln2squ * log(1.0 + tb)) / 2.0 + dilog(-tb) * log(1.0 + tb)
                + dilog(1.0 + tb) * log(1.0 + tb) - dilog(-(((1.0 + tb) * w7) / (tb - w7))) * log(1.0 + tb) - dilog((w7 + tb * w7) / (tb + tb * w7)) * log(1.0 + tb) + ln2squ * log(1.0 + tb) - 2.0 * ln2 * log(1.0 - tb) * log(1.0 + tb) + log((1.0 - tb) / 2.0) * log(1.0 - tb) * log(1.0 + tb) + log(1.0 - tb) * log((1.0 + tb) / 2.0) * log(1.0 + tb) - (ln2 * power_of<2>(log(1.0 + tb))) / 2.0 - (ln64 * power_of<2>(log(1.0 + tb))) / 6.0 + (log((1.0 - tb) / 2.0) * power_of<2>(log(1.0 + tb))) / 2.0 + log(-tb) * power_of<2>(log(1.0 + tb)) - (log((1.0 + tb) / 8.0) * power_of<2>(log(1.0 + tb))) / 6.0 + power_of<3>(log(1.0 + tb)) / 6.0
                - dilog(((-1.0 + vb) * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7))) * log((1.0 - vb) / 2.0) - dilog((-0.5) * (((-1.0 + vb) * (-1.0 + w7)) / (vb + w7))) * log((1.0 - vb) / 2.0) + dilog(-w4inv) * (-log(1.0 + tb) - log(1.0 - vb)) + dilog(1.0 / (1.0 + w4)) * (-log(1.0 + tb) - log(1.0 - vb)) + dilog(1.0 / (1.0 - w5)) * (-log(1.0 + tb) - log(1.0 - vb)) + dilog(w5inv) * (-log(1.0 + tb) - log(1.0 - vb)) - (5.0 * pisqu * log(1.0 - vb)) / 12.0 + (ln2squ * log(1.0 - vb)) / 2.0 + dilog(1.0 - vb) * log(1.0 - vb) + dilog(vb) * log(1.0 - vb)
                - dilog(((-1.0 + vb) * w7) / (vb * (1.0 + w7))) * log(1.0 - vb) - dilog((w7 - vb * w7) / (vb + w7)) * log(1.0 - vb) + ln2squ * log(1.0 - vb) - (ln2 * power_of<2>(log(1.0 - vb))) / 2.0 - (ln64 * power_of<2>(log(1.0 - vb))) / 6.0 - (log((1.0 - vb) / 8.0) * power_of<2>(log(1.0 - vb))) / 6.0 + power_of<3>(log(1.0 - vb)) / 6.0 + dilog(-2.0 / (-1.0 + w7)) * (log(1.0 + tb) + log(1.0 - vb)) + power_of<2>(log(1.0 - vb)) * log(vb) + dilog(((1.0 + vb) * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7))) * log((1.0 + vb) / 2.0) + dilog(((1.0 + vb) * (1.0 + w7)) / (2.0 * (vb + w7))) * log((1.0 + vb) / 2.0) + (power_of<2>(log(1.0 - vb)) * log((1.0 + vb) / 2.0)) / 2.0
                + dilog(1.0 / (1.0 - w4)) * (-log(1.0 - tb) - log(1.0 + vb)) + dilog(1.0 / (1.0 + w5)) * (-log(1.0 - tb) - log(1.0 + vb)) + dilog(2.0 / (1.0 + w7)) * (-log(1.0 - tb) - log(1.0 + vb)) + (pisqu * log(1.0 + vb)) / 12.0 + (ln2squ * log(1.0 + vb)) / 2.0 - dilog(-vb) * log(1.0 + vb) - dilog(1.0 + vb) * log(1.0 + vb) - dilog(((1.0 + vb) * w7) / (vb * (-1.0 + w7))) * log(1.0 + vb) - dilog(((1.0 + vb) * w7) / (vb + w7)) * log(1.0 + vb) - 2.0 * ln2 * log(1.0 - vb) * log(1.0 + vb) + log((1.0 - vb) / 2.0) * log(1.0 - vb) * log(1.0 + vb) + log(1.0 - vb) * log((1.0 + vb) / 2.0) * log(1.0 + vb)
                + (ln2 * power_of<2>(log(1.0 + vb))) / 2.0 + (log((1.0 - vb) / 2.0) * power_of<2>(log(1.0 + vb))) / 2.0 - log(-vb) * power_of<2>(log(1.0 + vb)) + (log((1.0 + vb) / 8.0) * power_of<2>(log(1.0 + vb))) / 6.0 + power_of<3>(log(1.0 + vb)) / 6.0 + dilog(w4inv) * (log(1.0 - tb) + log(1.0 + vb)) + dilog(-w5inv) * (log(1.0 - tb) + log(1.0 + vb)) + dilog((tb - w4) / (-1.0 + tb)) * log(1.0 - tb / w4) - dilog((tb - w4) / (1.0 + tb)) * log(1.0 - tb / w4) - dilog((tb - w4) / ((-1.0 + tb) * w4)) * log(1.0 - tb / w4) + dilog((-tb + w4) / (-1.0 + w4)) * log(1.0 - tb / w4) - dilog((-tb + w4) / (1.0 + w4)) * log(1.0 - tb / w4)
                - dilog((tb - w4) / (tb - tb * w4)) * log(1.0 - tb / w4) + dilog((tb - w4) / (tb + tb * w4)) * log(1.0 - tb / w4) + dilog(-((tb - w4) / (w4 + tb * w4))) * log(1.0 - tb / w4) - dilog((tb - w4) / (tb - w7)) * log(1.0 - tb / w4) - dilog((-tb + w4) / (w4 - w7)) * log(1.0 - tb / w4) + dilog(((-tb + w4) * w7) / (w4 * (-tb + w7))) * log(1.0 - tb / w4) + dilog(((tb - w4) * w7) / (tb * (-w4 + w7))) * log(1.0 - tb / w4) - (power_of<2>(log(1.0 - tb)) * log(1.0 - tb / w4)) / 2.0 - (power_of<2>(log(1.0 + tb)) * log(1.0 - tb / w4)) / 2.0 + 2.0 * dilog((1.0 + w4) / (1.0 - w4)) * log(1.0 / (1.0 - w4))
                + 2.0 * dilog((1.0 + w4) / (2.0 * w4)) * log(1.0 / (1.0 - w4)) + 2.0 * dilog((w4 - w7) / ((-1.0 + w4) * w7)) * log(1.0 / (1.0 - w4)) + 2.0 * dilog((w4 - w7) / (w4 - w4 * w7)) * log(1.0 / (1.0 - w4)) - lnhalf * power_of<2>(log(1.0 / (1.0 - w4))) - ln2 * power_of<2>(log(1.0 / (1.0 - w4))) - dilog(((1.0 + vb) * (1.0 + w4)) / ((-1.0 + vb) * (-1.0 + w4))) * log((1.0 + vb) / (1.0 - w4)) - dilog(((1.0 + vb) * (1.0 + w4)) / (2.0 * (vb + w4))) * log((1.0 + vb) / (1.0 - w4)) - dilog(-(((1.0 + vb) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) * log((1.0 + vb) / (1.0 - w4))
                - dilog(((1.0 + vb) * (w4 - w7)) / ((-1.0 + w4) * (vb + w7))) * log((1.0 + vb) / (1.0 - w4)) + (log((1.0 - vb) / 2.0) * power_of<2>(log((1.0 + vb) / (1.0 - w4)))) / 2.0 + (log(-2.0 / (-1.0 + vb)) * power_of<2>(log((1.0 + vb) / (1.0 - w4)))) / 2.0 + (pisqu * log(1.0 - w4)) / 3.0 + power_of<3>(log(1.0 - w4)) / 3.0 - (pisqu * log((1.0 - w4) / (1.0 + tb))) / 6.0 - power_of<3>(log((1.0 - w4) / (1.0 + tb))) / 6.0 - dilog(((-1.0 + tb) * (1.0 + w4)) / (2.0 * (tb - w4))) * log((-1.0 + tb) / (-1.0 + w4)) - dilog(((-1.0 + tb) * (1.0 + w4)) / ((1.0 + tb) * (-1.0 + w4))) * log((-1.0 + tb) / (-1.0 + w4))
                - dilog(((-1.0 + tb) * (w4 - w7)) / ((-1.0 + w4) * (tb - w7))) * log((-1.0 + tb) / (-1.0 + w4)) - dilog(-(((-1.0 + tb) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) * log((-1.0 + tb) / (-1.0 + w4)) + log((1.0 + tb) / 2.0) * log(1.0 - tb / w4) * log((-1.0 + tb) / (-1.0 + w4)) + (power_of<2>(log(1.0 - tb / w4)) * log((-1.0 + tb) / (-1.0 + w4))) / 2.0 + (log(2.0 / (1.0 + tb)) * power_of<2>(log((-1.0 + tb) / (-1.0 + w4)))) / 2.0 + (log((1.0 + tb) / 2.0) * power_of<2>(log((-1.0 + tb) / (-1.0 + w4)))) / 2.0 - (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-2.0 * (tb - w4)) / ((1.0 + tb) * (-1.0 + w4)))) / 2.0 + (power_of<2>(log(1.0 - tb / w4)) * log((-1.0 + w4) / (-1.0 + tb))) / 2.0
                - (pisqu * log((-1.0 + w4) / (-1.0 + vb))) / 6.0 - power_of<3>(log((-1.0 + w4) / (-1.0 + vb))) / 6.0 - (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-0.5) * (((1.0 + tb) * (-1.0 + w4)) / (tb - w4)))) / 2.0 + power_of<2>(log(1.0 / (1.0 - w4))) * log((-1.0 + w4) / (2.0 * w4)) - (power_of<2>(log(1.0 - tb / w4)) * log((tb * (-1.0 + w4)) / ((-1.0 + tb) * w4))) / 2.0 - (pisqu * log(w4 / (-1.0 + tb))) / 6.0 - power_of<3>(log(w4 / (-1.0 + tb))) / 6.0 + (pisqu * log(w4 / (1.0 + tb))) / 6.0 + power_of<3>(log(w4 / (1.0 + tb))) / 6.0 + (pisqu * log(w4 / (1.0 - vb))) / 6.0 + power_of<3>(log(w4 / (1.0 - vb))) / 6.0 - (pisqu * log(-(w4 / (1.0 + vb)))) / 6.0 - power_of<3>(log(-(w4 / (1.0 + vb)))) / 6.0
                + power_of<2>(log(1.0 / (1.0 - w4))) * log((2.0 * w4) / (-1.0 + w4)) - (power_of<2>(log(1.0 - tb / w4)) * log(((-1.0 + tb) * w4) / (tb * (-1.0 + w4)))) / 2.0 + (pisqu * log(w4 / (vb * (-1.0 + w4)))) / 6.0 + power_of<3>(log(w4 / (vb * (-1.0 + w4)))) / 6.0 + 2.0 * dilog((-1.0 + w4) / (2.0 * w4)) * log(1.0 / (1.0 + w4)) + 2.0 * dilog((1.0 - w4) / (1.0 + w4)) * log(1.0 / (1.0 + w4)) - 2.0 * dilog((w4 - w7) / (w4 + w4 * w7)) * log(1.0 / (1.0 + w4)) - 2.0 * dilog(-((w4 - w7) / (w7 + w4 * w7))) * log(1.0 / (1.0 + w4)) - lnhalf * power_of<2>(log(1.0 / (1.0 + w4))) - ln2 * power_of<2>(log(1.0 / (1.0 + w4)))
                - dilog((-0.5) * (((1.0 + tb) * (-1.0 + w4)) / (tb - w4))) * log((1.0 + tb) / (1.0 + w4)) - dilog(((1.0 + tb) * (-1.0 + w4)) / ((-1.0 + tb) * (1.0 + w4))) * log((1.0 + tb) / (1.0 + w4)) + dilog(((1.0 + tb) * (w4 - w7)) / ((1.0 + w4) * (tb - w7))) * log((1.0 + tb) / (1.0 + w4)) + dilog(-(((1.0 + tb) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) * log((1.0 + tb) / (1.0 + w4)) + log((1.0 - tb) / 2.0) * log(1.0 - tb / w4) * log((1.0 + tb) / (1.0 + w4)) - (power_of<2>(log(1.0 - tb / w4)) * log((1.0 + tb) / (1.0 + w4))) / 2.0 + (log((1.0 - tb) / 2.0) * power_of<2>(log((1.0 + tb) / (1.0 + w4)))) / 2.0
                + (log(-2.0 / (-1.0 + tb)) * power_of<2>(log((1.0 + tb) / (1.0 + w4)))) / 2.0 - dilog(((-1.0 + vb) * (-1.0 + w4)) / ((1.0 + vb) * (1.0 + w4))) * log((1.0 - vb) / (1.0 + w4)) - dilog((-0.5) * (((-1.0 + vb) * (-1.0 + w4)) / (vb + w4))) * log((1.0 - vb) / (1.0 + w4)) + dilog(-(((-1.0 + vb) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) * log((1.0 - vb) / (1.0 + w4)) + dilog(((-1.0 + vb) * (w4 - w7)) / ((1.0 + w4) * (vb + w7))) * log((1.0 - vb) / (1.0 + w4)) + (log(2.0 / (1.0 + vb)) * power_of<2>(log((1.0 - vb) / (1.0 + w4)))) / 2.0 + (log((1.0 + vb) / 2.0) * power_of<2>(log((1.0 - vb) / (1.0 + w4)))) / 2.0
                - (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log((2.0 * (tb - w4)) / ((-1.0 + tb) * (1.0 + w4)))) / 2.0 + power_of<2>(log(1.0 / (1.0 + w4))) * log((2.0 * w4) / (1.0 + w4)) + (pisqu * log(1.0 + w4)) / 3.0 + power_of<3>(log(1.0 + w4)) / 3.0 - (pisqu * log((1.0 + w4) / (1.0 - tb))) / 6.0 - power_of<3>(log((1.0 + w4) / (1.0 - tb))) / 6.0 - (power_of<2>(log(1.0 - tb / w4)) * log((1.0 + w4) / (1.0 + tb))) / 2.0 - (pisqu * log((1.0 + w4) / (1.0 + vb))) / 6.0 - power_of<3>(log((1.0 + w4) / (1.0 + vb))) / 6.0 - (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log(((-1.0 + tb) * (1.0 + w4)) / (2.0 * (tb - w4)))) / 2.0 + power_of<2>(log(1.0 / (1.0 + w4))) * log((1.0 + w4) / (2.0 * w4)) + (power_of<2>(log(1.0 - tb)) * log((-tb + w4) / (-1.0 + w4))) / 2.0
                + (power_of<2>(log(1.0 + tb)) * log((-tb + w4) / (1.0 + w4))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((-0.5) * (((-1.0 + vb) * (-1.0 + w4)) / (vb + w4)))) / 2.0 - (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log(((1.0 + vb) * (1.0 + w4)) / (2.0 * (vb + w4)))) / 2.0 + (pisqu * log((-0.5) * (((-1.0 + w4) * (1.0 + w4)) / (vb + w4)))) / 6.0 + power_of<3>(log((-0.5) * (((-1.0 + w4) * (1.0 + w4)) / (vb + w4)))) / 6.0 + (power_of<2>(log(1.0 + vb)) * log((vb + w4) / (-1.0 + w4))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((-2.0 * (vb + w4)) / ((-1.0 + vb) * (-1.0 + w4)))) / 2.0 + dilog((1.0 - w4) / 2.0) * (-log(1.0 - tb / w4) - log((vb + w4) / w4))
                + dilog((1.0 + w4) / 2.0) * (-log(1.0 - tb / w4) - log((vb + w4) / w4)) + dilog((-1.0 + w4) / (-1.0 + w7)) * (-log(1.0 - tb / w4) - log((vb + w4) / w4)) + dilog((-w4 + w7) / (-1.0 + w7)) * (-log(1.0 - tb / w4) - log((vb + w4) / w4)) - dilog((vb + w4) / (-1.0 + vb)) * log((vb + w4) / w4) + dilog((vb + w4) / (1.0 + vb)) * log((vb + w4) / w4) + dilog((vb + w4) / (-1.0 + w4)) * log((vb + w4) / w4) - dilog((vb + w4) / (1.0 + w4)) * log((vb + w4) / w4) - dilog((vb + w4) / (vb - vb * w4)) * log((vb + w4) / w4) + dilog((vb + w4) / (w4 - vb * w4)) * log((vb + w4) / w4)
                + dilog((vb + w4) / (vb + vb * w4)) * log((vb + w4) / w4) - dilog((vb + w4) / (w4 + vb * w4)) * log((vb + w4) / w4) - dilog((vb + w4) / (w4 - w7)) * log((vb + w4) / w4) + dilog(-(((vb + w4) * w7) / (vb * (w4 - w7)))) * log((vb + w4) / w4) - dilog((vb + w4) / (vb + w7)) * log((vb + w4) / w4) + dilog(((vb + w4) * w7) / (w4 * (vb + w7))) * log((vb + w4) / w4) - (power_of<2>(log(1.0 - vb)) * log((vb + w4) / w4)) / 2.0 - (power_of<2>(log(1.0 + vb)) * log((vb + w4) / w4)) / 2.0 + log((1.0 - vb) / 2.0) * log((1.0 + vb) / (1.0 - w4)) * log((vb + w4) / w4)
                + log((1.0 + vb) / 2.0) * log((1.0 - vb) / (1.0 + w4)) * log((vb + w4) / w4) + (log((1.0 + vb) / (1.0 - w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 + (log((1.0 - w4) / (1.0 + vb)) * power_of<2>(log((vb + w4) / w4))) / 2.0 - (log((vb * (-1.0 + w4)) / ((1.0 + vb) * w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 - (log(((1.0 + vb) * w4) / (vb * (-1.0 + w4))) * power_of<2>(log((vb + w4) / w4))) / 2.0 - (log((1.0 - vb) / (1.0 + w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 + (log(((-1.0 + vb) * w4) / (vb * (1.0 + w4))) * power_of<2>(log((vb + w4) / w4))) / 2.0 - (log((1.0 + w4) / (1.0 - vb)) * power_of<2>(log((vb + w4) / w4))) / 2.0
                + (log((vb * (1.0 + w4)) / ((-1.0 + vb) * w4)) * power_of<2>(log((vb + w4) / w4))) / 2.0 + dilog((1.0 + w4) / (1.0 + w7)) * (log(1.0 - tb / w4) + log((vb + w4) / w4)) + dilog((-w4 + w7) / (1.0 + w7)) * (log(1.0 - tb / w4) + log((vb + w4) / w4)) + (power_of<2>(log(1.0 - vb)) * log((vb + w4) / (1.0 + w4))) / 2.0 - (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log((2.0 * (vb + w4)) / ((1.0 + vb) * (1.0 + w4)))) / 2.0 + (pisqu * log(w4 / (tb - tb * w4))) / 6.0 + power_of<3>(log(w4 / (tb - tb * w4))) / 6.0 - (pisqu * log(w4 / (tb + tb * w4))) / 6.0 - power_of<3>(log(w4 / (tb + tb * w4))) / 6.0 + (power_of<2>(log(1.0 - tb / w4)) * log((tb + tb * w4) / (w4 + tb * w4))) / 2.0
                + (power_of<2>(log(1.0 - tb / w4)) * log((w4 + tb * w4) / (tb + tb * w4))) / 2.0 - (pisqu * log(-(w4 / (vb + vb * w4)))) / 6.0 - power_of<3>(log(-(w4 / (vb + vb * w4)))) / 6.0 + (pisqu * log((1.0 - power_of<2>(w4)) / (2.0 * tb - 2.0 * w4))) / 6.0 + power_of<3>(log((1.0 - power_of<2>(w4)) / (2.0 * tb - 2.0 * w4))) / 6.0 + (pisqu * log((-1.0 + power_of<2>(w4)) / (2.0 * (tb - w4)))) / 6.0 + power_of<3>(log((-1.0 + power_of<2>(w4)) / (2.0 * (tb - w4)))) / 6.0 - (pisqu * log((-0.5) * ((-1.0 + power_of<2>(w4)) / w4))) / 3.0 - power_of<3>(log((-0.5) * ((-1.0 + power_of<2>(w4)) / w4))) / 3.0 - (pisqu * log((-1.0 + power_of<2>(w4)) / (2.0 * w4))) / 3.0 - power_of<3>(log((-1.0 + power_of<2>(w4)) / (2.0 * w4))) / 3.0 + (pisqu * log((-1.0 + power_of<2>(w4)) / (2.0 * (vb + w4)))) / 6.0 + power_of<3>(log((-1.0 + power_of<2>(w4)) / (2.0 * (vb + w4)))) / 6.0
                - dilog((vb - w5) / (-1.0 + vb)) * log(1.0 - vb / w5) + dilog((vb - w5) / (1.0 + vb)) * log(1.0 - vb / w5) + dilog((vb - w5) / ((-1.0 + vb) * w5)) * log(1.0 - vb / w5) - dilog((-vb + w5) / (-1.0 + w5)) * log(1.0 - vb / w5) + dilog((-vb + w5) / (1.0 + w5)) * log(1.0 - vb / w5) + dilog((vb - w5) / (vb - vb * w5)) * log(1.0 - vb / w5) - dilog((vb - w5) / (vb + vb * w5)) * log(1.0 - vb / w5) - dilog(-((vb - w5) / (w5 + vb * w5))) * log(1.0 - vb / w5) - dilog((vb - w5) / (vb + w7)) * log(1.0 - vb / w5) + dilog(((-vb + w5) * w7) / (w5 * (vb + w7))) * log(1.0 - vb / w5)
                - dilog((-vb + w5) / (w5 + w7)) * log(1.0 - vb / w5) + dilog(((vb - w5) * w7) / (vb * (w5 + w7))) * log(1.0 - vb / w5) - (power_of<2>(log(1.0 - vb)) * log(1.0 - vb / w5)) / 2.0 - (power_of<2>(log(1.0 + vb)) * log(1.0 - vb / w5)) / 2.0 + 2.0 * dilog((1.0 + w5) / (1.0 - w5)) * log(1.0 / (1.0 - w5)) + 2.0 * dilog((1.0 + w5) / (2.0 * w5)) * log(1.0 / (1.0 - w5)) - 2.0 * dilog((w5 + w7) / (w7 - w5 * w7)) * log(1.0 / (1.0 - w5)) - 2.0 * dilog((w5 + w7) / (w5 + w5 * w7)) * log(1.0 / (1.0 - w5)) - lnhalf * power_of<2>(log(1.0 / (1.0 - w5))) - ln2 * power_of<2>(log(1.0 / (1.0 - w5)))
                + dilog(-w7inv) * (-2.0 * lnhalf + 2.0 * log(1.0 / (1.0 + w4)) + 2.0 * log(1.0 / (1.0 - w5))) + dilog(1.0 / (1.0 + w7)) * (-2.0 * lnhalf + log(1.0 - tb) - log(1.0 + tb) - log(1.0 - vb) + log(1.0 + vb) + 2.0 * log(1.0 / (1.0 + w4)) + 2.0 * log(1.0 / (1.0 - w5))) + dilog((1.0 + tb) / (tb - w7)) * (log((1.0 + tb) / 2.0) + log(1.0 + tb) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 + tb) / (1.0 - w5))) - dilog(((1.0 + tb) * (1.0 + w5)) / ((-1.0 + tb) * (-1.0 + w5))) * log((1.0 + tb) / (1.0 - w5)) - dilog(((1.0 + tb) * (1.0 + w5)) / (2.0 * (tb + w5))) * log((1.0 + tb) / (1.0 - w5))
                + dilog(((1.0 + tb) * (w5 + w7)) / ((-1.0 + w5) * (tb - w7))) * log((1.0 + tb) / (1.0 - w5)) + dilog(((1.0 + tb) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))) * log((1.0 + tb) / (1.0 - w5)) + (log((1.0 - tb) / 2.0) * power_of<2>(log((1.0 + tb) / (1.0 - w5)))) / 2.0 + (log(-2.0 / (-1.0 + tb)) * power_of<2>(log((1.0 + tb) / (1.0 - w5)))) / 2.0 + dilog((1.0 + tb) / (-1.0 + tb)) * (log((1.0 + tb) / (1.0 + w4)) + log((1.0 + tb) / (1.0 - w5))) + (pisqu * log(1.0 - w5)) / 3.0 + power_of<3>(log(1.0 - w5)) / 3.0 - (pisqu * log((1.0 - w5) / (1.0 + vb))) / 6.0 - power_of<3>(log((1.0 - w5) / (1.0 + vb))) / 6.0
                + dilog((-1.0 + vb) / (vb + w7)) * (log((1.0 - vb) / 2.0) + log(1.0 - vb) - log((1.0 - vb) / (1.0 + w4)) - log((-1.0 + vb) / (-1.0 + w5))) + dilog((1.0 - vb) / (1.0 + w7)) * (log((1.0 - vb) / 2.0) + log(1.0 - vb) - log((1.0 - vb) / (1.0 + w4)) - log((vb + w4) / w4) - log(1.0 - vb / w5) - log((-1.0 + vb) / (-1.0 + w5))) - dilog(((-1.0 + vb) * (1.0 + w5)) / (2.0 * (vb - w5))) * log((-1.0 + vb) / (-1.0 + w5)) - dilog(((-1.0 + vb) * (1.0 + w5)) / ((1.0 + vb) * (-1.0 + w5))) * log((-1.0 + vb) / (-1.0 + w5)) + dilog(((-1.0 + vb) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))) * log((-1.0 + vb) / (-1.0 + w5))
                + dilog(((-1.0 + vb) * (w5 + w7)) / ((-1.0 + w5) * (vb + w7))) * log((-1.0 + vb) / (-1.0 + w5)) + log((1.0 + vb) / 2.0) * log(1.0 - vb / w5) * log((-1.0 + vb) / (-1.0 + w5)) - (power_of<2>(log(1.0 - vb / w5)) * log((-1.0 + vb) / (-1.0 + w5))) / 2.0 + (log(2.0 / (1.0 + vb)) * power_of<2>(log((-1.0 + vb) / (-1.0 + w5)))) / 2.0 + (log((1.0 + vb) / 2.0) * power_of<2>(log((-1.0 + vb) / (-1.0 + w5)))) / 2.0 + dilog((-1.0 + vb) / (1.0 + vb)) * (log((1.0 - vb) / (1.0 + w4)) + log((-1.0 + vb) / (-1.0 + w5)))
                + dilog((1.0 - vb) / 2.0) * (2.0 * log(1.0 - vb) + 2.0 * log(1.0 + vb) + log((1.0 - vb) / (1.0 + w4)) + log((vb + w4) / w4) + log(1.0 - vb / w5) + log((-1.0 + vb) / (-1.0 + w5))) - (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((-2.0 * (vb - w5)) / ((1.0 + vb) * (-1.0 + w5)))) / 2.0 - (pisqu * log((-1.0 + w5) / (-1.0 + tb))) / 6.0 - power_of<3>(log((-1.0 + w5) / (-1.0 + tb))) / 6.0 - (power_of<2>(log(1.0 - vb / w5)) * log((-1.0 + w5) / (-1.0 + vb))) / 2.0 - (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((-0.5) * (((1.0 + vb) * (-1.0 + w5)) / (vb - w5)))) / 2.0 + power_of<2>(log(1.0 / (1.0 - w5))) * log((-1.0 + w5) / (2.0 * w5))
                + (power_of<2>(log(1.0 - vb / w5)) * log((vb * (-1.0 + w5)) / ((-1.0 + vb) * w5))) / 2.0 - (pisqu * log(w5 / (1.0 - tb))) / 6.0 - power_of<3>(log(w5 / (1.0 - tb))) / 6.0 + (pisqu * log(-(w5 / (1.0 + tb)))) / 6.0 + power_of<3>(log(-(w5 / (1.0 + tb)))) / 6.0 + (pisqu * log(w5 / (-1.0 + vb))) / 6.0 + power_of<3>(log(w5 / (-1.0 + vb))) / 6.0 - (pisqu * log(w5 / (1.0 + vb))) / 6.0 - power_of<3>(log(w5 / (1.0 + vb))) / 6.0 + power_of<2>(log(1.0 / (1.0 - w5))) * log((2.0 * w5) / (-1.0 + w5)) - (pisqu * log(w5 / (tb * (-1.0 + w5)))) / 6.0 - power_of<3>(log(w5 / (tb * (-1.0 + w5)))) / 6.0 + (power_of<2>(log(1.0 - vb / w5)) * log(((-1.0 + vb) * w5) / (vb * (-1.0 + w5)))) / 2.0
                + dilog(w7inv) * (2.0 * lnhalf - 2.0 * log(1.0 / (1.0 - w4)) - 2.0 * log(1.0 / (1.0 + w5))) + dilog(1.0 / (1.0 - w7)) * (2.0 * lnhalf + log(1.0 - tb) - log(1.0 + tb) - log(1.0 - vb) + log(1.0 + vb) - 2.0 * log(1.0 / (1.0 - w4)) - 2.0 * log(1.0 / (1.0 + w5))) + dilog(-1.0) * (-2.0 * log(1.0 / (1.0 - w4)) - 2.0 * log(1.0 / (1.0 + w4)) - 2.0 * log(1.0 / (1.0 - w5)) - 2.0 * log(1.0 / (1.0 + w5))) + 2.0 * dilog((-1.0 + w5) / (2.0 * w5)) * log(1.0 / (1.0 + w5)) + 2.0 * dilog((1.0 - w5) / (1.0 + w5)) * log(1.0 / (1.0 + w5)) + 2.0 * dilog((w5 + w7) / (w5 - w5 * w7)) * log(1.0 / (1.0 + w5))
                + 2.0 * dilog((w5 + w7) / (w7 + w5 * w7)) * log(1.0 / (1.0 + w5)) - lnhalf * power_of<2>(log(1.0 / (1.0 + w5))) - ln2 * power_of<2>(log(1.0 / (1.0 + w5))) - dilog(((-1.0 + tb) * (-1.0 + w5)) / ((1.0 + tb) * (1.0 + w5))) * log((1.0 - tb) / (1.0 + w5)) - dilog((-0.5) * (((-1.0 + tb) * (-1.0 + w5)) / (tb + w5))) * log((1.0 - tb) / (1.0 + w5)) - dilog(((-1.0 + tb) * (w5 + w7)) / ((1.0 + w5) * (tb - w7))) * log((1.0 - tb) / (1.0 + w5)) - dilog(((-1.0 + tb) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))) * log((1.0 - tb) / (1.0 + w5)) + (log(2.0 / (1.0 + tb)) * power_of<2>(log((1.0 - tb) / (1.0 + w5)))) / 2.0
                + (log((1.0 + tb) / 2.0) * power_of<2>(log((1.0 - tb) / (1.0 + w5)))) / 2.0 + dilog((-1.0 + tb) / (1.0 + tb)) * (log((-1.0 + tb) / (-1.0 + w4)) + log((1.0 - tb) / (1.0 + w5))) + dilog((-1.0 + tb) / (tb - w7)) * (-log((1.0 - tb) / 2.0) + log(1.0 - tb) + log((-1.0 + tb) / (-1.0 + w4)) + log((1.0 - tb) / (1.0 + w5))) - dilog((-0.5) * (((1.0 + vb) * (-1.0 + w5)) / (vb - w5))) * log((1.0 + vb) / (1.0 + w5)) - dilog(((1.0 + vb) * (-1.0 + w5)) / ((-1.0 + vb) * (1.0 + w5))) * log((1.0 + vb) / (1.0 + w5)) - dilog(((1.0 + vb) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))) * log((1.0 + vb) / (1.0 + w5))
                - dilog(((1.0 + vb) * (w5 + w7)) / ((1.0 + w5) * (vb + w7))) * log((1.0 + vb) / (1.0 + w5)) + log((1.0 - vb) / 2.0) * log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 + w5)) + (power_of<2>(log(1.0 - vb / w5)) * log((1.0 + vb) / (1.0 + w5))) / 2.0 + (log((1.0 - vb) / 2.0) * power_of<2>(log((1.0 + vb) / (1.0 + w5)))) / 2.0 + (log(-2.0 / (-1.0 + vb)) * power_of<2>(log((1.0 + vb) / (1.0 + w5)))) / 2.0 + dilog((1.0 + vb) / (-1.0 + vb)) * (log((1.0 + vb) / (1.0 - w4)) + log((1.0 + vb) / (1.0 + w5))) + dilog((1.0 + vb) / (vb + w7)) * (-log((1.0 + vb) / 2.0) + log(1.0 + vb) + log((1.0 + vb) / (1.0 - w4)) + log((1.0 + vb) / (1.0 + w5)))
                + dilog((1.0 + vb) / (1.0 - w7)) * (-log((1.0 + vb) / 2.0) + log(1.0 + vb) + log((1.0 + vb) / (1.0 - w4)) + log((vb + w4) / w4) + log(1.0 - vb / w5) + log((1.0 + vb) / (1.0 + w5))) + dilog((1.0 + vb) / 2.0) * (2.0 * log(1.0 - vb) + 2.0 * log(1.0 + vb) + log((1.0 + vb) / (1.0 - w4)) + log((vb + w4) / w4) + log(1.0 - vb / w5) + log((1.0 + vb) / (1.0 + w5))) - (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log((2.0 * (vb - w5)) / ((-1.0 + vb) * (1.0 + w5)))) / 2.0 + power_of<2>(log(1.0 / (1.0 + w5))) * log((2.0 * w5) / (1.0 + w5)) + (pisqu * log(1.0 + w5)) / 3.0 + power_of<3>(log(1.0 + w5)) / 3.0 - (pisqu * log((1.0 + w5) / (1.0 + tb))) / 6.0
                - power_of<3>(log((1.0 + w5) / (1.0 + tb))) / 6.0 - (pisqu * log((1.0 + w5) / (1.0 - vb))) / 6.0 - power_of<3>(log((1.0 + w5) / (1.0 - vb))) / 6.0 + (power_of<2>(log(1.0 - vb / w5)) * log((1.0 + w5) / (1.0 + vb))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log(((-1.0 + vb) * (1.0 + w5)) / (2.0 * (vb - w5)))) / 2.0 + power_of<2>(log(1.0 / (1.0 + w5))) * log((1.0 + w5) / (2.0 * w5)) - (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((-0.5) * (((-1.0 + tb) * (-1.0 + w5)) / (tb + w5)))) / 2.0 - (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log(((1.0 + tb) * (1.0 + w5)) / (2.0 * (tb + w5)))) / 2.0 + (pisqu * log((-0.5) * (((-1.0 + w5) * (1.0 + w5)) / (tb + w5)))) / 6.0
                + power_of<3>(log((-0.5) * (((-1.0 + w5) * (1.0 + w5)) / (tb + w5)))) / 6.0 + (power_of<2>(log(1.0 + tb)) * log((tb + w5) / (-1.0 + w5))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((-2.0 * (tb + w5)) / ((-1.0 + tb) * (-1.0 + w5)))) / 2.0 + dilog((1.0 - w5) / 2.0) * (-log(1.0 - vb / w5) - log((tb + w5) / w5)) + dilog((1.0 + w5) / 2.0) * (-log(1.0 - vb / w5) - log((tb + w5) / w5)) + dilog((1.0 + w5) / (1.0 - w7)) * (-log(1.0 - vb / w5) - log((tb + w5) / w5)) + dilog((w5 + w7) / (-1.0 + w7)) * (-log(1.0 - vb / w5) - log((tb + w5) / w5))
                + dilog((1.0 + tb) / (1.0 + w7)) * (log((1.0 + tb) / 2.0) + log(1.0 + tb) - log(1.0 - tb / w4) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 + tb) / (1.0 - w5)) - log((tb + w5) / w5)) + dilog((tb + w5) / (-1.0 + tb)) * log((tb + w5) / w5) - dilog((tb + w5) / (1.0 + tb)) * log((tb + w5) / w5) - dilog((tb + w5) / (-1.0 + w5)) * log((tb + w5) / w5) + dilog((tb + w5) / (1.0 + w5)) * log((tb + w5) / w5) + dilog((tb + w5) / (tb - tb * w5)) * log((tb + w5) / w5) - dilog((tb + w5) / (w5 - tb * w5)) * log((tb + w5) / w5) - dilog((tb + w5) / (tb + tb * w5)) * log((tb + w5) / w5)
                + dilog((tb + w5) / (w5 + tb * w5)) * log((tb + w5) / w5) - dilog((tb + w5) / (tb - w7)) * log((tb + w5) / w5) + dilog(-(((tb + w5) * w7) / (w5 * (tb - w7)))) * log((tb + w5) / w5) - dilog((tb + w5) / (w5 + w7)) * log((tb + w5) / w5) + dilog(((tb + w5) * w7) / (tb * (w5 + w7))) * log((tb + w5) / w5) - (power_of<2>(log(1.0 - tb)) * log((tb + w5) / w5)) / 2.0 - (power_of<2>(log(1.0 + tb)) * log((tb + w5) / w5)) / 2.0 + log((1.0 - tb) / 2.0) * log((1.0 + tb) / (1.0 - w5)) * log((tb + w5) / w5) + log((1.0 + tb) / 2.0) * log((1.0 - tb) / (1.0 + w5)) * log((tb + w5) / w5)
                - (log((1.0 + tb) / (1.0 - w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0 - (log((1.0 - w5) / (1.0 + tb)) * power_of<2>(log((tb + w5) / w5))) / 2.0 + (log((tb * (-1.0 + w5)) / ((1.0 + tb) * w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0 + (log(((1.0 + tb) * w5) / (tb * (-1.0 + w5))) * power_of<2>(log((tb + w5) / w5))) / 2.0 + (log((1.0 - tb) / (1.0 + w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0 - (log(((-1.0 + tb) * w5) / (tb * (1.0 + w5))) * power_of<2>(log((tb + w5) / w5))) / 2.0 + (log((1.0 + w5) / (1.0 - tb)) * power_of<2>(log((tb + w5) / w5))) / 2.0 - (log((tb * (1.0 + w5)) / ((-1.0 + tb) * w5)) * power_of<2>(log((tb + w5) / w5))) / 2.0
                + dilog((1.0 - w5) / (1.0 + w7)) * (log(1.0 - vb / w5) + log((tb + w5) / w5)) + dilog((w5 + w7) / (1.0 + w7)) * (log(1.0 - vb / w5) + log((tb + w5) / w5)) + dilog((1.0 + tb) / 2.0) * (2.0 * log(1.0 - tb) + 2.0 * log(1.0 + tb) + log(1.0 - tb / w4) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 + tb) / (1.0 - w5)) + log((tb + w5) / w5)) + dilog((-1.0 + tb) / (-1.0 + w7)) * (-log((1.0 - tb) / 2.0) + log(1.0 - tb) + log(1.0 - tb / w4) + log((-1.0 + tb) / (-1.0 + w4)) + log((1.0 - tb) / (1.0 + w5)) + log((tb + w5) / w5))
                + dilog((1.0 - tb) / 2.0) * (2.0 * log(1.0 - tb) + 2.0 * log(1.0 + tb) + log(1.0 - tb / w4) + log((-1.0 + tb) / (-1.0 + w4)) + log((1.0 - tb) / (1.0 + w5)) + log((tb + w5) / w5)) + (power_of<2>(log(1.0 - tb)) * log((tb + w5) / (1.0 + w5))) / 2.0 - (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log((2.0 * (tb + w5)) / ((1.0 + tb) * (1.0 + w5)))) / 2.0 + (power_of<2>(log(1.0 - vb)) * log((-vb + w5) / (-1.0 + w5))) / 2.0 + (power_of<2>(log(1.0 + vb)) * log((-vb + w5) / (1.0 + w5))) / 2.0 + (pisqu * log(-(w5 / (tb + tb * w5)))) / 6.0 + power_of<3>(log(-(w5 / (tb + tb * w5)))) / 6.0 - (pisqu * log(w5 / (vb - vb * w5))) / 6.0 - power_of<3>(log(w5 / (vb - vb * w5))) / 6.0
                + (pisqu * log(w5 / (vb + vb * w5))) / 6.0 + power_of<3>(log(w5 / (vb + vb * w5))) / 6.0 - (power_of<2>(log(1.0 - vb / w5)) * log((vb + vb * w5) / (w5 + vb * w5))) / 2.0 - (power_of<2>(log(1.0 - vb / w5)) * log((w5 + vb * w5) / (vb + vb * w5))) / 2.0 + (pisqu * log((1.0 - power_of<2>(w5)) / (2.0 * vb - 2.0 * w5))) / 6.0 + power_of<3>(log((1.0 - power_of<2>(w5)) / (2.0 * vb - 2.0 * w5))) / 6.0 + (pisqu * log((-1.0 + power_of<2>(w5)) / (2.0 * (vb - w5)))) / 6.0 + power_of<3>(log((-1.0 + power_of<2>(w5)) / (2.0 * (vb - w5)))) / 6.0 - (pisqu * log((-0.5) * ((-1.0 + power_of<2>(w5)) / w5))) / 3.0 - power_of<3>(log((-0.5) * ((-1.0 + power_of<2>(w5)) / w5))) / 3.0 - (pisqu * log((-1.0 + power_of<2>(w5)) / (2.0 * w5))) / 3.0 - power_of<3>(log((-1.0 + power_of<2>(w5)) / (2.0 * w5))) / 3.0
                + (pisqu * log((-1.0 + power_of<2>(w5)) / (2.0 * (tb + w5)))) / 6.0 + power_of<3>(log((-1.0 + power_of<2>(w5)) / (2.0 * (tb + w5)))) / 6.0 - power_of<2>(lnhalf) * log(1.0 + w7inv) + power_of<2>(log(1.0 / (1.0 + w4))) * log(1.0 + w7inv) + power_of<2>(log(1.0 / (1.0 - w5))) * log(1.0 + w7inv) - dilog(w7 / (-w4 + w7)) * log(1.0 - tb / w7) + (log(1.0 - tb) * power_of<2>(log(1.0 - tb / w7))) / 2.0 + (log(1.0 + tb) * power_of<2>(log(1.0 - tb / w7))) / 2.0 - (log(1.0 - tb / w4) * power_of<2>(log(1.0 - tb / w7))) / 2.0 - (log((tb + w5) / w5) * power_of<2>(log(1.0 - tb / w7))) / 2.0 - (pisqu * log(1.0 / (tb - w7))) / 6.0 - power_of<3>(log(1.0 / (tb - w7))) / 6.0 + (pisqu * log(2.0 / (tb - w7))) / 6.0 + power_of<3>(log(2.0 / (tb - w7))) / 6.0
                + (pisqu * log(w4 / (tb - w7))) / 6.0 + power_of<3>(log(w4 / (tb - w7))) / 6.0 + (pisqu * log((-1.0 + w5) / (tb - w7))) / 6.0 + power_of<3>(log((-1.0 + w5) / (tb - w7))) / 6.0 - (pisqu * log((1.0 + w5) / (tb - w7))) / 6.0 - power_of<3>(log((1.0 + w5) / (tb - w7))) / 6.0 + (power_of<2>(log(1.0 - tb / w7)) * log((-tb + w4) / (w4 - w7))) / 2.0 - dilog(((-1.0 + w4) * (tb - w7)) / ((-1.0 + tb) * (w4 - w7))) * log((tb - w7) / (w4 - w7)) + dilog(((1.0 + w4) * (tb - w7)) / ((1.0 + tb) * (w4 - w7))) * log((tb - w7) / (w4 - w7)) - dilog(((-1.0 + w4) * (tb - w7)) / ((tb - w4) * (-1.0 + w7))) * log((tb - w7) / (w4 - w7))
                + dilog(((1.0 + w4) * (tb - w7)) / ((tb - w4) * (1.0 + w7))) * log((tb - w7) / (w4 - w7)) - (power_of<2>(log(1.0 - tb / w4)) * log((tb - w7) / (w4 - w7))) / 2.0 + (power_of<2>(log(1.0 - tb / w4)) * log((w4 * (tb - w7)) / (tb * (w4 - w7)))) / 2.0 + (pisqu * log(w4 - w7)) / 3.0 + power_of<3>(log(w4 - w7)) / 3.0 + (pisqu * log((w4 - w7) / (-1.0 + vb))) / 6.0 + power_of<3>(log((w4 - w7) / (-1.0 + vb))) / 6.0 - (pisqu * log((w4 - w7) / (1.0 + vb))) / 6.0 - power_of<3>(log((w4 - w7) / (1.0 + vb))) / 6.0 - (power_of<2>(log(1.0 - tb / w4)) * log((w4 - w7) / (tb - w7))) / 2.0 + (power_of<2>(log(1.0 - tb / w4)) * log((tb * (w4 - w7)) / (w4 * (tb - w7)))) / 2.0 + (pisqu * log(-w5 - w7)) / 3.0
                + power_of<3>(log(-w5 - w7)) / 3.0 - (power_of<2>(log(1.0 - tb / w7)) * log((-1.0 + tb) / (-1.0 + w7))) / 2.0 + log(1.0 - tb / w4) * log((tb - w7) / (w4 - w7)) * log((-1.0 + tb) / (-1.0 + w7)) + (power_of<2>(log((tb - w7) / (w4 - w7))) * log((-1.0 + tb) / (-1.0 + w7))) / 2.0 + (power_of<2>(log((1.0 - tb) / 2.0)) * log((-2.0 * (tb - w7)) / ((1.0 + tb) * (-1.0 + w7)))) / 2.0 - (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log(((-1.0 + w4) * (tb - w7)) / ((tb - w4) * (-1.0 + w7)))) / 2.0 - (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log(-(((1.0 + w5) * (tb - w7)) / ((tb + w5) * (-1.0 + w7))))) / 2.0
                - (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((-1.0 + tb) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7))))) / 2.0 + (pisqu * log(-(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7))))) / 6.0 + power_of<3>(log(-(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7))))) / 6.0 + (pisqu * log(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) / 6.0 + power_of<3>(log(((-1.0 + w4) * (w4 - w7)) / ((tb - w4) * (-1.0 + w7)))) / 6.0 - (pisqu * log(-(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7))))) / 6.0 - power_of<3>(log(-(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7))))) / 6.0 - (pisqu * log(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7)))) / 3.0
                - power_of<3>(log(((-1.0 + w4) * (w4 - w7)) / (w4 * (-1.0 + w7)))) / 3.0 + (pisqu * log(-(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7))))) / 6.0 + power_of<3>(log(-(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7))))) / 6.0 + (pisqu * log(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) / 6.0 + power_of<3>(log(((-1.0 + w4) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) / 6.0 + (power_of<2>(log((tb - w7) / (w4 - w7))) * log((-1.0 + w7) / (-1.0 + tb))) / 2.0 + (power_of<2>(log((1.0 - tb) / 2.0)) * log((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (tb - w7)))) / 2.0 - (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log(((tb - w4) * (-1.0 + w7)) / ((-1.0 + w4) * (tb - w7)))) / 2.0
                - (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log(-(((tb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (tb - w7))))) / 2.0 - (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((tb - w4) * (-1.0 + w7)) / ((-1.0 + tb) * (w4 - w7))))) / 2.0 - (pisqu * log(-2.0 / w7)) / 3.0 - power_of<3>(log(-2.0 / w7)) / 3.0 + (pisqu * log(2.0 / w7)) / 3.0 + power_of<3>(log(2.0 / w7)) / 3.0 + (pisqu * log((-1.0 + w4) / w7)) / 3.0 + power_of<3>(log((-1.0 + w4) / w7)) / 3.0 - (pisqu * log((1.0 + w4) / w7)) / 3.0 - power_of<3>(log((1.0 + w4) / w7)) / 3.0 - (pisqu * log((1.0 - w5) / w7)) / 3.0 - power_of<3>(log((1.0 - w5) / w7)) / 3.0 + (pisqu * log(-((1.0 + w5) / w7))) / 3.0 + power_of<3>(log(-((1.0 + w5) / w7))) / 3.0 - power_of<2>(lnhalf) * log((-1.0 + w7) / (2.0 * w7))
                + power_of<2>(lnhalf) * log((-1.0 + w7) / w7) - power_of<2>(log(1.0 / (1.0 - w4))) * log((-1.0 + w7) / w7) - power_of<2>(log(1.0 / (1.0 + w5))) * log((-1.0 + w7) / w7) + power_of<2>(log(1.0 / (1.0 - w4))) * log((w4 * (-1.0 + w7)) / ((-1.0 + w4) * w7)) + power_of<2>(log(1.0 / (1.0 + w5))) * log((w5 * (-1.0 + w7)) / ((1.0 + w5) * w7)) - (log(1.0 / (1.0 - w7)) * power_of<2>(log(-(w7 / (w4 - w7))))) / 2.0 - (log(1.0 - w7) * power_of<2>(log(-(w7 / (w4 - w7))))) / 2.0 + power_of<2>(lnhalf) * log(w7 / (-1.0 + w7)) - power_of<2>(log(1.0 / (1.0 - w4))) * log(w7 / (-1.0 + w7)) - power_of<2>(log(1.0 / (1.0 + w5))) * log(w7 / (-1.0 + w7)) - power_of<2>(lnhalf) * log((2.0 * w7) / (-1.0 + w7))
                + (pisqu * log(w7 / (tb * (-1.0 + w7)))) / 6.0 + power_of<3>(log(w7 / (tb * (-1.0 + w7)))) / 6.0 + power_of<2>(log(1.0 / (1.0 - w4))) * log(((-1.0 + w4) * w7) / (w4 * (-1.0 + w7))) + power_of<2>(log(1.0 / (1.0 + w5))) * log(((1.0 + w5) * w7) / (w5 * (-1.0 + w7))) + (power_of<2>(log(-(w7 / (w4 - w7)))) * log(1.0 / (1.0 + w7))) / 2.0 - (power_of<2>(log(1.0 - tb / w7)) * log((1.0 + tb) / (1.0 + w7))) / 2.0 - log(1.0 - tb / w4) * log((tb - w7) / (w4 - w7)) * log((1.0 + tb) / (1.0 + w7)) - (power_of<2>(log((tb - w7) / (w4 - w7))) * log((1.0 + tb) / (1.0 + w7))) / 2.0 - (power_of<2>(log((1.0 + tb) / 2.0)) * log((2.0 * (tb - w7)) / ((-1.0 + tb) * (1.0 + w7)))) / 2.0
                + (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log(((1.0 + w4) * (tb - w7)) / ((tb - w4) * (1.0 + w7)))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log(-(((-1.0 + w5) * (tb - w7)) / ((tb + w5) * (1.0 + w7))))) / 2.0 + (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((1.0 + tb) * (w4 - w7)) / ((tb - w4) * (1.0 + w7))))) / 2.0 - (pisqu * log(-(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7))))) / 6.0 - power_of<3>(log(-(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7))))) / 6.0 - (pisqu * log(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) / 6.0 - power_of<3>(log(((1.0 + w4) * (w4 - w7)) / ((tb - w4) * (1.0 + w7)))) / 6.0
                + (pisqu * log(-(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7))))) / 6.0 + power_of<3>(log(-(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7))))) / 6.0 + (pisqu * log(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7)))) / 3.0 + power_of<3>(log(((1.0 + w4) * (w4 - w7)) / (w4 * (1.0 + w7)))) / 3.0 - (pisqu * log(-(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7))))) / 6.0 - power_of<3>(log(-(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7))))) / 6.0 - (pisqu * log(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) / 6.0 - power_of<3>(log(((1.0 + w4) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) / 6.0 - (pisqu * log((2.0 * (-1.0 + w7)) / (1.0 + w7))) / 3.0 - power_of<3>(log((2.0 * (-1.0 + w7)) / (1.0 + w7))) / 3.0
                + (pisqu * log((-2.0 * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7)))) / 6.0 + power_of<3>(log((-2.0 * (-1.0 + w7)) / ((-1.0 + tb) * (1.0 + w7)))) / 6.0 + (pisqu * log((2.0 * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7)))) / 6.0 + power_of<3>(log((2.0 * (-1.0 + w7)) / ((1.0 + vb) * (1.0 + w7)))) / 6.0 - power_of<2>(lnhalf) * log(w7 / (1.0 + w7)) + power_of<2>(log(1.0 / (1.0 + w4))) * log(w7 / (1.0 + w7)) + power_of<2>(log(1.0 / (1.0 - w5))) * log(w7 / (1.0 + w7)) + power_of<2>(lnhalf) * log((2.0 * w7) / (1.0 + w7)) - power_of<2>(log(1.0 / (1.0 - w5))) * log(((-1.0 + w5) * w7) / (w5 * (1.0 + w7))) + (power_of<2>(log(-(w7 / (w4 - w7)))) * log(1.0 + w7)) / 2.0 - (power_of<2>(log((tb - w7) / (w4 - w7))) * log((1.0 + w7) / (1.0 + tb))) / 2.0
                - (power_of<2>(log((1.0 + tb) / 2.0)) * log(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (tb - w7)))) / 2.0 - (power_of<2>(log(1.0 + tb)) * log((tb * (1.0 + w7)) / (tb - w7))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log(((tb - w4) * (1.0 + w7)) / ((1.0 + w4) * (tb - w7)))) / 2.0 + (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log(-(((tb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (tb - w7))))) / 2.0 + (power_of<2>(log((tb - w7) / (w4 - w7))) * log(-(((tb - w4) * (1.0 + w7)) / ((1.0 + tb) * (w4 - w7))))) / 2.0 - (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 * (1.0 + w7)) / (w4 - w7))) / 2.0 + (pisqu * log((2.0 * (1.0 + w7)) / (-1.0 + w7))) / 3.0 + power_of<3>(log((2.0 * (1.0 + w7)) / (-1.0 + w7))) / 3.0
                - (pisqu * log((2.0 * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7)))) / 6.0 - power_of<3>(log((2.0 * (1.0 + w7)) / ((1.0 + tb) * (-1.0 + w7)))) / 6.0 - (pisqu * log((-2.0 * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7)))) / 6.0 - power_of<3>(log((-2.0 * (1.0 + w7)) / ((-1.0 + vb) * (-1.0 + w7)))) / 6.0 + power_of<2>(lnhalf) * log((1.0 + w7) / (2.0 * w7)) - power_of<2>(log(1.0 / (1.0 - w5))) * log((w5 * (1.0 + w7)) / ((-1.0 + w5) * w7)) - (pisqu * log(1.0 / (-tb + w7))) / 6.0 - power_of<3>(log(1.0 / (-tb + w7))) / 6.0 - (pisqu * log(2.0 / (-tb + w7))) / 6.0 - power_of<3>(log(2.0 / (-tb + w7))) / 6.0 - (pisqu * log((-1.0 + w4) / (-tb + w7))) / 6.0 - power_of<3>(log((-1.0 + w4) / (-tb + w7))) / 6.0
                + (pisqu * log((1.0 + w4) / (-tb + w7))) / 6.0 + power_of<3>(log((1.0 + w4) / (-tb + w7))) / 6.0 + (pisqu * log(w5 / (-tb + w7))) / 6.0 + power_of<3>(log(w5 / (-tb + w7))) / 6.0 - (power_of<2>(log((1.0 - tb) / 2.0)) * log((-1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log(1.0 - tb)) * log((-1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log((-1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log(1.0 - tb)) * log((tb * (-1.0 + w7)) / (-tb + w7))) / 2.0 + (power_of<2>(log((1.0 + tb) / 2.0)) * log((1.0 + w7) / (-tb + w7))) / 2.0 + (power_of<2>(log(1.0 + tb)) * log((1.0 + w7) / (-tb + w7))) / 2.0
                - (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log((1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((1.0 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log((1.0 - tb) / 2.0)) * log((-tb + w7) / (-1.0 + w7))) / 2.0 - log((1.0 - tb) / 2.0) * log(1.0 + tb) * log((-tb + w7) / (-1.0 + w7)) + log(1.0 - tb) * log(1.0 + tb) * log((-tb + w7) / (-1.0 + w7)) + log(1.0 - tb / w4) * log((-1.0 + tb) / (-1.0 + w4)) * log((-tb + w7) / (-1.0 + w7)) + (power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * log((-tb + w7) / (-1.0 + w7))) / 2.0 + (power_of<2>(log((1.0 - tb) / (1.0 + w5))) * log((-tb + w7) / (-1.0 + w7))) / 2.0
                + log((1.0 - tb) / (1.0 + w5)) * log((tb + w5) / w5) * log((-tb + w7) / (-1.0 + w7)) + log(1.0 - tb) * log((1.0 + tb) / 2.0) * log((-tb + w7) / (1.0 + w7)) + (power_of<2>(log((1.0 + tb) / 2.0)) * log((-tb + w7) / (1.0 + w7))) / 2.0 - log(1.0 - tb) * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7)) + power_of<2>(log(1.0 + tb)) * log((-tb + w7) / (1.0 + w7)) - log(1.0 - tb / w4) * log((1.0 + tb) / (1.0 + w4)) * log((-tb + w7) / (1.0 + w7)) - (power_of<2>(log((1.0 + tb) / (1.0 + w4))) * log((-tb + w7) / (1.0 + w7))) / 2.0 - (power_of<2>(log((1.0 + tb) / (1.0 - w5))) * log((-tb + w7) / (1.0 + w7))) / 2.0
                - log((1.0 + tb) / (1.0 - w5)) * log((tb + w5) / w5) * log((-tb + w7) / (1.0 + w7)) + (pisqu * log(-2.0 / (vb + w7))) / 6.0 + power_of<3>(log(-2.0 / (vb + w7))) / 6.0 - (pisqu * log(-1.0 / (vb + w7))) / 6.0 - power_of<3>(log(-1.0 / (vb + w7))) / 6.0 - (pisqu * log(1.0 / (vb + w7))) / 6.0 - power_of<3>(log(1.0 / (vb + w7))) / 6.0 - (pisqu * log(2.0 / (vb + w7))) / 6.0 - power_of<3>(log(2.0 / (vb + w7))) / 6.0 - (pisqu * log((-1.0 + w4) / (vb + w7))) / 6.0 - power_of<3>(log((-1.0 + w4) / (vb + w7))) / 6.0 + (pisqu * log(-(w4 / (vb + w7)))) / 6.0 + power_of<3>(log(-(w4 / (vb + w7)))) / 6.0 + (pisqu * log((1.0 + w4) / (vb + w7))) / 6.0 + power_of<3>(log((1.0 + w4) / (vb + w7))) / 6.0
                + (pisqu * log((1.0 - w5) / (vb + w7))) / 6.0 + power_of<3>(log((1.0 - w5) / (vb + w7))) / 6.0 + (pisqu * log(w5 / (vb + w7))) / 6.0 + power_of<3>(log(w5 / (vb + w7))) / 6.0 - (pisqu * log(-((1.0 + w5) / (vb + w7)))) / 6.0 - power_of<3>(log(-((1.0 + w5) / (vb + w7)))) / 6.0 + (power_of<2>(log((vb + w4) / w4)) * log((vb * (w4 - w7)) / (w4 * (vb + w7)))) / 2.0 - (power_of<2>(log((1.0 + vb) / 2.0)) * log((-1.0 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log(1.0 + vb)) * log((-1.0 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((-1.0 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log((-1.0 + w7) / (vb + w7))) / 2.0
                + (power_of<2>(log((1.0 + vb) / 2.0)) * log((-0.5) * (((-1.0 + vb) * (-1.0 + w7)) / (vb + w7)))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log(((vb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (vb + w7)))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log(((-vb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (vb + w7)))) / 2.0 + (power_of<2>(log((1.0 - vb) / 2.0)) * log((1.0 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log(1.0 - vb)) * log((1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log((1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((1.0 + w7) / (vb + w7))) / 2.0 - (power_of<2>(log(1.0 - vb)) * log((vb * (1.0 + w7)) / (vb + w7))) / 2.0
                - (power_of<2>(log((1.0 - vb) / 2.0)) * log(((1.0 + vb) * (1.0 + w7)) / (2.0 * (vb + w7)))) / 2.0 + (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log(((vb + w4) * (1.0 + w7)) / ((1.0 + w4) * (vb + w7)))) / 2.0 + (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log(((-vb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (vb + w7)))) / 2.0 - dilog(((-1.0 + w4) * (vb + w7)) / ((1.0 + vb) * (w4 - w7))) * log(-((vb + w7) / (w4 - w7))) + dilog(((1.0 + w4) * (vb + w7)) / ((-1.0 + vb) * (w4 - w7))) * log(-((vb + w7) / (w4 - w7))) - dilog(((-1.0 + w4) * (vb + w7)) / ((vb + w4) * (-1.0 + w7))) * log(-((vb + w7) / (w4 - w7)))
                + dilog(((1.0 + w4) * (vb + w7)) / ((vb + w4) * (1.0 + w7))) * log(-((vb + w7) / (w4 - w7))) - (power_of<2>(log((vb + w4) / w4)) * log(-((vb + w7) / (w4 - w7)))) / 2.0 + log((vb + w4) / w4) * log((1.0 + vb) / (1.0 - w7)) * log(-((vb + w7) / (w4 - w7))) - log((vb + w4) / w4) * log((1.0 - vb) / (1.0 + w7)) * log(-((vb + w7) / (w4 - w7))) + (log((1.0 + vb) / (1.0 - w7)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 + (log((1.0 - w7) / (1.0 + vb)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (log(-(((1.0 + vb) * (w4 - w7)) / ((vb + w4) * (-1.0 + w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0
                - (log(-(((vb + w4) * (-1.0 + w7)) / ((1.0 + vb) * (w4 - w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (log((1.0 - vb) / (1.0 + w7)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 + (log(-(((-1.0 + vb) * (w4 - w7)) / ((vb + w4) * (1.0 + w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 - (log((1.0 + w7) / (1.0 - vb)) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 + (log(-(((vb + w4) * (1.0 + w7)) / ((-1.0 + vb) * (w4 - w7)))) * power_of<2>(log(-((vb + w7) / (w4 - w7))))) / 2.0 + (power_of<2>(log((vb + w4) / w4)) * log((w4 * (vb + w7)) / (vb * (w4 - w7)))) / 2.0 - log(1.0 - vb) * log((1.0 + vb) / 2.0) * log((vb + w7) / (-1.0 + w7))
                - (power_of<2>(log((1.0 + vb) / 2.0)) * log((vb + w7) / (-1.0 + w7))) / 2.0 + log(1.0 - vb) * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) + (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log((vb + w7) / (-1.0 + w7))) / 2.0 + log((1.0 + vb) / (1.0 - w4)) * log((vb + w4) / w4) * log((vb + w7) / (-1.0 + w7)) + log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 + w5)) * log((vb + w7) / (-1.0 + w7)) + (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log((vb + w7) / (-1.0 + w7))) / 2.0 + (power_of<2>(log((1.0 + vb) / 2.0)) * log((-2.0 * (vb + w7)) / ((-1.0 + vb) * (-1.0 + w7)))) / 2.0
                - (power_of<2>(log((1.0 + vb) / (1.0 - w4))) * log(((-1.0 + w4) * (vb + w7)) / ((vb + w4) * (-1.0 + w7)))) / 2.0 - (power_of<2>(log((1.0 + vb) / (1.0 + w5))) * log(-(((1.0 + w5) * (vb + w7)) / ((vb - w5) * (-1.0 + w7))))) / 2.0 + dilog(w7 / w4) * (-log(1.0 - tb / w7) - log((vb + w7) / w7)) + dilog(-(w7 / w5)) * (-log(1.0 - tb / w7) - log((vb + w7) / w7)) + dilog(w7 / (w5 + w7)) * (-log(1.0 - tb / w7) - log((vb + w7) / w7)) - dilog(-(w7 / (w4 - w7))) * log((vb + w7) / w7) + (log(1.0 - vb) * power_of<2>(log((vb + w7) / w7))) / 2.0 + (log(1.0 + vb) * power_of<2>(log((vb + w7) / w7))) / 2.0
                - (log((vb + w4) / w4) * power_of<2>(log((vb + w7) / w7))) / 2.0 - (log(1.0 - vb / w5) * power_of<2>(log((vb + w7) / w7))) / 2.0 - (log((1.0 + vb) / (1.0 - w7)) * power_of<2>(log((vb + w7) / w7))) / 2.0 + (log((vb + w4) / (w4 - w7)) * power_of<2>(log((vb + w7) / w7))) / 2.0 - (log((1.0 - vb) / (1.0 + w7)) * power_of<2>(log((vb + w7) / w7))) / 2.0 + (power_of<2>(log((1.0 - vb) / 2.0)) * log((vb + w7) / (1.0 + w7))) / 2.0 + power_of<2>(log(1.0 - vb)) * log((vb + w7) / (1.0 + w7)) + log((1.0 - vb) / 2.0) * log(1.0 + vb) * log((vb + w7) / (1.0 + w7)) - log(1.0 - vb) * log(1.0 + vb) * log((vb + w7) / (1.0 + w7)) - (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log((vb + w7) / (1.0 + w7))) / 2.0
                - log((1.0 - vb) / (1.0 + w4)) * log((vb + w4) / w4) * log((vb + w7) / (1.0 + w7)) - log(1.0 - vb / w5) * log((-1.0 + vb) / (-1.0 + w5)) * log((vb + w7) / (1.0 + w7)) - (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log((vb + w7) / (1.0 + w7))) / 2.0 - (power_of<2>(log((1.0 - vb) / 2.0)) * log((2.0 * (vb + w7)) / ((1.0 + vb) * (1.0 + w7)))) / 2.0 + (power_of<2>(log((1.0 - vb) / (1.0 + w4))) * log(((1.0 + w4) * (vb + w7)) / ((vb + w4) * (1.0 + w7)))) / 2.0 + (power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * log(-(((-1.0 + w5) * (vb + w7)) / ((vb - w5) * (1.0 + w7))))) / 2.0
                + dilog(-(((1.0 + w4) * w7) / (w4 - w7))) * (-log(-(w7 / (w4 - w7))) - log(w7 / (-w4 + w7))) + dilog((w7 + w4 * w7) / (w4 + w4 * w7)) * (-log(-(w7 / (w4 - w7))) - log(w7 / (-w4 + w7))) - (log(1.0 / (1.0 - w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 - (log(1.0 - w7) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 + (log(1.0 / (1.0 + w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 + (log(1.0 + w7) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 - (log((w4 * (1.0 + w7)) / (w4 - w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0 + (log((w4 * (-1.0 + w7)) / (-w4 + w7)) * power_of<2>(log(w7 / (-w4 + w7)))) / 2.0
                + dilog(((-1.0 + w4) * w7) / (w4 - w7)) * (log(-(w7 / (w4 - w7))) + log(w7 / (-w4 + w7))) + dilog(((-1.0 + w4) * w7) / (w4 * (-1.0 + w7))) * (log(-(w7 / (w4 - w7))) + log(w7 / (-w4 + w7))) - (pisqu * log(-w4 + w7)) / 3.0 - power_of<3>(log(-w4 + w7)) / 3.0 - (pisqu * log((-w4 + w7) / (-1.0 + tb))) / 6.0 - power_of<3>(log((-w4 + w7) / (-1.0 + tb))) / 6.0 + (pisqu * log((-w4 + w7) / (1.0 + tb))) / 6.0 + power_of<3>(log((-w4 + w7) / (1.0 + tb))) / 6.0 - (pisqu * log(((-1.0 + w4) * (-w4 + w7)) / (w4 * (-1.0 + w7)))) / 6.0 - power_of<3>(log(((-1.0 + w4) * (-w4 + w7)) / (w4 * (-1.0 + w7)))) / 6.0 + (pisqu * log(((1.0 + w4) * (-w4 + w7)) / (w4 * (1.0 + w7)))) / 6.0
                + power_of<3>(log(((1.0 + w4) * (-w4 + w7)) / (w4 * (1.0 + w7)))) / 6.0 - (power_of<2>(log((vb + w4) / w4)) * log((-w4 + w7) / (vb + w7))) / 2.0 + (power_of<2>(log(1.0 - tb / w7)) * log((tb + w5) / (w5 + w7))) / 2.0 + (power_of<2>(log((vb + w7) / w7)) * log((-vb + w5) / (w5 + w7))) / 2.0 + (power_of<2>(log((tb + w5) / w5)) * log((w5 * (tb - w7)) / (tb * (w5 + w7)))) / 2.0 + dilog(w7) * (log(1.0 - tb / w7) - log(-(w7 / (w4 - w7))) + log((vb + w7) / w7) - log(w7 / (-w4 + w7)) - 2.0 * log(w7 / (w5 + w7)))
                + dilog(w7 / (-1.0 + w7)) * (log(1.0 - tb / w7) - log(-(w7 / (w4 - w7))) + log((vb + w7) / w7) - log(w7 / (-w4 + w7)) - 2.0 * log(w7 / (w5 + w7))) + 2.0 * dilog(((1.0 + w5) * w7) / (w5 * (-1.0 + w7))) * log(w7 / (w5 + w7)) - 2.0 * dilog(((-1.0 + w5) * w7) / (w5 * (1.0 + w7))) * log(w7 / (w5 + w7)) + 2.0 * dilog(((1.0 + w5) * w7) / (w5 + w7)) * log(w7 / (w5 + w7)) - 2.0 * dilog((w7 - w5 * w7) / (w5 + w7)) * log(w7 / (w5 + w7)) - log(1.0 / (1.0 - w7)) * power_of<2>(log(w7 / (w5 + w7))) - log(1.0 - w7) * power_of<2>(log(w7 / (w5 + w7))) + log(1.0 / (1.0 + w7)) * power_of<2>(log(w7 / (w5 + w7)))
                + log(1.0 + w7) * power_of<2>(log(w7 / (w5 + w7))) + dilog(-w7) * (log(1.0 - tb / w7) + log(-(w7 / (w4 - w7))) + log((vb + w7) / w7) + log(w7 / (-w4 + w7)) + 2.0 * log(w7 / (w5 + w7))) + dilog(w7 / (1.0 + w7)) * (log(1.0 - tb / w7) + log(-(w7 / (w4 - w7))) + log((vb + w7) / w7) + log(w7 / (-w4 + w7)) + 2.0 * log(w7 / (w5 + w7))) - power_of<2>(log(w7 / (w5 + w7))) * log((w5 * (1.0 + w7)) / (w5 + w7)) + dilog((tb - w7) / (1.0 + tb)) * (-log((tb - w7) / (w4 - w7)) - log((-tb + w7) / (w5 + w7)))
                + dilog((-tb + w7) / (1.0 + w7)) * (-log(1.0 - tb / w4) - log((tb + w5) / w5) - log((tb - w7) / (w4 - w7)) - log((-tb + w7) / (w5 + w7))) - dilog(-(((1.0 + w5) * (tb - w7)) / ((tb + w5) * (-1.0 + w7)))) * log((-tb + w7) / (w5 + w7)) + dilog(-(((-1.0 + w5) * (tb - w7)) / ((tb + w5) * (1.0 + w7)))) * log((-tb + w7) / (w5 + w7)) + dilog(((-1.0 + w5) * (tb - w7)) / ((1.0 + tb) * (w5 + w7))) * log((-tb + w7) / (w5 + w7)) - dilog(((1.0 + w5) * (tb - w7)) / ((-1.0 + tb) * (w5 + w7))) * log((-tb + w7) / (w5 + w7)) - (power_of<2>(log((tb + w5) / w5)) * log((-tb + w7) / (w5 + w7))) / 2.0
                + log((tb + w5) / w5) * log((-1.0 + tb) / (-1.0 + w7)) * log((-tb + w7) / (w5 + w7)) - log((tb + w5) / w5) * log((1.0 + tb) / (1.0 + w7)) * log((-tb + w7) / (w5 + w7)) + (log((-1.0 + tb) / (-1.0 + w7)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 + (log((-1.0 + w7) / (-1.0 + tb)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 - (log((1.0 + tb) / (1.0 + w7)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 - (log((1.0 + w7) / (1.0 + tb)) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 - (log(((tb + w5) * (-1.0 + w7)) / ((-1.0 + tb) * (w5 + w7))) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0
                + (log(((tb + w5) * (1.0 + w7)) / ((1.0 + tb) * (w5 + w7))) * power_of<2>(log((-tb + w7) / (w5 + w7)))) / 2.0 + dilog((tb - w7) / (-1.0 + tb)) * (log((tb - w7) / (w4 - w7)) + log((-tb + w7) / (w5 + w7))) + dilog((-tb + w7) / (-1.0 + w7)) * (log(1.0 - tb / w4) + log((tb + w5) / w5) + log((tb - w7) / (w4 - w7)) + log((-tb + w7) / (w5 + w7))) + dilog((vb + w7) / (-1.0 + vb)) * (-log(-((vb + w7) / (w4 - w7))) - log((vb + w7) / (w5 + w7)))
                + dilog((vb + w7) / (1.0 + w7)) * (-log((vb + w4) / w4) - log(1.0 - vb / w5) - log(-((vb + w7) / (w4 - w7))) - log((vb + w7) / (w5 + w7))) - dilog(-(((1.0 + w5) * (vb + w7)) / ((vb - w5) * (-1.0 + w7)))) * log((vb + w7) / (w5 + w7)) + dilog(-(((-1.0 + w5) * (vb + w7)) / ((vb - w5) * (1.0 + w7)))) * log((vb + w7) / (w5 + w7)) + dilog(((-1.0 + w5) * (vb + w7)) / ((-1.0 + vb) * (w5 + w7))) * log((vb + w7) / (w5 + w7)) - dilog(((1.0 + w5) * (vb + w7)) / ((1.0 + vb) * (w5 + w7))) * log((vb + w7) / (w5 + w7)) - (power_of<2>(log(1.0 - vb / w5)) * log((vb + w7) / (w5 + w7))) / 2.0
                + log(1.0 - vb / w5) * log((1.0 + vb) / (1.0 - w7)) * log((vb + w7) / (w5 + w7)) - log(1.0 - vb / w5) * log((1.0 - vb) / (1.0 + w7)) * log((vb + w7) / (w5 + w7)) + (log((1.0 + vb) / (1.0 - w7)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 + (log((1.0 - w7) / (1.0 + vb)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 - (log((1.0 - vb) / (1.0 + w7)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 - (log((1.0 + w7) / (1.0 - vb)) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 - (log(((vb - w5) * (-1.0 + w7)) / ((1.0 + vb) * (w5 + w7))) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0
                + (log(((vb - w5) * (1.0 + w7)) / ((-1.0 + vb) * (w5 + w7))) * power_of<2>(log((vb + w7) / (w5 + w7)))) / 2.0 + dilog((vb + w7) / (1.0 + vb)) * (log(-((vb + w7) / (w4 - w7))) + log((vb + w7) / (w5 + w7))) + dilog((vb + w7) / (-1.0 + w7)) * (log((vb + w4) / w4) + log(1.0 - vb / w5) + log(-((vb + w7) / (w4 - w7))) + log((vb + w7) / (w5 + w7))) + (power_of<2>(log(1.0 - vb / w5)) * log((w5 * (vb + w7)) / (vb * (w5 + w7)))) / 2.0 - (pisqu * log(w5 + w7)) / 3.0 - power_of<3>(log(w5 + w7)) / 3.0 - (pisqu * log((w5 + w7) / (-1.0 + tb))) / 6.0 - power_of<3>(log((w5 + w7) / (-1.0 + tb))) / 6.0 + (pisqu * log((w5 + w7) / (1.0 + tb))) / 6.0
                + power_of<3>(log((w5 + w7) / (1.0 + tb))) / 6.0 + (pisqu * log((w5 + w7) / (1.0 - vb))) / 6.0 + power_of<3>(log((w5 + w7) / (1.0 - vb))) / 6.0 - (pisqu * log(-((w5 + w7) / (1.0 + vb)))) / 6.0 - power_of<3>(log(-((w5 + w7) / (1.0 + vb)))) / 6.0 + (power_of<2>(log((tb + w5) / w5)) * log((tb * (w5 + w7)) / (w5 * (tb - w7)))) / 2.0 - (power_of<2>(log((vb + w7) / (w5 + w7))) * log(((1.0 + vb) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))) / 2.0 + (pisqu * log(-(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))))) / 6.0 + power_of<3>(log(-(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7))))) / 6.0 + (pisqu * log(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))) / 6.0
                + power_of<3>(log(((1.0 + w5) * (w5 + w7)) / ((vb - w5) * (-1.0 + w7)))) / 6.0 - (pisqu * log(((1.0 + w5) * (w5 + w7)) / (w5 * (-1.0 + w7)))) / 3.0 - power_of<3>(log(((1.0 + w5) * (w5 + w7)) / (w5 * (-1.0 + w7)))) / 3.0 - (power_of<2>(log((-tb + w7) / (w5 + w7))) * log(((-1.0 + tb) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7)))) / 2.0 + (pisqu * log(-(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))))) / 6.0 + power_of<3>(log(-(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7))))) / 6.0 + (pisqu * log(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7)))) / 6.0 + power_of<3>(log(((1.0 + w5) * (w5 + w7)) / ((tb + w5) * (-1.0 + w7)))) / 6.0
                + (power_of<2>(log((vb + w7) / (w5 + w7))) * log(((-1.0 + vb) * (w5 + w7)) / ((vb - w5) * (1.0 + w7)))) / 2.0 - (pisqu * log(-(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))))) / 6.0 - power_of<3>(log(-(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7))))) / 6.0 - (pisqu * log(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7)))) / 6.0 - power_of<3>(log(((-1.0 + w5) * (w5 + w7)) / ((vb - w5) * (1.0 + w7)))) / 6.0 + (pisqu * log(-(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7))))) / 3.0 + power_of<3>(log(-(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7))))) / 3.0 + (pisqu * log(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7)))) / 3.0
                + power_of<3>(log(((-1.0 + w5) * (w5 + w7)) / (w5 * (1.0 + w7)))) / 3.0 + (power_of<2>(log((-tb + w7) / (w5 + w7))) * log(((1.0 + tb) * (w5 + w7)) / ((tb + w5) * (1.0 + w7)))) / 2.0 - (pisqu * log(-(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))))) / 6.0 - power_of<3>(log(-(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7))))) / 6.0 - (pisqu * log(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7)))) / 6.0 - power_of<3>(log(((-1.0 + w5) * (w5 + w7)) / ((tb + w5) * (1.0 + w7)))) / 6.0 - (power_of<2>(log((tb + w5) / w5)) * log((w5 + w7) / (-tb + w7))) / 2.0 - (power_of<2>(log(1.0 - vb / w5)) * log((w5 + w7) / (vb + w7))) / 2.0
                + (power_of<2>(log(1.0 - vb / w5)) * log((vb * (w5 + w7)) / (w5 * (vb + w7)))) / 2.0 - (power_of<2>(log(1.0 - tb)) * log((tb - w7) / (tb - tb * w7))) / 2.0 - (power_of<2>(log(1.0 + tb)) * log((tb - w7) / (tb + tb * w7))) / 2.0 + (pisqu * log(-(w7 / (tb + tb * w7)))) / 6.0 + power_of<3>(log(-(w7 / (tb + tb * w7)))) / 6.0 - (pisqu * log((w4 * w7) / (-(tb * w4) + tb * w7))) / 6.0 - power_of<3>(log((w4 * w7) / (-(tb * w4) + tb * w7))) / 6.0 - (pisqu * log(-((w5 * w7) / (tb * w5 + tb * w7)))) / 6.0 - power_of<3>(log(-((w5 * w7) / (tb * w5 + tb * w7)))) / 6.0 + (pisqu * log(w7 / (vb - vb * w7))) / 6.0 + power_of<3>(log(w7 / (vb - vb * w7))) / 6.0 - (power_of<2>(log(1.0 + vb)) * log((vb + w7) / (vb - vb * w7))) / 2.0
                - (power_of<2>(log(1.0 + vb)) * log((vb - vb * w7) / (vb + w7))) / 2.0 - (pisqu * log((w4 * w7) / (vb * w4 - vb * w7))) / 6.0 - power_of<3>(log((w4 * w7) / (vb * w4 - vb * w7))) / 6.0 + (pisqu * log(w7 / (vb + vb * w7))) / 6.0 + power_of<3>(log(w7 / (vb + vb * w7))) / 6.0 - (power_of<2>(log(1.0 - vb)) * log((vb + w7) / (vb + vb * w7))) / 2.0 - (pisqu * log((w5 * w7) / (vb * w5 + vb * w7))) / 6.0 - power_of<3>(log((w5 * w7) / (vb * w5 + vb * w7))) / 6.0 + (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 - w7) / (w4 - w4 * w7))) / 2.0 + (power_of<2>(log(w7 / (-w4 + w7))) * log((w4 - w7) / (w4 - w4 * w7))) / 2.0 + (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 - w4 * w7) / (w4 - w7))) / 2.0
                - (power_of<2>(log(-(w7 / (w4 - w7)))) * log((w4 - w7) / (w4 + w4 * w7))) / 2.0 - (power_of<2>(log(w7 / (-w4 + w7))) * log((w4 - w7) / (w4 + w4 * w7))) / 2.0 - power_of<2>(log(1.0 / (1.0 + w4))) * log((w4 + w4 * w7) / (w7 + w4 * w7)) - power_of<2>(log(1.0 / (1.0 + w4))) * log((w7 + w4 * w7) / (w4 + w4 * w7)) + power_of<2>(log(w7 / (w5 + w7))) * log((w5 + w7) / (w5 - w5 * w7)) - (pisqu * log(((1.0 + w5) * (w5 + w7)) / (w5 - w5 * w7))) / 3.0 - power_of<3>(log(((1.0 + w5) * (w5 + w7)) / (w5 - w5 * w7))) / 3.0 + power_of<2>(log(w7 / (w5 + w7))) * log((w5 - w5 * w7) / (w5 + w7)) - power_of<2>(log(w7 / (w5 + w7))) * log((w5 + w7) / (w5 + w5 * w7)) + (8.0 * pisqu * log((-2.0 * myi) / wx3)) / 3.0
                + (8.0 * power_of<3>(log((-2.0 * myi) / wx3))) / 3.0 + (8.0 * pisqu * log((2.0 * myi) / wx3)) / 3.0 + (8.0 * power_of<3>(log((2.0 * myi) / wx3))) / 3.0 - 8.0 * power_of<2>(lnhalf) * log(wx3 / (-myi + wx3)) + 8.0 * power_of<2>(lnhalf) * log((2.0 * wx3) / (-myi + wx3)) + 8.0 * power_of<2>(lnhalf) * log((-myi + wx3) / (2.0 * wx3)) - 8.0 * power_of<2>(lnhalf) * log((-myi + wx3) / wx3) - 8.0 * power_of<2>(lnhalf) * log(wx3 / (myi + wx3)) + 8.0 * power_of<2>(lnhalf) * log((2.0 * wx3) / (myi + wx3)) - (8.0 * pisqu * log((2.0 * (-myi + wx3)) / (myi + wx3))) / 3.0 - (8.0 * power_of<3>(log((2.0 * (-myi + wx3)) / (myi + wx3)))) / 3.0 + 8.0 * power_of<2>(lnhalf) * log((myi + wx3) / (2.0 * wx3)) - 8.0 * power_of<2>(lnhalf) * log((myi + wx3) / wx3)
                - (8.0 * pisqu * log((2.0 * (myi + wx3)) / (-myi + wx3))) / 3.0 - (8.0 * power_of<3>(log((2.0 * (myi + wx3)) / (-myi + wx3)))) / 3.0 + (8.0 * pisqu * log((-2.0 * myi) / wx4)) / 3.0 + (8.0 * power_of<3>(log((-2.0 * myi) / wx4))) / 3.0 + (8.0 * pisqu * log((2.0 * myi) / wx4)) / 3.0 + (8.0 * power_of<3>(log((2.0 * myi) / wx4))) / 3.0 - 8.0 * power_of<2>(lnhalf) * log(wx4 / (-myi + wx4)) + 8.0 * power_of<2>(lnhalf) * log((2.0 * wx4) / (-myi + wx4)) + 8.0 * power_of<2>(lnhalf) * log((-myi + wx4) / (2.0 * wx4)) - 8.0 * power_of<2>(lnhalf) * log((-myi + wx4) / wx4) - 8.0 * power_of<2>(lnhalf) * log(wx4 / (myi + wx4)) + 8.0 * power_of<2>(lnhalf) * log((2.0 * wx4) / (myi + wx4)) - (8.0 * pisqu * log((2.0 * (-myi + wx4)) / (myi + wx4))) / 3.0
                - (8.0 * power_of<3>(log((2.0 * (-myi + wx4)) / (myi + wx4)))) / 3.0 + 8.0 * power_of<2>(lnhalf) * log((myi + wx4) / (2.0 * wx4)) - 8.0 * power_of<2>(lnhalf) * log((myi + wx4) / wx4) - (8.0 * pisqu * log((2.0 * (myi + wx4)) / (-myi + wx4))) / 3.0 - (8.0 * power_of<3>(log((2.0 * (myi + wx4)) / (-myi + wx4)))) / 3.0 - (2.0 * pisqu * log(wx3 / (myi - xb))) / 3.0 - (2.0 * power_of<3>(log(wx3 / (myi - xb)))) / 3.0 - (2.0 * pisqu * log(wx4 / (myi - xb))) / 3.0 - (2.0 * power_of<3>(log(wx4 / (myi - xb)))) / 3.0 - (4.0 * pisqu * log((-2.0 * myi) / (wx3 - xb))) / 3.0 - (4.0 * power_of<3>(log((-2.0 * myi) / (wx3 - xb)))) / 3.0 - (4.0 * pisqu * log((2.0 * myi) / (wx3 - xb))) / 3.0 - (4.0 * power_of<3>(log((2.0 * myi) / (wx3 - xb)))) / 3.0 - (4.0 * pisqu * log((-2.0 * myi) / (wx4 - xb))) / 3.0
                - (4.0 * power_of<3>(log((-2.0 * myi) / (wx4 - xb)))) / 3.0 - (4.0 * pisqu * log((2.0 * myi) / (wx4 - xb))) / 3.0 - (4.0 * power_of<3>(log((2.0 * myi) / (wx4 - xb)))) / 3.0 - 8.0 * dilog(((-myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(((-myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(-((myi + xb) / (wx3 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog(-((myi + xb) / (wx4 - xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(((-myi + wx3) * (myi + xb)) / ((myi + wx3) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx3) * (myi + xb)) / ((-myi + wx3) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb)
                - 8.0 * dilog(((-myi + wx4) * (myi + xb)) / ((myi + wx4) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx4) * (myi + xb)) / ((-myi + wx4) * (-myi + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog((myi + xb) / (wx3 + xb)) * log(1.0 / 2.0 - (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 + xb))) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 8.0 * dilog((myi + xb) / (wx4 + xb)) * log(1.0 / 2.0 - (myi / 2.0) * xb) + 4.0 * log((myi + wx3) / (wx3 - xb)) * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * xb))
                - 8.0 * dilog(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 - xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 - xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog(((-myi + wx3) * (-myi + xb)) / ((myi + wx3) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx3) * (-myi + xb)) / ((-myi + wx3) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog(((-myi + wx4) * (-myi + xb)) / ((myi + wx4) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog(((myi + wx4) * (-myi + xb)) / ((-myi + wx4) * (myi + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog((-myi + xb) / (-wx3 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb)
                - 8.0 * dilog(((-myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog((-myi + xb) / (wx3 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog((-myi + xb) / (-wx4 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb) - 8.0 * dilog(((-myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 + xb))) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 8.0 * dilog((-myi + xb) / (wx4 + xb)) * log(1.0 / 2.0 + (myi / 2.0) * xb) + 4.0 * log((-myi + wx3) / (wx3 - xb)) * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * xb)) - 8.0 * dilog(1.0 - myi * xb) * log(1.0 - myi * xb) - 16.0 * dilog((myi + xb) * xbinv) * log(1.0 - myi * xb) + 4.0 * dilog((wx3 * (myi + xb)) / ((-myi + wx3) * xb)) * log(1.0 - myi * xb)
                + 4.0 * dilog((wx3 * (myi + xb)) / ((myi + wx3) * xb)) * log(1.0 - myi * xb) + 4.0 * dilog((wx4 * (myi + xb)) / ((-myi + wx4) * xb)) * log(1.0 - myi * xb) + 4.0 * dilog((wx4 * (myi + xb)) / ((myi + wx4) * xb)) * log(1.0 - myi * xb) - (8.0 * power_of<3>(log(1.0 - myi * xb))) / 3.0 + dilog((myi - xb) / (myi + wx3)) * (8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) + 4.0 * log(1.0 - myi * xb)) + dilog((myi - xb) / (myi + wx4)) * (8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) + 4.0 * log(1.0 - myi * xb)) + dilog((-myi + xb) / (-myi + wx3)) * (8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) + 4.0 * log(1.0 - myi * xb)) + dilog((-myi + xb) / (-myi + wx4)) * (8.0 * log(1.0 / 2.0 + (myi / 2.0) * xb) + 4.0 * log(1.0 - myi * xb))
                + dilog((-2.0 * myi) / (-myi + wx3)) * (-8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb)) + dilog((2.0 * myi) / (myi + wx3)) * (-8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb)) + dilog((-2.0 * myi) / (-myi + wx4)) * (-8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb)) + dilog((2.0 * myi) / (myi + wx4)) * (-8.0 * log(1.0 - myi * xb) - 8.0 * log(1.0 + myi * xb)) - 8.0 * dilog(1.0 + myi * xb) * log(1.0 + myi * xb) - 16.0 * dilog((-myi + xb) * xbinv) * log(1.0 + myi * xb) + 4.0 * dilog((wx3 * (-myi + xb)) / ((-myi + wx3) * xb)) * log(1.0 + myi * xb) + 4.0 * dilog((wx3 * (-myi + xb)) / ((myi + wx3) * xb)) * log(1.0 + myi * xb)
                + 4.0 * dilog((wx4 * (-myi + xb)) / ((-myi + wx4) * xb)) * log(1.0 + myi * xb) + 4.0 * dilog((wx4 * (-myi + xb)) / ((myi + wx4) * xb)) * log(1.0 + myi * xb) - (8.0 * power_of<3>(log(1.0 + myi * xb))) / 3.0 + dilog((myi + xb) / (myi - wx3)) * (8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) + 4.0 * log(1.0 + myi * xb)) + dilog((myi + xb) / (myi + wx3)) * (8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) + 4.0 * log(1.0 + myi * xb)) + dilog((myi + xb) / (myi - wx4)) * (8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) + 4.0 * log(1.0 + myi * xb)) + dilog((myi + xb) / (myi + wx4)) * (8.0 * log(1.0 / 2.0 - (myi / 2.0) * xb) + 4.0 * log(1.0 + myi * xb)) + dilog(-myi / wx3) * (-16.0 * lnhalf + 4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb))
                + dilog(myi / wx3) * (-16.0 * lnhalf + 4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb)) + dilog(-myi / wx4) * (-16.0 * lnhalf + 4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb)) + dilog(myi / wx4) * (-16.0 * lnhalf + 4.0 * log(1.0 - myi * xb) + 4.0 * log(1.0 + myi * xb)) + dilog(-myi / (-myi + wx3)) * (-16.0 * lnhalf + 8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb)) + dilog(myi / (myi + wx3)) * (-16.0 * lnhalf + 8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb)) + dilog(-myi / (-myi + wx4)) * (-16.0 * lnhalf + 8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb))
                + dilog(myi / (myi + wx4)) * (-16.0 * lnhalf + 8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb)) + log((wx3 - xb) / (myi + wx3)) * (-2.0 * power_of<2>(log(1.0 - myi * xb)) - 4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb)) + log((wx4 - xb) / (myi + wx4)) * (-2.0 * power_of<2>(log(1.0 - myi * xb)) - 4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb)) + log((wx3 - xb) / (-myi + wx3)) * (-4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb) - 2.0 * power_of<2>(log(1.0 + myi * xb))) + log((wx4 - xb) / (-myi + wx4)) * (-4.0 * log(1.0 - myi * xb) * log(1.0 + myi * xb) - 2.0 * power_of<2>(log(1.0 + myi * xb))) + (8.0 * pisqu * log(-myi / xb)) / 3.0 + (8.0 * power_of<3>(log(-myi / xb))) / 3.0 + (8.0 * pisqu * log(myi / xb)) / 3.0
                + (8.0 * power_of<3>(log(myi / xb))) / 3.0 + dilog(1.0 / 2.0 - (myi / 2.0) * xb) * (16.0 * (log(xb) - log(myi * xb)) - 16.0 * log(1.0 - myi * xb) - 16.0 * log(1.0 + myi * xb) - 16.0 * log((-myi) * xb)) + ((4.0 * pisqu) / 3.0 - 8.0 * ln2squ) * log((-myi) * xb) + dilog((1.0 + myi * xb) / 2.0) * (16.0 * log(myi) - 16.0 * log(1.0 - myi * xb) - 16.0 * log(1.0 + myi * xb) - 16.0 * log(myi * xb)) + ((4.0 * pisqu) / 3.0 - 8.0 * ln2squ) * log(myi * xb) + dilog((-myi) * xb) * (8.0 * log(1.0 - myi * xb) - 8.0 * log(xb)) + dilog(myi * xb) * (8.0 * log(1.0 + myi * xb) - 8.0 * log(xb)) - 8.0 * dilog(wx3 / (-myi + wx3)) * log(xb) - 8.0 * dilog(wx3 / (myi + wx3)) * log(xb) - 8.0 * dilog(wx4 / (-myi + wx4)) * log(xb)
                - 8.0 * dilog(wx4 / (myi + wx4)) * log(xb) + 4.0 * dilog(-(xb / wx3)) * log(xb) + 4.0 * dilog(xb / wx3) * log(xb) + 4.0 * dilog(-(xb / wx4)) * log(xb) + 4.0 * dilog(xb / wx4) * log(xb) - (2.0 * pisqu * log(wx3 / (-myi + xb))) / 3.0 - (2.0 * power_of<3>(log(wx3 / (-myi + xb)))) / 3.0 + (4.0 * pisqu * log((2.0 - (2.0 * myi) * wx3) / ((-myi + wx3) * (-myi + xb)))) / 3.0 + (4.0 * power_of<3>(log((2.0 - (2.0 * myi) * wx3) / ((-myi + wx3) * (-myi + xb))))) / 3.0 + (4.0 * pisqu * log((-2.0 - (2.0 * myi) * wx3) / ((myi + wx3) * (-myi + xb)))) / 3.0 + (4.0 * power_of<3>(log((-2.0 - (2.0 * myi) * wx3) / ((myi + wx3) * (-myi + xb))))) / 3.0 - (2.0 * pisqu * log(wx4 / (-myi + xb))) / 3.0 - (2.0 * power_of<3>(log(wx4 / (-myi + xb)))) / 3.0
                + (4.0 * pisqu * log((2.0 - (2.0 * myi) * wx4) / ((-myi + wx4) * (-myi + xb)))) / 3.0 + (4.0 * power_of<3>(log((2.0 - (2.0 * myi) * wx4) / ((-myi + wx4) * (-myi + xb))))) / 3.0 + (4.0 * pisqu * log((-2.0 - (2.0 * myi) * wx4) / ((myi + wx4) * (-myi + xb)))) / 3.0 + (4.0 * power_of<3>(log((-2.0 - (2.0 * myi) * wx4) / ((myi + wx4) * (-myi + xb))))) / 3.0 - (2.0 * pisqu * log(-(wx3 / (myi + xb)))) / 3.0 - (2.0 * power_of<3>(log(-(wx3 / (myi + xb))))) / 3.0 - (2.0 * pisqu * log(wx3 / (myi + xb))) / 3.0 - (2.0 * power_of<3>(log(wx3 / (myi + xb)))) / 3.0 + (4.0 * pisqu * log((2.0 + (2.0 * myi) * wx3) / ((myi + wx3) * (myi + xb)))) / 3.0 + (4.0 * power_of<3>(log((2.0 + (2.0 * myi) * wx3) / ((myi + wx3) * (myi + xb))))) / 3.0
                + (4.0 * pisqu * log(((2.0 * myi) * (myi + wx3)) / ((-myi + wx3) * (myi + xb)))) / 3.0 + (4.0 * power_of<3>(log(((2.0 * myi) * (myi + wx3)) / ((-myi + wx3) * (myi + xb))))) / 3.0 - (2.0 * pisqu * log(-(wx4 / (myi + xb)))) / 3.0 - (2.0 * power_of<3>(log(-(wx4 / (myi + xb))))) / 3.0 - (2.0 * pisqu * log(wx4 / (myi + xb))) / 3.0 - (2.0 * power_of<3>(log(wx4 / (myi + xb)))) / 3.0 + (4.0 * pisqu * log((2.0 + (2.0 * myi) * wx4) / ((myi + wx4) * (myi + xb)))) / 3.0 + (4.0 * power_of<3>(log((2.0 + (2.0 * myi) * wx4) / ((myi + wx4) * (myi + xb))))) / 3.0 + (4.0 * pisqu * log(((2.0 * myi) * (myi + wx4)) / ((-myi + wx4) * (myi + xb)))) / 3.0 + (4.0 * power_of<3>(log(((2.0 * myi) * (myi + wx4)) / ((-myi + wx4) * (myi + xb))))) / 3.0 - (4.0 * pisqu * log((-2.0 * myi) / (wx3 + xb))) / 3.0
                - (4.0 * power_of<3>(log((-2.0 * myi) / (wx3 + xb)))) / 3.0 - (4.0 * pisqu * log((2.0 * myi) / (wx3 + xb))) / 3.0 - (4.0 * power_of<3>(log((2.0 * myi) / (wx3 + xb)))) / 3.0 - 4.0 * dilog(((-myi) * (wx3 + xb)) / ((-myi + wx3) * xb)) * log((wx3 + xb) / wx3) - 4.0 * dilog((myi * (wx3 + xb)) / ((myi + wx3) * xb)) * log((wx3 + xb) / wx3) + 4.0 * dilog((wx3 + xb) / (-myi + xb)) * log((wx3 + xb) / wx3) - 4.0 * dilog(((-myi) * (wx3 + xb)) / (wx3 * (-myi + xb))) * log((wx3 + xb) / wx3) + 4.0 * dilog((wx3 + xb) / (myi + xb)) * log((wx3 + xb) / wx3) - 4.0 * dilog((myi * (wx3 + xb)) / (wx3 * (myi + xb))) * log((wx3 + xb) / wx3)
                + (2.0 * log((myi + wx3) / (myi - xb)) - 2.0 * log(((myi + wx3) * xb) / (wx3 * (-myi + xb))) - 2.0 * log((wx3 * (-myi + xb)) / ((myi + wx3) * xb)) + 2.0 * log((myi - wx3) / (myi + xb)) - 2.0 * log(((-myi + wx3) * xb) / (wx3 * (myi + xb))) + 2.0 * log((myi + xb) / (myi - wx3)) - 2.0 * log((wx3 * (myi + xb)) / ((-myi + wx3) * xb))) * power_of<2>(log((wx3 + xb) / wx3)) + dilog((wx3 + xb) / (-myi + wx3)) * (4.0 * log(xb) + 4.0 * log((wx3 + xb) / wx3)) + dilog((wx3 + xb) / (myi + wx3)) * (4.0 * log(xb) + 4.0 * log((wx3 + xb) / wx3)) + log((myi - xb) / (myi + wx3)) * (4.0 * log(xb) * log((wx3 + xb) / wx3) + 2.0 * power_of<2>(log((wx3 + xb) / wx3)))
                - (4.0 * pisqu * log((-2.0 * myi) / (wx4 + xb))) / 3.0 - (4.0 * power_of<3>(log((-2.0 * myi) / (wx4 + xb)))) / 3.0 - (4.0 * pisqu * log((2.0 * myi) / (wx4 + xb))) / 3.0 - (4.0 * power_of<3>(log((2.0 * myi) / (wx4 + xb)))) / 3.0 - 4.0 * dilog(((-myi) * (wx4 + xb)) / ((-myi + wx4) * xb)) * log((wx4 + xb) / wx4) - 4.0 * dilog((myi * (wx4 + xb)) / ((myi + wx4) * xb)) * log((wx4 + xb) / wx4) + 4.0 * dilog((wx4 + xb) / (-myi + xb)) * log((wx4 + xb) / wx4) - 4.0 * dilog(((-myi) * (wx4 + xb)) / (wx4 * (-myi + xb))) * log((wx4 + xb) / wx4) + 4.0 * dilog((wx4 + xb) / (myi + xb)) * log((wx4 + xb) / wx4) - 4.0 * dilog((myi * (wx4 + xb)) / (wx4 * (myi + xb))) * log((wx4 + xb) / wx4)
                + 2.0 * log((myi - xb) / (myi + wx4)) * power_of<2>(log((wx4 + xb) / wx4)) + (2.0 * log((myi + wx4) / (myi - xb)) - 2.0 * log(((myi + wx4) * xb) / (wx4 * (-myi + xb))) - 2.0 * log((wx4 * (-myi + xb)) / ((myi + wx4) * xb)) + 2.0 * log((myi - wx4) / (myi + xb)) - 2.0 * log(((-myi + wx4) * xb) / (wx4 * (myi + xb))) + 2.0 * log((myi + xb) / (myi - wx4)) - 2.0 * log((wx4 * (myi + xb)) / ((-myi + wx4) * xb))) * power_of<2>(log((wx4 + xb) / wx4)) + dilog((wx4 + xb) / (-myi + wx4)) * (4.0 * log(xb) + 4.0 * log((wx4 + xb) / wx4)) + dilog((wx4 + xb) / (myi + wx4)) * (4.0 * log(xb) + 4.0 * log((wx4 + xb) / wx4))
                + log(1.0 / 2.0 - (myi / 2.0) * xb) * (8.0 * log((wx3 - xb) / (myi + wx3)) * log(1.0 + myi * xb) + 8.0 * log((wx4 - xb) / (myi + wx4)) * log(1.0 + myi * xb) - 8.0 * power_of<2>(log(1.0 + myi * xb)) + log(1.0 + myi * xb) * (8.0 * log((wx3 + xb) / (-myi + wx3)) + 8.0 * log((wx4 + xb) / (-myi + wx4)))) + log(1.0 / 2.0 + (myi / 2.0) * xb) * (8.0 * log((wx3 - xb) / (-myi + wx3)) * log(1.0 - myi * xb) + 8.0 * log((wx4 - xb) / (-myi + wx4)) * log(1.0 - myi * xb) - 8.0 * power_of<2>(log(1.0 - myi * xb)) + log(1.0 - myi * xb) * (8.0 * log((wx3 + xb) / (myi + wx3)) + 8.0 * log((wx4 + xb) / (myi + wx4))))
                + power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * xb)) * (4.0 * log((wx3 - xb) / (myi + wx3)) + 4.0 * log((myi + wx4) / (wx4 - xb)) + 4.0 * log((wx4 - xb) / (myi + wx4)) - 4.0 * log(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 - xb))) - 4.0 * log(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 - xb))) - 4.0 * log(((-2.0 * myi) * (wx3 - xb)) / ((myi + wx3) * (-myi + xb))) - 4.0 * log(((-2.0 * myi) * (wx4 - xb)) / ((myi + wx4) * (-myi + xb))) + 4.0 * log((-myi + wx3) / (wx3 + xb)) - 4.0 * log(((-myi + wx3) * (1.0 + myi * xb)) / (2.0 * (wx3 + xb))) + 4.0 * log((wx3 + xb) / (-myi + wx3)) - 4.0 * log(((-2.0 * myi) * (wx3 + xb)) / ((-myi + wx3) * (-myi + xb))) + 4.0 * log((-myi + wx4) / (wx4 + xb))
                    - 4.0 * log(((-myi + wx4) * (1.0 + myi * xb)) / (2.0 * (wx4 + xb))) + 4.0 * log((wx4 + xb) / (-myi + wx4)) - 4.0 * log(((-2.0 * myi) * (wx4 + xb)) / ((-myi + wx4) * (-myi + xb)))) + power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * xb)) * (4.0 * log((wx3 - xb) / (-myi + wx3)) + 4.0 * log((-myi + wx4) / (wx4 - xb)) + 4.0 * log((wx4 - xb) / (-myi + wx4)) - 4.0 * log(((-myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 - xb))) - 4.0 * log(((-myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 - xb))) - 4.0 * log(((2.0 * myi) * (wx3 - xb)) / ((-myi + wx3) * (myi + xb))) - 4.0 * log(((2.0 * myi) * (wx4 - xb)) / ((-myi + wx4) * (myi + xb))) + 4.0 * log((myi + wx3) / (wx3 + xb))
                    - 4.0 * log(((myi + wx3) * (1.0 - myi * xb)) / (2.0 * (wx3 + xb))) + 4.0 * log((wx3 + xb) / (myi + wx3)) - 4.0 * log(((2.0 * myi) * (wx3 + xb)) / ((myi + wx3) * (myi + xb))) + 4.0 * log((myi + wx4) / (wx4 + xb)) - 4.0 * log(((myi + wx4) * (1.0 - myi * xb)) / (2.0 * (wx4 + xb))) + 4.0 * log((wx4 + xb) / (myi + wx4)) - 4.0 * log(((2.0 * myi) * (wx4 + xb)) / ((myi + wx4) * (myi + xb)))) - 4.0 * dilog((myi * (wx3 - xb)) / ((-myi + wx3) * xb)) * log(1.0 - xb / wx3) - 4.0 * dilog(((-myi) * (wx3 - xb)) / ((myi + wx3) * xb)) * log(1.0 - xb / wx3) - 4.0 * dilog(((-myi) * (wx3 - xb)) / (wx3 * (-myi + xb))) * log(1.0 - xb / wx3)
                - 4.0 * dilog((myi * (wx3 - xb)) / (wx3 * (myi + xb))) * log(1.0 - xb / wx3) + 4.0 * dilog((-wx3 + xb) / (-myi + xb)) * log(1.0 - xb / wx3) + 4.0 * dilog((-wx3 + xb) / (myi + xb)) * log(1.0 - xb / wx3) + 2.0 * log((-myi + xb) / (-myi + wx3)) * power_of<2>(log(1.0 - xb / wx3)) + (2.0 * log((-myi + wx3) / (-myi + xb)) - 2.0 * log(((-myi + wx3) * xb) / (wx3 * (-myi + xb))) - 2.0 * log((wx3 * (-myi + xb)) / ((-myi + wx3) * xb)) + 2.0 * log((myi + wx3) / (myi + xb)) - 2.0 * log(((myi + wx3) * xb) / (wx3 * (myi + xb))) + 2.0 * log((myi + xb) / (myi + wx3)) - 2.0 * log((wx3 * (myi + xb)) / ((myi + wx3) * xb))) * power_of<2>(log(1.0 - xb / wx3))
                + dilog((wx3 - xb) / (-myi + wx3)) * (4.0 * log(xb) + 4.0 * log(1.0 - xb / wx3)) + dilog((wx3 - xb) / (myi + wx3)) * (4.0 * log(xb) + 4.0 * log(1.0 - xb / wx3)) - 4.0 * dilog((myi * (wx4 - xb)) / ((-myi + wx4) * xb)) * log(1.0 - xb / wx4) - 4.0 * dilog(((-myi) * (wx4 - xb)) / ((myi + wx4) * xb)) * log(1.0 - xb / wx4) - 4.0 * dilog(((-myi) * (wx4 - xb)) / (wx4 * (-myi + xb))) * log(1.0 - xb / wx4) - 4.0 * dilog((myi * (wx4 - xb)) / (wx4 * (myi + xb))) * log(1.0 - xb / wx4) + 4.0 * dilog((-wx4 + xb) / (-myi + xb)) * log(1.0 - xb / wx4) + 4.0 * dilog((-wx4 + xb) / (myi + xb)) * log(1.0 - xb / wx4)
                + 2.0 * log((-myi + xb) / (-myi + wx4)) * power_of<2>(log(1.0 - xb / wx4)) + (2.0 * log((-myi + wx4) / (-myi + xb)) - 2.0 * log(((-myi + wx4) * xb) / (wx4 * (-myi + xb))) - 2.0 * log((wx4 * (-myi + xb)) / ((-myi + wx4) * xb)) + 2.0 * log((myi + wx4) / (myi + xb)) - 2.0 * log(((myi + wx4) * xb) / (wx4 * (myi + xb))) + 2.0 * log((myi + xb) / (myi + wx4)) - 2.0 * log((wx4 * (myi + xb)) / ((myi + wx4) * xb))) * power_of<2>(log(1.0 - xb / wx4)) + dilog((wx4 - xb) / (-myi + wx4)) * (4.0 * log(xb) + 4.0 * log(1.0 - xb / wx4)) + dilog((wx4 - xb) / (myi + wx4)) * (4.0 * log(xb) + 4.0 * log(1.0 - xb / wx4))
                + myi * M_PI * H1(-2.0 / (-1.0 + w7), -2.0 / (-1.0 + tb)) * power_of<2>(log((tb - w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - tb))) - myi * M_PI * H1((-1.0 + w7) / (-1.0 + tb), -2.0 / (-1.0 + tb)) * power_of<2>(log(((-1.0 + tb) * (1.0 + w7)) / (2.0 * (-1.0 + w7)))) * my_sign(2.0 * imag(1.0 / (1.0 - tb))) - myi * M_PI * H1(w7 / tb, -1.0 / tb) * power_of<2>(log(tb * (1.0 + w7inv))) * my_sign(-imag(1.0 / tb)) + myi * M_PI * H1(-w7inv, -1.0 / tb) * power_of<2>(log(tb - w7)) * my_sign(-imag(1.0 / tb)) - myi * M_PI * H1(w7 / tb, 1.0 / tb) * power_of<2>(log(tb * (-1.0 + w7inv))) * my_sign(imag(1.0 / tb)) + myi * M_PI * H1(w7inv, 1.0 / tb) * power_of<2>(log(-tb + w7)) * my_sign(imag(1.0 / tb))
                + myi * M_PI * H1((1.0 + w7) / (1.0 + tb), 2.0 / (1.0 + tb)) * power_of<2>(log((-0.5) * (((1.0 + tb) * (-1.0 + w7)) / (1.0 + w7)))) * my_sign(2.0 * imag(1.0 / (1.0 + tb))) - myi * M_PI * H1(2.0 / (1.0 + w7), 2.0 / (1.0 + tb)) * power_of<2>(log((-tb + w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 + tb))) + myi * M_PI * H1((1.0 + w7) / (1.0 - vb), -2.0 / (-1.0 + vb)) * power_of<2>(log(((-1.0 + vb) * (-1.0 + w7)) / (2.0 * (1.0 + w7)))) * my_sign(2.0 * imag(1.0 / (1.0 - vb))) - myi * M_PI * H1(2.0 / (1.0 + w7), -2.0 / (-1.0 + vb)) * power_of<2>(log((vb + w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - vb))) - myi * M_PI * H1(-(w7 / vb), -1.0 / vb) * power_of<2>(log((vb * (-1.0 + w7)) / w7)) * my_sign(-imag(1.0 / vb))
                + myi * M_PI * H1(w7inv, -1.0 / vb) * power_of<2>(log(vb + w7)) * my_sign(-imag(1.0 / vb)) + myi * M_PI * H1(-w7inv, 1.0 / vb) * power_of<2>(log(-vb - w7)) * my_sign(imag(1.0 / vb)) - myi * M_PI * H1(-(w7 / vb), 1.0 / vb) * power_of<2>(log(-((vb * (1.0 + w7)) / w7))) * my_sign(imag(1.0 / vb)) + myi * M_PI * H1(-2.0 / (-1.0 + w7), 2.0 / (1.0 + vb)) * power_of<2>(log((-vb - w7) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 + vb))) - myi * M_PI * H1((1.0 - w7) / (1.0 + vb), 2.0 / (1.0 + vb)) * power_of<2>(log(((1.0 + vb) * (1.0 + w7)) / (2.0 - 2.0 * w7))) * my_sign(2.0 * imag(1.0 / (1.0 + vb))) + (2.0 * myi) * M_PI * H1((1.0 + w4) / (-1.0 + w4), 1.0 + w4inv) * power_of<2>(log(-1.0 / (1.0 + w4))) * my_sign(-imag(w4inv))
                - (2.0 * myi) * M_PI * H1((-1.0 + w4) / w4, 1.0 + w4inv) * power_of<2>(log((2.0 * w4) / (-1.0 + power_of<2>(w4)))) * my_sign(-imag(w4inv)) - (2.0 * myi) * M_PI * H1((1.0 + w4) / (w4 - w7), 1.0 + w4inv) * power_of<2>(log(-(w7 / (1.0 + w4)))) * my_sign(-imag(w4inv)) + (2.0 * myi) * M_PI * H1(1.0 - w7 / w4, 1.0 + w4inv) * power_of<2>(log((w4 * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(-imag(w4inv)) + (2.0 * myi) * M_PI * H1((-1.0 + w4) / (1.0 + w4), (-1.0 + w4) / w4) * power_of<2>(log(1.0 / (-1.0 + w4))) * my_sign(imag(w4inv)) - (2.0 * myi) * M_PI * H1(1.0 + w4inv, (-1.0 + w4) / w4) * power_of<2>(log((-2.0 * w4) / (-1.0 + power_of<2>(w4)))) * my_sign(imag(w4inv))
                - (2.0 * myi) * M_PI * H1(1.0 - w7 / w4, (-1.0 + w4) / w4) * power_of<2>(log((w4 * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag(w4inv)) + (2.0 * myi) * M_PI * H1((-1.0 + w4) / (w4 - w7), (-1.0 + w4) / w4) * power_of<2>(log(w7 / (1.0 - w4))) * my_sign(imag(w4inv)) + myi * M_PI * H1(w4, w4 / tb) * power_of<2>(log((1.0 - tb) / w4)) * my_sign(imag(w4 / tb)) - myi * M_PI * H1(-w4, w4 / tb) * power_of<2>(log(-((1.0 + tb) / w4))) * my_sign(imag(w4 / tb)) - myi * M_PI * H1(1.0 / tb, w4 / tb) * power_of<2>(log((tb * (-1.0 + w4)) / w4)) * my_sign(imag(w4 / tb)) + myi * M_PI * H1(-1.0 / tb, w4 / tb) * power_of<2>(log(-((tb * (1.0 + w4)) / w4))) * my_sign(imag(w4 / tb))
                + myi * M_PI * H1(w7 / tb, w4 / tb) * power_of<2>(log(tb * (-w4inv + w7inv))) * my_sign(imag(w4 / tb)) - myi * M_PI * H1(w4 / w7, w4 / tb) * power_of<2>(log((-tb + w7) / w4)) * my_sign(imag(w4 / tb)) - myi * M_PI * H1(-1.0 / vb, -(w4 / vb)) * power_of<2>(log(vb * (-1.0 + w4inv))) * my_sign(-imag(w4 / vb)) + myi * M_PI * H1(1.0 / vb, -(w4 / vb)) * power_of<2>(log(vb * (1.0 + w4inv))) * my_sign(-imag(w4 / vb)) - myi * M_PI * H1(-w4, -(w4 / vb)) * power_of<2>(log((-1.0 + vb) / w4)) * my_sign(-imag(w4 / vb)) + myi * M_PI * H1(w4, -(w4 / vb)) * power_of<2>(log((1.0 + vb) / w4)) * my_sign(-imag(w4 / vb)) + myi * M_PI * H1(-(w7 / vb), -(w4 / vb)) * power_of<2>(log(vb * (w4inv - w7inv))) * my_sign(-imag(w4 / vb))
                - myi * M_PI * H1(w4 / w7, -(w4 / vb)) * power_of<2>(log((vb + w7) / w4)) * my_sign(-imag(w4 / vb)) + myi * M_PI * H1((-1.0 + w4) / (1.0 + w4), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log((1.0 + tb) / (-1.0 + w4))) * my_sign(imag((-1.0 + w4) / (-tb + w4))) - myi * M_PI * H1((1.0 + w4) / (-tb + w4), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log((2.0 * (tb - w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((-1.0 + w4) / (-tb + w4))) + myi * M_PI * H1((-1.0 + w4) / (w4 - w7), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log((tb - w7) / (-1.0 + w4))) * my_sign(imag((-1.0 + w4) / (-tb + w4)))
                - myi * M_PI * H1((-w4 + w7) / (tb - w4), (-1.0 + w4) / (-tb + w4)) * power_of<2>(log(((-tb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag((-1.0 + w4) / (-tb + w4))) + myi * M_PI * H1((1.0 + w4) / (-1.0 + w4), (1.0 + w4) / (-tb + w4)) * power_of<2>(log((-1.0 + tb) / (1.0 + w4))) * my_sign(imag((1.0 + w4) / (-tb + w4))) - myi * M_PI * H1((-1.0 + w4) / (-tb + w4), (1.0 + w4) / (-tb + w4)) * power_of<2>(log((2.0 * (-tb + w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((1.0 + w4) / (-tb + w4))) - myi * M_PI * H1((1.0 + w4) / (w4 - w7), (1.0 + w4) / (-tb + w4)) * power_of<2>(log((tb - w7) / (1.0 + w4))) * my_sign(imag((1.0 + w4) / (-tb + w4)))
                + myi * M_PI * H1((-w4 + w7) / (tb - w4), (1.0 + w4) / (-tb + w4)) * power_of<2>(log(((-tb + w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(imag((1.0 + w4) / (-tb + w4))) + myi * M_PI * H1((-1.0 + w4) / (1.0 + w4), (-1.0 + w4) / (vb + w4)) * power_of<2>(log((1.0 - vb) / (-1.0 + w4))) * my_sign(imag((-1.0 + w4) / (vb + w4))) - myi * M_PI * H1((1.0 + w4) / (vb + w4), (-1.0 + w4) / (vb + w4)) * power_of<2>(log((-2.0 * (vb + w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((-1.0 + w4) / (vb + w4))) - myi * M_PI * H1((w4 - w7) / (vb + w4), (-1.0 + w4) / (vb + w4)) * power_of<2>(log(((vb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag((-1.0 + w4) / (vb + w4)))
                + myi * M_PI * H1((-1.0 + w4) / (w4 - w7), (-1.0 + w4) / (vb + w4)) * power_of<2>(log((vb + w7) / (1.0 - w4))) * my_sign(imag((-1.0 + w4) / (vb + w4))) + myi * M_PI * H1((1.0 + w4) / (-1.0 + w4), (1.0 + w4) / (vb + w4)) * power_of<2>(log(-((1.0 + vb) / (1.0 + w4)))) * my_sign(imag((1.0 + w4) / (vb + w4))) - myi * M_PI * H1((-1.0 + w4) / (vb + w4), (1.0 + w4) / (vb + w4)) * power_of<2>(log((2.0 * (vb + w4)) / (-1.0 + power_of<2>(w4)))) * my_sign(imag((1.0 + w4) / (vb + w4))) + myi * M_PI * H1((w4 - w7) / (vb + w4), (1.0 + w4) / (vb + w4)) * power_of<2>(log(((vb + w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(imag((1.0 + w4) / (vb + w4)))
                - myi * M_PI * H1((1.0 + w4) / (w4 - w7), (1.0 + w4) / (vb + w4)) * power_of<2>(log(-((vb + w7) / (1.0 + w4)))) * my_sign(imag((1.0 + w4) / (vb + w4))) + (2.0 * myi) * M_PI * H1((1.0 + w5) / (-1.0 + w5), 1.0 + w5inv) * power_of<2>(log(-1.0 / (1.0 + w5))) * my_sign(-imag(w5inv)) - (2.0 * myi) * M_PI * H1((-1.0 + w5) / w5, 1.0 + w5inv) * power_of<2>(log((2.0 * w5) / (-1.0 + power_of<2>(w5)))) * my_sign(-imag(w5inv)) + (2.0 * myi) * M_PI * H1((1.0 + w5) / (w5 + w7), 1.0 + w5inv) * power_of<2>(log(w7 / (1.0 + w5))) * my_sign(-imag(w5inv)) - (2.0 * myi) * M_PI * H1((w5 + w7) / w5, 1.0 + w5inv) * power_of<2>(log((w5 - w5 * w7) / (w5 + power_of<2>(w5) + w7 + w5 * w7))) * my_sign(-imag(w5inv))
                + (2.0 * myi) * M_PI * H1((-1.0 + w5) / (1.0 + w5), (-1.0 + w5) / w5) * power_of<2>(log(1.0 / (-1.0 + w5))) * my_sign(imag(w5inv)) - (2.0 * myi) * M_PI * H1(1.0 + w5inv, (-1.0 + w5) / w5) * power_of<2>(log((-2.0 * w5) / (-1.0 + power_of<2>(w5)))) * my_sign(imag(w5inv)) - (2.0 * myi) * M_PI * H1((-1.0 + w5) / (w5 + w7), (-1.0 + w5) / w5) * power_of<2>(log(w7 / (-1.0 + w5))) * my_sign(imag(w5inv)) + (2.0 * myi) * M_PI * H1((w5 + w7) / w5, (-1.0 + w5) / w5) * power_of<2>(log(-((w5 * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7))))) * my_sign(imag(w5inv)) + myi * M_PI * H1(-1.0 / tb, -(w5 / tb)) * power_of<2>(log(tb * (-1.0 + w5inv))) * my_sign(-imag(w5 / tb)) - myi * M_PI * H1(1.0 / tb, -(w5 / tb)) * power_of<2>(log(tb * (1.0 + w5inv))) * my_sign(-imag(w5 / tb))
                + myi * M_PI * H1(-w5, -(w5 / tb)) * power_of<2>(log((-1.0 + tb) / w5)) * my_sign(-imag(w5 / tb)) - myi * M_PI * H1(w5, -(w5 / tb)) * power_of<2>(log((1.0 + tb) / w5)) * my_sign(-imag(w5 / tb)) + myi * M_PI * H1(w7 / tb, -(w5 / tb)) * power_of<2>(log(tb * (w5inv + w7inv))) * my_sign(-imag(w5 / tb)) - myi * M_PI * H1(-(w5 / w7), -(w5 / tb)) * power_of<2>(log((tb - w7) / w5)) * my_sign(-imag(w5 / tb)) - myi * M_PI * H1(w5, w5 / vb) * power_of<2>(log((1.0 - vb) / w5)) * my_sign(imag(w5 / vb)) + myi * M_PI * H1(-w5, w5 / vb) * power_of<2>(log(-((1.0 + vb) / w5))) * my_sign(imag(w5 / vb)) + myi * M_PI * H1(1.0 / vb, w5 / vb) * power_of<2>(log((vb * (-1.0 + w5)) / w5)) * my_sign(imag(w5 / vb))
                - myi * M_PI * H1(-1.0 / vb, w5 / vb) * power_of<2>(log(-((vb * (1.0 + w5)) / w5))) * my_sign(imag(w5 / vb)) - myi * M_PI * H1(-(w5 / w7), w5 / vb) * power_of<2>(log(-((vb + w7) / w5))) * my_sign(imag(w5 / vb)) + myi * M_PI * H1(-(w7 / vb), w5 / vb) * power_of<2>(log(-((vb * (w5 + w7)) / (w5 * w7)))) * my_sign(imag(w5 / vb)) + myi * M_PI * H1((-1.0 + w5) / (1.0 + w5), (-1.0 + w5) / (tb + w5)) * power_of<2>(log((1.0 - tb) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (tb + w5))) - myi * M_PI * H1((1.0 + w5) / (tb + w5), (-1.0 + w5) / (tb + w5)) * power_of<2>(log((-2.0 * (tb + w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((-1.0 + w5) / (tb + w5)))
                - myi * M_PI * H1((-1.0 + w5) / (w5 + w7), (-1.0 + w5) / (tb + w5)) * power_of<2>(log((-tb + w7) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (tb + w5))) + myi * M_PI * H1((w5 + w7) / (tb + w5), (-1.0 + w5) / (tb + w5)) * power_of<2>(log(-(((tb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7))))) * my_sign(imag((-1.0 + w5) / (tb + w5))) + myi * M_PI * H1((1.0 + w5) / (-1.0 + w5), (1.0 + w5) / (tb + w5)) * power_of<2>(log(-((1.0 + tb) / (1.0 + w5)))) * my_sign(imag((1.0 + w5) / (tb + w5))) - myi * M_PI * H1((-1.0 + w5) / (tb + w5), (1.0 + w5) / (tb + w5)) * power_of<2>(log((2.0 * (tb + w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((1.0 + w5) / (tb + w5)))
                + myi * M_PI * H1((1.0 + w5) / (w5 + w7), (1.0 + w5) / (tb + w5)) * power_of<2>(log((-tb + w7) / (1.0 + w5))) * my_sign(imag((1.0 + w5) / (tb + w5))) - myi * M_PI * H1((w5 + w7) / (tb + w5), (1.0 + w5) / (tb + w5)) * power_of<2>(log(-(((tb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7))))) * my_sign(imag((1.0 + w5) / (tb + w5))) + myi * M_PI * H1((-1.0 + w5) / (1.0 + w5), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log((1.0 + vb) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (-vb + w5))) - myi * M_PI * H1((1.0 + w5) / (-vb + w5), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log((2.0 * (vb - w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((-1.0 + w5) / (-vb + w5)))
                - myi * M_PI * H1((-1.0 + w5) / (w5 + w7), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log((vb + w7) / (-1.0 + w5))) * my_sign(imag((-1.0 + w5) / (-vb + w5))) + myi * M_PI * H1((w5 + w7) / (-vb + w5), (-1.0 + w5) / (-vb + w5)) * power_of<2>(log(((vb - w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(imag((-1.0 + w5) / (-vb + w5))) + myi * M_PI * H1((1.0 + w5) / (-1.0 + w5), (1.0 + w5) / (-vb + w5)) * power_of<2>(log((-1.0 + vb) / (1.0 + w5))) * my_sign(imag((1.0 + w5) / (-vb + w5))) - myi * M_PI * H1((-1.0 + w5) / (-vb + w5), (1.0 + w5) / (-vb + w5)) * power_of<2>(log((2.0 * (-vb + w5)) / (-1.0 + power_of<2>(w5)))) * my_sign(imag((1.0 + w5) / (-vb + w5)))
                + myi * M_PI * H1((1.0 + w5) / (w5 + w7), (1.0 + w5) / (-vb + w5)) * power_of<2>(log((vb + w7) / (1.0 + w5))) * my_sign(imag((1.0 + w5) / (-vb + w5))) - myi * M_PI * H1((w5 + w7) / (-vb + w5), (1.0 + w5) / (-vb + w5)) * power_of<2>(log(((vb - w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(imag((1.0 + w5) / (-vb + w5))) - myi * M_PI * H1((w4 - w7) / (1.0 + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log((1.0 - vb) / (w4 - w7))) * my_sign(imag((w4 - w7) / (vb + w4))) + myi * M_PI * H1((w4 - w7) / (-1.0 + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log(-((1.0 + vb) / (w4 - w7)))) * my_sign(imag((w4 - w7) / (vb + w4)))
                - myi * M_PI * H1((-1.0 + w4) / (vb + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log(-(((vb + w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7))))) * my_sign(imag((w4 - w7) / (vb + w4))) + myi * M_PI * H1((1.0 + w4) / (vb + w4), (w4 - w7) / (vb + w4)) * power_of<2>(log(-(((vb + w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7))))) * my_sign(imag((w4 - w7) / (vb + w4))) - (2.0 * myi) * M_PI * H1((w4 - w7) / (1.0 + w4), 1.0 - w7 / w4) * power_of<2>(log(1.0 / (w4 - w7))) * my_sign(imag(w7 / w4)) - (2.0 * myi) * M_PI * H1((-1.0 + w4) / w4, 1.0 - w7 / w4) * power_of<2>(log(-((w4 * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7))))) * my_sign(imag(w7 / w4))
                + (2.0 * myi) * M_PI * H1(1.0 + w4inv, 1.0 - w7 / w4) * power_of<2>(log(-((w4 * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7))))) * my_sign(imag(w7 / w4)) + (2.0 * myi) * M_PI * H1((w4 - w7) / (-1.0 + w4), 1.0 - w7 / w4) * power_of<2>(log(1.0 / (-w4 + w7))) * my_sign(imag(w7 / w4)) - (2.0 * myi) * M_PI * H1((w5 + w7) / (-1.0 + w5), (w5 + w7) / w5) * power_of<2>(log(-1.0 / (w5 + w7))) * my_sign(-imag(w7 / w5)) + (2.0 * myi) * M_PI * H1((w5 + w7) / (1.0 + w5), (w5 + w7) / w5) * power_of<2>(log(1.0 / (w5 + w7))) * my_sign(-imag(w7 / w5)) - (2.0 * myi) * M_PI * H1(1.0 + w5inv, (w5 + w7) / w5) * power_of<2>(log((w5 * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(-imag(w7 / w5))
                + (2.0 * myi) * M_PI * H1((-1.0 + w5) / w5, (w5 + w7) / w5) * power_of<2>(log((w5 * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(-imag(w7 / w5)) + myi * M_PI * H1((w4 - w7) / (-1.0 + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log((-1.0 + tb) / (w4 - w7))) * my_sign(imag((-w4 + w7) / (tb - w4))) - myi * M_PI * H1((w4 - w7) / (1.0 + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log((1.0 + tb) / (w4 - w7))) * my_sign(imag((-w4 + w7) / (tb - w4))) - myi * M_PI * H1((-1.0 + w4) / (-tb + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log(((tb - w4) * (-1.0 + w7)) / ((-1.0 + w4) * (w4 - w7)))) * my_sign(imag((-w4 + w7) / (tb - w4)))
                + myi * M_PI * H1((1.0 + w4) / (-tb + w4), (-w4 + w7) / (tb - w4)) * power_of<2>(log(((tb - w4) * (1.0 + w7)) / ((1.0 + w4) * (w4 - w7)))) * my_sign(imag((-w4 + w7) / (tb - w4))) + myi * M_PI * H1((w5 + w7) / (1.0 + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log((1.0 - tb) / (w5 + w7))) * my_sign(imag((w5 + w7) / (tb + w5))) - myi * M_PI * H1((w5 + w7) / (-1.0 + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log(-((1.0 + tb) / (w5 + w7)))) * my_sign(imag((w5 + w7) / (tb + w5))) - myi * M_PI * H1((1.0 + w5) / (tb + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log(((tb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (tb + w5)))
                + myi * M_PI * H1((-1.0 + w5) / (tb + w5), (w5 + w7) / (tb + w5)) * power_of<2>(log(((tb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (tb + w5))) - myi * M_PI * H1((w5 + w7) / (-1.0 + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log((-1.0 + vb) / (w5 + w7))) * my_sign(imag((w5 + w7) / (-vb + w5))) + myi * M_PI * H1((w5 + w7) / (1.0 + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log((1.0 + vb) / (w5 + w7))) * my_sign(imag((w5 + w7) / (-vb + w5))) - myi * M_PI * H1((1.0 + w5) / (-vb + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log(((-vb + w5) * (-1.0 + w7)) / ((1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (-vb + w5)))
                + myi * M_PI * H1((-1.0 + w5) / (-vb + w5), (w5 + w7) / (-vb + w5)) * power_of<2>(log(((-vb + w5) * (1.0 + w7)) / ((-1.0 + w5) * (w5 + w7)))) * my_sign(imag((w5 + w7) / (-vb + w5))) + (4.0 * myi) * M_PI * H1(myi * wx3, -(wx3 * xbinv)) * power_of<2>(log((-myi + xb) / wx3)) * my_sign(-imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1((-myi) * wx3, -(wx3 * xbinv)) * power_of<2>(log((myi + xb) / wx3)) * my_sign(-imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1((-myi) * wx3, wx3 * xbinv) * power_of<2>(log((myi - xb) / wx3)) * my_sign(imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1(myi * wx3, wx3 * xbinv) * power_of<2>(log(-((myi + xb) / wx3))) * my_sign(imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1(myi * wx4, -(wx4 * xbinv)) * power_of<2>(log((-myi + xb) / wx4)) * my_sign(-imag(wx4 * xbinv))
                + (4.0 * myi) * M_PI * H1((-myi) * wx4, -(wx4 * xbinv)) * power_of<2>(log((myi + xb) / wx4)) * my_sign(-imag(wx4 * xbinv)) + (4.0 * myi) * M_PI * H1((-myi) * wx4, wx4 * xbinv) * power_of<2>(log((myi - xb) / wx4)) * my_sign(imag(wx4 * xbinv)) + (4.0 * myi) * M_PI * H1(myi * wx4, wx4 * xbinv) * power_of<2>(log(-((myi + xb) / wx4))) * my_sign(imag(wx4 * xbinv)) + (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx3), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((myi / 2.0) * (wx3 - xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) + (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx4), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((myi / 2.0) * (wx4 - xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb)))
                - (8.0 * myi) * M_PI * H1((-myi + wx3) / (-myi + xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((myi + wx3) * (1.0 + myi * xb)) / (2.0 * myi - 2.0 * wx3))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) - (8.0 * myi) * M_PI * H1((-myi + wx4) / (-myi + xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((myi + wx4) * (1.0 + myi * xb)) / (2.0 * myi - 2.0 * wx4))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) - (8.0 * myi) * M_PI * H1((myi + wx3) / (myi - xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((((-0.5) * myi) * (-myi + wx3) * (-myi + xb)) / (myi + wx3))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) - (8.0 * myi) * M_PI * H1((myi + wx4) / (myi - xb), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log((((-0.5) * myi) * (-myi + wx4) * (-myi + xb)) / (myi + wx4))) * my_sign(2.0 * std::real(1.0 / (myi - xb)))
                + (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx3), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx3 + xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) + (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx4), (-2.0 * myi) / (-myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx4 + xb))) * my_sign(2.0 * std::real(1.0 / (myi - xb))) + power_of<2>(log((-myi - wx3inv) * xb)) * ((-4.0 * myi) * M_PI * H1(myi / xb, wx3 * xbinv) * my_sign(imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1(-(wx3 * xbinv), -myi / xb) * my_sign(-std::real(xbinv))) + power_of<2>(log((-myi + wx3inv) * xb)) * ((-4.0 * myi) * M_PI * H1(myi / xb, -(wx3 * xbinv)) * my_sign(-imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1(wx3 * xbinv, -myi / xb) * my_sign(-std::real(xbinv)))
                + power_of<2>(log((-myi - wx4inv) * xb)) * ((-4.0 * myi) * M_PI * H1(myi / xb, wx4 * xbinv) * my_sign(imag(wx4 * xbinv)) + (4.0 * myi) * M_PI * H1(-(wx4 * xbinv), -myi / xb) * my_sign(-std::real(xbinv))) + power_of<2>(log((-myi + wx4inv) * xb)) * ((-4.0 * myi) * M_PI * H1(myi / xb, -(wx4 * xbinv)) * my_sign(-imag(wx4 * xbinv)) + (4.0 * myi) * M_PI * H1(wx4 * xbinv, -myi / xb) * my_sign(-std::real(xbinv))) + power_of<2>(log((myi - wx3inv) * xb)) * ((-4.0 * myi) * M_PI * H1(-myi / xb, wx3 * xbinv) * my_sign(imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1(-(wx3 * xbinv), myi / xb) * my_sign(std::real(xbinv))) + power_of<2>(log((myi + wx3inv) * xb)) * ((-4.0 * myi) * M_PI * H1(-myi / xb, -(wx3 * xbinv)) * my_sign(-imag(wx3 * xbinv)) + (4.0 * myi) * M_PI * H1(wx3 * xbinv, myi / xb) * my_sign(std::real(xbinv)))
                + power_of<2>(log((myi - wx4inv) * xb)) * ((-4.0 * myi) * M_PI * H1(-myi / xb, wx4 * xbinv) * my_sign(imag(wx4 * xbinv)) + (4.0 * myi) * M_PI * H1(-(wx4 * xbinv), myi / xb) * my_sign(std::real(xbinv))) + power_of<2>(log((myi + wx4inv) * xb)) * ((-4.0 * myi) * M_PI * H1(-myi / xb, -(wx4 * xbinv)) * my_sign(-imag(wx4 * xbinv)) + (4.0 * myi) * M_PI * H1(wx4 * xbinv, myi / xb) * my_sign(std::real(xbinv))) + (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx3), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx3 - xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) + (8.0 * myi) * M_PI * H1((2.0 * myi) / (myi + wx4), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((-0.5) * myi) * (wx4 - xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb)))
                - (8.0 * myi) * M_PI * H1((myi + wx3) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((1.0 + myi * wx3) * (myi + xb)) / (2.0 * (myi + wx3)))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) - (8.0 * myi) * M_PI * H1((myi + wx4) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log(((1.0 + myi * wx4) * (myi + xb)) / (2.0 * (myi + wx4)))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) + (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx3), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi / 2.0) * (wx3 + xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) + (8.0 * myi) * M_PI * H1((-2.0 * myi) / (-myi + wx4), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi / 2.0) * (wx4 + xb))) * my_sign(2.0 * std::real(1.0 / (myi + xb)))
                - (8.0 * myi) * M_PI * H1((myi - wx3) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi + wx3 + xb - myi * wx3 * xb) / (2.0 * myi - 2.0 * wx3))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) - (8.0 * myi) * M_PI * H1((myi - wx4) / (myi + xb), (2.0 * myi) / (myi + xb)) * power_of<2>(log((myi + wx4 + xb - myi * wx4 * xb) / (2.0 * myi - 2.0 * wx4))) * my_sign(2.0 * std::real(1.0 / (myi + xb))) - (2.0 * myi) * M_PI * power_of<2>(log((1.0 - w7) / 2.0)) * my_sign(imag(w7) / 2.0) * T(1.0, 1.0 / 2.0, (1.0 - w7) / 2.0) + myi * M_PI * power_of<2>(log(w7 / (-1.0 + w7))) * my_sign(-imag(1.0 / (1.0 - w7))) * T(1.0, 1.0 / 2.0, w7 / (-1.0 + w7)) + myi * M_PI * power_of<2>(log(w7 / (-1.0 + w7))) * my_sign(imag(1.0 / (-1.0 + w7))) * T(1.0, 1.0 / 2.0, w7 / (-1.0 + w7))
                - (2.0 * myi) * M_PI * power_of<2>(log(w7 / (1.0 + w7))) * my_sign(-imag(1.0 / (1.0 + w7))) * T(1.0, 1.0 / 2.0, w7 / (1.0 + w7)) + (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / 2.0)) * my_sign((-0.5) * imag(w7)) * T(1.0, 1.0 / 2.0, (1.0 + w7) / 2.0) + (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx3)) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 - (myi / 2.0) * wx3) + (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx3)) * my_sign((-0.5) * std::real(wx3)) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 + (myi / 2.0) * wx3) + (8.0 * myi) * M_PI * power_of<2>(log(wx3 / (-myi + wx3))) * my_sign(-std::real(1.0 / (myi - wx3))) * T(1.0, 1.0 / 2.0, wx3 / (-myi + wx3)) + (8.0 * myi) * M_PI * power_of<2>(log(wx3 / (-myi + wx3))) * my_sign(std::real(1.0 / (-myi + wx3))) * T(1.0, 1.0 / 2.0, wx3 / (-myi + wx3))
                + (16.0 * myi) * M_PI * power_of<2>(log(wx3 / (myi + wx3))) * my_sign(-std::real(1.0 / (myi + wx3))) * T(1.0, 1.0 / 2.0, wx3 / (myi + wx3)) + (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx4)) * my_sign(std::real(wx4) / 2.0) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 - (myi / 2.0) * wx4) + (16.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx4)) * my_sign((-0.5) * std::real(wx4)) * T(1.0, 1.0 / 2.0, 1.0 / 2.0 + (myi / 2.0) * wx4) + (8.0 * myi) * M_PI * power_of<2>(log(wx4 / (-myi + wx4))) * my_sign(-std::real(1.0 / (myi - wx4))) * T(1.0, 1.0 / 2.0, wx4 / (-myi + wx4)) + (8.0 * myi) * M_PI * power_of<2>(log(wx4 / (-myi + wx4))) * my_sign(std::real(1.0 / (-myi + wx4))) * T(1.0, 1.0 / 2.0, wx4 / (-myi + wx4)) + (16.0 * myi) * M_PI * power_of<2>(log(wx4 / (myi + wx4))) * my_sign(-std::real(1.0 / (myi + wx4))) * T(1.0, 1.0 / 2.0, wx4 / (myi + wx4))
                - (2.0 * myi) * M_PI * log(1.0 + tb) * log((1.0 - w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 + tb))) * T(1.0, (1.0 - tb) / 2.0, (1.0 - w7) / 2.0) + myi * M_PI * power_of<2>(log((1.0 - w7) / 2.0)) * my_sign(imag(w7) / 2.0) * T(1.0, (1.0 - tb) / 2.0, (1.0 - w7) / 2.0) - myi * M_PI * power_of<2>(log((-tb + w7) / (1.0 + w7))) * my_sign(imag((1.0 + tb) / (1.0 + w7))) * T(1.0, (1.0 - tb) / 2.0, (-tb + w7) / (1.0 + w7)) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - w4) * my_sign(imag(1.0 / tb)) * T(1.0, 1.0 - tb, 1.0 - w4) + myi * M_PI * power_of<2>(log(1.0 - w4)) * my_sign(imag(w4)) * T(1.0, 1.0 - tb, 1.0 - w4) + (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + w5) * my_sign(imag(1.0 / tb)) * T(1.0, 1.0 - tb, 1.0 + w5)
                + myi * M_PI * power_of<2>(log(1.0 + w5)) * my_sign(-imag(w5)) * T(1.0, 1.0 - tb, 1.0 + w5) + myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, 1.0 - tb, 1.0 - tb / w7) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 - w7) * my_sign(imag(1.0 / tb)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 - w7)) * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7) - (2.0 * myi) * M_PI * log(1.0 - w7) * log((1.0 + w7) / 2.0) * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * M_PI * log(1.0 - tb) * log((1.0 + w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 - tb))) * T(1.0, (1.0 + tb) / 2.0, (1.0 + w7) / 2.0)
                - myi * M_PI * power_of<2>(log((1.0 + w7) / 2.0)) * my_sign((-0.5) * imag(w7)) * T(1.0, (1.0 + tb) / 2.0, (1.0 + w7) / 2.0) + myi * M_PI * power_of<2>(log((-tb + w7) / (-1.0 + w7))) * my_sign(imag((-1.0 + tb) / (-1.0 + w7))) * T(1.0, (1.0 + tb) / 2.0, (-tb + w7) / (-1.0 + w7)) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + w4) * my_sign(-imag(1.0 / tb)) * T(1.0, 1.0 + tb, 1.0 + w4) + myi * M_PI * power_of<2>(log(1.0 + w4)) * my_sign(-imag(w4)) * T(1.0, 1.0 + tb, 1.0 + w4) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 - w5) * my_sign(-imag(1.0 / tb)) * T(1.0, 1.0 + tb, 1.0 - w5) + myi * M_PI * power_of<2>(log(1.0 - w5)) * my_sign(imag(w5)) * T(1.0, 1.0 + tb, 1.0 - w5)
                + myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, 1.0 + tb, 1.0 - tb / w7) + (2.0 * myi) * M_PI * log(1.0 + tb) * log(1.0 + w7) * my_sign(-imag(1.0 / tb)) * T(1.0, 1.0 + tb, 1.0 + w7) - (2.0 * myi) * M_PI * log(1.0 - tb) * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7) + (2.0 * myi) * M_PI * log((1.0 - w7) / 2.0) * log(1.0 + w7) * my_sign(-imag(w7)) * T(1.0, 1.0 + tb, 1.0 + w7) + (2.0 * myi) * M_PI * log(1.0 + vb) * log((1.0 + w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 + vb))) * T(1.0, (1.0 - vb) / 2.0, (1.0 + w7) / 2.0) - myi * M_PI * power_of<2>(log((1.0 + w7) / 2.0)) * my_sign((-0.5) * imag(w7)) * T(1.0, (1.0 - vb) / 2.0, (1.0 + w7) / 2.0)
                + myi * M_PI * power_of<2>(log((vb + w7) / (-1.0 + w7))) * my_sign(imag((1.0 + vb) / (1.0 - w7))) * T(1.0, (1.0 - vb) / 2.0, (vb + w7) / (-1.0 + w7)) + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + w4) * my_sign(imag(1.0 / vb)) * T(1.0, 1.0 - vb, 1.0 + w4) + myi * M_PI * power_of<2>(log(1.0 + w4)) * my_sign(-imag(w4)) * T(1.0, 1.0 - vb, 1.0 + w4) + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - w5) * my_sign(imag(1.0 / vb)) * T(1.0, 1.0 - vb, 1.0 - w5) + myi * M_PI * power_of<2>(log(1.0 - w5)) * my_sign(imag(w5)) * T(1.0, 1.0 - vb, 1.0 - w5) + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 + w7) * my_sign(imag(1.0 / vb)) * T(1.0, 1.0 - vb, 1.0 + w7)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7) + (2.0 * myi) * M_PI * log((1.0 - w7) / 2.0) * log(1.0 + w7) * my_sign(-imag(w7)) * T(1.0, 1.0 - vb, 1.0 + w7) + dilog((1.0 + w7) / 2.0) * (2.0 * log(w7 / (1.0 + w7)) - log((-tb + w7) / (1.0 + w7)) - log((vb + w7) / (1.0 + w7)) + (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 + tb, 1.0 + w7) + (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 - vb, 1.0 + w7)) + myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, 1.0 - vb, (vb + w7) / w7) - (2.0 * myi) * M_PI * log(1.0 - vb) * log((1.0 - w7) / 2.0) * my_sign(2.0 * imag(1.0 / (1.0 - vb))) * T(1.0, (1.0 + vb) / 2.0, (1.0 - w7) / 2.0)
                + myi * M_PI * power_of<2>(log((1.0 - w7) / 2.0)) * my_sign(imag(w7) / 2.0) * T(1.0, (1.0 + vb) / 2.0, (1.0 - w7) / 2.0) - myi * M_PI * power_of<2>(log((vb + w7) / (1.0 + w7))) * my_sign(imag((1.0 - vb) / (1.0 + w7))) * T(1.0, (1.0 + vb) / 2.0, (vb + w7) / (1.0 + w7)) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - w4) * my_sign(-imag(1.0 / vb)) * T(1.0, 1.0 + vb, 1.0 - w4) + myi * M_PI * power_of<2>(log(1.0 - w4)) * my_sign(imag(w4)) * T(1.0, 1.0 + vb, 1.0 - w4) + (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 + w5) * my_sign(-imag(1.0 / vb)) * T(1.0, 1.0 + vb, 1.0 + w5) + myi * M_PI * power_of<2>(log(1.0 + w5)) * my_sign(-imag(w5)) * T(1.0, 1.0 + vb, 1.0 + w5)
                - (2.0 * myi) * M_PI * log(1.0 + vb) * log(1.0 - w7) * my_sign(-imag(1.0 / vb)) * T(1.0, 1.0 + vb, 1.0 - w7) + (2.0 * myi) * M_PI * log(1.0 - vb) * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 - w7)) * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7) - (2.0 * myi) * M_PI * log(1.0 - w7) * log((1.0 + w7) / 2.0) * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7) + dilog((1.0 - w7) / 2.0) * (-2.0 * log(w7 / (-1.0 + w7)) + log((-tb + w7) / (-1.0 + w7)) + log((vb + w7) / (-1.0 + w7)) - (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7) - (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7))
                + myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, 1.0 + vb, (vb + w7) / w7) + myi * M_PI * power_of<2>(log(1.0 - tb)) * my_sign(imag(tb)) * T(1.0, 1.0 - tb / w4, 1.0 - tb) - myi * M_PI * power_of<2>(log(1.0 + tb)) * my_sign(-imag(tb)) * T(1.0, 1.0 - tb / w4, 1.0 + tb) + myi * M_PI * power_of<2>(log(1.0 + w4inv)) * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * log(1.0 + w4inv) * log((-1.0 + tb) / (-1.0 + w4)) * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * log(1.0 + w4inv) * log((tb - w7) / (w4 - w7)) * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv)
                - myi * M_PI * power_of<2>(log((-1.0 + w4) / w4)) * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log((1.0 + tb) / (1.0 + w4)) * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log((tb - w7) / (w4 - w7)) * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, 1.0 - tb / w4, 1.0 - tb / w7) - (2.0 * myi) * M_PI * log((-1.0 + tb) / (-1.0 + w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4)
                + (2.0 * myi) * M_PI * log((1.0 + tb) / (1.0 + w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + myi * M_PI * power_of<2>(log(1.0 - w7 / w4)) * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + (2.0 * myi) * M_PI * power_of<2>(log(-2.0 / (-1.0 + w4))) * my_sign(imag((1.0 + w4) / (-1.0 + w4))) * T(1.0, 1.0 / (1.0 - w4), -2.0 / (-1.0 + w4)) + (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 + w4))) * my_sign(-imag(w4 / (1.0 + w4))) * T(1.0, 1.0 / (1.0 - w4), 1.0 / (1.0 + w4)) + (2.0 * myi) * M_PI * power_of<2>(log((-1.0 + w7) / (-1.0 + w4))) * my_sign(imag((w4 - w7) / (-1.0 + w4))) * T(1.0, 1.0 / (1.0 - w4), (-1.0 + w7) / (-1.0 + w4))
                + myi * M_PI * power_of<2>(log(-(w7 / (w4 - w7)))) * my_sign(-imag(w4 / (w4 - w7))) * T(1.0, 1.0 / (1.0 - w4), -(w7 / (w4 - w7))) + myi * M_PI * power_of<2>(log(w7 / (-w4 + w7))) * my_sign(imag(w4 / (-w4 + w7))) * T(1.0, 1.0 / (1.0 - w4), w7 / (-w4 + w7)) - myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w4))) * my_sign(imag((1.0 + w4) / (-1.0 + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), -2.0 / (-1.0 + w4)) + (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + w4)) * log((vb + w4) / w4) * my_sign(imag((-1.0 + w4) / (vb + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), -2.0 / (-1.0 + w4)) + myi * M_PI * power_of<2>(log((1.0 - vb) / (1.0 + w4))) * my_sign(imag((vb + w4) / (1.0 + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), (1.0 - vb) / (1.0 + w4))
                + (2.0 * myi) * M_PI * log((vb + w4) / w4) * log((-1.0 + w7) / (-1.0 + w4)) * my_sign(imag((-1.0 + w4) / (vb + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), (-1.0 + w7) / (-1.0 + w4)) - myi * M_PI * power_of<2>(log((-1.0 + w7) / (-1.0 + w4))) * my_sign(imag((w4 - w7) / (-1.0 + w4))) * T(1.0, (1.0 + vb) / (1.0 - w4), (-1.0 + w7) / (-1.0 + w4)) + myi * M_PI * power_of<2>(log(-((vb + w7) / (w4 - w7)))) * my_sign(imag((vb + w4) / (w4 - w7))) * T(1.0, (1.0 + vb) / (1.0 - w4), -((vb + w7) / (w4 - w7))) - myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w4))) * my_sign(imag((1.0 + w4) / (-1.0 + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), -2.0 / (-1.0 + w4))
                + (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log(-2.0 / (-1.0 + w4)) * my_sign(imag((-1.0 + w4) / (-tb + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), -2.0 / (-1.0 + w4)) + myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 + w4))) * my_sign(imag((-tb + w4) / (1.0 + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (1.0 + tb) / (1.0 + w4)) + myi * M_PI * power_of<2>(log((tb - w7) / (w4 - w7))) * my_sign(imag((-tb + w4) / (w4 - w7))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (tb - w7) / (w4 - w7)) + (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((-1.0 + w7) / (-1.0 + w4)) * my_sign(imag((-1.0 + w4) / (-tb + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (-1.0 + w7) / (-1.0 + w4))
                - myi * M_PI * power_of<2>(log((-1.0 + w7) / (-1.0 + w4))) * my_sign(imag((w4 - w7) / (-1.0 + w4))) * T(1.0, (-1.0 + tb) / (-1.0 + w4), (-1.0 + w7) / (-1.0 + w4)) + (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 - w4))) * my_sign(imag(w4 / (1.0 - w4))) * T(1.0, 1.0 / (1.0 + w4), 1.0 / (1.0 - w4)) + (2.0 * myi) * M_PI * power_of<2>(log(2.0 / (1.0 + w4))) * my_sign(imag((-1.0 + w4) / (1.0 + w4))) * T(1.0, 1.0 / (1.0 + w4), 2.0 / (1.0 + w4)) - myi * M_PI * power_of<2>(log(-(w7 / (w4 - w7)))) * my_sign(-imag(w4 / (w4 - w7))) * T(1.0, 1.0 / (1.0 + w4), -(w7 / (w4 - w7))) - (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / (1.0 + w4))) * my_sign(imag((w4 - w7) / (1.0 + w4))) * T(1.0, 1.0 / (1.0 + w4), (1.0 + w7) / (1.0 + w4))
                - myi * M_PI * power_of<2>(log(w7 / (-w4 + w7))) * my_sign(imag(w4 / (-w4 + w7))) * T(1.0, 1.0 / (1.0 + w4), w7 / (-w4 + w7)) + myi * M_PI * power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * my_sign(imag((-tb + w4) / (-1.0 + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), (-1.0 + tb) / (-1.0 + w4)) - myi * M_PI * power_of<2>(log(2.0 / (1.0 + w4))) * my_sign(imag((-1.0 + w4) / (1.0 + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), 2.0 / (1.0 + w4)) + (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log(2.0 / (1.0 + w4)) * my_sign(imag((1.0 + w4) / (-tb + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), 2.0 / (1.0 + w4)) - myi * M_PI * power_of<2>(log((tb - w7) / (w4 - w7))) * my_sign(imag((-tb + w4) / (w4 - w7))) * T(1.0, (1.0 + tb) / (1.0 + w4), (tb - w7) / (w4 - w7))
                - (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((1.0 + w7) / (1.0 + w4)) * my_sign(imag((1.0 + w4) / (-tb + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 + w4))) * my_sign(imag((w4 - w7) / (1.0 + w4))) * T(1.0, (1.0 + tb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) + myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 - w4))) * my_sign(imag((vb + w4) / (-1.0 + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), (1.0 + vb) / (1.0 - w4)) - myi * M_PI * power_of<2>(log(2.0 / (1.0 + w4))) * my_sign(imag((-1.0 + w4) / (1.0 + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), 2.0 / (1.0 + w4))
                + (2.0 * myi) * M_PI * log(2.0 / (1.0 + w4)) * log((vb + w4) / w4) * my_sign(imag((1.0 + w4) / (vb + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), 2.0 / (1.0 + w4)) - (2.0 * myi) * M_PI * log((vb + w4) / w4) * log((1.0 + w7) / (1.0 + w4)) * my_sign(imag((1.0 + w4) / (vb + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 + w4))) * my_sign(imag((w4 - w7) / (1.0 + w4))) * T(1.0, (1.0 - vb) / (1.0 + w4), (1.0 + w7) / (1.0 + w4)) - myi * M_PI * power_of<2>(log(-((vb + w7) / (w4 - w7)))) * my_sign(imag((vb + w4) / (w4 - w7))) * T(1.0, (1.0 - vb) / (1.0 + w4), -((vb + w7) / (w4 - w7)))
                - myi * M_PI * power_of<2>(log(1.0 - vb)) * my_sign(imag(vb)) * T(1.0, (vb + w4) / w4, 1.0 - vb) + myi * M_PI * power_of<2>(log(1.0 + vb)) * my_sign(-imag(vb)) * T(1.0, (vb + w4) / w4, 1.0 + vb) + myi * M_PI * power_of<2>(log(1.0 + w4inv)) * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * log(1.0 + w4inv) * log((1.0 + vb) / (1.0 - w4)) * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * log(1.0 + w4inv) * log(-((vb + w7) / (w4 - w7))) * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv)
                + dilog((1.0 + w4) / (-1.0 + w4)) * (-2.0 * log(1.0 / (1.0 + w4)) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 - vb) / (1.0 + w4)) - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv)) + dilog((1.0 + w4) / (w4 - w7)) * (2.0 * log(1.0 / (1.0 + w4)) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 - vb) / (1.0 + w4)) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv))
                - myi * M_PI * power_of<2>(log((-1.0 + w4) / w4)) * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log((1.0 - vb) / (1.0 + w4)) * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * log((-1.0 + w4) / w4) * log(-((vb + w7) / (w4 - w7))) * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)
                + dilog((-1.0 + w4) / (1.0 + w4)) * (-2.0 * log(1.0 / (1.0 - w4)) + log((1.0 + vb) / (1.0 - w4)) + log((-1.0 + tb) / (-1.0 + w4)) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)) + dilog((-1.0 + w4) / (w4 - w7)) * (-2.0 * log(1.0 / (1.0 - w4)) + log((1.0 + vb) / (1.0 - w4)) + log((-1.0 + tb) / (-1.0 + w4)) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4))
                + dilog(w4 / (w4 - w7)) * (2.0 * log(1.0 / (1.0 - w4)) - log((1.0 + vb) / (1.0 - w4)) - log((-1.0 + tb) / (-1.0 + w4)) - 2.0 * log(1.0 / (1.0 + w4)) + log((1.0 + tb) / (1.0 + w4)) + log((1.0 - vb) / (1.0 + w4)) - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4)) - myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, (vb + w4) / w4, (vb + w7) / w7)
                - (2.0 * myi) * M_PI * log((1.0 + vb) / (1.0 - w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) + (2.0 * myi) * M_PI * log((1.0 - vb) / (1.0 + w4)) * log(1.0 - w7 / w4) * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) + myi * M_PI * power_of<2>(log(1.0 - w7 / w4)) * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) + dilog((w4 - w7) / (-1.0 + w4)) * (log((tb - w7) / (w4 - w7)) - log(-(w7 / (w4 - w7))) + log(-((vb + w7) / (w4 - w7))) - log(w7 / (-w4 + w7)) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4))
                + dilog(w4 / (1.0 + w4)) * (2.0 * log(1.0 / (1.0 - w4)) - log((1.0 + vb) / (1.0 - w4)) - log((-1.0 + tb) / (-1.0 + w4)) + log((tb - w7) / (w4 - w7)) - log(-(w7 / (w4 - w7))) + log(-((vb + w7) / (w4 - w7))) - log(w7 / (-w4 + w7)) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + (2.0 * myi) * M_PI * my_sign(imag(w4inv)) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) - (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4))
                + dilog((w4 - w7) / (1.0 + w4)) * (-log((tb - w7) / (w4 - w7)) + log(-(w7 / (w4 - w7))) - log(-((vb + w7) / (w4 - w7))) + log(w7 / (-w4 + w7)) + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4)) + dilog(w4 / (-1.0 + w4)) * (2.0 * log(1.0 / (1.0 + w4)) - log((1.0 + tb) / (1.0 + w4)) - log((1.0 - vb) / (1.0 + w4)) - log((tb - w7) / (w4 - w7)) + log(-(w7 / (w4 - w7))) - log(-((vb + w7) / (w4 - w7))) + log(w7 / (-w4 + w7)) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv)
                    + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) + (2.0 * myi) * M_PI * my_sign(-imag(w4inv)) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) + (2.0 * myi) * M_PI * my_sign(imag(w7 / w4)) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4)) - myi * M_PI * power_of<2>(log(1.0 - vb)) * my_sign(imag(vb)) * T(1.0, 1.0 - vb / w5, 1.0 - vb) + myi * M_PI * power_of<2>(log(1.0 + vb)) * my_sign(-imag(vb)) * T(1.0, 1.0 - vb / w5, 1.0 + vb) - myi * M_PI * power_of<2>(log(1.0 + w5inv)) * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((-1.0 + vb) / (-1.0 + w5)) * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                - (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((vb + w7) / (w5 + w7)) * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) + myi * M_PI * power_of<2>(log((-1.0 + w5) / w5)) * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((1.0 + vb) / (1.0 + w5)) * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((vb + w7) / (w5 + w7)) * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) - myi * M_PI * power_of<2>(log((vb + w7) / w7)) * my_sign(-imag(vb / w7)) * T(1.0, 1.0 - vb / w5, (vb + w7) / w7)
                + (2.0 * myi) * M_PI * log((-1.0 + vb) / (-1.0 + w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * log((1.0 + vb) / (1.0 + w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + myi * M_PI * power_of<2>(log((w5 + w7) / w5)) * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * power_of<2>(log(-2.0 / (-1.0 + w5))) * my_sign(imag((1.0 + w5) / (-1.0 + w5))) * T(1.0, 1.0 / (1.0 - w5), -2.0 / (-1.0 + w5)) + (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 + w5))) * my_sign(-imag(w5 / (1.0 + w5))) * T(1.0, 1.0 / (1.0 - w5), 1.0 / (1.0 + w5))
                - (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / (1.0 - w5))) * my_sign(imag((w5 + w7) / (-1.0 + w5))) * T(1.0, 1.0 / (1.0 - w5), (1.0 + w7) / (1.0 - w5)) - (2.0 * myi) * M_PI * power_of<2>(log(w7 / (w5 + w7))) * my_sign(-imag(w5 / (w5 + w7))) * T(1.0, 1.0 / (1.0 - w5), w7 / (w5 + w7)) - myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w5))) * my_sign(imag((1.0 + w5) / (-1.0 + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), -2.0 / (-1.0 + w5)) + (2.0 * myi) * M_PI * log(-2.0 / (-1.0 + w5)) * log((tb + w5) / w5) * my_sign(imag((-1.0 + w5) / (tb + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), -2.0 / (-1.0 + w5)) + myi * M_PI * power_of<2>(log((1.0 - tb) / (1.0 + w5))) * my_sign(imag((tb + w5) / (1.0 + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), (1.0 - tb) / (1.0 + w5))
                - (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((1.0 + w7) / (1.0 - w5)) * my_sign(imag((-1.0 + w5) / (tb + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), (1.0 + w7) / (1.0 - w5)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 - w5))) * my_sign(imag((w5 + w7) / (-1.0 + w5))) * T(1.0, (1.0 + tb) / (1.0 - w5), (1.0 + w7) / (1.0 - w5)) - myi * M_PI * power_of<2>(log((-tb + w7) / (w5 + w7))) * my_sign(imag((tb + w5) / (w5 + w7))) * T(1.0, (1.0 + tb) / (1.0 - w5), (-tb + w7) / (w5 + w7)) - myi * M_PI * power_of<2>(log(-2.0 / (-1.0 + w5))) * my_sign(imag((1.0 + w5) / (-1.0 + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), -2.0 / (-1.0 + w5))
                + (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log(-2.0 / (-1.0 + w5)) * my_sign(imag((-1.0 + w5) / (-vb + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), -2.0 / (-1.0 + w5)) + myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 + w5))) * my_sign(imag((-vb + w5) / (1.0 + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (1.0 + vb) / (1.0 + w5)) - (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((1.0 + w7) / (1.0 - w5)) * my_sign(imag((-1.0 + w5) / (-vb + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (1.0 + w7) / (1.0 - w5)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (1.0 - w5))) * my_sign(imag((w5 + w7) / (-1.0 + w5))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (1.0 + w7) / (1.0 - w5))
                - myi * M_PI * power_of<2>(log((vb + w7) / (w5 + w7))) * my_sign(imag((-vb + w5) / (w5 + w7))) * T(1.0, (-1.0 + vb) / (-1.0 + w5), (vb + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 - w5))) * my_sign(imag(w5 / (1.0 - w5))) * T(1.0, 1.0 / (1.0 + w5), 1.0 / (1.0 - w5)) + (2.0 * myi) * M_PI * power_of<2>(log(2.0 / (1.0 + w5))) * my_sign(imag((-1.0 + w5) / (1.0 + w5))) * T(1.0, 1.0 / (1.0 + w5), 2.0 / (1.0 + w5)) + (2.0 * myi) * M_PI * power_of<2>(log((1.0 - w7) / (1.0 + w5))) * my_sign(imag((w5 + w7) / (1.0 + w5))) * T(1.0, 1.0 / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) + (2.0 * myi) * M_PI * power_of<2>(log(w7 / (w5 + w7))) * my_sign(-imag(w5 / (w5 + w7))) * T(1.0, 1.0 / (1.0 + w5), w7 / (w5 + w7))
                + myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 - w5))) * my_sign(imag((tb + w5) / (-1.0 + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), (1.0 + tb) / (1.0 - w5)) - myi * M_PI * power_of<2>(log(2.0 / (1.0 + w5))) * my_sign(imag((-1.0 + w5) / (1.0 + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), 2.0 / (1.0 + w5)) + (2.0 * myi) * M_PI * log(2.0 / (1.0 + w5)) * log((tb + w5) / w5) * my_sign(imag((1.0 + w5) / (tb + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), 2.0 / (1.0 + w5)) + (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((1.0 - w7) / (1.0 + w5)) * my_sign(imag((1.0 + w5) / (tb + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5))
                - myi * M_PI * power_of<2>(log((1.0 - w7) / (1.0 + w5))) * my_sign(imag((w5 + w7) / (1.0 + w5))) * T(1.0, (1.0 - tb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) + myi * M_PI * power_of<2>(log((-tb + w7) / (w5 + w7))) * my_sign(imag((tb + w5) / (w5 + w7))) * T(1.0, (1.0 - tb) / (1.0 + w5), (-tb + w7) / (w5 + w7)) + myi * M_PI * power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * my_sign(imag((-vb + w5) / (-1.0 + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), (-1.0 + vb) / (-1.0 + w5)) - myi * M_PI * power_of<2>(log(2.0 / (1.0 + w5))) * my_sign(imag((-1.0 + w5) / (1.0 + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), 2.0 / (1.0 + w5))
                + (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log(2.0 / (1.0 + w5)) * my_sign(imag((1.0 + w5) / (-vb + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), 2.0 / (1.0 + w5)) + (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((1.0 - w7) / (1.0 + w5)) * my_sign(imag((1.0 + w5) / (-vb + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) - myi * M_PI * power_of<2>(log((1.0 - w7) / (1.0 + w5))) * my_sign(imag((w5 + w7) / (1.0 + w5))) * T(1.0, (1.0 + vb) / (1.0 + w5), (1.0 - w7) / (1.0 + w5)) + myi * M_PI * power_of<2>(log((vb + w7) / (w5 + w7))) * my_sign(imag((-vb + w5) / (w5 + w7))) * T(1.0, (1.0 + vb) / (1.0 + w5), (vb + w7) / (w5 + w7)) + myi * M_PI * power_of<2>(log(1.0 - tb)) * my_sign(imag(tb)) * T(1.0, (tb + w5) / w5, 1.0 - tb)
                - myi * M_PI * power_of<2>(log(1.0 + tb)) * my_sign(-imag(tb)) * T(1.0, (tb + w5) / w5, 1.0 + tb) - myi * M_PI * power_of<2>(log(1.0 + w5inv)) * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((1.0 + tb) / (1.0 - w5)) * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * log(1.0 + w5inv) * log((-tb + w7) / (w5 + w7)) * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv)
                + dilog((1.0 + w5) / (-1.0 + w5)) * (-2.0 * log(1.0 / (1.0 + w5)) + log((1.0 - tb) / (1.0 + w5)) + log((1.0 + vb) / (1.0 + w5)) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv)) + dilog((1.0 + w5) / (w5 + w7)) * (-2.0 * log(1.0 / (1.0 + w5)) + log((1.0 - tb) / (1.0 + w5)) + log((1.0 + vb) / (1.0 + w5)) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv))
                + myi * M_PI * power_of<2>(log((-1.0 + w5) / w5)) * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((1.0 - tb) / (1.0 + w5)) * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * log((-1.0 + w5) / w5) * log((-tb + w7) / (w5 + w7)) * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)
                + dilog((-1.0 + w5) / (1.0 + w5)) * (-2.0 * log(1.0 / (1.0 - w5)) + log((1.0 + tb) / (1.0 - w5)) + log((-1.0 + vb) / (-1.0 + w5)) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)) + dilog(w5 / (w5 + w7)) * (-2.0 * log(1.0 / (1.0 - w5)) + log((1.0 + tb) / (1.0 - w5)) + log((-1.0 + vb) / (-1.0 + w5)) + 2.0 * log(1.0 / (1.0 + w5)) - log((1.0 - tb) / (1.0 + w5)) - log((1.0 + vb) / (1.0 + w5)) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                    - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)) + dilog((-1.0 + w5) / (w5 + w7)) * (2.0 * log(1.0 / (1.0 - w5)) - log((1.0 + tb) / (1.0 - w5)) - log((-1.0 + vb) / (-1.0 + w5)) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5)) - myi * M_PI * power_of<2>(log(1.0 - tb / w7)) * my_sign(imag(tb / w7)) * T(1.0, (tb + w5) / w5, 1.0 - tb / w7)
                + (2.0 * myi) * M_PI * log((1.0 + tb) / (1.0 - w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * log((1.0 - tb) / (1.0 + w5)) * log((w5 + w7) / w5) * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) + myi * M_PI * power_of<2>(log((w5 + w7) / w5)) * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)
                + dilog((w5 + w7) / (1.0 + w5)) * (-2.0 * log(w7 / (w5 + w7)) + log((-tb + w7) / (w5 + w7)) + log((vb + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)) + dilog(w5 / (-1.0 + w5)) * (2.0 * log(1.0 / (1.0 + w5)) - log((1.0 - tb) / (1.0 + w5)) - log((1.0 + vb) / (1.0 + w5)) - 2.0 * log(w7 / (w5 + w7)) + log((-tb + w7) / (w5 + w7)) + log((vb + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv)
                    - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * my_sign(-imag(w5inv)) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) - (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)) + dilog((w5 + w7) / (-1.0 + w5)) * (2.0 * log(w7 / (w5 + w7)) - log((-tb + w7) / (w5 + w7)) - log((vb + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5))
                + dilog(w5 / (1.0 + w5)) * (2.0 * log(1.0 / (1.0 - w5)) - log((1.0 + tb) / (1.0 - w5)) - log((-1.0 + vb) / (-1.0 + w5)) + 2.0 * log(w7 / (w5 + w7)) - log((-tb + w7) / (w5 + w7)) - log((vb + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) + (2.0 * myi) * M_PI * my_sign(imag(w5inv)) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) + (2.0 * myi) * M_PI * my_sign(-imag(w7 / w5)) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5)) - myi * M_PI * power_of<2>(log(1.0 + w7inv)) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - tb / w7, 1.0 + w7inv)
                - (2.0 * myi) * M_PI * log(1.0 + w7inv) * log(1.0 - tb / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, 1.0 + w7inv) + myi * M_PI * power_of<2>(log(1.0 - w4 / w7)) * my_sign(imag(w4 / w7)) * T(1.0, 1.0 - tb / w7, 1.0 - w4 / w7) + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log(1.0 - w4 / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, 1.0 - w4 / w7) - myi * M_PI * power_of<2>(log((-1.0 + w7) / w7)) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb / w7, (-1.0 + w7) / w7) - (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log((-1.0 + w7) / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, (-1.0 + w7) / w7) + myi * M_PI * power_of<2>(log((w5 + w7) / w7)) * my_sign(-imag(w5 / w7)) * T(1.0, 1.0 - tb / w7, (w5 + w7) / w7)
                + (2.0 * myi) * M_PI * log(1.0 - tb / w7) * log((w5 + w7) / w7) * my_sign(imag(w7 / tb)) * T(1.0, 1.0 - tb / w7, (w5 + w7) / w7) + myi * M_PI * power_of<2>(log((-1.0 + tb) / (-1.0 + w4))) * my_sign(imag((-tb + w4) / (-1.0 + w4))) * T(1.0, (tb - w7) / (w4 - w7), (-1.0 + tb) / (-1.0 + w4)) - myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 + w4))) * my_sign(imag((-tb + w4) / (1.0 + w4))) * T(1.0, (tb - w7) / (w4 - w7), (1.0 + tb) / (1.0 + w4)) - myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, (tb - w7) / (w4 - w7), (-1.0 + w7) / (-w4 + w7))
                + (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((-1.0 + w7) / (-w4 + w7)) * my_sign(imag((-w4 + w7) / (tb - w4))) * T(1.0, (tb - w7) / (w4 - w7), (-1.0 + w7) / (-w4 + w7)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (-w4 + w7))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, (tb - w7) / (w4 - w7), (1.0 + w7) / (-w4 + w7)) - (2.0 * myi) * M_PI * log(1.0 - tb / w4) * log((1.0 + w7) / (-w4 + w7)) * my_sign(imag((-w4 + w7) / (tb - w4))) * T(1.0, (tb - w7) / (w4 - w7), (1.0 + w7) / (-w4 + w7)) + myi * M_PI * power_of<2>(log(1.0 / (1.0 - w4))) * my_sign(imag(w4 / (1.0 - w4))) * T(1.0, -(w7 / (w4 - w7)), 1.0 / (1.0 - w4))
                - myi * M_PI * power_of<2>(log(1.0 / (1.0 + w4))) * my_sign(-imag(w4 / (1.0 + w4))) * T(1.0, -(w7 / (w4 - w7)), 1.0 / (1.0 + w4)) - myi * M_PI * power_of<2>(log(-((1.0 + w7) / (w4 - w7)))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, -(w7 / (w4 - w7)), -((1.0 + w7) / (w4 - w7))) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, -(w7 / (w4 - w7)), (-1.0 + w7) / (-w4 + w7)) + myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 - w4))) * my_sign(imag((vb + w4) / (-1.0 + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), (1.0 + vb) / (1.0 - w4))
                - myi * M_PI * power_of<2>(log((1.0 - vb) / (1.0 + w4))) * my_sign(imag((vb + w4) / (1.0 + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), (1.0 - vb) / (1.0 + w4)) + myi * M_PI * power_of<2>(log(-((1.0 + w7) / (w4 - w7)))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, -((vb + w7) / (w4 - w7)), -((1.0 + w7) / (w4 - w7))) - (2.0 * myi) * M_PI * log((vb + w4) / w4) * log(-((1.0 + w7) / (w4 - w7))) * my_sign(imag((w4 - w7) / (vb + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), -((1.0 + w7) / (w4 - w7))) - myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, -((vb + w7) / (w4 - w7)), (-1.0 + w7) / (-w4 + w7))
                + (2.0 * myi) * M_PI * log((vb + w4) / w4) * log((-1.0 + w7) / (-w4 + w7)) * my_sign(imag((w4 - w7) / (vb + w4))) * T(1.0, -((vb + w7) / (w4 - w7)), (-1.0 + w7) / (-w4 + w7)) - myi * M_PI * power_of<2>(log(1.0 + w7inv)) * my_sign(-imag(w7inv)) * T(1.0, (vb + w7) / w7, 1.0 + w7inv) - (2.0 * myi) * M_PI * log(1.0 + w7inv) * log((vb + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, 1.0 + w7inv) + myi * M_PI * power_of<2>(log(1.0 - w4 / w7)) * my_sign(imag(w4 / w7)) * T(1.0, (vb + w7) / w7, 1.0 - w4 / w7) + (2.0 * myi) * M_PI * log(1.0 - w4 / w7) * log((vb + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, 1.0 - w4 / w7)
                - myi * M_PI * power_of<2>(log((-1.0 + w7) / w7)) * my_sign(imag(w7inv)) * T(1.0, (vb + w7) / w7, (-1.0 + w7) / w7) - (2.0 * myi) * M_PI * log((-1.0 + w7) / w7) * log((vb + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, (-1.0 + w7) / w7) + myi * M_PI * power_of<2>(log((w5 + w7) / w7)) * my_sign(-imag(w5 / w7)) * T(1.0, (vb + w7) / w7, (w5 + w7) / w7) + (2.0 * myi) * M_PI * log((vb + w7) / w7) * log((w5 + w7) / w7) * my_sign(-imag(w7 / vb)) * T(1.0, (vb + w7) / w7, (w5 + w7) / w7) + myi * M_PI * power_of<2>(log(1.0 / (1.0 - w4))) * my_sign(imag(w4 / (1.0 - w4))) * T(1.0, w7 / (-w4 + w7), 1.0 / (1.0 - w4))
                - myi * M_PI * power_of<2>(log(1.0 / (1.0 + w4))) * my_sign(-imag(w4 / (1.0 + w4))) * T(1.0, w7 / (-w4 + w7), 1.0 / (1.0 + w4)) + myi * M_PI * power_of<2>(log((-1.0 + w7) / (-w4 + w7))) * my_sign(imag((-1.0 + w4) / (w4 - w7))) * T(1.0, w7 / (-w4 + w7), (-1.0 + w7) / (-w4 + w7)) - myi * M_PI * power_of<2>(log((1.0 + w7) / (-w4 + w7))) * my_sign(imag((1.0 + w4) / (w4 - w7))) * T(1.0, w7 / (-w4 + w7), (1.0 + w7) / (-w4 + w7)) - (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 - w5))) * my_sign(imag(w5 / (1.0 - w5))) * T(1.0, w7 / (w5 + w7), 1.0 / (1.0 - w5)) + (2.0 * myi) * M_PI * power_of<2>(log(1.0 / (1.0 + w5))) * my_sign(-imag(w5 / (1.0 + w5))) * T(1.0, w7 / (w5 + w7), 1.0 / (1.0 + w5))
                + (2.0 * myi) * M_PI * power_of<2>(log((-1.0 + w7) / (w5 + w7))) * my_sign(imag((1.0 + w5) / (w5 + w7))) * T(1.0, w7 / (w5 + w7), (-1.0 + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * power_of<2>(log((1.0 + w7) / (w5 + w7))) * my_sign(imag((-1.0 + w5) / (w5 + w7))) * T(1.0, w7 / (w5 + w7), (1.0 + w7) / (w5 + w7)) - myi * M_PI * power_of<2>(log((1.0 + tb) / (1.0 - w5))) * my_sign(imag((tb + w5) / (-1.0 + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 + tb) / (1.0 - w5)) + myi * M_PI * power_of<2>(log((1.0 - tb) / (1.0 + w5))) * my_sign(imag((tb + w5) / (1.0 + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 - tb) / (1.0 + w5))
                - myi * M_PI * power_of<2>(log((-1.0 + w7) / (w5 + w7))) * my_sign(imag((1.0 + w5) / (w5 + w7))) * T(1.0, (-tb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((-1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (tb + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7)) + myi * M_PI * power_of<2>(log((1.0 + w7) / (w5 + w7))) * my_sign(imag((-1.0 + w5) / (w5 + w7))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * log((tb + w5) / w5) * log((1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (tb + w5))) * T(1.0, (-tb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7))
                - myi * M_PI * power_of<2>(log((-1.0 + vb) / (-1.0 + w5))) * my_sign(imag((-vb + w5) / (-1.0 + w5))) * T(1.0, (vb + w7) / (w5 + w7), (-1.0 + vb) / (-1.0 + w5)) + myi * M_PI * power_of<2>(log((1.0 + vb) / (1.0 + w5))) * my_sign(imag((-vb + w5) / (1.0 + w5))) * T(1.0, (vb + w7) / (w5 + w7), (1.0 + vb) / (1.0 + w5)) - myi * M_PI * power_of<2>(log((-1.0 + w7) / (w5 + w7))) * my_sign(imag((1.0 + w5) / (w5 + w7))) * T(1.0, (vb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7)) + (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((-1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (-vb + w5))) * T(1.0, (vb + w7) / (w5 + w7), (-1.0 + w7) / (w5 + w7))
                + myi * M_PI * power_of<2>(log((1.0 + w7) / (w5 + w7))) * my_sign(imag((-1.0 + w5) / (w5 + w7))) * T(1.0, (vb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7)) - (2.0 * myi) * M_PI * log(1.0 - vb / w5) * log((1.0 + w7) / (w5 + w7)) * my_sign(imag((w5 + w7) / (-vb + w5))) * T(1.0, (vb + w7) / (w5 + w7), (1.0 + w7) / (w5 + w7)) - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx3)) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3) - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx3)) * my_sign((-0.5) * std::real(wx3)) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3) - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx4)) * my_sign(std::real(wx4) / 2.0) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4)
                - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx4)) * my_sign((-0.5) * std::real(wx4)) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4) + (8.0 * myi) * M_PI * power_of<2>(log((wx3 + xb) / (myi + wx3))) * my_sign(imag((myi - xb) / (myi + wx3))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, (wx3 + xb) / (myi + wx3)) + (8.0 * myi) * M_PI * power_of<2>(log((wx4 + xb) / (myi + wx4))) * my_sign(imag((myi - xb) / (myi + wx4))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, (wx4 + xb) / (myi + wx4)) - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx3)) * my_sign(std::real(wx3) / 2.0) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3) - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx3)) * my_sign((-0.5) * std::real(wx3)) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3)
                - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 - (myi / 2.0) * wx4)) * my_sign(std::real(wx4) / 2.0) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4) - (8.0 * myi) * M_PI * power_of<2>(log(1.0 / 2.0 + (myi / 2.0) * wx4)) * my_sign((-0.5) * std::real(wx4)) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4) + (8.0 * myi) * M_PI * power_of<2>(log((wx3 - xb) / (myi + wx3))) * my_sign(imag((myi + xb) / (myi + wx3))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, (wx3 - xb) / (myi + wx3)) + (8.0 * myi) * M_PI * power_of<2>(log((wx4 - xb) / (myi + wx4))) * my_sign(imag((myi + xb) / (myi + wx4))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, (wx4 - xb) / (myi + wx4)) - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * log(1.0 - myi * wx3) * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3)
                - (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx3)) * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx3) * log(1.0 + myi * wx3) * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx3)) * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * log(1.0 - myi * wx4) * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx4)) * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * log(1.0 + myi * wx4) * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                - (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx4)) * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (8.0 * myi) * M_PI * power_of<2>(log((wx3 + xb) / (-myi + wx3))) * my_sign(imag((myi + xb) / (myi - wx3))) * T(1.0, (1.0 + myi * xb) / 2.0, (wx3 + xb) / (-myi + wx3)) + (8.0 * myi) * M_PI * power_of<2>(log((wx4 + xb) / (-myi + wx4))) * my_sign(imag((myi + xb) / (myi - wx4))) * T(1.0, (1.0 + myi * xb) / 2.0, (wx4 + xb) / (-myi + wx4)) - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * log(1.0 - myi * wx3) * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx3)) * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)
                + dilog(1.0 / 2.0 - (myi / 2.0) * wx3) * (-16.0 * log(wx3 / (myi + wx3)) + 8.0 * log((wx3 - xb) / (myi + wx3)) + 8.0 * log((wx3 + xb) / (myi + wx3)) - (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3)) - (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx3) * log(1.0 + myi * wx3) * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx3)) * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)
                + dilog(1.0 / 2.0 + (myi / 2.0) * wx3) * (-16.0 * log(wx3 / (-myi + wx3)) + 8.0 * log((wx3 - xb) / (-myi + wx3)) + 8.0 * log((wx3 + xb) / (-myi + wx3)) - (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3)) - (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * log(1.0 - myi * wx4) * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (4.0 * myi) * M_PI * power_of<2>(log(1.0 - myi * wx4)) * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                + dilog(1.0 / 2.0 - (myi / 2.0) * wx4) * (-16.0 * log(wx4 / (myi + wx4)) + 8.0 * log((wx4 - xb) / (myi + wx4)) + 8.0 * log((wx4 + xb) / (myi + wx4)) - (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)) - (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * log(1.0 + myi * wx4) * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4) - (4.0 * myi) * M_PI * power_of<2>(log(1.0 + myi * wx4)) * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)
                + log(1.0 - myi * xb) * ((2.0 * pisqu) / 3.0 - 16.0 * (log(xb) - log(myi * xb)) * ln2 - 20.0 * ln2squ + 16.0 * ln2 * log((-myi) * xb) + log(1.0 + myi * xb) * (32.0 * ln2 - 16.0 * log((-myi) * xb) - 16.0 * log(myi * xb) - 4.0 * log((wx3 + xb) / (-myi + wx3)) - 4.0 * log((wx3 + xb) / (myi + wx3)) - 4.0 * log((wx4 + xb) / (-myi + wx4)) - 4.0 * log((wx4 + xb) / (myi + wx4))) + (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx3) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3) + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3)
                    + (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4) + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi + xb))) * T(1.0, 1.0 / 2.0 + (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4) - (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(-std::real(xbinv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4)
                    - (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) - (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4))
                + dilog(1.0 / 2.0 + (myi / 2.0) * wx4) * (-16.0 * log(wx4 / (-myi + wx4)) + 8.0 * log((wx4 - xb) / (-myi + wx4)) + 8.0 * log((wx4 + xb) / (-myi + wx4)) - (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + li2half * (-16.0 * (log(xb) - log(myi * xb)) - 16.0 * log(myi) - 2.0 * log(1.0 / (1.0 - w4)) - 2.0 * log(1.0 / (1.0 + w4)) - 2.0 * log(1.0 / (1.0 - w5)) - 2.0 * log(1.0 / (1.0 + w5)) + 2.0 * log(w7 / (-1.0 + w7)) - 2.0 * log(w7 / (1.0 + w7)) - log((-tb + w7) / (-1.0 + w7)) + log((-tb + w7) / (1.0 + w7)) - log((vb + w7) / (-1.0 + w7))
                    + log((vb + w7) / (1.0 + w7)) + 16.0 * log(wx3 / (-myi + wx3)) + 16.0 * log(wx3 / (myi + wx3)) + 16.0 * log(wx4 / (-myi + wx4)) + 16.0 * log(wx4 / (myi + wx4)) - 8.0 * log((wx3 - xb) / (-myi + wx3)) - 8.0 * log((wx3 - xb) / (myi + wx3)) - 8.0 * log((wx4 - xb) / (-myi + wx4)) - 8.0 * log((wx4 - xb) / (myi + wx4)) - 8.0 * log((wx3 + xb) / (-myi + wx3)) - 8.0 * log((wx3 + xb) / (myi + wx3)) - 8.0 * log((wx4 + xb) / (-myi + wx4)) - 8.0 * log((wx4 + xb) / (myi + wx4)) + (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 - tb, 1.0 - w7) - (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 + tb, 1.0 + w7)
                    - (2.0 * myi) * M_PI * my_sign(-imag(w7)) * T(1.0, 1.0 - vb, 1.0 + w7) + (2.0 * myi) * M_PI * my_sign(imag(w7)) * T(1.0, 1.0 + vb, 1.0 - w7) + (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) + (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) + (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) + (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) + (16.0 * myi) * M_PI * my_sign(std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) + (16.0 * myi) * M_PI * my_sign(-std::real(wx3)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) + (16.0 * myi) * M_PI * my_sign(std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4) + (16.0 * myi) * M_PI * my_sign(-std::real(wx4)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4))
                + log(1.0 + myi * xb) * ((2.0 * pisqu) / 3.0 - 16.0 * log(myi) * ln2 - 20.0 * ln2squ + 16.0 * ln2 * log(myi * xb) + (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx3) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx3) + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx3) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx3) + (16.0 * myi) * M_PI * log(1.0 / 2.0 - (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 - (myi / 2.0) * wx4) + (16.0 * myi) * M_PI * log(1.0 / 2.0 + (myi / 2.0) * wx4) * my_sign(2.0 * std::real(1.0 / (myi - xb))) * T(1.0, 1.0 / 2.0 - (myi / 2.0) * xb, 1.0 / 2.0 + (myi / 2.0) * wx4)
                    - (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx3) - (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx3) - (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 - myi * wx4) - (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - myi * xb, 1.0 + myi * wx4) - (8.0 * myi) * M_PI * log(1.0 - myi * wx3) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx3) - (8.0 * myi) * M_PI * log(1.0 + myi * wx3) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx3) - (8.0 * myi) * M_PI * log(1.0 - myi * wx4) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 - myi * wx4)
                    - (8.0 * myi) * M_PI * log(1.0 + myi * wx4) * my_sign(std::real(xbinv)) * T(1.0, 1.0 + myi * xb, 1.0 + myi * wx4)) + (8.0 * myi) * M_PI * power_of<2>(log((wx3 - xb) / (-myi + wx3))) * my_sign(imag((-myi + xb) / (-myi + wx3))) * T(1.0, ((-0.5) * myi) * (myi + xb), (wx3 - xb) / (-myi + wx3)) + (8.0 * myi) * M_PI * power_of<2>(log((wx4 - xb) / (-myi + wx4))) * my_sign(imag((-myi + xb) / (-myi + wx4))) * T(1.0, ((-0.5) * myi) * (myi + xb), (wx4 - xb) / (-myi + wx4)) - (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx3) / wx3)) * my_sign(std::real(wx3inv)) * T(1.0, (wx3 + xb) / wx3, (-myi + wx3) / wx3) - (4.0 * myi) * M_PI * power_of<2>(log((myi + wx3) / wx3)) * my_sign(-std::real(wx3inv)) * T(1.0, (wx3 + xb) / wx3, (myi + wx3) / wx3)
                - (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx4) / wx4)) * my_sign(std::real(wx4inv)) * T(1.0, (wx4 + xb) / wx4, (-myi + wx4) / wx4) - (4.0 * myi) * M_PI * power_of<2>(log((myi + wx4) / wx4)) * my_sign(-std::real(wx4inv)) * T(1.0, (wx4 + xb) / wx4, (myi + wx4) / wx4) - (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx3) / wx3)) * my_sign(std::real(wx3inv)) * T(1.0, 1.0 - xb / wx3, (-myi + wx3) / wx3) - (4.0 * myi) * M_PI * power_of<2>(log((myi + wx3) / wx3)) * my_sign(-std::real(wx3inv)) * T(1.0, 1.0 - xb / wx3, (myi + wx3) / wx3) - (4.0 * myi) * M_PI * power_of<2>(log((-myi + wx4) / wx4)) * my_sign(std::real(wx4inv)) * T(1.0, 1.0 - xb / wx4, (-myi + wx4) / wx4)
                - (4.0 * myi) * M_PI * power_of<2>(log((myi + wx4) / wx4)) * my_sign(-std::real(wx4inv)) * T(1.0, 1.0 - xb / wx4, (myi + wx4) / wx4) + log(xb) * (4.0 * log((myi + xb) / (myi - wx3)) * log((wx3 + xb) / wx3) + 4.0 * log((myi - xb) / (myi + wx4)) * log((wx4 + xb) / wx4) + 4.0 * log((myi + xb) / (myi - wx4)) * log((wx4 + xb) / wx4) + 4.0 * log((-myi + xb) / (-myi + wx3)) * log(1.0 - xb / wx3) + 4.0 * log((myi + xb) / (myi + wx3)) * log(1.0 - xb / wx3) + 4.0 * log((-myi + xb) / (-myi + wx4)) * log(1.0 - xb / wx4) + 4.0 * log((myi + xb) / (myi + wx4)) * log(1.0 - xb / wx4)
                    + (8.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(-imag(wx3 * xbinv)) * T(1.0, (wx3 + xb) / wx3, (-myi + wx3) / wx3) + (8.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(-imag(wx3 * xbinv)) * T(1.0, (wx3 + xb) / wx3, (myi + wx3) / wx3) + (8.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(-imag(wx4 * xbinv)) * T(1.0, (wx4 + xb) / wx4, (-myi + wx4) / wx4) + (8.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(-imag(wx4 * xbinv)) * T(1.0, (wx4 + xb) / wx4, (myi + wx4) / wx4) + (8.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(imag(wx3 * xbinv)) * T(1.0, 1.0 - xb / wx3, (-myi + wx3) / wx3) + (8.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(imag(wx3 * xbinv)) * T(1.0, 1.0 - xb / wx3, (myi + wx3) / wx3)
                    + (8.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(imag(wx4 * xbinv)) * T(1.0, 1.0 - xb / wx4, (-myi + wx4) / wx4) + (8.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(imag(wx4 * xbinv)) * T(1.0, 1.0 - xb / wx4, (myi + wx4) / wx4)) + power_of<2>(log(1.0 - myi * xb)) * (4.0 * ln2 - 8.0 * log(-myi / xb) + 2.0 * log(((-myi) * (wx3 - xb)) / ((myi + wx3) * xb)) + 2.0 * log(((-myi) * (wx4 - xb)) / ((myi + wx4) * xb)) - 4.0 * log(myi * xb) + 8.0 * log((2.0 * myi) * xb) - 2.0 * log((wx3 + xb) / (-myi + wx3)) + 2.0 * log(((-myi) * (wx3 + xb)) / ((-myi + wx3) * xb)) - 2.0 * log((wx4 + xb) / (-myi + wx4)) + 2.0 * log(((-myi) * (wx4 + xb)) / ((-myi + wx4) * xb))
                    + (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, (wx3 + xb) / wx3, 1.0 - myi * xb) + (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, (wx4 + xb) / wx4, 1.0 - myi * xb) + (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, 1.0 - xb / wx3, 1.0 - myi * xb) + (4.0 * myi) * M_PI * my_sign(std::real(xb)) * T(1.0, 1.0 - xb / wx4, 1.0 - myi * xb)) + power_of<2>(log(1.0 + myi * xb)) * (4.0 * ln2 - 8.0 * log(myi / xb) + 2.0 * log((myi * (wx3 - xb)) / ((-myi + wx3) * xb)) + 2.0 * log((myi * (wx4 - xb)) / ((-myi + wx4) * xb)) - 4.0 * log((-myi) * xb) + 8.0 * log((-2.0 * myi) * xb) - 2.0 * log((wx3 + xb) / (myi + wx3)) + 2.0 * log((myi * (wx3 + xb)) / ((myi + wx3) * xb)) - 2.0 * log((wx4 + xb) / (myi + wx4))
                    + 2.0 * log((myi * (wx4 + xb)) / ((myi + wx4) * xb)) + (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, (wx3 + xb) / wx3, 1.0 + myi * xb) + (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, (wx4 + xb) / wx4, 1.0 + myi * xb) + (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, 1.0 - xb / wx3, 1.0 + myi * xb) + (4.0 * myi) * M_PI * my_sign(-std::real(xb)) * T(1.0, 1.0 - xb / wx4, 1.0 + myi * xb)) - 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) * T(p(-w4inv, 1.0 - tb / w4), 1.0 - tb / w4, (-1.0 + w4) / w4) + 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, 1.0 - tb / w4, 1.0 + w4inv) * T(p(-w4inv, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 - w7 / w4)
                - 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) * T(p(-w4inv, (vb + w4) / w4), (vb + w4) / w4, (-1.0 + w4) / w4) + 4.0 * pisqu * log(1.0 + w4inv) * T(1.0, (vb + w4) / w4, 1.0 + w4inv) * T(p(-w4inv, (vb + w4) / w4), (vb + w4) / w4, 1.0 - w7 / w4) - 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) * T(p(w4inv, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 + w4inv) - 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, 1.0 - tb / w4, (-1.0 + w4) / w4) * T(p(w4inv, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 - w7 / w4)
                - 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) * T(p(w4inv, (vb + w4) / w4), (vb + w4) / w4, 1.0 + w4inv) - 4.0 * pisqu * log((-1.0 + w4) / w4) * T(1.0, (vb + w4) / w4, (-1.0 + w4) / w4) * T(p(w4inv, (vb + w4) / w4), (vb + w4) / w4, 1.0 - w7 / w4) - 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) * T(p(-w5inv, 1.0 - vb / w5), 1.0 - vb / w5, (-1.0 + w5) / w5) - 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, 1.0 - vb / w5, 1.0 + w5inv) * T(p(-w5inv, 1.0 - vb / w5), 1.0 - vb / w5, (w5 + w7) / w5)
                - 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) * T(p(-w5inv, (tb + w5) / w5), (tb + w5) / w5, (-1.0 + w5) / w5) - 4.0 * pisqu * log(1.0 + w5inv) * T(1.0, (tb + w5) / w5, 1.0 + w5inv) * T(p(-w5inv, (tb + w5) / w5), (tb + w5) / w5, (w5 + w7) / w5) - 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) * T(p(w5inv, 1.0 - vb / w5), 1.0 - vb / w5, 1.0 + w5inv) + 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, 1.0 - vb / w5, (-1.0 + w5) / w5) * T(p(w5inv, 1.0 - vb / w5), 1.0 - vb / w5, (w5 + w7) / w5)
                - 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) * T(p(w5inv, (tb + w5) / w5), (tb + w5) / w5, 1.0 + w5inv) + 4.0 * pisqu * log((-1.0 + w5) / w5) * T(1.0, (tb + w5) / w5, (-1.0 + w5) / w5) * T(p(w5inv, (tb + w5) / w5), (tb + w5) / w5, (w5 + w7) / w5) + 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) * T(p(w7 / w4, 1.0 - tb / w4), 1.0 - tb / w4, 1.0 + w4inv) - 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, 1.0 - tb / w4, 1.0 - w7 / w4) * T(p(w7 / w4, 1.0 - tb / w4), 1.0 - tb / w4, (-1.0 + w4) / w4)
                + 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) * T(p(w7 / w4, (vb + w4) / w4), (vb + w4) / w4, 1.0 + w4inv) - 4.0 * pisqu * log(1.0 - w7 / w4) * T(1.0, (vb + w4) / w4, 1.0 - w7 / w4) * T(p(w7 / w4, (vb + w4) / w4), (vb + w4) / w4, (-1.0 + w4) / w4) - 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), 1.0 - vb / w5), 1.0 - vb / w5, 1.0 + w5inv) + 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, 1.0 - vb / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), 1.0 - vb / w5), 1.0 - vb / w5, (-1.0 + w5) / w5)
                - 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), (tb + w5) / w5), (tb + w5) / w5, 1.0 + w5inv) + 4.0 * pisqu * log((w5 + w7) / w5) * T(1.0, (tb + w5) / w5, (w5 + w7) / w5) * T(p(-(w7 / w5), (tb + w5) / w5), (tb + w5) / w5, (-1.0 + w5) / w5) - (103.0 * zeta3) / 2.0)) / denom5;

            const complex<double> f29bpart4 = ln2 * num15 * ((-16.0 * dilog(wx3 / (-myi + wx3)) - 16.0 * dilog(wx3 / (myi + wx3)) - 16.0 * dilog(wx4 / (-myi + wx4)) - 16.0 * dilog(wx4 / (myi + wx4)) + 8.0 * dilog((wx3 - xb) / (-myi + wx3)) + 8.0 * dilog((wx3 - xb) / (myi + wx3))
                + 8.0 * dilog((wx4 - xb) / (-myi + wx4)) + 8.0 * dilog((wx4 - xb) / (myi + wx4)) + 8.0 * dilog(-(xb / wx3)) + 8.0 * dilog(xb / wx3) + 8.0 * dilog(-(xb / wx4)) + 8.0 * dilog(xb / wx4) + 8.0 * dilog((wx3 + xb) / (-myi + wx3))
                + 8.0 * dilog((wx3 + xb) / (myi + wx3)) + 8.0 * dilog((wx4 + xb) / (-myi + wx4)) + 8.0 * dilog((wx4 + xb) / (myi + wx4)) + (-4.0 * log(tb) - 4.0 * log(vb) + 4.0 * log(1.0 - tb / w7) + 4.0 * log((vb + w7) / w7)) * log(1.0 - myi * xb)
                + (-4.0 * log(tb) - 4.0 * log(vb) + 4.0 * log(1.0 - tb / w7) + 4.0 * log((vb + w7) / w7)) * log(1.0 + myi * xb) + (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb)
                    - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 8.0 * log((myi - xb) / (myi + wx3)) + 8.0 * log((myi + xb) / (myi - wx3))) * log((wx3 + xb) / wx3)
                + (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 8.0 * log((myi - xb) / (myi + wx4)) + 8.0 * log((myi + xb) / (myi - wx4))) * log((wx4 + xb) / wx4)
                + (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7) + 8.0 * log((-myi + xb) / (-myi + wx3))
                    + 8.0 * log((myi + xb) / (myi + wx3))) * log(1.0 - xb / wx3) + (2.0 * log(1.0 - tb) + 2.0 * log(tb) - 2.0 * log(1.0 + tb) - 2.0 * log(1.0 - vb) + 2.0 * log(vb) + 2.0 * log(1.0 + vb) - 2.0 * log(1.0 - tb / w7) - 2.0 * log((vb + w7) / w7)
                    + 8.0 * log((-myi + xb) / (-myi + wx4)) + 8.0 * log((myi + xb) / (myi + wx4))) * log(1.0 - xb / wx4) + (2.0 * log((wx3 + xb) / wx3) + 2.0 * log((wx4 + xb) / wx4) + 2.0 * log(1.0 - xb / wx3) + 2.0 * log(1.0 - xb / wx4)) * ln1myb
                + (8.0 * log(1.0 - myi * xb) + 8.0 * log(1.0 + myi * xb) - 4.0 * log((wx3 + xb) / wx3) - 4.0 * log((wx4 + xb) / wx4) - 4.0 * log(1.0 - xb / wx3) - 4.0 * log(1.0 - xb / wx4)) * log(yb)
                + (2.0 * log((wx3 + xb) / wx3) + 2.0 * log((wx4 + xb) / wx4) + 2.0 * log(1.0 - xb / wx3) + 2.0 * log(1.0 - xb / wx4)) * ln1pyb + (16.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(-std::real(wx3)) * T(1.0, (wx3 + xb) / wx3, (-myi + wx3) / wx3)
                + (16.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(std::real(wx3)) * T(1.0, (wx3 + xb) / wx3, (myi + wx3) / wx3) + (16.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(-std::real(wx4)) * T(1.0, (wx4 + xb) / wx4, (-myi + wx4) / wx4)
                + (16.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(std::real(wx4)) * T(1.0, (wx4 + xb) / wx4, (myi + wx4) / wx4) + (16.0 * myi) * M_PI * log((-myi + wx3) / wx3) * my_sign(-std::real(wx3)) * T(1.0, 1.0 - xb / wx3, (-myi + wx3) / wx3)
                + (16.0 * myi) * M_PI * log((myi + wx3) / wx3) * my_sign(std::real(wx3)) * T(1.0, 1.0 - xb / wx3, (myi + wx3) / wx3) + (16.0 * myi) * M_PI * log((-myi + wx4) / wx4) * my_sign(-std::real(wx4)) * T(1.0, 1.0 - xb / wx4, (-myi + wx4) / wx4)
                + (16.0 * myi) * M_PI * log((myi + wx4) / wx4) * my_sign(std::real(wx4)) * T(1.0, 1.0 - xb / wx4, (myi + wx4) / wx4)) / denom5);

            const complex<double> f29bpart5 = term1 + (-(logs4 * dilog((-myi) * xb)) - logs4 * dilog(myi * xb)) / denom8 + (logs15 * log(1.0 - myi * xb) + logs16 * log(1.0 + myi * xb)) / denom12
                + ((logs17 + logs18) * li2half - logs17 * dilog(1.0 / 2.0 - (myi / 2.0) * xb) - logs18 * dilog((1.0 + myi * xb) / 2.0) + logs17 * ln2 * log(1.0 - myi * xb) + logs18 * ln2 * log(1.0 + myi * xb)) / denom1 + (logs3 * log(xb)) / denom7
                + (logs5 * ln1myb + logs6 * ln1pyb) / denom9 + (12.0 * yb * lnmuhat - 31.0 * yb3 * lnmuhat + (6.0 * lnmuhat - 18.0 * yb2 * lnmuhat) * ln1myb + (-6.0 * lnmuhat + 18.0 * yb2 * lnmuhat) * ln1pyb) / denom13
                + ((-(logs1 * log(1.0 - myi * xb)) - logs1 * log(1.0 + myi * xb)) * ln1myb + (-(logs2 * log(1.0 - myi * xb)) - logs2 * log(1.0 + myi * xb)) * ln1pyb) / denom6
                + ((logs7 + logs9) * li2half - logs7 * dilog((1.0 - tb) / 2.0) - logs7 * dilog(-tb) - logs10 * dilog(tb) - logs9 * dilog((1.0 + tb) / 2.0) - logs9 * dilog(1.0 / (1.0 - w7)) + logs9 * dilog((-1.0 + tb) / (-1.0 + w7))
                - logs8 * dilog(1.0 / (1.0 + w7)) + logs8 * dilog((1.0 + tb) / (1.0 + w7)) + logs7 * ln2 * log(1.0 - tb) + (logs10 * power_of<2>(log(1.0 - tb))) / 2.0 + logs9 * ln2 * log(1.0 + tb) + (logs8 * power_of<2>(log(1.0 + tb))) / 2.0
                + logs9 * log(1.0 - tb) * log((-tb + w7) / (-1.0 + w7)) + logs8 * log(1.0 + tb) * log((-tb + w7) / (1.0 + w7)) + (logs20 * log(1.0 - tb) + logs19 * log(1.0 + tb)) * log(1.0 - myi * xb)
                + (logs20 * log(1.0 - tb) + logs19 * log(1.0 + tb)) * log(1.0 + myi * xb) + (2.0 * myi) * logs9 * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 - tb, 1.0 - w7) + (2.0 * myi) * logs8 * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 + tb, 1.0 + w7)) / denom10
                + ((logs12 + logs14) * li2half - logs12 * dilog((1.0 - vb) / 2.0) - logs11 * dilog(-vb) - logs14 * dilog(vb) - logs14 * dilog((1.0 + vb) / 2.0) - logs12 * dilog(1.0 / (1.0 - w7))
                + logs12 * dilog((1.0 + vb) / (1.0 - w7)) - logs13 * dilog(1.0 / (1.0 + w7)) + logs13 * dilog((1.0 - vb) / (1.0 + w7)) + logs12 * ln2 * log(1.0 - vb) + (logs13 * power_of<2>(log(1.0 - vb))) / 2.0 + logs14 * ln2 * log(1.0 + vb)
                + (logs11 * power_of<2>(log(1.0 + vb))) / 2.0 + logs12 * log(1.0 + vb) * log((vb + w7) / (-1.0 + w7)) + logs13 * log(1.0 - vb) * log((vb + w7) / (1.0 + w7)) + (logs21 * log(1.0 - vb) + logs22 * log(1.0 + vb)) * log(1.0 - myi * xb)
                + (logs21 * log(1.0 - vb) + logs22 * log(1.0 + vb)) * log(1.0 + myi * xb) + (2.0 * myi) * logs13 * M_PI * log(1.0 + w7) * my_sign(-imag(w7inv)) * T(1.0, 1.0 - vb, 1.0 + w7) + (2.0 * myi) * logs12 * M_PI * log(1.0 - w7) * my_sign(imag(w7inv)) * T(1.0, 1.0 + vb, 1.0 - w7)) / denom11;

            return f29bpart1 + f29bpart2 + f27bpart3 + f29bpart4 + f29bpart5;
        }

        complex<double> f17c(const CharmLoopsParameters & clp)
        {
            // f17c = - f27c / (2 * N_c)
            return - f27c(clp) / 6.0;
        }

        complex<double> f19c(const CharmLoopsParameters & clp)
        {
            // f19c = - f29c / (2 * N_c)
            return - f29c(clp) / 6.0;
        }

        complex<double> f27c(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xc = clp.x_c;
            const complex<double> yc = clp.y_c;
            const complex<double> w3 = (2.0 * xc * xc) / (1.0 + xc * xc);

            const complex<double> xcinv = 1.0 / xc;
            const complex<double> ycinv = 1.0 / yc;
            const complex<double> w3inv = 1.0 / w3;

            // Imaginary parts
            const double imxc = imag(xc);
            const double imw3 = imag(w3);
            const double imycinv = imag(ycinv);

            // Polynomials in xc and yc
            const complex<double> xc2 = power_of<2>(xc);
            const complex<double> xc3 = power_of<3>(xc);
            const complex<double> xc4 = power_of<4>(xc);
            const complex<double> xc6 = power_of<6>(xc);

            const complex<double> yc2 = power_of<2>(yc);
            const complex<double> yc3 = power_of<3>(yc);
            const complex<double> yc4 = power_of<4>(yc);
            const complex<double> yc5 = power_of<5>(yc);
            const complex<double> yc6 = power_of<6>(yc);

            const complex<double> factorp0 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc);
            const complex<double> factorp1 = power_of<2>(-1.0 + xc) * power_of<2>(1.0 + xc) * power_of<2>(-1.0 + yc) * power_of<2>(1.0 + yc) * (-2.0 * yc2 + xc2 * (-1.0 + 3.0 * yc2));
            const complex<double> termp1 = (2.0 * (3.0 + yc2 * (-18.0 - (4.0 * myi) * M_PI - 8.0 * ln2) + xc2 * (12.0 + (4.0 * myi) * M_PI + 3.0 * yc2 + ln256))) / (9.0 * (xc - yc) * (xc + yc));

            const complex<double> num0 = (1.0 + xc) * (2.0 * xc3 + 2.0 * yc4 + xc2 * (-3.0 + 4.0 * yc2 - 3.0 * yc4) + xc * (3.0 - 8.0 * yc2 + 3.0 * yc4));
            const complex<double> num1 = (-1.0 + xc) * (2.0 * xc3 - 2.0 * yc4 + xc * (3.0 - 8.0 * yc2 + 3.0 * yc4) + xc2 * (3.0 - 4.0 * yc2 + 3.0 * yc4));
            const complex<double> num2 = (-1.0 + xc) * (1.0 + xc) * (3.0 * yc2 - 7.0 * yc4 + xc2 * (3.0 - 5.0 * yc2 + 6.0 * yc4));
            const complex<double> num3 = (-1.0 + xc) * (1.0 + xc) * power_of<2>(1.0 + yc) * (yc3 * (-1.0 - 2.0 * yc + 13.0 * yc2) + xc2 * yc * (1.0 - 6.0 * yc - 4.0 * yc2 + 14.0 * yc3 + 15.0 * yc4) + xc4 * (2.0 - 3.0 * yc - 2.0 * yc2 - 27.0 * yc3 - 6.0 * yc4 + 6.0 * yc5));
            const complex<double> num4 = (-1.0 + xc) * (1.0 + xc) * yc * (3.0 * xc6 * (11.0 - 6.0 * yc2 + yc4) + 2.0 * (yc2 + 2.0 * yc4) + 2.0 * xc4 * (-5.0 - 13.0 * yc2 + 3.0 * yc4) + xc2 * (1.0 - 6.0 * yc2 + 11.0 * yc4));
            const complex<double> num5 = (-1.0 + xc) * (1.0 + xc) * (yc2 * (3.0 + yc4) + xc2 * (yc2 + 3.0 * yc6) + xc6 * (-4.0 + 51.0 * yc2 - 44.0 * yc4 + 9.0 * yc6) + xc4 * (-4.0 - 15.0 * yc2 - 12.0 * yc4 + 11.0 * yc6));
            const complex<double> num6 = (-1.0 + xc) * (1.0 + xc) * power_of<2>(-1.0 + yc) * (yc3 * (-1.0 + 2.0 * yc + 13.0 * yc2) + xc2 * yc * (1.0 + 6.0 * yc - 4.0 * yc2 - 14.0 * yc3 + 15.0 * yc4) + xc4 * (-2.0 - 3.0 * yc + 2.0 * yc2 - 27.0 * yc3 + 6.0 * yc4 + 6.0 * yc5));
            const complex<double> num7 = (-1.0 + xc) * (1.0 + xc) * yc * (2.0 * yc2 + 2.0 * xc4 * (-5.0 - yc2 + yc4) + xc6 * (17.0 - 14.0 * yc2 + 3.0 * yc4) + xc2 * (1.0 - 2.0 * yc2 + 3.0 * yc4));
            const complex<double> num8 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc) * (xc2 * (-1.0 + 38.0 * yc2 - 5.0 * yc4) + xc4 * (-15.0 - 4.0 * yc2 + 3.0 * yc4) - 2.0 * (yc2 + 7.0 * yc4));
            const complex<double> num9 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc) * (2.0 * yc2 * (-1.0 + 5.0 * yc2) + xc4 * (9.0 - 4.0 * yc2 + 3.0 * yc4) - xc2 * (1.0 + 10.0 * yc2 + 5.0 * yc4));
            const complex<double> num10 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc) * (-2.0 * yc2 + 6.0 * yc4 + xc4 * (5.0 - 4.0 * yc2 + 3.0 * yc4) - xc2 * (1.0 + 2.0 * yc2 + 5.0 * yc4));

            const complex<double> denom0 = (9.0 * power_of<2>(xc - yc) * power_of<2>(xc + yc)); // can b e replaced by denom1
            const complex<double> denom1 = (9.0 * power_of<2>(xc - yc) * power_of<2>(xc + yc));
            const complex<double> denom2 = (9.0 * power_of<2>(xc - yc) * yc * power_of<2>(xc + yc));
            const complex<double> denom3 = (9.0 * power_of<2>(xc - yc) * yc2 * power_of<2>(xc + yc) * (yc + xc2 * (2.0 + yc)));
            const complex<double> denom4 = (9.0 * power_of<2>(xc - yc) * power_of<2>(xc + yc) * (xc2 * (-2.0 + yc) + yc) * (yc + xc2 * (2.0 + yc)));
            const complex<double> denom5 = (9.0 * power_of<2>(xc - yc) * yc2 * power_of<2>(xc + yc) * (xc2 * (-2.0 + yc) + yc));
            const complex<double> denom6 = (9.0 * power_of<3>(xc - yc) * power_of<3>(xc + yc));
            const complex<double> denom7 = (9.0 * (xc - yc) * (xc + yc));

            // Polylogarithms in xc and yc
            const complex<double> ln1pxc = log(1.0 + xc);
            const complex<double> ln1mxc = log(1.0 - xc);
            const complex<double> ln1pyc = log(1.0 + yc);
            const complex<double> ln1myc = log(1.0 - yc);
            const complex<double> ln1pxchalf = log((1.0 + xc) / 2.0); // MyLog[(1 + xc)/2]
            const complex<double> ln1mxchalf = log((1.0 - xc) / 2.0); // MyLog[(1 - xc)/2]
            const complex<double> ln1pychalf = log((1.0 + yc) / 2.0); // MyLog[(1 + yc)/2]
            const complex<double> ln1mychalf = log((1.0 - yc) / 2.0); // MyLog[(1 - yc)/2]

            const complex<double> lnr_xc1 = log(xc / (1.0 + xc));
            const complex<double> lnr_xc2 = log(xc / (-1.0 + xc));

            const complex<double> li2r_xc = dilog(1.0 / (1.0 + xc));

            // Heaviside theta related functions
            const double t11myc1mxc = T(1.0, 1.0 - yc, 1.0 - xc); // MyT[1, 1 - yc, 1 - xc]
            const double t11pyc1mxc = T(1.0, 1.0 + yc, 1.0 - xc); // MyT[1, 1 + yc, 1 - xc]
            const double t11myc1pxc = T(1.0, 1.0 - yc, 1.0 + xc); // MyT[1, 1 - yc, 1 + xc]
            const double t11pyc1pxc = T(1.0, 1.0 + yc, 1.0 + xc); // MyT[1, 1 + yc, 1 + xc]

            const complex<double> f27cPart1 = termp1 + (-(num3 / denom3) + (4.0 * num5) / denom4 - num6 / denom5) * dilog(1.0 / 2.0)
                + (num6 * dilog((1.0 - yc) / 2.0)) / denom5 + (num3 * dilog((1.0 + yc) / 2.0)) / denom3 + (16.0 * lnmuhat) / 9.0 - (4.0 * num1 * ln1mxc) / denom1 + (16.0 * log(xc)) / 9.0 - (4.0 * num0 * ln1pxc) / denom0
                - (num6 * ln2 * ln1myc) / denom5 + (num6 * power_of<2>(ln1myc)) / (2.0 * denom5) - (num3 * ln2 * ln1pyc) / denom3 + (num3 * power_of<2>(ln1pyc)) / (2.0 * denom3) - (2.0 * num2 * (-ln1myc + ln1pyc)) / denom2
                + ( - (2.0 * num5 * dilog((1.0 + xc) / 2.0)) - (4.0 * num7 * li2r_xc) + (4.0 * num7 * dilog(1.0 / (1.0 - xc))) - (2.0 * num5 * dilog((1.0 - xc) / 2.0)) - (4.0 * num7 * dilog(-1.0 / (-1.0 + xc)))
                + (4.0 * num7 * li2r_xc) - (4.0 * num7 * dilog((-1.0 + yc) / (-1.0 - xc))) - (4.0 * num7 * dilog((-1.0 + yc) / (-1.0 + xc))) + (4.0 * num4 * dilog(-yc)) - (4.0 * num4 * dilog(yc))
                + (4.0 * num7 * dilog((1.0 + yc) / (1.0 - xc))) + (4.0 * num7 * dilog((1.0 + yc) / (1.0 + xc))) + (2.0 * num5 * ln2 * ln1mxc) - (num5 * power_of<2>(ln1mxc)) + (2.0 * num5 * ln2 * ln1pxc) - (num5 * power_of<2>(ln1pxc))
                + (4.0 * num7 * log((-xc - yc) / (1.0 - xc)) * ln1pyc) + (4.0 * num7 * log((xc - yc) / (1.0 + xc)) * ln1pyc) - (4.0 * num7 * ln1myc * log((-xc - yc) / (-1.0 - xc)))
                - (4.0 * num7 * ln1myc * log((xc - yc) / (-1.0 + xc))) + (4.0 * num7 * ln1mxc * log(1.0 - yc / xc)) - (4.0 * num7 * ln1pxc * log(1.0 - yc / xc))
                - (4.0 * num7 * ln1mxc * log(1.0 + yc / xc)) + (4.0 * num7 * ln1pxc * log(1.0 + yc / xc)) - ((8.0 * myi) * num7 * M_PI * ln1mxc * my_sign(imag(xcinv)) * t11myc1mxc)
                - ((8.0 * myi) * num7 * M_PI * ln1pxc * my_sign(-imag(xcinv)) * t11myc1pxc) + ((8.0 * myi) * num7 * M_PI * ln1mxc * my_sign(imag(xcinv)) * t11pyc1mxc)
                + ((8.0 * myi) * num7 * M_PI * ln1pxc * my_sign(-imag(xcinv)) * t11pyc1pxc)) / denom4;

            const complex<double> f27cPart2 = (2.0 * num8 * trilog(1.0 / 2.0) + (-3.0 * num8 - 4.0 * num9) * trilog((1.0 - yc) / 2.0) - 2.0 * num9 * trilog(1.0 - yc) - 2.0 * num9 * trilog(-yc) - 2.0 * num9 * trilog(yc)
                - 2.0 * num9 * trilog(yc / (-1.0 + yc)) + 4.0 * num9 * trilog((2.0 * yc) / (-1.0 + yc)) - 2.0 * num9 * trilog(yc / (1.0 + yc)) + 4.0 * num9 * trilog((2.0 * yc) / (1.0 + yc)) + (-3.0 * num8 - 4.0 * num9) * trilog((1.0 + yc) / 2.0)
                - 2.0 * num9 * trilog(1.0 + yc) - (num8 * pisqu * ln2) / 3.0 + (2.0 * num8 * power_of<3>(ln2)) / 3.0 - (num8 * pisqu * ln1myc) / 12.0 + 4.0 * num9 * dilog(1.0 - yc) * ln1myc
                + (num8 * ln2squ * ln1myc) / 2.0 + 2.0 * num9 * power_of<2>(ln1myc) * log(yc) + (3.0 * num8 * power_of<2>(ln1myc) * ln1pychalf) / 2.0 - (num8 * pisqu * ln1pyc) / 12.0
                + 4.0 * num9 * dilog(1.0 + yc) * ln1pyc + (num8 * ln2squ * ln1pyc) / 2.0 - 2.0 * num8 * ln2 * ln1myc * ln1pyc + (3.0 * num8 * ln1mychalf * power_of<2>(ln1pyc)) / 2.0
                + 2.0 * num9 * log(-yc) * power_of<2>(ln1pyc) + dilog((1.0 - yc) / 2.0) * (3.0 * num8 * ln1myc + num8 * ln1pyc) + dilog((1.0 + yc) / 2.0) * (num8 * ln1myc + 3.0 * num8 * ln1pyc)
                + dilog(-yc) * (2.0 * num9 * ln1myc + 2.0 * num9 * ln1pyc) + dilog(yc) * (2.0 * num9 * ln1myc + 2.0 * num9 * ln1pyc)
                - (num9 * (-4.0 * power_of<3>(ln2) + pisqu * ln4 - ln1myc * (pisqu - 6.0 * ln2squ + ln64 * ln1myc) + (pisqu + 6.0 * ln2squ) * ln1pyc + 2.0 * (-3.0 * log(-yc) + log((1.0 + yc) / 8.0)) * power_of<2>(ln1pyc))) / 6.0
                - (num9 * (-4.0 * power_of<3>(ln2) + pisqu * ln4 + (pisqu + 6.0 * ln2squ) * ln1myc + 2.0 * power_of<2>(ln1myc) * (log((1.0 - yc) / 8.0) - 3.0 * log(yc)) - ln1pyc * (pisqu - 6.0 * ln2squ + ln64 * ln1pyc))) / 6.0
                + (7.0 * num8 * zeta3) / 2.0 + 11.0 * num9 * zeta3) / denom6;

            const complex<double> f27cPart3 = 2.0 * num10 * (((pisqu * ln4) / 12.0 - 6.0 * li3half + 4.0 * trilog(1.0 - xcinv) + 4.0 * trilog(1.0 + xcinv) + 2.0 * trilog(-1.0 / (-1.0 - xc)) + 2.0 * trilog(1.0 / (1.0 - xc)) + 2.0 * trilog(1.0 - xc) + 2.0 * trilog(-1.0 / (-1.0 + xc)) + 4.0 * trilog(-xcinv) + 4.0 * trilog(xcinv) - 4.0 * trilog((-0.5) * ((1.0 - xc) * xcinv)) + 2.0 * trilog(-xc) + 2.0 * trilog(xc) + 2.0 * trilog(xc / (-1.0 + xc)) - 2.0 * trilog((2.0 * xc) / (-1.0 + xc)) + 2.0 * trilog(1.0 / (1.0 + xc)) - 4.0 * trilog((1.0 - xc) / (1.0 + xc)) + 2.0 * trilog(xc / (1.0 + xc)) - 2.0 * trilog((2.0 * xc) / (1.0 + xc)) + 2.0 * trilog(1.0 + xc)
                - 4.0 * trilog((1.0 + xc) / (1.0 - xc)) - 4.0 * trilog((1.0 + xc) / (2.0 * xc)) + 2.0 * trilog((-1.0 - yc) / (-1.0 - xc)) + 2.0 * trilog((-1.0 - yc) / (-1.0 + xc)) + 2.0 * trilog(((-1.0 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (1.0 - yc))) + 2.0 * trilog(((-1.0 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (1.0 - yc))) + 4.0 * trilog((1.0 - yc) / 2.0) + 2.0 * trilog((1.0 - yc) / (1.0 - xc)) + 2.0 * trilog((1.0 - yc) / (1.0 + xc)) + 2.0 * trilog(((1.0 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-1.0 - yc))) + 2.0 * trilog(((1.0 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-1.0 - yc))) - 2.0 * trilog((-1.0 - xc) / (-xc - yc)) - 2.0 * trilog((1.0 - xc) / (-xc - yc))
                - 2.0 * trilog((-1.0 - yc) / (-xc - yc)) + 2.0 * trilog((-0.5) * (((-1.0 - xc) * (-1.0 - yc)) / (-xc - yc))) - 2.0 * trilog((1.0 - yc) / (-xc - yc)) + 2.0 * trilog(((1.0 - xc) * (1.0 - yc)) / (2.0 * (-xc - yc))) - 2.0 * trilog((-1.0 + xc) / (xc - yc)) - 2.0 * trilog((1.0 + xc) / (xc - yc)) - 2.0 * trilog((-1.0 - yc) / (xc - yc)) + 2.0 * trilog((-0.5) * (((-1.0 + xc) * (-1.0 - yc)) / (xc - yc))) - 2.0 * trilog((1.0 - yc) / (xc - yc)) + 2.0 * trilog(((1.0 + xc) * (1.0 - yc)) / (2.0 * (xc - yc))) - 4.0 * trilog((-1.0 + yc) / (-1.0 - xc)) - 4.0 * trilog((-1.0 + yc) / (-1.0 + xc)) + 4.0 * trilog((1.0 + yc) / 2.0) - 4.0 * trilog((1.0 + yc) / (1.0 - xc))
                - 4.0 * trilog((1.0 + yc) / (1.0 + xc)) - 4.0 * dilog(-xcinv) * lnhalf - 4.0 * dilog(xcinv) * lnhalf + 4.0 * dilog((-0.5) * ((1.0 - xc) * xcinv)) * lnhalf + 4.0 * dilog((1.0 - xc) / (1.0 + xc)) * lnhalf + 4.0 * dilog((1.0 + xc) / (1.0 - xc)) * lnhalf + 4.0 * dilog((1.0 + xc) / (2.0 * xc)) * lnhalf - (pisqu * ln2) / 3.0 + power_of<3>(ln2) / 3.0 - 2.0 * power_of<2>(lnhalf) * log(1.0 - xcinv) - 2.0 * power_of<2>(lnhalf) * log(1.0 + xcinv) - power_of<3>(log((2.0 * (-1.0 - xc)) / (1.0 - xc))) / 3.0 - (pisqu * ln1mxc) / 12.0 - 2.0 * dilog(1.0 - xc) * ln1mxc - 2.0 * dilog(-xc) * ln1mxc
                + (ln2squ * ln1mxc) / 2.0 - 2.0 * (pisqu / 12.0 - ln2squ / 2.0) * ln1mxc - ln2 * power_of<2>(ln1mxc) + power_of<3>(ln1mxc) / 6.0 + (2.0 * power_of<3>(log(-2.0 * xcinv))) / 3.0 + (2.0 * power_of<3>(log(2.0 * xcinv))) / 3.0 + 2.0 * power_of<2>(lnhalf) * log((-0.5) * ((-1.0 - xc) * xcinv)) + 2.0 * power_of<2>(lnhalf) * log((-1.0 + xc) / (2.0 * xc)) - power_of<2>(ln1mxc) * log(xc) - power_of<2>(lnhalf) * lnr_xc1 + 2.0 * power_of<2>(lnhalf) * log((-2.0 * xc) / (1.0 - xc)) - power_of<2>(lnhalf) * lnr_xc2 - power_of<2>(lnhalf) * lnr_xc2 - power_of<3>(log((-2.0 * (1.0 - xc)) / (1.0 + xc))) / 3.0 - power_of<3>(log((2.0 * (-1.0 + xc)) / (1.0 + xc))) / 3.0
                - power_of<2>(lnhalf) * lnr_xc1 + 2.0 * power_of<2>(lnhalf) * log((2.0 * xc) / (1.0 + xc)) + (3.0 * power_of<2>(ln1mxc) * ln1pxchalf) / 2.0 + dilog(-(xc / (1.0 - xc))) * (ln1mxc - ln1pxc) + dilog(xc / (-1.0 + xc)) * (ln1mxc - ln1pxc) + dilog((-xc + yc) / (-1.0 - xc)) * (ln1mxc - ln1pxc) + dilog((xc + yc) / (1.0 + xc)) * (ln1mxc - ln1pxc) - (pisqu * ln1pxc) / 12.0 - 2.0 * dilog(xc) * ln1pxc - 2.0 * dilog(1.0 + xc) * ln1pxc + (ln2squ * ln1pxc) / 2.0 - 2.0 * (pisqu / 12.0 - ln2squ / 2.0) * ln1pxc
                - 2.0 * ln2 * ln1mxc * ln1pxc - ln2 * power_of<2>(ln1pxc) + (3.0 * ln1mxchalf * power_of<2>(ln1pxc)) / 2.0 - log(-xc) * power_of<2>(ln1pxc) + power_of<3>(ln1pxc) / 6.0 + dilog(-(xc / (-1.0 - xc))) * (-ln1mxc + ln1pxc) + dilog(xc / (1.0 + xc)) * (-ln1mxc + ln1pxc) + dilog((-xc + yc) / (1.0 - xc)) * (-ln1mxc + ln1pxc) + dilog((xc + yc) / (-1.0 + xc)) * (-ln1mxc + ln1pxc) + (ln1pxc * (pisqu - 6.0 * ln2squ - 12.0 * ln1mxc * ln1pxchalf + ln64 * ln1pxc)) / 12.0
                + (ln1mxc * (pisqu - 6.0 * ln2squ + ln64 * ln1mxc - 12.0 * ln1mxchalf * ln1pxc)) / 12.0 - power_of<3>(log((-2.0 * (1.0 + xc)) / (1.0 - xc))) / 3.0 + power_of<3>(log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc)))) / 3.0 + power_of<3>(log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc)))) / 3.0 + power_of<3>(log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc)))) / 3.0 + power_of<3>(log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc)))) / 3.0 - 2.0 * dilog(((1.0 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-1.0 - yc))) * ln1mychalf - 2.0 * dilog(((1.0 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-1.0 - yc))) * ln1mychalf
                + 2.0 * dilog((1.0 - yc) / (-xc - yc)) * ln1mychalf - 2.0 * dilog(((1.0 - xc) * (1.0 - yc)) / (2.0 * (-xc - yc))) * ln1mychalf + 2.0 * dilog((1.0 - yc) / (xc - yc)) * ln1mychalf - 2.0 * dilog(((1.0 + xc) * (1.0 - yc)) / (2.0 * (xc - yc))) * ln1mychalf - 2.0 * dilog(2.0 / (1.0 - xc)) * ln1myc - 2.0 * dilog(2.0 / (1.0 + xc)) * ln1myc - dilog((1.0 - yc) / (1.0 - xc)) * ln1myc - dilog((1.0 - yc) / (1.0 + xc)) * ln1myc - ln2 * ln1mxc * ln1myc + (power_of<2>(ln1mxc) * ln1myc) / 2.0 - ln2 * ln1pxc * ln1myc
                + (power_of<2>(ln1pxc) * ln1myc) / 2.0 - 2.0 * pisqu * ((-1.0 / 6.0) * log(2.0 * xcinv) + log((-2.0 * (1.0 - xc)) / (1.0 + xc)) / 6.0 - log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (-xc - yc)) / 6.0) - power_of<3>(log(-2.0 / (-xc - yc))) / 3.0 - 2.0 * pisqu * (log((2.0 * (-1.0 - xc)) / (1.0 - xc)) / 6.0 - log(-2.0 * xcinv) / 6.0 - log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc))) / 6.0 + log(2.0 / (-xc - yc)) / 6.0) - power_of<3>(log(2.0 / (-xc - yc))) / 3.0 + power_of<2>(ln1mychalf) * log((-1.0 - xc) / (-xc - yc)) - power_of<2>(ln1mychalf) * log(((1.0 + xc) * (-1.0 - yc)) / (2.0 * (-xc - yc))) + power_of<2>(ln1mychalf) * log((-xc - yc) / (-1.0 - xc))
                - power_of<2>(ln1mychalf) * log((-2.0 * (-xc - yc)) / ((-1.0 - xc) * (-1.0 - yc))) - 2.0 * pisqu * ((-1.0 / 6.0) * log(-2.0 * xcinv) + log((-2.0 * (1.0 + xc)) / (1.0 - xc)) / 6.0 - log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (xc - yc)) / 6.0) - power_of<3>(log(-2.0 / (xc - yc))) / 3.0 - 2.0 * pisqu * ((-1.0 / 6.0) * log(2.0 * xcinv) + log((2.0 * (-1.0 + xc)) / (1.0 + xc)) / 6.0 - log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc))) / 6.0 + log(2.0 / (xc - yc)) / 6.0) - power_of<3>(log(2.0 / (xc - yc))) / 3.0 + power_of<2>(ln1mychalf) * log((-1.0 + xc) / (xc - yc)) - power_of<2>(ln1mychalf) * log(((1.0 - xc) * (-1.0 - yc)) / (2.0 * (xc - yc)))
                + power_of<2>(ln1mychalf) * log((xc - yc) / (-1.0 + xc)) - power_of<2>(ln1mychalf) * log((-2.0 * (xc - yc)) / ((-1.0 + xc) * (-1.0 - yc))) - 2.0 * dilog(((-1.0 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (1.0 - yc))) * ln1pychalf - 2.0 * dilog(((-1.0 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (1.0 - yc))) * ln1pychalf + 2.0 * dilog((-1.0 - yc) / (-xc - yc)) * ln1pychalf - 2.0 * dilog((-0.5) * (((-1.0 - xc) * (-1.0 - yc)) / (-xc - yc))) * ln1pychalf + 2.0 * dilog((-1.0 - yc) / (xc - yc)) * ln1pychalf - 2.0 * dilog((-0.5) * (((-1.0 + xc) * (-1.0 - yc)) / (xc - yc))) * ln1pychalf
                + 2.0 * ln1myc * log((-xc - yc) / (1.0 - xc)) * ln1pychalf + 2.0 * ln1myc * log((xc - yc) / (1.0 + xc)) * ln1pychalf + log((1.0 - xc) / (-xc - yc)) * power_of<2>(ln1pychalf) - log((-0.5) * (((-1.0 + xc) * (1.0 - yc)) / (-xc - yc))) * power_of<2>(ln1pychalf) + log((-xc - yc) / (1.0 - xc)) * power_of<2>(ln1pychalf) - log((2.0 * (-xc - yc)) / ((1.0 - xc) * (1.0 - yc))) * power_of<2>(ln1pychalf) + log((1.0 + xc) / (xc - yc)) * power_of<2>(ln1pychalf) - log((-0.5) * (((-1.0 - xc) * (1.0 - yc)) / (xc - yc))) * power_of<2>(ln1pychalf) + log((xc - yc) / (1.0 + xc)) * power_of<2>(ln1pychalf)
                - log((2.0 * (xc - yc)) / ((1.0 + xc) * (1.0 - yc))) * power_of<2>(ln1pychalf) + dilog((1.0 + yc) / (1.0 - xc)) * (ln1myc + 2.0 * ln1pychalf) + dilog((1.0 + yc) / (1.0 + xc)) * (ln1myc + 2.0 * ln1pychalf) + li2r_xc * (-2.0 * lnhalf + ln1myc - ln1pyc) + dilog(-1.0 / (-1.0 + xc)) * (-2.0 * lnhalf + ln1myc - ln1pyc) - 2.0 * dilog(-2.0 / (-1.0 - xc)) * ln1pyc - 2.0 * dilog(-2.0 / (-1.0 + xc)) * ln1pyc - dilog((-1.0 - yc) / (-1.0 - xc)) * ln1pyc - dilog((-1.0 - yc) / (-1.0 + xc)) * ln1pyc
                - ln2 * ln1mxc * ln1pyc + (power_of<2>(ln1mxc) * ln1pyc) / 2.0 - ln2 * ln1pxc * ln1pyc + (power_of<2>(ln1pxc) * ln1pyc) / 2.0 + 2.0 * ln1mychalf * log((-xc - yc) / (-1.0 - xc)) * ln1pyc - ln1myc * log((-xc - yc) / (-1.0 - xc)) * ln1pyc - ln1myc * log((-xc - yc) / (1.0 - xc)) * ln1pyc + 2.0 * ln1mychalf * log((xc - yc) / (-1.0 + xc)) * ln1pyc - ln1myc * log((xc - yc) / (-1.0 + xc)) * ln1pyc - ln1myc * log((xc - yc) / (1.0 + xc)) * ln1pyc
                + dilog((-1.0 + yc) / (-1.0 - xc)) * (2.0 * ln1mychalf + ln1pyc) + dilog((-1.0 + yc) / (-1.0 + xc)) * (2.0 * ln1mychalf + ln1pyc) + dilog(1.0 / (1.0 - xc)) * (-2.0 * lnhalf - ln1myc + ln1pyc) + li2r_xc * (-2.0 * lnhalf - ln1myc + ln1pyc) + ln1mxc * log((-1.0 - yc) / (-1.0 - xc)) * log(1.0 - yc * xcinv) - ln1pxc * log((-1.0 - yc) / (-1.0 - xc)) * log(1.0 - yc * xcinv) - ln1mxc * log((1.0 - yc) / (1.0 - xc)) * log(1.0 - yc * xcinv) + ln1pxc * log((1.0 - yc) / (1.0 - xc)) * log(1.0 - yc * xcinv)
                - ln1mxc * log((-1.0 - yc) / (-1.0 + xc)) * log(1.0 + yc * xcinv) + ln1pxc * log((-1.0 - yc) / (-1.0 + xc)) * log(1.0 + yc * xcinv) + ln1mxc * log((1.0 - yc) / (1.0 + xc)) * log(1.0 + yc * xcinv) - ln1pxc * log((1.0 - yc) / (1.0 + xc)) * log(1.0 + yc * xcinv) - (2.0 * myi) * M_PI * H1((-1.0 + xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 - xc) * (-1.0 - yc)) / (2.0 * (1.0 - xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) - (2.0 * myi) * M_PI * H1((-1.0 - xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 + xc) * (-1.0 - yc)) / (2.0 * (1.0 + xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))
                + (2.0 * myi) * M_PI * H1(2.0 / (1.0 - xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((-xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) + (2.0 * myi) * M_PI * H1(2.0 / (1.0 + xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) - (2.0 * myi) * M_PI * H1((1.0 + xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 - xc) * (1.0 - yc)) / (-1.0 - xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc))) - (2.0 * myi) * M_PI * H1((1.0 - xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 + xc) * (1.0 - yc)) / (-1.0 + xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc))) + (2.0 * myi) * M_PI * H1(-2.0 / (-1.0 + xc), 2.0 / (1.0 - yc)) * power_of<2>(log((-xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))
                + (2.0 * myi) * M_PI * H1(-2.0 / (-1.0 - xc), 2.0 / (1.0 - yc)) * power_of<2>(log((xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))
                - (2.0 * myi) * M_PI * power_of<2>(ln1mxchalf) * my_sign(imxc / 2.0) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0) + (4.0 * myi) * M_PI * ln1mxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0) - (2.0 * myi) * M_PI * power_of<2>(ln1pxchalf) * my_sign((-0.5) * imxc) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0) + (4.0 * myi) * M_PI * ln1pxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0)
                + (2.0 * myi) * M_PI * power_of<2>(log((-xc - yc) / (1.0 - xc))) * my_sign(imag((1.0 + yc) / (1.0 - xc))) * T(1.0, (1.0 - yc) / 2.0, (-xc - yc) / (1.0 - xc)) + (2.0 * myi) * M_PI * power_of<2>(log((xc - yc) / (1.0 + xc))) * my_sign(imag((1.0 + yc) / (1.0 + xc))) * T(1.0, (1.0 - yc) / 2.0, (xc - yc) / (1.0 + xc)) - (2.0 * myi) * M_PI * ln1mxc * ln1pyc * my_sign(imag(xcinv)) * t11myc1mxc + (2.0 * myi) * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11myc1mxc - (4.0 * myi) * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11myc1mxc + (2.0 * myi) * M_PI * ln1mxc * ln1myc * my_sign(imycinv) * t11myc1mxc
                - (2.0 * myi) * M_PI * ln1pxc * ln1pyc * my_sign(-imag(xcinv)) * t11myc1pxc - (4.0 * myi) * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11myc1pxc + (2.0 * myi) * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11myc1pxc + (2.0 * myi) * M_PI * ln1pxc * ln1myc * my_sign(imycinv) * t11myc1pxc - (2.0 * myi) * M_PI * power_of<2>(ln1mxchalf) * my_sign(imxc / 2.0) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0) + (4.0 * myi) * M_PI * ln1mxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0)
                - (2.0 * myi) * M_PI * power_of<2>(ln1pxchalf) * my_sign((-0.5) * imxc) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0) + (4.0 * myi) * M_PI * ln1pxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0) + (2.0 * myi) * M_PI * power_of<2>(log((-xc - yc) / (-1.0 - xc))) * my_sign(imag((-1.0 + yc) / (-1.0 - xc))) * T(1.0, (1.0 + yc) / 2.0, (-xc - yc) / (-1.0 - xc)) + (2.0 * myi) * M_PI * power_of<2>(log((xc - yc) / (-1.0 + xc))) * my_sign(imag((-1.0 + yc) / (-1.0 + xc))) * T(1.0, (1.0 + yc) / 2.0, (xc - yc) / (-1.0 + xc)) - (2.0 * myi) * M_PI * ln1mxc * ln1myc * my_sign(imag(xcinv)) * t11pyc1mxc
                + (2.0 * myi) * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11pyc1mxc - (4.0 * myi) * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11pyc1mxc + (2.0 * myi) * M_PI * ln1mxc * ln1pyc * my_sign(-imycinv) * t11pyc1mxc + dilog((1.0 - xc) / 2.0) * (2.0 * ln1mxc - 2.0 * lnr_xc2 - 2.0 * lnr_xc2 + ln1myc + 2.0 * log((-xc - yc) / (1.0 - xc)) + 2.0 * log((xc - yc) / (-1.0 + xc)) + ln1pyc - (4.0 * myi) * M_PI * my_sign(imxc) * t11myc1mxc - (4.0 * myi) * M_PI * my_sign(imxc) * t11pyc1mxc)
                - (2.0 * myi) * M_PI * ln1pxc * ln1myc * my_sign(-imag(xcinv)) * t11pyc1pxc - (4.0 * myi) * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11pyc1pxc + (2.0 * myi) * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11pyc1pxc + (2.0 * myi) * M_PI * ln1pxc * ln1pyc * my_sign(-imycinv) * t11pyc1pxc
                + dilog((1.0 + xc) / 2.0) * (-2.0 * lnr_xc1 - 2.0 * lnr_xc1 + 2.0 * ln1pxc + ln1myc + 2.0 * log((-xc - yc) / (-1.0 - xc)) + 2.0 * log((xc - yc) / (1.0 + xc)) + ln1pyc - (4.0 * myi) * M_PI * my_sign(-imxc) * t11myc1pxc - (4.0 * myi) * M_PI * my_sign(-imxc) * t11pyc1pxc) + li2half * (2.0 * lnr_xc1 + 2.0 * lnr_xc2 + 2.0 * lnr_xc2 + 2.0 * lnr_xc1 - 2.0 * ln1myc - 2.0 * log((-xc - yc) / (-1.0 - xc)) - 2.0 * log((-xc - yc) / (1.0 - xc)) - 2.0 * log((xc - yc) / (-1.0 + xc))
                  - 2.0 * log((xc - yc) / (1.0 + xc)) - 2.0 * ln1pyc + (4.0 * myi) * M_PI * my_sign(imxc) * t11myc1mxc + (4.0 * myi) * M_PI * my_sign(-imxc) * t11myc1pxc + (4.0 * myi) * M_PI * my_sign(imxc) * t11pyc1mxc + (4.0 * myi) * M_PI * my_sign(-imxc) * t11pyc1pxc) - (2.0 * myi) * M_PI * log(1.0 - xcinv) * ln1mxc * my_sign(imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 - xcinv) + (2.0 * myi) * M_PI * log(1.0 - xcinv) * ln1pxc * my_sign(imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 - xcinv) + (2.0 * myi) * M_PI * log(1.0 + xcinv) * ln1mxc * my_sign(-imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 + xcinv)
                - (2.0 * myi) * M_PI * log(1.0 + xcinv) * ln1pxc * my_sign(-imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 + xcinv) - (2.0 * myi) * M_PI * log(1.0 - xcinv) * ln1mxc * my_sign(imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 - xcinv) + (2.0 * myi) * M_PI * log(1.0 - xcinv) * ln1pxc * my_sign(imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 - xcinv) + (2.0 * myi) * M_PI * log(1.0 + xcinv) * ln1mxc * my_sign(-imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 + xcinv) - (2.0 * myi) * M_PI * log(1.0 + xcinv) * ln1pxc * my_sign(-imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 + xcinv) + (2.0 * pisqu * ln2 - 4.0 * power_of<3>(ln2) - 21.0 * zeta3) / 6.0 - (9.0 * zeta3) / 4.0) / denom6);

            const complex<double> f27cPart4 = (-8.0 * factorp0 * (-4.0 * li3half + 2.0 * trilog(1.0 - xcinv) + 2.0 * trilog(1.0 + xcinv) + trilog(-1.0 / (-1.0 - xc)) + trilog(1.0 / (1.0 - xc)) + trilog(-1.0 / (-1.0 + xc)) + 2.0 * trilog(-xcinv) + 2.0 * trilog(xcinv) - 2.0 * trilog((-0.5) * ((1.0 - xc) * xcinv)) + trilog(1.0 / (1.0 + xc)) - 2.0 * trilog((1.0 - xc) / (1.0 + xc)) - 2.0 * trilog((1.0 + xc) / (1.0 - xc)) - 2.0 * trilog((1.0 + xc) / (2.0 * xc)) + trilog(((-1.0 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (1.0 - yc))) + trilog(((-1.0 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (1.0 - yc))) + 2.0 * trilog((1.0 - yc) / 2.0)
                + trilog(((1.0 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-1.0 - yc))) + trilog(((1.0 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-1.0 - yc))) - trilog((-1.0 - xc) / (-xc - yc)) - trilog((1.0 - xc) / (-xc - yc)) - trilog((-1.0 - yc) / (-xc - yc)) + trilog((-0.5) * (((-1.0 - xc) * (-1.0 - yc)) / (-xc - yc))) - trilog((1.0 - yc) / (-xc - yc)) + trilog(((1.0 - xc) * (1.0 - yc)) / (2.0 * (-xc - yc))) - trilog((-1.0 + xc) / (xc - yc)) - trilog((1.0 + xc) / (xc - yc)) - trilog((-1.0 - yc) / (xc - yc)) + trilog((-0.5) * (((-1.0 + xc) * (-1.0 - yc)) / (xc - yc))) - trilog((1.0 - yc) / (xc - yc))
                + trilog(((1.0 + xc) * (1.0 - yc)) / (2.0 * (xc - yc))) - trilog((-1.0 + yc) / (-1.0 - xc)) - trilog((-1.0 + yc) / (-1.0 + xc)) + 2.0 * trilog((1.0 + yc) / 2.0) - trilog((1.0 + yc) / (1.0 - xc)) - trilog((1.0 + yc) / (1.0 + xc)) - li2r_xc * lnhalf - dilog(1.0 / (1.0 - xc)) * lnhalf - dilog(-1.0 / (-1.0 + xc)) * lnhalf - 2.0 * dilog(-xcinv) * lnhalf - 2.0 * dilog(xcinv) * lnhalf + 2.0 * dilog((-0.5) * ((1.0 - xc) * xcinv)) * lnhalf - li2r_xc * lnhalf + 2.0 * dilog((1.0 - xc) / (1.0 + xc)) * lnhalf
                + 2.0 * dilog((1.0 + xc) / (1.0 - xc)) * lnhalf + 2.0 * dilog((1.0 + xc) / (2.0 * xc)) * lnhalf - power_of<2>(lnhalf) * log(1.0 - xcinv) - power_of<2>(lnhalf) * log(1.0 + xcinv) - power_of<3>(log((2.0 * (-1.0 - xc)) / (1.0 - xc))) / 6.0 + power_of<3>(log(-2.0 * xcinv)) / 3.0 + power_of<3>(log(2.0 * xcinv)) / 3.0 + power_of<2>(lnhalf) * log((-0.5) * ((-1.0 - xc) * xcinv)) + power_of<2>(lnhalf) * log((-1.0 + xc) / (2.0 * xc)) - (power_of<2>(lnhalf) * lnr_xc1) / 2.0 + power_of<2>(lnhalf) * log((-2.0 * xc) / (1.0 - xc)) - (power_of<2>(lnhalf) * lnr_xc2) / 2.0 - (power_of<2>(lnhalf) * lnr_xc2) / 2.0 - power_of<3>(log((-2.0 * (1.0 - xc)) / (1.0 + xc))) / 6.0
                - power_of<3>(log((2.0 * (-1.0 + xc)) / (1.0 + xc))) / 6.0 - (power_of<2>(lnhalf) * lnr_xc1) / 2.0 + power_of<2>(lnhalf) * log((2.0 * xc) / (1.0 + xc)) - power_of<3>(log((-2.0 * (1.0 + xc)) / (1.0 - xc))) / 6.0 + power_of<3>(log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc)))) / 6.0 + power_of<3>(log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc)))) / 6.0 + power_of<3>(log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc)))) / 6.0 + power_of<3>(log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc)))) / 6.0 - dilog(((1.0 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-1.0 - yc))) * ln1mychalf - dilog(((1.0 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-1.0 - yc))) * ln1mychalf
                + dilog((1.0 - yc) / (-xc - yc)) * ln1mychalf - dilog(((1.0 - xc) * (1.0 - yc)) / (2.0 * (-xc - yc))) * ln1mychalf + dilog((1.0 - yc) / (xc - yc)) * ln1mychalf - dilog(((1.0 + xc) * (1.0 - yc)) / (2.0 * (xc - yc))) * ln1mychalf - dilog(2.0 / (1.0 - xc)) * ln1myc - dilog(2.0 / (1.0 + xc)) * ln1myc - pisqu * ((-1.0 / 6.0) * log(2.0 * xcinv) + log((-2.0 * (1.0 - xc)) / (1.0 + xc)) / 6.0 - log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (-xc - yc)) / 6.0) - power_of<3>(log(-2.0 / (-xc - yc))) / 6.0
                - pisqu * (log((2.0 * (-1.0 - xc)) / (1.0 - xc)) / 6.0 - log(-2.0 * xcinv) / 6.0 - log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc))) / 6.0 + log(2.0 / (-xc - yc)) / 6.0) - power_of<3>(log(2.0 / (-xc - yc))) / 6.0 + (power_of<2>(ln1mychalf) * log((-1.0 - xc) / (-xc - yc))) / 2.0 - (power_of<2>(ln1mychalf) * log(((1.0 + xc) * (-1.0 - yc)) / (2.0 * (-xc - yc)))) / 2.0 + (power_of<2>(ln1mychalf) * log((-xc - yc) / (-1.0 - xc))) / 2.0 - (power_of<2>(ln1myc) * log((-xc - yc) / (-1.0 - xc))) / 2.0 - (power_of<2>(ln1mychalf) * log((-2.0 * (-xc - yc)) / ((-1.0 - xc) * (-1.0 - yc)))) / 2.0
                - pisqu * ((-1.0 / 6.0) * log(-2.0 * xcinv) + log((-2.0 * (1.0 + xc)) / (1.0 - xc)) / 6.0 - log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (xc - yc)) / 6.0) - power_of<3>(log(-2.0 / (xc - yc))) / 6.0 - pisqu * ((-1.0 / 6.0) * log(2.0 * xcinv) + log((2.0 * (-1.0 + xc)) / (1.0 + xc)) / 6.0 - log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc))) / 6.0 + log(2.0 / (xc - yc)) / 6.0) - power_of<3>(log(2.0 / (xc - yc))) / 6.0 + (power_of<2>(ln1mychalf) * log((-1.0 + xc) / (xc - yc))) / 2.0 - (power_of<2>(ln1mychalf) * log(((1.0 - xc) * (-1.0 - yc)) / (2.0 * (xc - yc)))) / 2.0 + (power_of<2>(ln1mychalf) * log((xc - yc) / (-1.0 + xc))) / 2.0
                - (power_of<2>(ln1myc) * log((xc - yc) / (-1.0 + xc))) / 2.0 - (power_of<2>(ln1mychalf) * log((-2.0 * (xc - yc)) / ((-1.0 + xc) * (-1.0 - yc)))) / 2.0 - dilog(((-1.0 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (1.0 - yc))) * ln1pychalf - dilog(((-1.0 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (1.0 - yc))) * ln1pychalf + dilog((-1.0 - yc) / (-xc - yc)) * ln1pychalf - dilog((-0.5) * (((-1.0 - xc) * (-1.0 - yc)) / (-xc - yc))) * ln1pychalf + dilog((-1.0 - yc) / (xc - yc)) * ln1pychalf - dilog((-0.5) * (((-1.0 + xc) * (-1.0 - yc)) / (xc - yc))) * ln1pychalf
                + ln1myc * log((-xc - yc) / (1.0 - xc)) * ln1pychalf + ln1myc * log((xc - yc) / (1.0 + xc)) * ln1pychalf + (log((1.0 - xc) / (-xc - yc)) * power_of<2>(ln1pychalf)) / 2.0 - (log((-0.5) * (((-1.0 + xc) * (1.0 - yc)) / (-xc - yc))) * power_of<2>(ln1pychalf)) / 2.0 + (log((-xc - yc) / (1.0 - xc)) * power_of<2>(ln1pychalf)) / 2.0 - (log((2.0 * (-xc - yc)) / ((1.0 - xc) * (1.0 - yc))) * power_of<2>(ln1pychalf)) / 2.0 + (log((1.0 + xc) / (xc - yc)) * power_of<2>(ln1pychalf)) / 2.0 - (log((-0.5) * (((-1.0 - xc) * (1.0 - yc)) / (xc - yc))) * power_of<2>(ln1pychalf)) / 2.0
                + (log((xc - yc) / (1.0 + xc)) * power_of<2>(ln1pychalf)) / 2.0 - (log((2.0 * (xc - yc)) / ((1.0 + xc) * (1.0 - yc))) * power_of<2>(ln1pychalf)) / 2.0 + dilog((1.0 + yc) / (1.0 - xc)) * (ln1myc + ln1pychalf - ln1pyc) + dilog((1.0 + yc) / (1.0 + xc)) * (ln1myc + ln1pychalf - ln1pyc) - dilog(-2.0 / (-1.0 - xc)) * ln1pyc - dilog(-2.0 / (-1.0 + xc)) * ln1pyc + ln1mychalf * log((-xc - yc) / (-1.0 - xc)) * ln1pyc + ln1mychalf * log((xc - yc) / (-1.0 + xc)) * ln1pyc
                - (log((-xc - yc) / (1.0 - xc)) * power_of<2>(ln1pyc)) / 2.0 - (log((xc - yc) / (1.0 + xc)) * power_of<2>(ln1pyc)) / 2.0 + dilog((-1.0 + yc) / (-1.0 - xc)) * (ln1mychalf - ln1myc + ln1pyc) + dilog((-1.0 + yc) / (-1.0 + xc)) * (ln1mychalf - ln1myc + ln1pyc) - ln2 * ln1mxc * log(1.0 - yc * xcinv) + (power_of<2>(ln1mxc) * log(1.0 - yc * xcinv)) / 2.0 - ln2 * ln1pxc * log(1.0 - yc * xcinv) + (power_of<2>(ln1pxc) * log(1.0 - yc * xcinv)) / 2.0 - ln2 * ln1mxc * log(1.0 + yc * xcinv) + (power_of<2>(ln1mxc) * log(1.0 + yc * xcinv)) / 2.0
                - ln2 * ln1pxc * log(1.0 + yc * xcinv) + (power_of<2>(ln1pxc) * log(1.0 + yc * xcinv)) / 2.0 - myi * M_PI * H1((-1.0 + xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 - xc) * (-1.0 - yc)) / (2.0 * (1.0 - xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) - myi * M_PI * H1((-1.0 - xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 + xc) * (-1.0 - yc)) / (2.0 * (1.0 + xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) + myi * M_PI * H1(2.0 / (1.0 - xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((-xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) + myi * M_PI * H1(2.0 / (1.0 + xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))
                - myi * M_PI * H1((1.0 + xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 - xc) * (1.0 - yc)) / (-1.0 - xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc))) - myi * M_PI * H1((1.0 - xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 + xc) * (1.0 - yc)) / (-1.0 + xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc))) + myi * M_PI * H1(-2.0 / (-1.0 + xc), 2.0 / (1.0 - yc)) * power_of<2>(log((-xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc))) + myi * M_PI * H1(-2.0 / (-1.0 - xc), 2.0 / (1.0 - yc)) * power_of<2>(log((xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))
                - myi * M_PI * power_of<2>(ln1mxchalf) * my_sign(imxc / 2.0) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0)
                + (2.0 * myi) * M_PI * ln1mxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0) - myi * M_PI * power_of<2>(ln1pxchalf) * my_sign((-0.5) * imxc) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0) + (2.0 * myi) * M_PI * ln1pxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0) + myi * M_PI * power_of<2>(log((-xc - yc) / (1.0 - xc))) * my_sign(imag((1.0 + yc) / (1.0 - xc))) * T(1.0, (1.0 - yc) / 2.0, (-xc - yc) / (1.0 - xc)) + myi * M_PI * power_of<2>(log((xc - yc) / (1.0 + xc))) * my_sign(imag((1.0 + yc) / (1.0 + xc))) * T(1.0, (1.0 - yc) / 2.0, (xc - yc) / (1.0 + xc))
                + myi * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11myc1mxc - (2.0 * myi) * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11myc1mxc - (2.0 * myi) * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11myc1pxc + myi * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11myc1pxc - myi * M_PI * power_of<2>(ln1mxchalf) * my_sign(imxc / 2.0) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0) + (2.0 * myi) * M_PI * ln1mxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0) - myi * M_PI * power_of<2>(ln1pxchalf) * my_sign((-0.5) * imxc) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0)
                + (2.0 * myi) * M_PI * ln1pxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0) + myi * M_PI * power_of<2>(log((-xc - yc) / (-1.0 - xc))) * my_sign(imag((-1.0 + yc) / (-1.0 - xc))) * T(1.0, (1.0 + yc) / 2.0, (-xc - yc) / (-1.0 - xc)) + myi * M_PI * power_of<2>(log((xc - yc) / (-1.0 + xc))) * my_sign(imag((-1.0 + yc) / (-1.0 + xc))) * T(1.0, (1.0 + yc) / 2.0, (xc - yc) / (-1.0 + xc)) + myi * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11pyc1mxc - (2.0 * myi) * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11pyc1mxc
                + dilog((1.0 - xc) / 2.0) * (-lnr_xc2 - lnr_xc2 + log((-xc - yc) / (1.0 - xc)) + log((xc - yc) / (-1.0 + xc)) + log(1.0 - yc * xcinv) + log(1.0 + yc * xcinv) - (2.0 * myi) * M_PI * my_sign(imxc) * t11myc1mxc - (2.0 * myi) * M_PI * my_sign(imxc) * t11pyc1mxc) - (2.0 * myi) * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11pyc1pxc + myi * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11pyc1pxc
                + dilog((1.0 + xc) / 2.0) * (-lnr_xc1 - lnr_xc1 + log((-xc - yc) / (-1.0 - xc)) + log((xc - yc) / (1.0 + xc)) + log(1.0 - yc * xcinv) + log(1.0 + yc * xcinv) - (2.0 * myi) * M_PI * my_sign(-imxc) * t11myc1pxc - (2.0 * myi) * M_PI * my_sign(-imxc) * t11pyc1pxc) + li2half * (lnr_xc1 + lnr_xc2 + lnr_xc2 + lnr_xc1 - log((-xc - yc) / (-1.0 - xc)) - log((-xc - yc) / (1.0 - xc)) - log((xc - yc) / (-1.0 + xc)) - log((xc - yc) / (1.0 + xc)) - 2.0 * log(1.0 - yc * xcinv) - 2.0 * log(1.0 + yc * xcinv)
                  + (2.0 * myi) * M_PI * my_sign(imxc) * t11myc1mxc + (2.0 * myi) * M_PI * my_sign(-imxc) * t11myc1pxc + (2.0 * myi) * M_PI * my_sign(imxc) * t11pyc1mxc + (2.0 * myi) * M_PI * my_sign(-imxc) * t11pyc1pxc))) / denom7;

            const complex<double> f27cPart5 = factorp1 * ((-(pisqu * ln4) / 12.0 + 2.0 * li3half - 4.0 * trilog(1.0 - w3inv) + 2.0 * trilog(1.0 + w3inv) + trilog(-1.0 / (-1.0 - w3)) - 2.0 * trilog(1.0 / (1.0 - w3)) - 2.0 * trilog(-1.0 / (-1.0 + w3)) - 2.0 * trilog(w3inv) + 2.0 * trilog(-w3) - 2.0 * trilog(w3) + trilog(1.0 / (1.0 + w3)) + 2.0 * trilog((1.0 + w3) / (1.0 - w3)) + 2.0 * trilog((1.0 + w3) / (2.0 * w3)) - trilog(((-1.0 - w3) * xc) / (w3 * (-1.0 - xc))) + trilog(-(((-1.0 + w3) * xc) / (w3 * (-1.0 - xc)))) + trilog(((1.0 - w3) * xc) / (w3 * (1.0 - xc))) - trilog(-(((1.0 + w3) * xc) / (w3 * (1.0 - xc))))
                - trilog(((-1.0 - w3) * xc) / (-w3 - xc)) - trilog(-(((1.0 + w3) * xc) / (-w3 - xc))) + trilog(-(((1.0 - w3) * xc) / (w3 - xc))) + trilog(((-1.0 + w3) * xc) / (w3 - xc)) - trilog(-(((-1.0 - w3) * xc) / (w3 * (-1.0 + xc)))) + trilog(((-1.0 + w3) * xc) / (w3 * (-1.0 + xc))) + trilog(-(((1.0 - w3) * xc) / (w3 * (1.0 + xc)))) - trilog(((1.0 + w3) * xc) / (w3 * (1.0 + xc))) - trilog(-(((-1.0 - w3) * xc) / (-w3 + xc))) - trilog(((1.0 + w3) * xc) / (-w3 + xc)) + trilog(((1.0 - w3) * xc) / (w3 + xc)) + trilog(-(((-1.0 + w3) * xc) / (w3 + xc))) - trilog(((-1.0 - w3) * (-1.0 - yc)) / ((1.0 - w3) * (1.0 - yc)))
                - trilog((1.0 - yc) / 2.0) + trilog(1.0 - yc) - trilog(((1.0 + w3) * (1.0 - yc)) / ((-1.0 + w3) * (-1.0 - yc))) - trilog((-1.0 - w3) / (-w3 - yc)) + 2.0 * trilog((1.0 - w3) / (-w3 - yc)) + 2.0 * trilog((-1.0 - yc) / (-w3 - yc)) - trilog((-0.5) * (((-1.0 - w3) * (-1.0 - yc)) / (-w3 - yc))) - trilog((1.0 - yc) / (-w3 - yc)) + trilog(-((w3 * (1.0 - yc)) / (-w3 - yc))) + 2.0 * trilog((-1.0 + w3) / (w3 - yc)) - trilog((1.0 + w3) / (w3 - yc)) - trilog((-1.0 - yc) / (w3 - yc)) + 2.0 * trilog((1.0 - yc) / (w3 - yc)) - trilog((w3 * (1.0 - yc)) / (w3 - yc)) - trilog(((1.0 + w3) * (1.0 - yc)) / (2.0 * (w3 - yc)))
                - trilog(((1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (-1.0 - yc))) + trilog(((1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (-1.0 - yc))) + trilog(((-1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (1.0 - yc))) - trilog(((-1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (1.0 - yc))) + trilog(((-1.0 - w3) * (-xc - yc)) / ((-1.0 - xc) * (-w3 - yc))) - trilog(((1.0 - w3) * (-xc - yc)) / ((1.0 - xc) * (-w3 - yc))) - trilog(((-1.0 + w3) * (-xc - yc)) / ((-1.0 - xc) * (w3 - yc))) + trilog(((1.0 + w3) * (-xc - yc)) / ((1.0 - xc) * (w3 - yc))) - trilog(((1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (-1.0 - yc)))
                + trilog(((1.0 + w3) * (xc - yc)) / ((w3 - xc) * (-1.0 - yc))) + trilog(((-1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (1.0 - yc))) - trilog(((-1.0 + w3) * (xc - yc)) / ((w3 - xc) * (1.0 - yc))) + trilog(((-1.0 - w3) * (xc - yc)) / ((-1.0 + xc) * (-w3 - yc))) - trilog(((1.0 - w3) * (xc - yc)) / ((1.0 + xc) * (-w3 - yc))) - trilog(((-1.0 + w3) * (xc - yc)) / ((-1.0 + xc) * (w3 - yc))) + trilog(((1.0 + w3) * (xc - yc)) / ((1.0 + xc) * (w3 - yc))) - trilog((-1.0 + yc) / (-1.0 - w3)) + 2.0 * trilog((-1.0 + yc) / (-1.0 + w3)) + trilog(-yc) + trilog(yc) + trilog(yc / (-1.0 + yc)) - trilog((2.0 * yc) / (-1.0 + yc))
                + trilog(yc / (1.0 + yc)) - trilog((2.0 * yc) / (1.0 + yc)) - trilog((1.0 + yc) / 2.0) + trilog(1.0 + yc) + 2.0 * trilog((1.0 + yc) / (1.0 - w3)) - trilog((1.0 + yc) / (1.0 + w3)) + trilog((w3 * (-1.0 - yc)) / (-w3 + yc)) - trilog(-((w3 * (-1.0 - yc)) / (w3 + yc))) + dilog(1.0 / (1.0 - w3)) * lnhalf + dilog(-1.0 / (-1.0 + w3)) * lnhalf + 2.0 * dilog(w3inv) * lnhalf - 2.0 * dilog((1.0 + w3) / (1.0 - w3)) * lnhalf - 2.0 * dilog((1.0 + w3) / (2.0 * w3)) * lnhalf + power_of<3>(ln2) / 3.0 + power_of<2>(lnhalf) * log(1.0 - w3inv) + power_of<3>(log((2.0 * (-1.0 - w3)) / (1.0 - w3))) / 6.0 - power_of<3>(log(-2.0 / w3)) / 3.0
                - power_of<2>(lnhalf) * log((-1.0 + w3) / (2.0 * w3)) - power_of<2>(lnhalf) * log((-2.0 * w3) / (1.0 - w3)) + (power_of<2>(lnhalf) * log(-(w3 / (1.0 - w3)))) / 2.0 + (power_of<2>(lnhalf) * log(w3 / (-1.0 + w3))) / 2.0 + power_of<3>(log((-2.0 * (1.0 + w3)) / (1.0 - w3))) / 6.0 - power_of<3>(log(-((-1.0 - xc) / w3))) / 6.0 + power_of<3>(log((-1.0 - xc) / w3)) / 6.0 + power_of<3>(log(-((1.0 - xc) / w3))) / 6.0 - power_of<3>(log((1.0 - xc) / w3)) / 6.0 - power_of<3>(log(((-1.0 - w3) * (1.0 - xc)) / (-w3 - xc))) / 6.0 + power_of<3>(log(((-1.0 + w3) * (1.0 - xc)) / (w3 - xc))) / 6.0 - power_of<3>(log(-((-1.0 + xc) / w3))) / 6.0 + power_of<3>(log((-1.0 + xc) / w3)) / 6.0 - power_of<3>(log(((1.0 + w3) * (-1.0 + xc)) / (-w3 - xc))) / 6.0
                + power_of<3>(log(((1.0 - w3) * (-1.0 + xc)) / (w3 - xc))) / 6.0 + dilog(((-1.0 - w3) * xc) / (w3 * (-1.0 - xc))) * lnr_xc1 - dilog(-(((-1.0 + w3) * xc) / (w3 * (-1.0 - xc)))) * lnr_xc1 + dilog(-(((-1.0 - w3) * xc) / (-w3 + xc))) * lnr_xc1 - dilog(-(((-1.0 + w3) * xc) / (w3 + xc))) * lnr_xc1 - (log((-w3 - xc) / (w3 * (-1.0 - xc))) * power_of<2>(lnr_xc1)) / 2.0 + (log(-((w3 - xc) / (w3 * (-1.0 - xc)))) * power_of<2>(lnr_xc1)) / 2.0 - dilog(((1.0 - w3) * xc) / (w3 * (1.0 - xc))) * lnr_xc2
                + dilog(-(((1.0 + w3) * xc) / (w3 * (1.0 - xc)))) * lnr_xc2 + dilog(-(((1.0 + w3) * xc) / (-w3 - xc))) * lnr_xc2 - dilog(-(((1.0 - w3) * xc) / (w3 - xc))) * lnr_xc2 + (log((w3 * (-1.0 + xc)) / (-w3 - xc)) * power_of<2>(lnr_xc2)) / 2.0 - (log(-((w3 * (-1.0 + xc)) / (w3 - xc))) * power_of<2>(lnr_xc2)) / 2.0 + dilog(((-1.0 - w3) * xc) / (-w3 - xc)) * lnr_xc2 - dilog(((-1.0 + w3) * xc) / (w3 - xc)) * lnr_xc2 + dilog(-(((-1.0 - w3) * xc) / (w3 * (-1.0 + xc)))) * lnr_xc2
                - dilog(((-1.0 + w3) * xc) / (w3 * (-1.0 + xc))) * lnr_xc2 - (log(-(w3 / (-w3 - xc))) * power_of<2>(lnr_xc2)) / 2.0 + (log(-((w3 * (1.0 - xc)) / (-w3 - xc))) * power_of<2>(lnr_xc2)) / 2.0 + (log(w3 / (w3 - xc)) * power_of<2>(lnr_xc2)) / 2.0 - (log((w3 * (1.0 - xc)) / (w3 - xc)) * power_of<2>(lnr_xc2)) / 2.0 + dilog(xc / w3) * (-lnr_xc1 + lnr_xc2 + lnr_xc2 - lnr_xc1) - dilog(-(((1.0 - w3) * xc) / (w3 * (1.0 + xc)))) * lnr_xc1 + dilog(((1.0 + w3) * xc) / (w3 * (1.0 + xc))) * lnr_xc1
                + dilog(((1.0 + w3) * xc) / (-w3 + xc)) * lnr_xc1 - dilog(((1.0 - w3) * xc) / (w3 + xc)) * lnr_xc1 + (log(-(w3 / (-w3 - xc))) * power_of<2>(lnr_xc1)) / 2.0 - (log(w3 / (w3 - xc)) * power_of<2>(lnr_xc1)) / 2.0 - (log(-((-w3 - xc) / (w3 * (1.0 + xc)))) * power_of<2>(lnr_xc1)) / 2.0 + (log((w3 - xc) / (w3 * (1.0 + xc))) * power_of<2>(lnr_xc1)) / 2.0 + dilog(-(xc / w3)) * (lnr_xc1 - lnr_xc2 - lnr_xc2 + lnr_xc1)
                + dilog(-(xc / (-w3 - xc))) * (ln1mxc + lnr_xc1 - lnr_xc2 - ln1pxc) + dilog(xc / (w3 + xc)) * (ln1mxc - lnr_xc2 + lnr_xc1 - ln1pxc) + dilog(-(xc / (w3 - xc))) * (-ln1mxc - lnr_xc1 + lnr_xc2 + ln1pxc) + dilog(xc / (-w3 + xc)) * (-ln1mxc + lnr_xc2 - lnr_xc1 + ln1pxc) + power_of<3>(log(-((1.0 + xc) / w3))) / 6.0 - power_of<3>(log((1.0 + xc) / w3)) / 6.0 - (power_of<2>(lnr_xc1) * log(-(w3 / (-w3 + xc)))) / 2.0
                + (power_of<2>(lnr_xc2) * log(-(w3 / (-w3 + xc)))) / 2.0 + (power_of<2>(lnr_xc1) * log((w3 * (-1.0 - xc)) / (-w3 + xc))) / 2.0 - power_of<3>(log(((1.0 + w3) * (-1.0 - xc)) / (-w3 + xc))) / 6.0 - power_of<3>(log(((-1.0 - w3) * (1.0 + xc)) / (-w3 + xc))) / 6.0 + (power_of<2>(lnr_xc1) * log(-((w3 * (1.0 + xc)) / (-w3 + xc)))) / 2.0 - (power_of<2>(lnr_xc2) * log(-((-w3 + xc) / (w3 * (1.0 - xc))))) / 2.0 - (power_of<2>(lnr_xc2) * log((-w3 + xc) / (w3 * (-1.0 + xc)))) / 2.0 + (power_of<2>(lnr_xc1) * log(w3 / (w3 + xc))) / 2.0 - (power_of<2>(lnr_xc2) * log(w3 / (w3 + xc))) / 2.0
                + power_of<3>(log(((1.0 - w3) * (-1.0 - xc)) / (w3 + xc))) / 6.0 - (power_of<2>(lnr_xc1) * log(-((w3 * (-1.0 - xc)) / (w3 + xc)))) / 2.0 + power_of<3>(log(((-1.0 + w3) * (1.0 + xc)) / (w3 + xc))) / 6.0 - (power_of<2>(lnr_xc1) * log((w3 * (1.0 + xc)) / (w3 + xc))) / 2.0 + (power_of<2>(lnr_xc2) * log((w3 + xc) / (w3 * (1.0 - xc)))) / 2.0 + (power_of<2>(lnr_xc2) * log(-((w3 + xc) / (w3 * (-1.0 + xc))))) / 2.0 - (power_of<2>(lnr_xc1) * log(1.0 - xc / w3)) / 2.0 + (power_of<2>(lnr_xc2) * log(1.0 - xc / w3)) / 2.0 + (power_of<2>(lnr_xc2) * log(1.0 - xc / w3)) / 2.0 - (power_of<2>(lnr_xc1) * log(1.0 - xc / w3)) / 2.0
                + (power_of<2>(lnr_xc1) * log(1.0 + xc / w3)) / 2.0 - (power_of<2>(lnr_xc2) * log(1.0 + xc / w3)) / 2.0 - (power_of<2>(lnr_xc2) * log(1.0 + xc / w3)) / 2.0 + (power_of<2>(lnr_xc1) * log(1.0 + xc / w3)) / 2.0 - power_of<3>(log((-2.0 * (1.0 + w3)) / ((-1.0 + w3) * (-1.0 - yc)))) / 6.0 - power_of<3>(log(((1.0 - w3) * (-1.0 - xc)) / ((-w3 - xc) * (-1.0 - yc)))) / 6.0 + power_of<3>(log(((1.0 + w3) * (-1.0 - xc)) / ((w3 - xc) * (-1.0 - yc)))) / 6.0 - power_of<3>(log(((1.0 - w3) * (-1.0 + xc)) / ((-w3 + xc) * (-1.0 - yc)))) / 6.0 + power_of<3>(log(((1.0 + w3) * (-1.0 + xc)) / ((w3 + xc) * (-1.0 - yc)))) / 6.0 - power_of<3>(log((2.0 * (-1.0 - w3)) / ((1.0 - w3) * (1.0 - yc)))) / 6.0
                + power_of<3>(log(((-1.0 - w3) * (1.0 - xc)) / ((-w3 - xc) * (1.0 - yc)))) / 6.0 - power_of<3>(log(((-1.0 + w3) * (1.0 - xc)) / ((w3 - xc) * (1.0 - yc)))) / 6.0 + power_of<3>(log(((-1.0 - w3) * (1.0 + xc)) / ((-w3 + xc) * (1.0 - yc)))) / 6.0 - power_of<3>(log(((-1.0 + w3) * (1.0 + xc)) / ((w3 + xc) * (1.0 - yc)))) / 6.0 + dilog(((1.0 + w3) * (1.0 - yc)) / ((-1.0 + w3) * (-1.0 - yc))) * ln1mychalf + dilog(((1.0 + w3) * (1.0 - yc)) / (2.0 * (w3 - yc))) * ln1mychalf + dilog((1.0 - yc) / (w3 - yc)) * (-ln1mychalf - ln1myc) + dilog(2.0 / (1.0 - w3)) * ln1myc - dilog((1.0 - xc) / (-w3 - xc)) * ln1myc
                + dilog((1.0 - xc) / (w3 - xc)) * ln1myc - dilog((1.0 + xc) / (-w3 + xc)) * ln1myc + dilog((1.0 + xc) / (w3 + xc)) * ln1myc - dilog(1.0 - yc) * ln1myc + dilog((1.0 - yc) / (-w3 - yc)) * ln1myc - dilog(-((w3 * (1.0 - yc)) / (-w3 - yc))) * ln1myc + dilog((w3 * (1.0 - yc)) / (w3 - yc)) * ln1myc - dilog(-yc) * ln1myc - (pisqu / 12.0 - ln2squ / 2.0) * ln1myc - (ln2 * power_of<2>(ln1myc)) / 2.0 - power_of<3>(ln1myc) / 6.0 - (pisqu * log(-1.0 / (-w3 - yc))) / 6.0 - power_of<3>(log(-1.0 / (-w3 - yc))) / 6.0
                + (pisqu * log(1.0 / (-w3 - yc))) / 6.0 + power_of<3>(log(1.0 / (-w3 - yc))) / 6.0 + pisqu * (log((2.0 * (-1.0 - w3)) / (1.0 - w3)) / 6.0 - log(-2.0 / w3) / 6.0 - log((2.0 * (-1.0 - w3)) / ((1.0 - w3) * (1.0 - yc))) / 6.0 + log(2.0 / (-w3 - yc)) / 6.0) + power_of<3>(log(2.0 / (-w3 - yc))) / 6.0 + (power_of<2>(ln1myc) * log((-1.0 - w3) / (-w3 - yc))) / 2.0 + power_of<3>(log((-1.0 - xc) / (-w3 - yc))) / 6.0 - power_of<3>(log((1.0 - xc) / (-w3 - yc))) / 6.0 + power_of<3>(log((-1.0 + xc) / (-w3 - yc))) / 6.0 - power_of<3>(log((1.0 + xc) / (-w3 - yc))) / 6.0
                + pisqu * ((-1.0 / 6.0) * log(-2.0 / w3) + log((-2.0 * (1.0 + w3)) / (1.0 - w3)) / 6.0 - log((-2.0 * (1.0 + w3)) / ((-1.0 + w3) * (-1.0 - yc))) / 6.0 + log(-2.0 / (w3 - yc)) / 6.0) + power_of<3>(log(-2.0 / (w3 - yc))) / 6.0 + (pisqu * log(-1.0 / (w3 - yc))) / 6.0 + power_of<3>(log(-1.0 / (w3 - yc))) / 6.0 - (pisqu * log(1.0 / (w3 - yc))) / 6.0 - power_of<3>(log(1.0 / (w3 - yc))) / 6.0 - (power_of<2>(ln1mychalf) * log((-1.0 + w3) / (w3 - yc))) / 2.0 - (power_of<2>(ln1myc) * log((-1.0 + w3) / (w3 - yc))) / 2.0 - power_of<3>(log((-1.0 - xc) / (w3 - yc))) / 6.0 + power_of<3>(log((1.0 - xc) / (w3 - yc))) / 6.0 - power_of<3>(log((-1.0 + xc) / (w3 - yc))) / 6.0 + power_of<3>(log((1.0 + xc) / (w3 - yc))) / 6.0
                + (power_of<2>(ln1mychalf) * log(((1.0 - w3) * (-1.0 - yc)) / (2.0 * (w3 - yc)))) / 2.0 - (power_of<2>(ln1mychalf) * log((w3 - yc) / (-1.0 + w3))) / 2.0 + (power_of<2>(ln1myc) * log((w3 - yc) / (-1.0 + w3))) / 2.0 + (power_of<2>(ln1mychalf) * log((-2.0 * (w3 - yc)) / ((-1.0 + w3) * (-1.0 - yc)))) / 2.0 - dilog(((-1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (1.0 - yc))) * log((-xc - yc) / (-1.0 - xc)) + dilog(((-1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (1.0 - yc))) * log((-xc - yc) / (-1.0 - xc)) - dilog(((-1.0 - w3) * (-xc - yc)) / ((-1.0 - xc) * (-w3 - yc))) * log((-xc - yc) / (-1.0 - xc))
                + dilog(((-1.0 + w3) * (-xc - yc)) / ((-1.0 - xc) * (w3 - yc))) * log((-xc - yc) / (-1.0 - xc)) + ln1myc * log((-w3 - yc) / (-w3 + xc)) * log((-xc - yc) / (-1.0 - xc)) - ln1myc * log((w3 - yc) / (w3 + xc)) * log((-xc - yc) / (-1.0 - xc)) + (log((-w3 + xc) / (-w3 - yc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 - (log(((w3 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-w3 - yc))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 + (log((-w3 - yc) / (-w3 + xc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0
                - (log(-(((-1.0 - xc) * (-w3 - yc)) / ((-w3 + xc) * (1.0 - yc)))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 - (log((w3 + xc) / (w3 - yc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 + (log(((-w3 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (w3 - yc))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 - (log((w3 - yc) / (w3 + xc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 + (log(-(((-1.0 - xc) * (w3 - yc)) / ((w3 + xc) * (1.0 - yc)))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / 2.0 + dilog((-xc - yc) / (-w3 - yc)) * (log((-xc - yc) / (-1.0 - xc)) - log((-xc - yc) / (1.0 - xc)))
                + dilog(((1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (-1.0 - yc))) * log((-xc - yc) / (1.0 - xc)) - dilog(((1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (-1.0 - yc))) * log((-xc - yc) / (1.0 - xc)) + dilog(((1.0 - w3) * (-xc - yc)) / ((1.0 - xc) * (-w3 - yc))) * log((-xc - yc) / (1.0 - xc)) - dilog(((1.0 + w3) * (-xc - yc)) / ((1.0 - xc) * (w3 - yc))) * log((-xc - yc) / (1.0 - xc)) - (log((-w3 + xc) / (-w3 - yc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0 + (log(((w3 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (-w3 - yc))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0
                - (log((-w3 - yc) / (-w3 + xc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0 + (log(-(((1.0 - xc) * (-w3 - yc)) / ((-w3 + xc) * (-1.0 - yc)))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0 + (log((w3 + xc) / (w3 - yc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0 - (log(((-w3 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (w3 - yc))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0 + (log((w3 - yc) / (w3 + xc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0 - (log(-(((1.0 - xc) * (w3 - yc)) / ((w3 + xc) * (-1.0 - yc)))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / 2.0
                + dilog((-xc - yc) / (w3 - yc)) * (-log((-xc - yc) / (-1.0 - xc)) + log((-xc - yc) / (1.0 - xc))) - dilog(((-1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (1.0 - yc))) * log((xc - yc) / (-1.0 + xc)) + dilog(((-1.0 + w3) * (xc - yc)) / ((w3 - xc) * (1.0 - yc))) * log((xc - yc) / (-1.0 + xc)) - dilog(((-1.0 - w3) * (xc - yc)) / ((-1.0 + xc) * (-w3 - yc))) * log((xc - yc) / (-1.0 + xc)) + dilog(((-1.0 + w3) * (xc - yc)) / ((-1.0 + xc) * (w3 - yc))) * log((xc - yc) / (-1.0 + xc)) + ln1myc * log((-w3 - yc) / (-w3 - xc)) * log((xc - yc) / (-1.0 + xc))
                - ln1myc * log((w3 - yc) / (w3 - xc)) * log((xc - yc) / (-1.0 + xc)) + (log((-w3 - xc) / (-w3 - yc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 - (log(((w3 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-w3 - yc))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 + (log((-w3 - yc) / (-w3 - xc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 - (log(-(((-1.0 + xc) * (-w3 - yc)) / ((-w3 - xc) * (1.0 - yc)))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 - (log((w3 - xc) / (w3 - yc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 + (log(((-w3 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (w3 - yc))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0
                - (log((w3 - yc) / (w3 - xc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 + (log(-(((-1.0 + xc) * (w3 - yc)) / ((w3 - xc) * (1.0 - yc)))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / 2.0 + dilog((xc - yc) / (-w3 - yc)) * (log((xc - yc) / (-1.0 + xc)) - log((xc - yc) / (1.0 + xc))) + dilog(((1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (-1.0 - yc))) * log((xc - yc) / (1.0 + xc)) - dilog(((1.0 + w3) * (xc - yc)) / ((w3 - xc) * (-1.0 - yc))) * log((xc - yc) / (1.0 + xc)) + dilog(((1.0 - w3) * (xc - yc)) / ((1.0 + xc) * (-w3 - yc))) * log((xc - yc) / (1.0 + xc))
                - dilog(((1.0 + w3) * (xc - yc)) / ((1.0 + xc) * (w3 - yc))) * log((xc - yc) / (1.0 + xc)) - (log((-w3 - xc) / (-w3 - yc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 + (log(((w3 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (-w3 - yc))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 - (log((-w3 - yc) / (-w3 - xc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 + (log(-(((1.0 + xc) * (-w3 - yc)) / ((-w3 - xc) * (-1.0 - yc)))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 + (log((w3 - xc) / (w3 - yc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 - (log(((-w3 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (w3 - yc))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0
                + (log((w3 - yc) / (w3 - xc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 - (log(-(((1.0 + xc) * (w3 - yc)) / ((w3 - xc) * (-1.0 - yc)))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / 2.0 + dilog((xc - yc) / (w3 - yc)) * (-log((xc - yc) / (-1.0 + xc)) + log((xc - yc) / (1.0 + xc))) - (power_of<2>(ln1myc) * log(yc)) / 2.0 - (power_of<2>(ln1myc) * log(((-1.0 - w3) * yc) / (-w3 - yc))) / 2.0 + (power_of<2>(ln1myc) * log(((-1.0 + w3) * yc) / (w3 - yc))) / 2.0 + dilog(((-1.0 - w3) * (-1.0 - yc)) / ((1.0 - w3) * (1.0 - yc))) * ln1pychalf + dilog((-0.5) * (((-1.0 - w3) * (-1.0 - yc)) / (-w3 - yc))) * ln1pychalf
                - ln1myc * log((-w3 - yc) / (1.0 - w3)) * ln1pychalf - (log((1.0 - w3) / (-w3 - yc)) * power_of<2>(ln1pychalf)) / 2.0 + (log((-0.5) * (((-1.0 + w3) * (1.0 - yc)) / (-w3 - yc))) * power_of<2>(ln1pychalf)) / 2.0 - (log((-w3 - yc) / (1.0 - w3)) * power_of<2>(ln1pychalf)) / 2.0 + (log((2.0 * (-w3 - yc)) / ((1.0 - w3) * (1.0 - yc))) * power_of<2>(ln1pychalf)) / 2.0 + dilog((-1.0 + yc) / (-1.0 + w3)) * (-ln1mychalf + ln1myc - ln1pyc)
                + dilog((xc + yc) / (-w3 + xc)) * (ln1mxc - ln1pxc + ln1myc + log((-xc - yc) / (-1.0 - xc)) - log((-xc - yc) / (1.0 - xc)) - ln1pyc) + dilog((-xc + yc) / (-w3 - xc)) * (-ln1mxc + ln1pxc + ln1myc + log((xc - yc) / (-1.0 + xc)) - log((xc - yc) / (1.0 + xc)) - ln1pyc) + dilog((-1.0 - yc) / (-w3 - yc)) * (-ln1pychalf - ln1pyc) + dilog(-2.0 / (-1.0 + w3)) * ln1pyc + dilog((-1.0 - xc) / (-w3 - xc)) * ln1pyc - dilog((-1.0 - xc) / (w3 - xc)) * ln1pyc
                + dilog((-1.0 + xc) / (-w3 + xc)) * ln1pyc - dilog((-1.0 + xc) / (w3 + xc)) * ln1pyc + dilog((-1.0 - yc) / (w3 - yc)) * ln1pyc - dilog(yc) * ln1pyc - dilog(1.0 + yc) * ln1pyc - dilog((w3 * (-1.0 - yc)) / (-w3 + yc)) * ln1pyc + dilog(-((w3 * (-1.0 - yc)) / (w3 + yc))) * ln1pyc - (pisqu / 12.0 - ln2squ / 2.0) * ln1pyc - ln1mychalf * log((w3 - yc) / (-1.0 + w3)) * ln1pyc - log((-w3 - yc) / (-w3 + xc)) * log((-xc - yc) / (1.0 - xc)) * ln1pyc
                + log((w3 - yc) / (w3 + xc)) * log((-xc - yc) / (1.0 - xc)) * ln1pyc - log((-w3 - yc) / (-w3 - xc)) * log((xc - yc) / (1.0 + xc)) * ln1pyc + log((w3 - yc) / (w3 - xc)) * log((xc - yc) / (1.0 + xc)) * ln1pyc - (ln2 * power_of<2>(ln1pyc)) / 2.0 - (log((1.0 - w3) / (-w3 - yc)) * power_of<2>(ln1pyc)) / 2.0 + (log((-w3 - yc) / (1.0 - w3)) * power_of<2>(ln1pyc)) / 2.0 + (log((1.0 + w3) / (w3 - yc)) * power_of<2>(ln1pyc)) / 2.0 - (log(-yc) * power_of<2>(ln1pyc)) / 2.0 - power_of<3>(ln1pyc) / 6.0 + dilog((1.0 - yc) / 2.0) * (ln1myc + ln1pyc)
                + dilog((1.0 + yc) / 2.0) * (ln1myc + ln1pyc) + dilog((xc + yc) / (w3 + xc)) * (-ln1mxc + ln1pxc - ln1myc - log((-xc - yc) / (-1.0 - xc)) + log((-xc - yc) / (1.0 - xc)) + ln1pyc) + dilog((-xc + yc) / (w3 - xc)) * (ln1mxc - ln1pxc - ln1myc - log((xc - yc) / (-1.0 + xc)) + log((xc - yc) / (1.0 + xc)) + ln1pyc) + dilog((1.0 + yc) / (1.0 - w3)) * (-ln1myc - ln1pychalf + ln1pyc)
                - (ln1pyc * (pisqu - 6.0 * ln2squ - 12.0 * ln1myc * ln1pychalf + ln64 * ln1pyc)) / 12.0 - (ln1myc * (pisqu - 6.0 * ln2squ + ln64 * ln1myc - 12.0 * ln1mychalf * ln1pyc)) / 12.0 - (power_of<2>(ln1pyc) * log(((1.0 + w3) * yc) / (-w3 + yc))) / 2.0 + (power_of<2>(ln1pyc) * log(((1.0 - w3) * yc) / (w3 + yc))) / 2.0 + 2.0 * ln2 * ln1mxc * log(1.0 - yc / w3) - power_of<2>(ln1mxc) * log(1.0 - yc / w3) + 2.0 * ln2 * ln1pxc * log(1.0 - yc / w3) - power_of<2>(ln1pxc) * log(1.0 - yc / w3)
                + dilog((1.0 - xc) / 2.0) * (-2.0 * log(1.0 - yc / w3) - 2.0 * log(1.0 + yc / w3)) + dilog((1.0 + xc) / 2.0) * (-2.0 * log(1.0 - yc / w3) - 2.0 * log(1.0 + yc / w3)) + dilog(w3) * (-log(1.0 - yc / w3) - log(1.0 + yc / w3)) + 2.0 * ln2 * ln1mxc * log(1.0 + yc / w3) - power_of<2>(ln1mxc) * log(1.0 + yc / w3) + 2.0 * ln2 * ln1pxc * log(1.0 + yc / w3) - power_of<2>(ln1pxc) * log(1.0 + yc / w3) + dilog(-w3) * (log(1.0 - yc / w3) + log(1.0 + yc / w3)) - ln1mxc * log((-w3 - yc) / (-w3 - xc)) * log(1.0 - yc * xcinv) + ln1pxc * log((-w3 - yc) / (-w3 - xc)) * log(1.0 - yc * xcinv)
                + ln1mxc * log((w3 - yc) / (w3 - xc)) * log(1.0 - yc * xcinv) - ln1pxc * log((w3 - yc) / (w3 - xc)) * log(1.0 - yc * xcinv) + ln1mxc * log((-w3 - yc) / (-w3 + xc)) * log(1.0 + yc * xcinv) - ln1pxc * log((-w3 - yc) / (-w3 + xc)) * log(1.0 + yc * xcinv) - ln1mxc * log((w3 - yc) / (w3 + xc)) * log(1.0 + yc * xcinv) + ln1pxc * log((w3 - yc) / (w3 + xc)) * log(1.0 + yc * xcinv) + myi * M_PI * H1((-1.0 - xc) / (-1.0 - w3), 1.0 + xc) * power_of<2>(log(-(w3 / (-1.0 - xc)))) * my_sign(-imxc) - myi * M_PI * H1((-1.0 - xc) / (-1.0 + w3), 1.0 + xc) * power_of<2>(log(w3 / (-1.0 - xc))) * my_sign(-imxc)
                + myi * M_PI * H1(1.0 - w3, 1.0 + xc) * power_of<2>(log((-w3 - xc) / ((1.0 - w3) * (-1.0 - xc)))) * my_sign(-imxc) - myi * M_PI * H1(1.0 + w3, 1.0 + xc) * power_of<2>(log((w3 - xc) / ((1.0 + w3) * (-1.0 - xc)))) * my_sign(-imxc) - myi * M_PI * H1((1.0 + xc) / (1.0 - w3), 1.0 + xc) * power_of<2>(log(-(w3 / (1.0 + xc)))) * my_sign(-imxc) + myi * M_PI * H1((1.0 + xc) / (1.0 + w3), 1.0 + xc) * power_of<2>(log(w3 / (1.0 + xc))) * my_sign(-imxc) + myi * M_PI * H1(1.0 - w3, 1.0 + xc) * power_of<2>(log((-w3 - xc) / ((-1.0 + w3) * (1.0 + xc)))) * my_sign(-imxc) - myi * M_PI * H1(1.0 + w3, 1.0 + xc) * power_of<2>(log((w3 - xc) / ((-1.0 - w3) * (1.0 + xc)))) * my_sign(-imxc)
                - myi * M_PI * H1((1.0 - xc) / (1.0 - w3), 1.0 - xc) * power_of<2>(log(-(w3 / (1.0 - xc)))) * my_sign(imxc) + myi * M_PI * H1((1.0 - xc) / (1.0 + w3), 1.0 - xc) * power_of<2>(log(w3 / (1.0 - xc))) * my_sign(imxc) + myi * M_PI * H1((-1.0 + xc) / (-1.0 - w3), 1.0 - xc) * power_of<2>(log(-(w3 / (-1.0 + xc)))) * my_sign(imxc) - myi * M_PI * H1((-1.0 + xc) / (-1.0 + w3), 1.0 - xc) * power_of<2>(log(w3 / (-1.0 + xc))) * my_sign(imxc) + myi * M_PI * H1(1.0 - w3, 1.0 - xc) * power_of<2>(log((-w3 + xc) / ((-1.0 + w3) * (1.0 - xc)))) * my_sign(imxc) + myi * M_PI * H1(1.0 - w3, 1.0 - xc) * power_of<2>(log((-w3 + xc) / ((1.0 - w3) * (-1.0 + xc)))) * my_sign(imxc)
                - myi * M_PI * H1(1.0 + w3, 1.0 - xc) * power_of<2>(log((w3 + xc) / ((-1.0 - w3) * (1.0 - xc)))) * my_sign(imxc) - myi * M_PI * H1(1.0 + w3, 1.0 - xc) * power_of<2>(log((w3 + xc) / ((1.0 + w3) * (-1.0 + xc)))) * my_sign(imxc) + myi * M_PI * H1((-1.0 - w3) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 + w3) * (-1.0 - yc)) / (2.0 * (1.0 + w3)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) - myi * M_PI * H1(2.0 / (1.0 + w3), -2.0 / (-1.0 - yc)) * power_of<2>(log((w3 - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) + myi * M_PI * H1((-1.0 + w3) / (-1.0 - yc), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log(-(((-w3 - xc) * (-1.0 - yc)) / ((1.0 - w3) * (-1.0 - xc))))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc)))
                - myi * M_PI * H1((-1.0 - w3) / (-1.0 - yc), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log(-(((w3 - xc) * (-1.0 - yc)) / ((1.0 + w3) * (-1.0 - xc))))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) - myi * M_PI * H1((1.0 + xc) / (1.0 - w3), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log((-w3 - yc) / (1.0 + xc))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) + myi * M_PI * H1((1.0 + xc) / (1.0 + w3), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log((w3 - yc) / (1.0 + xc))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) + myi * M_PI * H1((-1.0 + w3) / (-1.0 - yc), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log(-(((-w3 + xc) * (-1.0 - yc)) / ((1.0 - w3) * (-1.0 + xc))))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc)))
                - myi * M_PI * H1((-1.0 - w3) / (-1.0 - yc), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log(-(((w3 + xc) * (-1.0 - yc)) / ((1.0 + w3) * (-1.0 + xc))))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) - myi * M_PI * H1((1.0 - xc) / (1.0 - w3), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log((-w3 - yc) / (1.0 - xc))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) + myi * M_PI * H1((1.0 - xc) / (1.0 + w3), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log((w3 - yc) / (1.0 - xc))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) + myi * M_PI * H1((1.0 + w3) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 - w3) * (1.0 - yc)) / (-1.0 - w3)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))
                - myi * M_PI * H1(-2.0 / (-1.0 - w3), 2.0 / (1.0 - yc)) * power_of<2>(log((w3 + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc))) - myi * M_PI * H1((1.0 + w3) / (1.0 - yc), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log(-(((-w3 - xc) * (1.0 - yc)) / ((-1.0 - w3) * (1.0 - xc))))) * my_sign(imag((1.0 - xc) / (1.0 - yc))) + myi * M_PI * H1((1.0 - w3) / (1.0 - yc), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log(-(((w3 - xc) * (1.0 - yc)) / ((-1.0 + w3) * (1.0 - xc))))) * my_sign(imag((1.0 - xc) / (1.0 - yc))) + myi * M_PI * H1((-1.0 + xc) / (-1.0 - w3), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log((-w3 - yc) / (-1.0 + xc))) * my_sign(imag((1.0 - xc) / (1.0 - yc)))
                - myi * M_PI * H1((-1.0 + xc) / (-1.0 + w3), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log((w3 - yc) / (-1.0 + xc))) * my_sign(imag((1.0 - xc) / (1.0 - yc))) - myi * M_PI * H1((1.0 + w3) / (1.0 - yc), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log(-(((-w3 + xc) * (1.0 - yc)) / ((-1.0 - w3) * (1.0 + xc))))) * my_sign(imag((1.0 + xc) / (1.0 - yc))) + myi * M_PI * H1((1.0 - w3) / (1.0 - yc), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log(-(((w3 + xc) * (1.0 - yc)) / ((-1.0 + w3) * (1.0 + xc))))) * my_sign(imag((1.0 + xc) / (1.0 - yc))) + myi * M_PI * H1((-1.0 - xc) / (-1.0 - w3), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log((-w3 - yc) / (-1.0 - xc))) * my_sign(imag((1.0 + xc) / (1.0 - yc)))
                - myi * M_PI * H1((-1.0 - xc) / (-1.0 + w3), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log((w3 - yc) / (-1.0 - xc))) * my_sign(imag((1.0 + xc) / (1.0 - yc))) + myi * M_PI * H1(-w3inv, -ycinv) * power_of<2>(log(-w3 + yc)) * my_sign(-imycinv) - myi * M_PI * H1(w3inv, -ycinv) * power_of<2>(log(w3 + yc)) * my_sign(-imycinv) + myi * M_PI * H1(-w3inv, ycinv) * power_of<2>(log(-w3 - yc)) * my_sign(imycinv) - myi * M_PI * H1(w3inv, ycinv) * power_of<2>(log(w3 - yc)) * my_sign(imycinv)
                + myi * M_PI * power_of<2>(log(-(w3 / (-1.0 - w3)))) * my_sign(imag(1.0 / (-1.0 - w3))) * T(1.0, -(xc / (-1.0 - xc)), -(w3 / (-1.0 - w3))) - myi * M_PI * power_of<2>(log(w3 / (-1.0 + w3))) * my_sign(imag(1.0 / (-1.0 + w3))) * T(1.0, -(xc / (-1.0 - xc)), w3 / (-1.0 + w3)) - myi * M_PI * power_of<2>(log((-w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 + w3) / (-1.0 - xc))) * T(1.0, -(xc / (-1.0 - xc)), (-w3 - xc) / (-1.0 - xc)) + myi * M_PI * power_of<2>(log((w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 - w3) / (-1.0 - xc))) * T(1.0, -(xc / (-1.0 - xc)), (w3 - xc) / (-1.0 - xc))
                - myi * M_PI * power_of<2>(log(-(w3 / (1.0 - w3)))) * my_sign(-imag(1.0 / (1.0 - w3))) * T(1.0, -(xc / (1.0 - xc)), -(w3 / (1.0 - w3))) + myi * M_PI * power_of<2>(log(w3 / (1.0 + w3))) * my_sign(-imag(1.0 / (1.0 + w3))) * T(1.0, -(xc / (1.0 - xc)), w3 / (1.0 + w3)) + myi * M_PI * power_of<2>(log((-w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 + w3) / (1.0 - xc))) * T(1.0, -(xc / (1.0 - xc)), (-w3 - xc) / (1.0 - xc)) - myi * M_PI * power_of<2>(log((w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 - w3) / (1.0 - xc))) * T(1.0, -(xc / (1.0 - xc)), (w3 - xc) / (1.0 - xc)) + myi * M_PI * power_of<2>(log(-(w3 / (-1.0 - w3)))) * my_sign(imag(1.0 / (-1.0 - w3))) * T(1.0, xc / (-1.0 + xc), -(w3 / (-1.0 - w3)))
                - myi * M_PI * power_of<2>(log(w3 / (-1.0 + w3))) * my_sign(imag(1.0 / (-1.0 + w3))) * T(1.0, xc / (-1.0 + xc), w3 / (-1.0 + w3)) - myi * M_PI * power_of<2>(log((-w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 + w3) / (-1.0 + xc))) * T(1.0, xc / (-1.0 + xc), (-w3 + xc) / (-1.0 + xc)) + myi * M_PI * power_of<2>(log((w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 - w3) / (-1.0 + xc))) * T(1.0, xc / (-1.0 + xc), (w3 + xc) / (-1.0 + xc)) - myi * M_PI * power_of<2>(log(-(w3 / (1.0 - w3)))) * my_sign(-imag(1.0 / (1.0 - w3))) * T(1.0, xc / (1.0 + xc), -(w3 / (1.0 - w3))) + myi * M_PI * power_of<2>(log(w3 / (1.0 + w3))) * my_sign(-imag(1.0 / (1.0 + w3))) * T(1.0, xc / (1.0 + xc), w3 / (1.0 + w3))
                + myi * M_PI * power_of<2>(log((-w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 + w3) / (1.0 + xc))) * T(1.0, xc / (1.0 + xc), (-w3 + xc) / (1.0 + xc)) - myi * M_PI * power_of<2>(log((w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 - w3) / (1.0 + xc))) * T(1.0, xc / (1.0 + xc), (w3 + xc) / (1.0 + xc)) + myi * M_PI * power_of<2>(log((1.0 - w3) / 2.0)) * my_sign(imw3 / 2.0) * T(1.0, (1.0 - yc) / 2.0, (1.0 - w3) / 2.0) - (2.0 * myi) * M_PI * log((1.0 - w3) / 2.0) * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 - w3) / 2.0) - myi * M_PI * power_of<2>(log((w3 - yc) / (1.0 + w3))) * my_sign(imag((1.0 + yc) / (1.0 + w3))) * T(1.0, (1.0 - yc) / 2.0, (w3 - yc) / (1.0 + w3))
                - myi * M_PI * power_of<2>(log(1.0 - w3)) * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3) + (2.0 * myi) * M_PI * log(1.0 - w3) * log((-w3 - xc) / (-1.0 - xc)) * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3) + (2.0 * myi) * M_PI * log(1.0 - w3) * log((-w3 + xc) / (-1.0 + xc)) * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3) + dilog((-1.0 + w3) / (-1.0 - xc)) * (log(w3 / (-1.0 + w3)) - log((w3 - yc) / (-1.0 + w3)) + (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) + dilog((-1.0 + w3) / (-1.0 + xc)) * (log(w3 / (-1.0 + w3)) - log((w3 - yc) / (-1.0 + w3)) + (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3))
                + (2.0 * myi) * M_PI * log((1.0 - w3) / 2.0) * log(1.0 + w3) * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3) - (2.0 * myi) * M_PI * log(1.0 + w3) * log((w3 - xc) / (-1.0 - xc)) * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3) - (2.0 * myi) * M_PI * log(1.0 + w3) * log((w3 + xc) / (-1.0 + xc)) * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3) + dilog((-1.0 - w3) / (-1.0 - xc)) * (-log(-(w3 / (-1.0 - w3))) + log((-w3 - yc) / (-1.0 - w3)) - (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) + dilog((-1.0 - w3) / (-1.0 + xc)) * (-log(-(w3 / (-1.0 - w3))) + log((-w3 - yc) / (-1.0 - w3)) - (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3))
                + li2r_xc * (log(-(w3 / (-1.0 - w3))) - log(w3 / (-1.0 + w3)) - log((-w3 - yc) / (-1.0 - w3)) + log((w3 - yc) / (-1.0 + w3)) - (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3) + (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) + dilog(-1.0 / (-1.0 + xc)) * (log(-(w3 / (-1.0 - w3))) - log(w3 / (-1.0 + w3)) - log((-w3 - yc) / (-1.0 - w3)) + log((w3 - yc) / (-1.0 + w3)) - (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3) + (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3))
                + (2.0 * myi) * M_PI * ln1mxc * log((-w3 - xc) / (-1.0 - w3)) * my_sign(imxc) * t11myc1mxc - (2.0 * myi) * M_PI * ln1mxc * log((w3 - xc) / (-1.0 + w3)) * my_sign(imxc) * t11myc1mxc - (2.0 * myi) * M_PI * ln1mxc * log((-w3 - yc) / (-1.0 - w3)) * my_sign(imxc) * t11myc1mxc + (2.0 * myi) * M_PI * ln1mxc * log((w3 - yc) / (-1.0 + w3)) * my_sign(imxc) * t11myc1mxc + (2.0 * myi) * M_PI * ln1pxc * log((-w3 + xc) / (-1.0 - w3)) * my_sign(-imxc) * t11myc1pxc - (2.0 * myi) * M_PI * ln1pxc * log((w3 + xc) / (-1.0 + w3)) * my_sign(-imxc) * t11myc1pxc
                - (2.0 * myi) * M_PI * ln1pxc * log((-w3 - yc) / (-1.0 - w3)) * my_sign(-imxc) * t11myc1pxc + (2.0 * myi) * M_PI * ln1pxc * log((w3 - yc) / (-1.0 + w3)) * my_sign(-imxc) * t11myc1pxc - myi * M_PI * power_of<2>(log(1.0 - yc / w3)) * my_sign(imag(yc / w3)) * T(1.0, 1.0 - yc, 1.0 - yc / w3) + myi * M_PI * power_of<2>(log(1.0 + yc / w3)) * my_sign(-imag(yc / w3)) * T(1.0, 1.0 - yc, 1.0 + yc / w3) + myi * M_PI * power_of<2>(log((-w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 + w3) / (-1.0 - xc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (-w3 - xc) / (-1.0 - xc))
                - (2.0 * myi) * M_PI * log((-w3 - xc) / (-1.0 - xc)) * ln1myc * my_sign(imag((1.0 + xc) / (1.0 - yc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (-w3 - xc) / (-1.0 - xc)) - myi * M_PI * power_of<2>(log((w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 - w3) / (-1.0 - xc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (w3 - xc) / (-1.0 - xc)) + (2.0 * myi) * M_PI * log((w3 - xc) / (-1.0 - xc)) * ln1myc * my_sign(imag((1.0 + xc) / (1.0 - yc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (w3 - xc) / (-1.0 - xc)) + myi * M_PI * power_of<2>(log((-w3 - yc) / (-1.0 - w3))) * my_sign(imag((-1.0 + yc) / (-1.0 - w3))) * T(1.0, (-xc - yc) / (-1.0 - xc), (-w3 - yc) / (-1.0 - w3))
                - myi * M_PI * power_of<2>(log((w3 - yc) / (-1.0 + w3))) * my_sign(imag((-1.0 + yc) / (-1.0 + w3))) * T(1.0, (-xc - yc) / (-1.0 - xc), (w3 - yc) / (-1.0 + w3)) - myi * M_PI * power_of<2>(log((-w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 + w3) / (1.0 - xc))) * T(1.0, (-xc - yc) / (1.0 - xc), (-w3 - xc) / (1.0 - xc)) + (2.0 * myi) * M_PI * log((-w3 - xc) / (1.0 - xc)) * ln1pyc * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) * T(1.0, (-xc - yc) / (1.0 - xc), (-w3 - xc) / (1.0 - xc)) + myi * M_PI * power_of<2>(log((w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 - w3) / (1.0 - xc))) * T(1.0, (-xc - yc) / (1.0 - xc), (w3 - xc) / (1.0 - xc))
                - (2.0 * myi) * M_PI * log((w3 - xc) / (1.0 - xc)) * ln1pyc * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) * T(1.0, (-xc - yc) / (1.0 - xc), (w3 - xc) / (1.0 - xc)) - myi * M_PI * power_of<2>(log((-w3 - yc) / (1.0 - w3))) * my_sign(imag((1.0 + yc) / (1.0 - w3))) * T(1.0, (-xc - yc) / (1.0 - xc), (-w3 - yc) / (1.0 - w3)) + myi * M_PI * power_of<2>(log((w3 - yc) / (1.0 + w3))) * my_sign(imag((1.0 + yc) / (1.0 + w3))) * T(1.0, (-xc - yc) / (1.0 - xc), (w3 - yc) / (1.0 + w3)) + myi * M_PI * power_of<2>(log((-w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 + w3) / (-1.0 + xc))) * T(1.0, (xc - yc) / (-1.0 + xc), (-w3 + xc) / (-1.0 + xc))
                - (2.0 * myi) * M_PI * log((-w3 + xc) / (-1.0 + xc)) * ln1myc * my_sign(imag((1.0 - xc) / (1.0 - yc))) * T(1.0, (xc - yc) / (-1.0 + xc), (-w3 + xc) / (-1.0 + xc)) - myi * M_PI * power_of<2>(log((w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 - w3) / (-1.0 + xc))) * T(1.0, (xc - yc) / (-1.0 + xc), (w3 + xc) / (-1.0 + xc)) + (2.0 * myi) * M_PI * log((w3 + xc) / (-1.0 + xc)) * ln1myc * my_sign(imag((1.0 - xc) / (1.0 - yc))) * T(1.0, (xc - yc) / (-1.0 + xc), (w3 + xc) / (-1.0 + xc)) + myi * M_PI * power_of<2>(log((-w3 - yc) / (-1.0 - w3))) * my_sign(imag((-1.0 + yc) / (-1.0 - w3))) * T(1.0, (xc - yc) / (-1.0 + xc), (-w3 - yc) / (-1.0 - w3))
                - myi * M_PI * power_of<2>(log((w3 - yc) / (-1.0 + w3))) * my_sign(imag((-1.0 + yc) / (-1.0 + w3))) * T(1.0, (xc - yc) / (-1.0 + xc), (w3 - yc) / (-1.0 + w3)) - myi * M_PI * power_of<2>(log((-w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 + w3) / (1.0 + xc))) * T(1.0, (xc - yc) / (1.0 + xc), (-w3 + xc) / (1.0 + xc)) + (2.0 * myi) * M_PI * log((-w3 + xc) / (1.0 + xc)) * ln1pyc * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) * T(1.0, (xc - yc) / (1.0 + xc), (-w3 + xc) / (1.0 + xc)) + myi * M_PI * power_of<2>(log((w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 - w3) / (1.0 + xc))) * T(1.0, (xc - yc) / (1.0 + xc), (w3 + xc) / (1.0 + xc))
                - (2.0 * myi) * M_PI * log((w3 + xc) / (1.0 + xc)) * ln1pyc * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) * T(1.0, (xc - yc) / (1.0 + xc), (w3 + xc) / (1.0 + xc)) - myi * M_PI * power_of<2>(log((-w3 - yc) / (1.0 - w3))) * my_sign(imag((1.0 + yc) / (1.0 - w3))) * T(1.0, (xc - yc) / (1.0 + xc), (-w3 - yc) / (1.0 - w3)) + myi * M_PI * power_of<2>(log((w3 - yc) / (1.0 + w3))) * my_sign(imag((1.0 + yc) / (1.0 + w3))) * T(1.0, (xc - yc) / (1.0 + xc), (w3 - yc) / (1.0 + w3)) + myi * M_PI * power_of<2>(log((1.0 - w3) / 2.0)) * my_sign(imw3 / 2.0) * T(1.0, (1.0 + yc) / 2.0, (1.0 - w3) / 2.0) - (2.0 * myi) * M_PI * log((1.0 - w3) / 2.0) * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 - w3) / 2.0)
                - myi * M_PI * power_of<2>(log((-w3 - yc) / (-1.0 - w3))) * my_sign(imag((-1.0 + yc) / (-1.0 - w3))) * T(1.0, (1.0 + yc) / 2.0, (-w3 - yc) / (-1.0 - w3)) - myi * M_PI * power_of<2>(log(1.0 - w3)) * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3) + (2.0 * myi) * M_PI * log(1.0 - w3) * log((w3 - xc) / (1.0 - xc)) * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3) + (2.0 * myi) * M_PI * log(1.0 - w3) * log((w3 + xc) / (1.0 + xc)) * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3) + dilog((1.0 - w3) / (1.0 - xc)) * (log(-(w3 / (1.0 - w3))) - log((-w3 - yc) / (1.0 - w3)) + (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3))
                + dilog((1.0 - w3) / (1.0 + xc)) * (log(-(w3 / (1.0 - w3))) - log((-w3 - yc) / (1.0 - w3)) + (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) + (2.0 * myi) * M_PI * log((1.0 - w3) / 2.0) * log(1.0 + w3) * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3) - (2.0 * myi) * M_PI * log(1.0 + w3) * log((-w3 - xc) / (1.0 - xc)) * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3) - (2.0 * myi) * M_PI * log(1.0 + w3) * log((-w3 + xc) / (1.0 + xc)) * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3) + dilog((1.0 + w3) / (1.0 - xc)) * (-log(w3 / (1.0 + w3)) + log((w3 - yc) / (1.0 + w3)) - (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3))
                + dilog((1.0 + w3) / (1.0 + xc)) * (-log(w3 / (1.0 + w3)) + log((w3 - yc) / (1.0 + w3)) - (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) + li2half * (-log(-(w3 / (-1.0 - w3))) - log(w3 / (1.0 + w3)) + log((-w3 - yc) / (-1.0 - w3)) + log((w3 - yc) / (1.0 + w3)) + 4.0 * log(1.0 - yc / w3) + 4.0 * log(1.0 + yc / w3) - (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3) - (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3))
                + dilog((1.0 + w3) / 2.0) * (log(-(w3 / (-1.0 - w3))) + log(w3 / (1.0 + w3)) - log((-w3 - yc) / (-1.0 - w3)) - log((w3 - yc) / (1.0 + w3)) + (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3) + (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) + dilog(1.0 / (1.0 - xc)) * (-log(-(w3 / (1.0 - w3))) + log(w3 / (1.0 + w3)) + log((-w3 - yc) / (1.0 - w3)) - log((w3 - yc) / (1.0 + w3)) - (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3) + (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3))
                + li2r_xc * (-log(-(w3 / (1.0 - w3))) + log(w3 / (1.0 + w3)) + log((-w3 - yc) / (1.0 - w3)) - log((w3 - yc) / (1.0 + w3)) - (2.0 * myi) * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3) + (2.0 * myi) * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) - (2.0 * myi) * M_PI * ln1mxc * log((-w3 + xc) / (1.0 - w3)) * my_sign(imxc) * t11pyc1mxc + (2.0 * myi) * M_PI * ln1mxc * log((w3 + xc) / (1.0 + w3)) * my_sign(imxc) * t11pyc1mxc + (2.0 * myi) * M_PI * ln1mxc * log((-w3 - yc) / (1.0 - w3)) * my_sign(imxc) * t11pyc1mxc
                - (2.0 * myi) * M_PI * ln1mxc * log((w3 - yc) / (1.0 + w3)) * my_sign(imxc) * t11pyc1mxc - (2.0 * myi) * M_PI * log((-w3 - xc) / (1.0 - w3)) * ln1pxc * my_sign(-imxc) * t11pyc1pxc + (2.0 * myi) * M_PI * log((w3 - xc) / (1.0 + w3)) * ln1pxc * my_sign(-imxc) * t11pyc1pxc + (2.0 * myi) * M_PI * ln1pxc * log((-w3 - yc) / (1.0 - w3)) * my_sign(-imxc) * t11pyc1pxc - (2.0 * myi) * M_PI * ln1pxc * log((w3 - yc) / (1.0 + w3)) * my_sign(-imxc) * t11pyc1pxc + myi * M_PI * power_of<2>(log(1.0 - yc / w3)) * my_sign(imag(yc / w3)) * T(1.0, 1.0 + yc, 1.0 - yc / w3)
                - myi * M_PI * power_of<2>(log(1.0 + yc / w3)) * my_sign(-imag(yc / w3)) * T(1.0, 1.0 + yc, 1.0 + yc / w3) + (2.0 * myi) * M_PI * log(1.0 - w3 * xcinv) * ln1mxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 - w3 * xcinv) - (2.0 * myi) * M_PI * log(1.0 - w3 * xcinv) * ln1pxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 - w3 * xcinv) - (2.0 * myi) * M_PI * log(1.0 + w3 * xcinv) * ln1mxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 + w3 * xcinv) + (2.0 * myi) * M_PI * log(1.0 + w3 * xcinv) * ln1pxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 + w3 * xcinv) + (2.0 * myi) * M_PI * log(1.0 - w3 * xcinv) * ln1mxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 - w3 * xcinv)
                - (2.0 * myi) * M_PI * log(1.0 - w3 * xcinv) * ln1pxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 - w3 * xcinv) - (2.0 * myi) * M_PI * log(1.0 + w3 * xcinv) * ln1mxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 + w3 * xcinv) + (2.0 * myi) * M_PI * log(1.0 + w3 * xcinv) * ln1pxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 + w3 * xcinv) + pisqu * ((-1.0 / 6.0) * log((1.0 + xc) / w3) + log(((-1.0 + w3) * (1.0 + xc)) / (w3 + xc)) / 6.0 - log(((-1.0 + w3) * (1.0 + xc)) / ((w3 + xc) * (1.0 - yc))) / 6.0 + log((1.0 + xc) / (w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11myc1pxc * T(p(-xc, 1.0 - yc), 1.0 - yc, 1.0 - w3))
                - pisqu * ((-1.0 / 6.0) * log(-((1.0 + xc) / w3)) + log(((-1.0 - w3) * (1.0 + xc)) / (-w3 + xc)) / 6.0 - log(((-1.0 - w3) * (1.0 + xc)) / ((-w3 + xc) * (1.0 - yc))) / 6.0 + log((1.0 + xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11myc1pxc * T(p(-xc, 1.0 - yc), 1.0 - yc, 1.0 + w3)) + pisqu * ((-1.0 / 6.0) * log(-((-1.0 - xc) / w3)) + log(((1.0 - w3) * (-1.0 - xc)) / (w3 + xc)) / 6.0 - log(((1.0 - w3) * (-1.0 - xc)) / ((-w3 - xc) * (-1.0 - yc))) / 6.0 + log((-1.0 - xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11pyc1pxc * T(p(-xc, 1.0 + yc), 1.0 + yc, 1.0 - w3))
                - pisqu * ((-1.0 / 6.0) * log((-1.0 - xc) / w3) + log(((1.0 + w3) * (-1.0 - xc)) / (-w3 + xc)) / 6.0 - log(((1.0 + w3) * (-1.0 - xc)) / ((w3 - xc) * (-1.0 - yc))) / 6.0 + log((-1.0 - xc) / (w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11pyc1pxc * T(p(-xc, 1.0 + yc), 1.0 + yc, 1.0 + w3)) + pisqu * ((-1.0 / 6.0) * log((1.0 - xc) / w3) + log(((-1.0 + w3) * (1.0 - xc)) / (w3 - xc)) / 6.0 - log(((-1.0 + w3) * (1.0 - xc)) / ((w3 - xc) * (1.0 - yc))) / 6.0 + log((1.0 - xc) / (w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11myc1mxc * T(p(xc, 1.0 - yc), 1.0 - yc, 1.0 - w3))
                - pisqu * ((-1.0 / 6.0) * log(-((1.0 - xc) / w3)) + log(((-1.0 - w3) * (1.0 - xc)) / (-w3 - xc)) / 6.0 - log(((-1.0 - w3) * (1.0 - xc)) / ((-w3 - xc) * (1.0 - yc))) / 6.0 + log((1.0 - xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11myc1mxc * T(p(xc, 1.0 - yc), 1.0 - yc, 1.0 + w3)) + pisqu * ((-1.0 / 6.0) * log(-((-1.0 + xc) / w3)) + log(((1.0 - w3) * (-1.0 + xc)) / (w3 - xc)) / 6.0 - log(((1.0 - w3) * (-1.0 + xc)) / ((-w3 + xc) * (-1.0 - yc))) / 6.0 + log((-1.0 + xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11pyc1mxc * T(p(xc, 1.0 + yc), 1.0 + yc, 1.0 - w3))
                - pisqu * ((-1.0 / 6.0) * log((-1.0 + xc) / w3) + log(((1.0 + w3) * (-1.0 + xc)) / (-w3 - xc)) / 6.0 - log(((1.0 + w3) * (-1.0 + xc)) / ((w3 + xc) * (-1.0 - yc))) / 6.0 + log((-1.0 + xc) / (w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11pyc1mxc * T(p(xc, 1.0 + yc), 1.0 + yc, 1.0 + w3)) + (2.0 * pisqu * ln2 - 4.0 * power_of<3>(ln2) - 21.0 * zeta3) / 12.0 - zeta3 / 4.0)) / denom6;

            return f27cPart1 + f27cPart2 + f27cPart3 + f27cPart4 + f27cPart5;
        }

        complex<double> f29c(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xc = clp.x_c;
            const complex<double> yc = clp.y_c;
            const complex<double> w3 = (2.0 * xc * xc) / (1.0 + xc * xc);

            const complex<double> xcinv = 1.0 / xc;
            const complex<double> ycinv = 1.0 / yc;
            const complex<double> w3inv = 1.0 / w3;

            // Imaginary parts
            const double imxc = imag(xc);
            const double imycinv = imag(ycinv);
            const double imw3 = imag(w3);

            // Polynomials in xc and yc
            const complex<double> xc2 = power_of<2>(xc);
            const complex<double> xc3 = power_of<3>(xc);
            const complex<double> xc4 = power_of<4>(xc);
            const complex<double> xc6 = power_of<6>(xc);
            const complex<double> xc8 = power_of<8>(xc);

            const complex<double> yc2 = power_of<2>(yc);
            const complex<double> yc3 = power_of<3>(yc);
            const complex<double> yc4 = power_of<4>(yc);
            const complex<double> yc5 = power_of<5>(yc);
            const complex<double> yc6 = power_of<6>(yc);
            const complex<double> yc7 = power_of<7>(yc);
            const complex<double> yc8 = power_of<8>(yc);

            const complex<double> term1 = (-4.0 + yc2 * (9.0 + (4.0 * myi) * M_PI + ln256));
            const complex<double> lognum1 = (xc2 * yc2 * (-27.0 - 13.0 * yc4 + (8.0 * myi) * M_PI * (-1.0 + 3.0 * yc2) - 16.0 * ln2 + 12.0 * yc2 * (5.0 + log(16.0))) + yc4 * (11.0 - (4.0 * myi) * M_PI * (-1.0 + 3.0 * yc2) + ln256 - 3.0 * yc2 * (7.0 + ln256)) + xc4 * (10.0 - 5.0 * yc4 + 6.0 * yc6 - (4.0 * myi) * M_PI * (-1.0 + 3.0 * yc2) + ln256 - 3.0 * yc2 * (7.0 + ln256)));
            const complex<double> lognum2 = (xc3 * (-2.0 + 3.0 * yc2 - 4.0 * yc4 + 3.0 * yc6) - xc * (yc2 - 6.0 * yc4 + 5.0 * yc6) + xc4 * (4.0 + yc2 * (-9.0 - (4.0 * myi) * M_PI - 8.0 * ln2)) + yc4 * (4.0 + yc2 * (-9.0 - (4.0 * myi) * M_PI - 8.0 * ln2)) + 2.0 * xc2 * yc2 * term1);
            const complex<double> lognum3 = (xc3 * (2.0 - 3.0 * yc2 + 4.0 * yc4 - 3.0 * yc6) + xc * (yc2 - 6.0 * yc4 + 5.0 * yc6) + xc4 * (4.0 + yc2 * (-9.0 - (4.0 * myi) * M_PI - 8.0 * ln2)) + yc4 * (4.0 + yc2 * (-9.0 - (4.0 * myi) * M_PI - 8.0 * ln2)) + 2.0 * xc2 * yc2 * term1);
            const complex<double> lognum4 = (xc2 * (22.0 * pisqu * yc2 + 3.0 * (48.0 + 6.0 * yc4 + 32.0 * ln2 - yc2 * (57.0 + 72.0 * ln2 + 32.0 * ln2squ)) - (12.0 * myi) * M_PI * (-4.0 + yc2 * (9.0 + ln256))) + yc2 * (-22.0 * pisqu * yc2 + 3.0 * (-42.0 - 32.0 * ln2 + yc2 * (45.0 + 72.0 * ln2 + 32.0 * ln2squ)) + (12.0 * myi) * M_PI * (-4.0 + yc2 * (9.0 + ln256))));

            const complex<double> num1 = (-(yc4 * (1.0 + 6.0 * yc + 8.0 * yc2 + 2.0 * yc3 + 15.0 * yc4)) + xc4 * yc * (-2.0 + 34.0 * yc + 34.0 * yc2 - 57.0 * yc3 + 40.0 * yc4 + 70.0 * yc5 + 32.0 * yc6 + 9.0 * yc7) + xc2 * (yc2 + 14.0 * yc3 - 8.0 * yc4 - 46.0 * yc5 + 23.0 * yc6 - 8.0 * yc7 - 8.0 * yc8) + xc6 * (-12.0 - 10.0 * yc + 25.0 * yc2 + 4.0 * yc3 - 26.0 * yc4 - 56.0 * yc5 - 33.0 * yc6 + 6.0 * yc7 + 6.0 * yc8));
            const complex<double> num2 = (yc6 - 9.0 * yc8 + 2.0 * xc4 * yc4 * (-5.0 + 28.0 * yc2 + yc4) - 2.0 * xc2 * yc4 * (2.0 - 9.0 * yc2 + 7.0 * yc4) + 2.0 * xc6 * yc2 * (10.0 - 38.0 * yc2 - 7.0 * yc4 + 3.0 * yc6) + xc8 * (-4.0 + 4.0 * yc2 + 42.0 * yc4 - 21.0 * yc6 + 3.0 * yc8));
            const complex<double> num3 = (-(yc2 * (1.0 + 15.0 * yc4)) + xc2 * (-2.0 + 34.0 * yc4 - 32.0 * yc6) + 2.0 * xc6 * (9.0 - 92.0 * yc2 + 15.0 * yc4 + 4.0 * yc6) - 2.0 * xc4 * (-3.0 + 11.0 * yc2 - 65.0 * yc4 + 9.0 * yc6) + xc8 * (26.0 + 63.0 * yc2 - 50.0 * yc4 + 9.0 * yc6));
            const complex<double> num4 = (-1.0 + yc) * (1.0 + yc) * (yc2 + yc4 + 2.0 * xc2 * (1.0 + yc2) - 2.0 * xc4 * (3.0 + yc4) + 2.0 * xc6 * (-9.0 + 3.0 * yc2 + 4.0 * yc4) + xc8 * (38.0 - 41.0 * yc2 + 9.0 * yc4));
            const complex<double> num5 = (yc4 * (-1.0 + 6.0 * yc - 8.0 * yc2 + 2.0 * yc3 - 15.0 * yc4) + xc4 * yc * (2.0 + 34.0 * yc - 34.0 * yc2 - 57.0 * yc3 - 40.0 * yc4 + 70.0 * yc5 - 32.0 * yc6 + 9.0 * yc7) + xc2 * (yc2 - 14.0 * yc3 - 8.0 * yc4 + 46.0 * yc5 + 23.0 * yc6 + 8.0 * yc7 - 8.0 * yc8) + xc6 * (-12.0 + 10.0 * yc + 25.0 * yc2 - 4.0 * yc3 - 26.0 * yc4 + 56.0 * yc5 - 33.0 * yc6 - 6.0 * yc7 + 6.0 * yc8));
            const complex<double> num6 = (yc6 - 5.0 * yc8 - 2.0 * xc4 * yc4 * (5.0 - 18.0 * yc2 + yc4) - 2.0 * xc2 * yc4 * (2.0 - 7.0 * yc2 + 5.0 * yc4) + 2.0 * xc6 * yc2 * (10.0 - 30.0 * yc2 + 3.0 * yc4 + yc6) + xc8 * (-4.0 + 4.0 * yc2 + 26.0 * yc4 - 17.0 * yc6 + 3.0 * yc8));
            const complex<double> num7 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc) * (yc2 - 17.0 * yc4 - 2.0 * xc2 * (2.0 - 19.0 * yc2 + yc4) + xc4 * (-12.0 - 7.0 * yc2 + 3.0 * yc4));
            const complex<double> num8 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc) * (yc2 + 7.0 * yc4 - 2.0 * xc2 * (2.0 + 5.0 * yc2 + yc4) + xc4 * (12.0 - 7.0 * yc2 + 3.0 * yc4));
            const complex<double> num9 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc) * (yc2 + 3.0 * yc4 - 2.0 * xc2 * (2.0 + yc2 + yc4) + xc4 * (8.0 - 7.0 * yc2 + 3.0 * yc4));
            const complex<double> num10 = (-1.0 + xc) * (1.0 + xc) * (-1.0 + yc) * (1.0 + yc);
            const complex<double> num11 = power_of<2>(-1.0 + xc) * power_of<2>(1.0 + xc) * power_of<2>(-1.0 + yc) * power_of<2>(1.0 + yc) * (yc2 + xc2 * (-4.0 + 3.0 * yc2));

            const complex<double> denom1 = (9.0 * power_of<2>(xc - yc) * yc3 * power_of<2>(xc + yc) * (yc + xc2 * (2.0 + yc)));
            const complex<double> denom2 = (9.0 * power_of<2>(xc - yc) * yc3 * power_of<2>(xc + yc) * (xc2 * (-2.0 + yc) + yc) * (yc + xc2 * (2.0 + yc)));
            const complex<double> denom3 = (9.0 * power_of<2>(xc - yc) * power_of<2>(xc + yc) * (xc2 * (-2.0 + yc) + yc) * (yc + xc2 * (2.0 + yc)));
            const complex<double> denom4 = (9.0 * power_of<2>(xc - yc) * yc3 * power_of<2>(xc + yc) * (xc2 * (-2.0 + yc) + yc));
            const complex<double> denom5 = (9.0 * power_of<2>(xc - yc) * yc3 * power_of<2>(xc + yc) * (xc2 * (-2.0 + yc) + yc) * (yc + xc2 * (2.0 + yc)));
            const complex<double> denom6 = (9.0 * power_of<3>(xc - yc) * power_of<3>(xc + yc));
            const complex<double> denom7 = (9.0 * (xc - yc) * (xc + yc));
            const complex<double> denom8 = (9.0 * power_of<2>(xc - yc) * yc3 * power_of<2>(xc + yc));
            const complex<double> denom9 = (9.0 * power_of<2>(xc - yc) * yc2 * power_of<2>(xc + yc));

            // Polylogarithms in xc and yc

            const complex<double> ln1pxc = log(1.0 + xc);
            const complex<double> ln1mxc = log(1.0 - xc);
            const complex<double> ln1pyc = log(1.0 + yc);
            const complex<double> ln1myc = log(1.0 - yc);
            const complex<double> ln1pxchalf = log((1.0 + xc) / 2.0); // MyLog[(1 + xc)/2]
            const complex<double> ln1mxchalf = log((1.0 - xc) / 2.0); // MyLog[(1 - xc)/2]
            const complex<double> ln1pychalf = log((1.0 + yc) / 2.0); // MyLog[(1 + yc)/2]
            const complex<double> ln1mychalf = log((1.0 - yc) / 2.0); // MyLog[(1 - yc)/2]

            const complex<double> lnr_xc1 = log(xc / (1.0 + xc));
            const complex<double> lnr_xc2 = log(xc / (-1.0 + xc));

            // Heaviside theta related functions
            const double t11myc1mxc = T(1.0, 1.0 - yc, 1.0 - xc); // MyT[1, 1 - yc, 1 - xc]
            const double t11pyc1mxc = T(1.0, 1.0 + yc, 1.0 - xc); // MyT[1, 1 + yc, 1 - xc]
            const double t11myc1pxc = T(1.0, 1.0 - yc, 1.0 + xc); // MyT[1, 1 - yc, 1 + xc]
            const double t11pyc1pxc = T(1.0, 1.0 + yc, 1.0 + xc); // MyT[1, 1 + yc, 1 + xc]

            const complex<double> result = -(2.0 * lognum4) / (3.0 * (xc - yc) * yc2 * (xc + yc)) + (3.0 * num11 * pisqu * ln4) / (2.0 * denom6) - (3.0 * num9 * pisqu * ln4) / denom6 + ((-576.0 * num10) / denom7 - (36.0 * num11) / denom6 - (36.0 * num7) / denom6 + (216.0 * num9) / denom6) * li3half + (72.0 * num11 * trilog(1.0 - w3inv)) / denom6 - (36.0 * num11 * trilog(1.0 + w3inv)) / denom6 - (18.0 * num11 * trilog(-1.0 / (-1.0 - w3))) / denom6 + (36.0 * num11 * trilog(1.0 / (1.0 - w3))) / denom6 + (36.0 * num11 * trilog(-1.0 / (-1.0 + w3))) / denom6 + (36.0 * num11 * trilog(w3inv)) / denom6 - (36.0 * num11 * trilog(-w3)) / denom6
                + (36.0 * num11 * trilog(w3)) / denom6 - (18.0 * num11 * trilog(1.0 / (1.0 + w3))) / denom6 - (36.0 * num11 * trilog((1.0 + w3) / (1.0 - w3))) / denom6 - (36.0 * num11 * trilog((1.0 + w3) / (2.0 * w3))) / denom6 + ((288.0 * num10) / denom7 - (144.0 * num9) / denom6) * trilog(1.0 - xcinv) + ((288.0 * num10) / denom7 - (144.0 * num9) / denom6) * trilog(1.0 + xcinv) + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(-1.0 / (-1.0 - xc)) + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(1.0 / (1.0 - xc)) - (72.0 * num9 * trilog(1.0 - xc)) / denom6
                + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(-1.0 / (-1.0 + xc)) + ((288.0 * num10) / denom7 - (144.0 * num9) / denom6) * trilog(-xcinv) + ((288.0 * num10) / denom7 - (144.0 * num9) / denom6) * trilog(xcinv) + ((-288.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((-0.5) * ((1.0 - xc) * xcinv)) - (72.0 * num9 * trilog(-xc)) / denom6 - (72.0 * num9 * trilog(xc)) / denom6 + (18.0 * num11 * trilog(((-1.0 - w3) * xc) / (w3 * (-1.0 - xc)))) / denom6 - (18.0 * num11 * trilog(-(((-1.0 + w3) * xc) / (w3 * (-1.0 - xc))))) / denom6
                - (18.0 * num11 * trilog(((1.0 - w3) * xc) / (w3 * (1.0 - xc)))) / denom6 + (18.0 * num11 * trilog(-(((1.0 + w3) * xc) / (w3 * (1.0 - xc))))) / denom6 + (18.0 * num11 * trilog(((-1.0 - w3) * xc) / (-w3 - xc))) / denom6 + (18.0 * num11 * trilog(-(((1.0 + w3) * xc) / (-w3 - xc)))) / denom6 - (18.0 * num11 * trilog(-(((1.0 - w3) * xc) / (w3 - xc)))) / denom6 - (18.0 * num11 * trilog(((-1.0 + w3) * xc) / (w3 - xc))) / denom6 - (72.0 * num9 * trilog(xc / (-1.0 + xc))) / denom6 + (72.0 * num9 * trilog((2.0 * xc) / (-1.0 + xc))) / denom6
                + (18.0 * num11 * trilog(-(((-1.0 - w3) * xc) / (w3 * (-1.0 + xc))))) / denom6 - (18.0 * num11 * trilog(((-1.0 + w3) * xc) / (w3 * (-1.0 + xc)))) / denom6 + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(1.0 / (1.0 + xc)) + ((-288.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((1.0 - xc) / (1.0 + xc)) - (72.0 * num9 * trilog(xc / (1.0 + xc))) / denom6 + (72.0 * num9 * trilog((2.0 * xc) / (1.0 + xc))) / denom6 - (18.0 * num11 * trilog(-(((1.0 - w3) * xc) / (w3 * (1.0 + xc))))) / denom6 + (18.0 * num11 * trilog(((1.0 + w3) * xc) / (w3 * (1.0 + xc)))) / denom6
                - (72.0 * num9 * trilog(1.0 + xc)) / denom6 + ((-288.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((1.0 + xc) / (1.0 - xc)) + ((-288.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((1.0 + xc) / (2.0 * xc)) + (18.0 * num11 * trilog(-(((-1.0 - w3) * xc) / (-w3 + xc)))) / denom6 + (18.0 * num11 * trilog(((1.0 + w3) * xc) / (-w3 + xc))) / denom6 - (18.0 * num11 * trilog(((1.0 - w3) * xc) / (w3 + xc))) / denom6 - (18.0 * num11 * trilog(-(((-1.0 + w3) * xc) / (w3 + xc)))) / denom6 - (72.0 * num9 * trilog((-1.0 - yc) / (-1.0 - xc))) / denom6
                - (72.0 * num9 * trilog((-1.0 - yc) / (-1.0 + xc))) / denom6 + (18.0 * num11 * trilog(((-1.0 - w3) * (-1.0 - yc)) / ((1.0 - w3) * (1.0 - yc)))) / denom6 + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(((-1.0 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (1.0 - yc))) + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(((-1.0 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (1.0 - yc))) + ((288.0 * num10) / denom7 + (18.0 * num11) / denom6 + (54.0 * num7) / denom6 + (72.0 * num8) / denom6 - (144.0 * num9) / denom6) * trilog((1.0 - yc) / 2.0) + ((-18.0 * num11) / denom6 + (36.0 * num8) / denom6) * trilog(1.0 - yc)
                - (72.0 * num9 * trilog((1.0 - yc) / (1.0 - xc))) / denom6 - (72.0 * num9 * trilog((1.0 - yc) / (1.0 + xc))) / denom6 + (18.0 * num11 * trilog(((1.0 + w3) * (1.0 - yc)) / ((-1.0 + w3) * (-1.0 - yc)))) / denom6 + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(((1.0 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-1.0 - yc))) + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(((1.0 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-1.0 - yc))) + (18.0 * num11 * trilog((-1.0 - w3) / (-w3 - yc))) / denom6 - (36.0 * num11 * trilog((1.0 - w3) / (-w3 - yc))) / denom6
                - (36.0 * num11 * trilog((-1.0 - yc) / (-w3 - yc))) / denom6 + (18.0 * num11 * trilog((-0.5) * (((-1.0 - w3) * (-1.0 - yc)) / (-w3 - yc)))) / denom6 + (18.0 * num11 * trilog((1.0 - yc) / (-w3 - yc))) / denom6 - (18.0 * num11 * trilog(-((w3 * (1.0 - yc)) / (-w3 - yc)))) / denom6 - (36.0 * num11 * trilog((-1.0 + w3) / (w3 - yc))) / denom6 + (18.0 * num11 * trilog((1.0 + w3) / (w3 - yc))) / denom6 + (18.0 * num11 * trilog((-1.0 - yc) / (w3 - yc))) / denom6 - (36.0 * num11 * trilog((1.0 - yc) / (w3 - yc))) / denom6
                + (18.0 * num11 * trilog((w3 * (1.0 - yc)) / (w3 - yc))) / denom6 + (18.0 * num11 * trilog(((1.0 + w3) * (1.0 - yc)) / (2.0 * (w3 - yc)))) / denom6 + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((-1.0 - xc) / (-xc - yc)) + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((1.0 - xc) / (-xc - yc)) + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((-1.0 - yc) / (-xc - yc)) + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog((-0.5) * (((-1.0 - xc) * (-1.0 - yc)) / (-xc - yc))) + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((1.0 - yc) / (-xc - yc))
                + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(((1.0 - xc) * (1.0 - yc)) / (2.0 * (-xc - yc))) + (18.0 * num11 * trilog(((1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (-1.0 - yc)))) / denom6 - (18.0 * num11 * trilog(((1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (-1.0 - yc)))) / denom6 - (18.0 * num11 * trilog(((-1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (1.0 - yc)))) / denom6 + (18.0 * num11 * trilog(((-1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (1.0 - yc)))) / denom6 - (18.0 * num11 * trilog(((-1.0 - w3) * (-xc - yc)) / ((-1.0 - xc) * (-w3 - yc)))) / denom6
                + (18.0 * num11 * trilog(((1.0 - w3) * (-xc - yc)) / ((1.0 - xc) * (-w3 - yc)))) / denom6 + (18.0 * num11 * trilog(((-1.0 + w3) * (-xc - yc)) / ((-1.0 - xc) * (w3 - yc)))) / denom6 - (18.0 * num11 * trilog(((1.0 + w3) * (-xc - yc)) / ((1.0 - xc) * (w3 - yc)))) / denom6 + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((-1.0 + xc) / (xc - yc)) + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((1.0 + xc) / (xc - yc)) + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((-1.0 - yc) / (xc - yc))
                + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog((-0.5) * (((-1.0 + xc) * (-1.0 - yc)) / (xc - yc))) + ((-144.0 * num10) / denom7 + (72.0 * num9) / denom6) * trilog((1.0 - yc) / (xc - yc)) + ((144.0 * num10) / denom7 - (72.0 * num9) / denom6) * trilog(((1.0 + xc) * (1.0 - yc)) / (2.0 * (xc - yc))) + (18.0 * num11 * trilog(((1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (-1.0 - yc)))) / denom6 - (18.0 * num11 * trilog(((1.0 + w3) * (xc - yc)) / ((w3 - xc) * (-1.0 - yc)))) / denom6 - (18.0 * num11 * trilog(((-1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (1.0 - yc)))) / denom6
                + (18.0 * num11 * trilog(((-1.0 + w3) * (xc - yc)) / ((w3 - xc) * (1.0 - yc)))) / denom6 - (18.0 * num11 * trilog(((-1.0 - w3) * (xc - yc)) / ((-1.0 + xc) * (-w3 - yc)))) / denom6 + (18.0 * num11 * trilog(((1.0 - w3) * (xc - yc)) / ((1.0 + xc) * (-w3 - yc)))) / denom6 + (18.0 * num11 * trilog(((-1.0 + w3) * (xc - yc)) / ((-1.0 + xc) * (w3 - yc)))) / denom6 - (18.0 * num11 * trilog(((1.0 + w3) * (xc - yc)) / ((1.0 + xc) * (w3 - yc)))) / denom6 + (18.0 * num11 * trilog((-1.0 + yc) / (-1.0 - w3))) / denom6 - (36.0 * num11 * trilog((-1.0 + yc) / (-1.0 + w3))) / denom6
                + ((-144.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((-1.0 + yc) / (-1.0 - xc)) + ((-144.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((-1.0 + yc) / (-1.0 + xc)) + ((-18.0 * num11) / denom6 + (36.0 * num8) / denom6) * trilog(-yc) + ((-18.0 * num11) / denom6 + (36.0 * num8) / denom6) * trilog(yc) + ((-18.0 * num11) / denom6 + (36.0 * num8) / denom6) * trilog(yc / (-1.0 + yc)) + ((18.0 * num11) / denom6 - (72.0 * num8) / denom6) * trilog((2.0 * yc) / (-1.0 + yc)) + ((-18.0 * num11) / denom6 + (36.0 * num8) / denom6) * trilog(yc / (1.0 + yc)) + ((18.0 * num11) / denom6 - (72.0 * num8) / denom6) * trilog((2.0 * yc) / (1.0 + yc))
                + ((288.0 * num10) / denom7 + (18.0 * num11) / denom6 + (54.0 * num7) / denom6 + (72.0 * num8) / denom6 - (144.0 * num9) / denom6) * trilog((1.0 + yc) / 2.0) + ((-18.0 * num11) / denom6 + (36.0 * num8) / denom6) * trilog(1.0 + yc) - (36.0 * num11 * trilog((1.0 + yc) / (1.0 - w3))) / denom6 + (18.0 * num11 * trilog((1.0 + yc) / (1.0 + w3))) / denom6 + ((-144.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((1.0 + yc) / (1.0 - xc)) + ((-144.0 * num10) / denom7 + (144.0 * num9) / denom6) * trilog((1.0 + yc) / (1.0 + xc)) - (18.0 * num11 * trilog((w3 * (-1.0 - yc)) / (-w3 + yc))) / denom6
                + (18.0 * num11 * trilog(-((w3 * (-1.0 - yc)) / (w3 + yc)))) / denom6 - (18.0 * num11 * dilog(1.0 / (1.0 - w3)) * lnhalf) / denom6 - (18.0 * num11 * dilog(-1.0 / (-1.0 + w3)) * lnhalf) / denom6 - (36.0 * num11 * dilog(w3inv) * lnhalf) / denom6 + (36.0 * num11 * dilog((1.0 + w3) / (1.0 - w3)) * lnhalf) / denom6 + (36.0 * num11 * dilog((1.0 + w3) / (2.0 * w3)) * lnhalf) / denom6 + dilog((-0.5) * ((1.0 - xc) * xcinv)) * ((288.0 * num10 * lnhalf) / denom7 - (144.0 * num9 * lnhalf) / denom6)
                + dilog((1.0 - xc) / (1.0 + xc)) * ((288.0 * num10 * lnhalf) / denom7 - (144.0 * num9 * lnhalf) / denom6) + dilog((1.0 + xc) / (1.0 - xc)) * ((288.0 * num10 * lnhalf) / denom7 - (144.0 * num9 * lnhalf) / denom6) + dilog((1.0 + xc) / (2.0 * xc)) * ((288.0 * num10 * lnhalf) / denom7 - (144.0 * num9 * lnhalf) / denom6) + dilog(-xcinv) * ((-288.0 * num10 * lnhalf) / denom7 + (144.0 * num9 * lnhalf) / denom6) + dilog(xcinv) * ((-288.0 * num10 * lnhalf) / denom7 + (144.0 * num9 * lnhalf) / denom6) + (6.0 * num7 * pisqu * ln2) / denom6 + (12.0 * num9 * pisqu * ln2) / denom6
                - (6.0 * num11 * power_of<3>(ln2)) / denom6 - (12.0 * num7 * power_of<3>(ln2)) / denom6 - (12.0 * num9 * power_of<3>(ln2)) / denom6 + 144.0 * lnmuhat + (64.0 * myi) * M_PI * lnmuhat - (64.0 * lnmuhat) / yc2 + 128.0 * ln2 * lnmuhat + 64.0 * power_of<2>(lnmuhat) - (18.0 * num11 * power_of<2>(lnhalf) * log(1.0 - w3inv)) / denom6 - (3.0 * num11 * power_of<3>(log((2.0 * (-1.0 - w3)) / (1.0 - w3)))) / denom6 + (6.0 * num11 * power_of<3>(log(-2.0 / w3))) / denom6 + (18.0 * num11 * power_of<2>(lnhalf) * log((-1.0 + w3) / (2.0 * w3))) / denom6 + (18.0 * num11 * power_of<2>(lnhalf) * log((-2.0 * w3) / (1.0 - w3))) / denom6
                - (9.0 * num11 * power_of<2>(lnhalf) * log(-(w3 / (1.0 - w3)))) / denom6 - (9.0 * num11 * power_of<2>(lnhalf) * log(w3 / (-1.0 + w3))) / denom6 - (3.0 * num11 * power_of<3>(log((-2.0 * (1.0 + w3)) / (1.0 - w3)))) / denom6 - (144.0 * num10 * power_of<2>(lnhalf) * log(1.0 - xcinv)) / denom7 + (72.0 * num9 * power_of<2>(lnhalf) * log(1.0 - xcinv)) / denom6 - (144.0 * num10 * power_of<2>(lnhalf) * log(1.0 + xcinv)) / denom7 + (72.0 * num9 * power_of<2>(lnhalf) * log(1.0 + xcinv)) / denom6 + (3.0 * num11 * power_of<3>(log(-((-1.0 - xc) / w3)))) / denom6 - (3.0 * num11 * power_of<3>(log((-1.0 - xc) / w3))) / denom6
                - (24.0 * num10 * power_of<3>(log((2.0 * (-1.0 - xc)) / (1.0 - xc)))) / denom7 + (12.0 * num9 * power_of<3>(log((2.0 * (-1.0 - xc)) / (1.0 - xc)))) / denom6 + (72.0 * lognum2 * ln1mxc) / denom9 + (3.0 * num9 * pisqu * ln1mxc) / denom6 + (72.0 * num9 * dilog(1.0 - xc) * ln1mxc) / denom6 + (72.0 * num9 * dilog(-xc) * ln1mxc) / denom6 - (36.0 * num3 * ln2 * ln1mxc) / denom3 - (18.0 * num9 * ln2squ * ln1mxc) / denom6 + (72.0 * num9 * (pisqu / 12.0 - ln2squ / 2.0) * ln1mxc) / denom6 - 64.0 * lnmuhat * ln1mxc + (18.0 * num4 * power_of<2>(ln1mxc)) / denom3 + (36.0 * num9 * ln2 * power_of<2>(ln1mxc)) / denom6
                - (6.0 * num9 * power_of<3>(ln1mxc)) / denom6 - (3.0 * num11 * power_of<3>(log(-((1.0 - xc) / w3)))) / denom6 + (3.0 * num11 * power_of<3>(log((1.0 - xc) / w3))) / denom6 + (3.0 * num11 * power_of<3>(log(((-1.0 - w3) * (1.0 - xc)) / (-w3 - xc)))) / denom6 - (3.0 * num11 * power_of<3>(log(((-1.0 + w3) * (1.0 - xc)) / (w3 - xc)))) / denom6 + (3.0 * num11 * power_of<3>(log(-((-1.0 + xc) / w3)))) / denom6 - (3.0 * num11 * power_of<3>(log((-1.0 + xc) / w3))) / denom6 + (3.0 * num11 * power_of<3>(log(((1.0 + w3) * (-1.0 + xc)) / (-w3 - xc)))) / denom6 - (3.0 * num11 * power_of<3>(log(((1.0 - w3) * (-1.0 + xc)) / (w3 - xc)))) / denom6
                + (48.0 * num10 * power_of<3>(log(-2.0 * xcinv))) / denom7 - (24.0 * num9 * power_of<3>(log(-2.0 * xcinv))) / denom6 + (48.0 * num10 * power_of<3>(log(2.0 * xcinv))) / denom7 - (24.0 * num9 * power_of<3>(log(2.0 * xcinv))) / denom6 + (144.0 * num10 * power_of<2>(lnhalf) * log((-0.5) * ((-1.0 - xc) * xcinv))) / denom7 - (72.0 * num9 * power_of<2>(lnhalf) * log((-0.5) * ((-1.0 - xc) * xcinv))) / denom6 + (144.0 * num10 * power_of<2>(lnhalf) * log((-1.0 + xc) / (2.0 * xc))) / denom7 - (72.0 * num9 * power_of<2>(lnhalf) * log((-1.0 + xc) / (2.0 * xc))) / denom6 + (16.0 * term1 * log(xc)) / yc2 + 128.0 * lnmuhat * log(xc) - 64.0 * ln1mxc * log(xc) + (36.0 * num9 * power_of<2>(ln1mxc) * log(xc)) / denom6 + 64.0 * power_of<2>(log(xc))
                - (18.0 * num11 * dilog(((-1.0 - w3) * xc) / (w3 * (-1.0 - xc))) * log(-(xc / (-1.0 - xc)))) / denom6 + (18.0 * num11 * dilog(-(((-1.0 + w3) * xc) / (w3 * (-1.0 - xc)))) * log(-(xc / (-1.0 - xc)))) / denom6 - (18.0 * num11 * dilog(-(((-1.0 - w3) * xc) / (-w3 + xc))) * log(-(xc / (-1.0 - xc)))) / denom6 + (18.0 * num11 * dilog(-(((-1.0 + w3) * xc) / (w3 + xc))) * log(-(xc / (-1.0 - xc)))) / denom6 - (72.0 * num10 * power_of<2>(lnhalf) * log(-(xc / (-1.0 - xc)))) / denom7 + (36.0 * num9 * power_of<2>(lnhalf) * log(-(xc / (-1.0 - xc)))) / denom6
                + (9.0 * num11 * log((-w3 - xc) / (w3 * (-1.0 - xc))) * power_of<2>(log(-(xc / (-1.0 - xc))))) / denom6 - (9.0 * num11 * log(-((w3 - xc) / (w3 * (-1.0 - xc)))) * power_of<2>(log(-(xc / (-1.0 - xc))))) / denom6 + (144.0 * num10 * power_of<2>(lnhalf) * log((-2.0 * xc) / (1.0 - xc))) / denom7 - (72.0 * num9 * power_of<2>(lnhalf) * log((-2.0 * xc) / (1.0 - xc))) / denom6 + (18.0 * num11 * dilog(((1.0 - w3) * xc) / (w3 * (1.0 - xc))) * log(-(xc / (1.0 - xc)))) / denom6 - (18.0 * num11 * dilog(-(((1.0 + w3) * xc) / (w3 * (1.0 - xc)))) * log(-(xc / (1.0 - xc)))) / denom6
                - (18.0 * num11 * dilog(-(((1.0 + w3) * xc) / (-w3 - xc))) * log(-(xc / (1.0 - xc)))) / denom6 + (18.0 * num11 * dilog(-(((1.0 - w3) * xc) / (w3 - xc))) * log(-(xc / (1.0 - xc)))) / denom6 - (72.0 * num10 * power_of<2>(lnhalf) * log(-(xc / (1.0 - xc)))) / denom7 + (36.0 * num9 * power_of<2>(lnhalf) * log(-(xc / (1.0 - xc)))) / denom6 - (9.0 * num11 * log((w3 * (-1.0 + xc)) / (-w3 - xc)) * power_of<2>(log(-(xc / (1.0 - xc))))) / denom6 + (9.0 * num11 * log(-((w3 * (-1.0 + xc)) / (w3 - xc))) * power_of<2>(log(-(xc / (1.0 - xc))))) / denom6
                - (18.0 * num11 * dilog(((-1.0 - w3) * xc) / (-w3 - xc)) * lnr_xc2) / denom6 + (18.0 * num11 * dilog(((-1.0 + w3) * xc) / (w3 - xc)) * lnr_xc2) / denom6 - (18.0 * num11 * dilog(-(((-1.0 - w3) * xc) / (w3 * (-1.0 + xc)))) * lnr_xc2) / denom6 + (18.0 * num11 * dilog(((-1.0 + w3) * xc) / (w3 * (-1.0 + xc))) * lnr_xc2) / denom6 - (72.0 * num10 * power_of<2>(lnhalf) * lnr_xc2) / denom7 + (36.0 * num9 * power_of<2>(lnhalf) * lnr_xc2) / denom6

                + (9.0 * num11 * log(-(w3 / (-w3 - xc))) * power_of<2>(lnr_xc2)) / denom6 - (9.0 * num11 * log(-((w3 * (1.0 - xc)) / (-w3 - xc))) * power_of<2>(lnr_xc2)) / denom6 - (9.0 * num11 * log(w3 / (w3 - xc)) * power_of<2>(lnr_xc2)) / denom6 + (9.0 * num11 * log((w3 * (1.0 - xc)) / (w3 - xc)) * power_of<2>(lnr_xc2)) / denom6 - (24.0 * num10 * power_of<3>(log((-2.0 * (1.0 - xc)) / (1.0 + xc)))) / denom7 + (12.0 * num9 * power_of<3>(log((-2.0 * (1.0 - xc)) / (1.0 + xc)))) / denom6 - (24.0 * num10 * power_of<3>(log((2.0 * (-1.0 + xc)) / (1.0 + xc)))) / denom7 + (12.0 * num9 * power_of<3>(log((2.0 * (-1.0 + xc)) / (1.0 + xc)))) / denom6
                + (18.0 * num11 * dilog(-(((1.0 - w3) * xc) / (w3 * (1.0 + xc)))) * lnr_xc1) / denom6 - (18.0 * num11 * dilog(((1.0 + w3) * xc) / (w3 * (1.0 + xc))) * lnr_xc1) / denom6 - (18.0 * num11 * dilog(((1.0 + w3) * xc) / (-w3 + xc)) * lnr_xc1) / denom6 + (18.0 * num11 * dilog(((1.0 - w3) * xc) / (w3 + xc)) * lnr_xc1) / denom6 - (72.0 * num10 * power_of<2>(lnhalf) * lnr_xc1) / denom7 + (36.0 * num9 * power_of<2>(lnhalf) * lnr_xc1) / denom6 - (9.0 * num11 * log(-(w3 / (-w3 - xc))) * power_of<2>(lnr_xc1)) / denom6
                + (9.0 * num11 * log(w3 / (w3 - xc)) * power_of<2>(lnr_xc1)) / denom6 + (9.0 * num11 * log(-((-w3 - xc) / (w3 * (1.0 + xc)))) * power_of<2>(lnr_xc1)) / denom6 - (9.0 * num11 * log((w3 - xc) / (w3 * (1.0 + xc))) * power_of<2>(lnr_xc1)) / denom6 + dilog(-(xc / w3)) * ((-18.0 * num11 * log(-(xc / (-1.0 - xc)))) / denom6 + (18.0 * num11 * log(-(xc / (1.0 - xc)))) / denom6 + (18.0 * num11 * lnr_xc2) / denom6 - (18.0 * num11 * lnr_xc1) / denom6)
                + dilog(xc / w3) * ((18.0 * num11 * log(-(xc / (-1.0 - xc)))) / denom6 - (18.0 * num11 * log(-(xc / (1.0 - xc)))) / denom6 - (18.0 * num11 * lnr_xc2) / denom6 + (18.0 * num11 * lnr_xc1) / denom6) + (144.0 * num10 * power_of<2>(lnhalf) * log((2.0 * xc) / (1.0 + xc))) / denom7 - (72.0 * num9 * power_of<2>(lnhalf) * log((2.0 * xc) / (1.0 + xc))) / denom6 - (54.0 * num9 * power_of<2>(ln1mxc) * ln1pxchalf) / denom6 + (72.0 * lognum3 * ln1pxc) / denom9 + (3.0 * num9 * pisqu * ln1pxc) / denom6 + (72.0 * num9 * dilog(xc) * ln1pxc) / denom6 + (72.0 * num9 * dilog(1.0 + xc) * ln1pxc) / denom6
                - (36.0 * num3 * ln2 * ln1pxc) / denom3 - (18.0 * num9 * ln2squ * ln1pxc) / denom6 + (72.0 * num9 * (pisqu / 12.0 - ln2squ / 2.0) * ln1pxc) / denom6 - 64.0 * lnmuhat * ln1pxc + (72.0 * num9 * ln2 * ln1mxc * ln1pxc) / denom6 - 64.0 * log(xc) * ln1pxc + (18.0 * num4 * power_of<2>(ln1pxc)) / denom3 + (36.0 * num9 * ln2 * power_of<2>(ln1pxc)) / denom6 - (54.0 * num9 * ln1mxchalf * power_of<2>(ln1pxc)) / denom6 + (36.0 * num9 * log(-xc) * power_of<2>(ln1pxc)) / denom6 - (6.0 * num9 * power_of<3>(ln1pxc)) / denom6
                + dilog(-(xc / (w3 - xc))) * ((18.0 * num11 * ln1mxc) / denom6 + (18.0 * num11 * log(-(xc / (-1.0 - xc)))) / denom6 - (18.0 * num11 * log(-(xc / (1.0 - xc)))) / denom6 - (18.0 * num11 * ln1pxc) / denom6) + dilog(xc / (-w3 + xc)) * ((18.0 * num11 * ln1mxc) / denom6 - (18.0 * num11 * lnr_xc2) / denom6 + (18.0 * num11 * lnr_xc1) / denom6 - (18.0 * num11 * ln1pxc) / denom6)
                + dilog(-(xc / (-w3 - xc))) * ((-18.0 * num11 * ln1mxc) / denom6 - (18.0 * num11 * log(-(xc / (-1.0 - xc)))) / denom6 + (18.0 * num11 * log(-(xc / (1.0 - xc)))) / denom6 + (18.0 * num11 * ln1pxc) / denom6) + dilog(xc / (w3 + xc)) * ((-18.0 * num11 * ln1mxc) / denom6 + (18.0 * num11 * lnr_xc2) / denom6 - (18.0 * num11 * lnr_xc1) / denom6 + (18.0 * num11 * ln1pxc) / denom6) + dilog(-(xc / (-1.0 - xc))) * ((36.0 * num9 * ln1mxc) / denom6 - (36.0 * num9 * ln1pxc) / denom6)
                + dilog(xc / (1.0 + xc)) * ((36.0 * num9 * ln1mxc) / denom6 - (36.0 * num9 * ln1pxc) / denom6) + dilog((-xc + yc) / (1.0 - xc)) * ((36.0 * num9 * ln1mxc) / denom6 - (36.0 * num9 * ln1pxc) / denom6) + dilog((xc + yc) / (-1.0 + xc)) * ((36.0 * num9 * ln1mxc) / denom6 - (36.0 * num9 * ln1pxc) / denom6) + dilog(-(xc / (1.0 - xc))) * ((-36.0 * num9 * ln1mxc) / denom6 + (36.0 * num9 * ln1pxc) / denom6) + dilog(xc / (-1.0 + xc)) * ((-36.0 * num9 * ln1mxc) / denom6 + (36.0 * num9 * ln1pxc) / denom6)
                + dilog((-xc + yc) / (-1.0 - xc)) * ((-36.0 * num9 * ln1mxc) / denom6 + (36.0 * num9 * ln1pxc) / denom6) + dilog((xc + yc) / (1.0 + xc)) * ((-36.0 * num9 * ln1mxc) / denom6 + (36.0 * num9 * ln1pxc) / denom6) - (3.0 * num9 * ln1pxc * (pisqu - 6.0 * ln2squ - 12.0 * ln1mxc * ln1pxchalf + ln64 * ln1pxc)) / denom6 - (3.0 * num9 * ln1mxc * (pisqu - 6.0 * ln2squ + ln64 * ln1mxc - 12.0 * ln1mxchalf * ln1pxc)) / denom6 - (3.0 * num11 * power_of<3>(log(-((1.0 + xc) / w3)))) / denom6 + (3.0 * num11 * power_of<3>(log((1.0 + xc) / w3))) / denom6
                - (24.0 * num10 * power_of<3>(log((-2.0 * (1.0 + xc)) / (1.0 - xc)))) / denom7 + (12.0 * num9 * power_of<3>(log((-2.0 * (1.0 + xc)) / (1.0 - xc)))) / denom6 + (9.0 * num11 * power_of<2>(log(-(xc / (-1.0 - xc)))) * log(-(w3 / (-w3 + xc)))) / denom6 - (9.0 * num11 * power_of<2>(log(-(xc / (1.0 - xc)))) * log(-(w3 / (-w3 + xc)))) / denom6 - (9.0 * num11 * power_of<2>(lnr_xc1) * log((w3 * (-1.0 - xc)) / (-w3 + xc))) / denom6 + (3.0 * num11 * power_of<3>(log(((1.0 + w3) * (-1.0 - xc)) / (-w3 + xc)))) / denom6 + (3.0 * num11 * power_of<3>(log(((-1.0 - w3) * (1.0 + xc)) / (-w3 + xc)))) / denom6
                - (9.0 * num11 * power_of<2>(log(-(xc / (-1.0 - xc)))) * log(-((w3 * (1.0 + xc)) / (-w3 + xc)))) / denom6 + (9.0 * num11 * power_of<2>(log(-(xc / (1.0 - xc)))) * log(-((-w3 + xc) / (w3 * (1.0 - xc))))) / denom6 + (9.0 * num11 * power_of<2>(lnr_xc2) * log((-w3 + xc) / (w3 * (-1.0 + xc)))) / denom6 - (9.0 * num11 * power_of<2>(log(-(xc / (-1.0 - xc)))) * log(w3 / (w3 + xc))) / denom6 + (9.0 * num11 * power_of<2>(log(-(xc / (1.0 - xc)))) * log(w3 / (w3 + xc))) / denom6 - (3.0 * num11 * power_of<3>(log(((1.0 - w3) * (-1.0 - xc)) / (w3 + xc)))) / denom6
                + (9.0 * num11 * power_of<2>(lnr_xc1) * log(-((w3 * (-1.0 - xc)) / (w3 + xc)))) / denom6 - (3.0 * num11 * power_of<3>(log(((-1.0 + w3) * (1.0 + xc)) / (w3 + xc)))) / denom6 + (9.0 * num11 * power_of<2>(log(-(xc / (-1.0 - xc)))) * log((w3 * (1.0 + xc)) / (w3 + xc))) / denom6 - (9.0 * num11 * power_of<2>(log(-(xc / (1.0 - xc)))) * log((w3 + xc) / (w3 * (1.0 - xc)))) / denom6 - (9.0 * num11 * power_of<2>(lnr_xc2) * log(-((w3 + xc) / (w3 * (-1.0 + xc))))) / denom6 + (9.0 * num11 * power_of<2>(log(-(xc / (-1.0 - xc)))) * log(1.0 - xc / w3)) / denom6
                - (9.0 * num11 * power_of<2>(log(-(xc / (1.0 - xc)))) * log(1.0 - xc / w3)) / denom6 - (9.0 * num11 * power_of<2>(lnr_xc2) * log(1.0 - xc / w3)) / denom6 + (9.0 * num11 * power_of<2>(lnr_xc1) * log(1.0 - xc / w3)) / denom6 - (9.0 * num11 * power_of<2>(log(-(xc / (-1.0 - xc)))) * log(1.0 + xc / w3)) / denom6 + (9.0 * num11 * power_of<2>(log(-(xc / (1.0 - xc)))) * log(1.0 + xc / w3)) / denom6 + (9.0 * num11 * power_of<2>(lnr_xc2) * log(1.0 + xc / w3)) / denom6 - (9.0 * num11 * power_of<2>(lnr_xc1) * log(1.0 + xc / w3)) / denom6 + (3.0 * num11 * power_of<3>(log((-2.0 * (1.0 + w3)) / ((-1.0 + w3) * (-1.0 - yc))))) / denom6
                + (24.0 * num10 * power_of<3>(log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc))))) / denom7 - (12.0 * num9 * power_of<3>(log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc))))) / denom6 + (3.0 * num11 * power_of<3>(log(((1.0 - w3) * (-1.0 - xc)) / ((-w3 - xc) * (-1.0 - yc))))) / denom6 - (3.0 * num11 * power_of<3>(log(((1.0 + w3) * (-1.0 - xc)) / ((w3 - xc) * (-1.0 - yc))))) / denom6 + (24.0 * num10 * power_of<3>(log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc))))) / denom7 - (12.0 * num9 * power_of<3>(log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc))))) / denom6 + (3.0 * num11 * power_of<3>(log(((1.0 - w3) * (-1.0 + xc)) / ((-w3 + xc) * (-1.0 - yc))))) / denom6
                - (3.0 * num11 * power_of<3>(log(((1.0 + w3) * (-1.0 + xc)) / ((w3 + xc) * (-1.0 - yc))))) / denom6 + (3.0 * num11 * power_of<3>(log((2.0 * (-1.0 - w3)) / ((1.0 - w3) * (1.0 - yc))))) / denom6 + (24.0 * num10 * power_of<3>(log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc))))) / denom7 - (12.0 * num9 * power_of<3>(log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc))))) / denom6 - (3.0 * num11 * power_of<3>(log(((-1.0 - w3) * (1.0 - xc)) / ((-w3 - xc) * (1.0 - yc))))) / denom6 + (3.0 * num11 * power_of<3>(log(((-1.0 + w3) * (1.0 - xc)) / ((w3 - xc) * (1.0 - yc))))) / denom6 + (24.0 * num10 * power_of<3>(log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc))))) / denom7
                - (12.0 * num9 * power_of<3>(log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc))))) / denom6 - (3.0 * num11 * power_of<3>(log(((-1.0 - w3) * (1.0 + xc)) / ((-w3 + xc) * (1.0 - yc))))) / denom6 + (3.0 * num11 * power_of<3>(log(((-1.0 + w3) * (1.0 + xc)) / ((w3 + xc) * (1.0 - yc))))) / denom6 - (18.0 * num11 * dilog(((1.0 + w3) * (1.0 - yc)) / ((-1.0 + w3) * (-1.0 - yc))) * ln1mychalf) / denom6 - (18.0 * num11 * dilog(((1.0 + w3) * (1.0 - yc)) / (2.0 * (w3 - yc))) * ln1mychalf) / denom6 + dilog((1.0 - yc) / (-xc - yc)) * ((144.0 * num10 * ln1mychalf) / denom7 - (72.0 * num9 * ln1mychalf) / denom6)
                + dilog((1.0 - yc) / (xc - yc)) * ((144.0 * num10 * ln1mychalf) / denom7 - (72.0 * num9 * ln1mychalf) / denom6) + dilog(((1.0 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-1.0 - yc))) * ((-144.0 * num10 * ln1mychalf) / denom7 + (72.0 * num9 * ln1mychalf) / denom6) + dilog(((1.0 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-1.0 - yc))) * ((-144.0 * num10 * ln1mychalf) / denom7 + (72.0 * num9 * ln1mychalf) / denom6) + dilog(((1.0 - xc) * (1.0 - yc)) / (2.0 * (-xc - yc))) * ((-144.0 * num10 * ln1mychalf) / denom7 + (72.0 * num9 * ln1mychalf) / denom6)
                + dilog(((1.0 + xc) * (1.0 - yc)) / (2.0 * (xc - yc))) * ((-144.0 * num10 * ln1mychalf) / denom7 + (72.0 * num9 * ln1mychalf) / denom6) - (36.0 * lognum1 * ln1myc) / denom8 + (3.0 * num7 * pisqu * ln1myc) / (2.0 * denom6) - (18.0 * num11 * dilog(2.0 / (1.0 - w3)) * ln1myc) / denom6 + (18.0 * num11 * dilog((1.0 - xc) / (-w3 - xc)) * ln1myc) / denom6 - (18.0 * num11 * dilog((1.0 - xc) / (w3 - xc)) * ln1myc) / denom6 + (18.0 * num11 * dilog((1.0 + xc) / (-w3 + xc)) * ln1myc) / denom6 - (18.0 * num11 * dilog((1.0 + xc) / (w3 + xc)) * ln1myc) / denom6

                + (36.0 * num9 * dilog((1.0 - yc) / (1.0 - xc)) * ln1myc) / denom6 + (36.0 * num9 * dilog((1.0 - yc) / (1.0 + xc)) * ln1myc) / denom6 - (18.0 * num11 * dilog((1.0 - yc) / (-w3 - yc)) * ln1myc) / denom6 + (18.0 * num11 * dilog(-((w3 * (1.0 - yc)) / (-w3 - yc))) * ln1myc) / denom6 - (18.0 * num11 * dilog((w3 * (1.0 - yc)) / (w3 - yc)) * ln1myc) / denom6 + (18.0 * num5 * ln2 * ln1myc) / denom4 - (9.0 * num7 * ln2squ * ln1myc) / denom6 + (18.0 * num11 * (pisqu / 12.0 - ln2squ / 2.0) * ln1myc) / denom6 - (32.0 * lnmuhat * ln1myc) / yc3
                + (96.0 * lnmuhat * ln1myc) / yc + (16.0 * ln1mxc * ln1myc) / yc3 - (48.0 * ln1mxc * ln1myc) / yc + (36.0 * num9 * ln2 * ln1mxc * ln1myc) / denom6 - (18.0 * num9 * power_of<2>(ln1mxc) * ln1myc) / denom6 - (32.0 * log(xc) * ln1myc) / yc3 + (96.0 * log(xc) * ln1myc) / yc + (16.0 * ln1pxc * ln1myc) / yc3 - (48.0 * ln1pxc * ln1myc) / yc + (36.0 * num9 * ln2 * ln1pxc * ln1myc) / denom6 - (18.0 * num9 * power_of<2>(ln1pxc) * ln1myc) / denom6 - (9.0 * num5 * power_of<2>(ln1myc)) / denom4
                + (9.0 * num11 * ln2 * power_of<2>(ln1myc)) / denom6 + (3.0 * num11 * power_of<3>(ln1myc)) / denom6 + dilog((1.0 - yc) / (w3 - yc)) * ((18.0 * num11 * ln1mychalf) / denom6 + (18.0 * num11 * ln1myc) / denom6) + dilog(1.0 - yc) * ((18.0 * num11 * ln1myc) / denom6 - (72.0 * num8 * ln1myc) / denom6) + dilog(2.0 / (1.0 - xc)) * ((-144.0 * num10 * ln1myc) / denom7 + (72.0 * num9 * ln1myc) / denom6) + dilog(2.0 / (1.0 + xc)) * ((-144.0 * num10 * ln1myc) / denom7 + (72.0 * num9 * ln1myc) / denom6) + (3.0 * num11 * pisqu * log(-1.0 / (-w3 - yc))) / denom6
                + (3.0 * num11 * power_of<3>(log(-1.0 / (-w3 - yc)))) / denom6 - (3.0 * num11 * pisqu * log(1.0 / (-w3 - yc))) / denom6 - (3.0 * num11 * power_of<3>(log(1.0 / (-w3 - yc)))) / denom6 - (18.0 * num11 * pisqu * (0. + log((2.0 * (-1.0 - w3)) / (1.0 - w3)) / 6.0 - log(-2.0 / w3) / 6.0 - log((2.0 * (-1.0 - w3)) / ((1.0 - w3) * (1.0 - yc))) / 6.0 + log(2.0 / (-w3 - yc)) / 6.0)) / denom6 - (3.0 * num11 * power_of<3>(log(2.0 / (-w3 - yc)))) / denom6 - (9.0 * num11 * power_of<2>(ln1myc) * log((-1.0 - w3) / (-w3 - yc))) / denom6 - (3.0 * num11 * power_of<3>(log((-1.0 - xc) / (-w3 - yc)))) / denom6
                + (3.0 * num11 * power_of<3>(log((1.0 - xc) / (-w3 - yc)))) / denom6 - (3.0 * num11 * power_of<3>(log((-1.0 + xc) / (-w3 - yc)))) / denom6 + (3.0 * num11 * power_of<3>(log((1.0 + xc) / (-w3 - yc)))) / denom6 - (18.0 * num11 * pisqu * (0. - log(-2.0 / w3) / 6.0 + log((-2.0 * (1.0 + w3)) / (1.0 - w3)) / 6.0 - log((-2.0 * (1.0 + w3)) / ((-1.0 + w3) * (-1.0 - yc))) / 6.0 + log(-2.0 / (w3 - yc)) / 6.0)) / denom6 - (3.0 * num11 * power_of<3>(log(-2.0 / (w3 - yc)))) / denom6 - (3.0 * num11 * pisqu * log(-1.0 / (w3 - yc))) / denom6 - (3.0 * num11 * power_of<3>(log(-1.0 / (w3 - yc)))) / denom6
                + (3.0 * num11 * pisqu * log(1.0 / (w3 - yc))) / denom6 + (3.0 * num11 * power_of<3>(log(1.0 / (w3 - yc)))) / denom6 + (9.0 * num11 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-1.0 + w3) / (w3 - yc))) / denom6 + (9.0 * num11 * power_of<2>(ln1myc) * log((-1.0 + w3) / (w3 - yc))) / denom6 + (3.0 * num11 * power_of<3>(log((-1.0 - xc) / (w3 - yc)))) / denom6 - (3.0 * num11 * power_of<3>(log((1.0 - xc) / (w3 - yc)))) / denom6 + (3.0 * num11 * power_of<3>(log((-1.0 + xc) / (w3 - yc)))) / denom6 - (3.0 * num11 * power_of<3>(log((1.0 + xc) / (w3 - yc)))) / denom6
                - (9.0 * num11 * power_of<2>(log((1.0 - yc) / 2.0)) * log(((1.0 - w3) * (-1.0 - yc)) / (2.0 * (w3 - yc)))) / denom6 + (9.0 * num11 * power_of<2>(log((1.0 - yc) / 2.0)) * log((w3 - yc) / (-1.0 + w3))) / denom6 - (9.0 * num11 * power_of<2>(ln1myc) * log((w3 - yc) / (-1.0 + w3))) / denom6 - (9.0 * num11 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-2.0 * (w3 - yc)) / ((-1.0 + w3) * (-1.0 - yc)))) / denom6 - (144.0 * num10 * pisqu * (0. - log(2.0 * xcinv) / 6.0 + log((-2.0 * (1.0 - xc)) / (1.0 + xc)) / 6.0 - log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (-xc - yc)) / 6.0)) / denom7
                + (72.0 * num9 * pisqu * (0. - log(2.0 * xcinv) / 6.0 + log((-2.0 * (1.0 - xc)) / (1.0 + xc)) / 6.0 - log((-2.0 * (1.0 - xc)) / ((-1.0 - xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (-xc - yc)) / 6.0)) / denom6 - (24.0 * num10 * power_of<3>(log(-2.0 / (-xc - yc)))) / denom7 + (12.0 * num9 * power_of<3>(log(-2.0 / (-xc - yc)))) / denom6 - (144.0 * num10 * pisqu * (0. + log((2.0 * (-1.0 - xc)) / (1.0 - xc)) / 6.0 - log(-2.0 * xcinv) / 6.0 - log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc))) / 6.0 + log(2.0 / (-xc - yc)) / 6.0)) / denom7
                + (72.0 * num9 * pisqu * (0. + log((2.0 * (-1.0 - xc)) / (1.0 - xc)) / 6.0 - log(-2.0 * xcinv) / 6.0 - log((2.0 * (-1.0 - xc)) / ((1.0 - xc) * (1.0 - yc))) / 6.0 + log(2.0 / (-xc - yc)) / 6.0)) / denom6 - (24.0 * num10 * power_of<3>(log(2.0 / (-xc - yc)))) / denom7 + (12.0 * num9 * power_of<3>(log(2.0 / (-xc - yc)))) / denom6 + (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-1.0 - xc) / (-xc - yc))) / denom7 - (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-1.0 - xc) / (-xc - yc))) / denom6 - (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log(((1.0 + xc) * (-1.0 - yc)) / (2.0 * (-xc - yc)))) / denom7
                + (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log(((1.0 + xc) * (-1.0 - yc)) / (2.0 * (-xc - yc)))) / denom6 + (18.0 * num11 * dilog(((-1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (1.0 - yc))) * log((-xc - yc) / (-1.0 - xc))) / denom6 - (18.0 * num11 * dilog(((-1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (1.0 - yc))) * log((-xc - yc) / (-1.0 - xc))) / denom6 + (18.0 * num11 * dilog(((-1.0 - w3) * (-xc - yc)) / ((-1.0 - xc) * (-w3 - yc))) * log((-xc - yc) / (-1.0 - xc))) / denom6
                - (18.0 * num11 * dilog(((-1.0 + w3) * (-xc - yc)) / ((-1.0 - xc) * (w3 - yc))) * log((-xc - yc) / (-1.0 - xc))) / denom6 + (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-xc - yc) / (-1.0 - xc))) / denom7 - (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-xc - yc) / (-1.0 - xc))) / denom6 + (72.0 * num6 * ln1myc * log((-xc - yc) / (-1.0 - xc))) / denom5 - (72.0 * num10 * power_of<2>(ln1myc) * log((-xc - yc) / (-1.0 - xc))) / denom7 - (18.0 * num11 * ln1myc * log((-w3 - yc) / (-w3 + xc)) * log((-xc - yc) / (-1.0 - xc))) / denom6
                + (18.0 * num11 * ln1myc * log((w3 - yc) / (w3 + xc)) * log((-xc - yc) / (-1.0 - xc))) / denom6 - (9.0 * num11 * log((-w3 + xc) / (-w3 - yc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 + (9.0 * num11 * log(((w3 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (-w3 - yc))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 - (9.0 * num11 * log((-w3 - yc) / (-w3 + xc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 + (9.0 * num11 * log(-(((-1.0 - xc) * (-w3 - yc)) / ((-w3 + xc) * (1.0 - yc)))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6
                + (9.0 * num11 * log((w3 + xc) / (w3 - yc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 - (9.0 * num11 * log(((-w3 - xc) * (1.0 - yc)) / ((-1.0 - xc) * (w3 - yc))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 + (9.0 * num11 * log((w3 - yc) / (w3 + xc)) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 - (9.0 * num11 * log(-(((-1.0 - xc) * (w3 - yc)) / ((w3 + xc) * (1.0 - yc)))) * power_of<2>(log((-xc - yc) / (-1.0 - xc)))) / denom6 - (18.0 * num11 * dilog(((1.0 - w3) * (-xc - yc)) / ((-w3 + xc) * (-1.0 - yc))) * log((-xc - yc) / (1.0 - xc))) / denom6
                + (18.0 * num11 * dilog(((1.0 + w3) * (-xc - yc)) / ((w3 + xc) * (-1.0 - yc))) * log((-xc - yc) / (1.0 - xc))) / denom6 - (18.0 * num11 * dilog(((1.0 - w3) * (-xc - yc)) / ((1.0 - xc) * (-w3 - yc))) * log((-xc - yc) / (1.0 - xc))) / denom6 + (18.0 * num11 * dilog(((1.0 + w3) * (-xc - yc)) / ((1.0 - xc) * (w3 - yc))) * log((-xc - yc) / (1.0 - xc))) / denom6 + (9.0 * num11 * log((-w3 + xc) / (-w3 - yc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6 - (9.0 * num11 * log(((w3 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (-w3 - yc))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6
                + (9.0 * num11 * log((-w3 - yc) / (-w3 + xc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6 - (9.0 * num11 * log(-(((1.0 - xc) * (-w3 - yc)) / ((-w3 + xc) * (-1.0 - yc)))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6 - (9.0 * num11 * log((w3 + xc) / (w3 - yc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6 + (9.0 * num11 * log(((-w3 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (w3 - yc))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6 - (9.0 * num11 * log((w3 - yc) / (w3 + xc)) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6
                + (9.0 * num11 * log(-(((1.0 - xc) * (w3 - yc)) / ((w3 + xc) * (-1.0 - yc)))) * power_of<2>(log((-xc - yc) / (1.0 - xc)))) / denom6 + dilog((-xc - yc) / (w3 - yc)) * ((18.0 * num11 * log((-xc - yc) / (-1.0 - xc))) / denom6 - (18.0 * num11 * log((-xc - yc) / (1.0 - xc))) / denom6) + dilog((-xc - yc) / (-w3 - yc)) * ((-18.0 * num11 * log((-xc - yc) / (-1.0 - xc))) / denom6 + (18.0 * num11 * log((-xc - yc) / (1.0 - xc))) / denom6) - (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-2.0 * (-xc - yc)) / ((-1.0 - xc) * (-1.0 - yc)))) / denom7
                + (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-2.0 * (-xc - yc)) / ((-1.0 - xc) * (-1.0 - yc)))) / denom6 - (144.0 * num10 * pisqu * (0. - log(-2.0 * xcinv) / 6.0 + log((-2.0 * (1.0 + xc)) / (1.0 - xc)) / 6.0 - log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (xc - yc)) / 6.0)) / denom7 + (72.0 * num9 * pisqu * (0. - log(-2.0 * xcinv) / 6.0 + log((-2.0 * (1.0 + xc)) / (1.0 - xc)) / 6.0 - log((-2.0 * (1.0 + xc)) / ((-1.0 + xc) * (-1.0 - yc))) / 6.0 + log(-2.0 / (xc - yc)) / 6.0)) / denom6 - (24.0 * num10 * power_of<3>(log(-2.0 / (xc - yc)))) / denom7 + (12.0 * num9 * power_of<3>(log(-2.0 / (xc - yc)))) / denom6
                - (144.0 * num10 * pisqu * (0. - log(2.0 * xcinv) / 6.0 + log((2.0 * (-1.0 + xc)) / (1.0 + xc)) / 6.0 - log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc))) / 6.0 + log(2.0 / (xc - yc)) / 6.0)) / denom7 + (72.0 * num9 * pisqu * (0. - log(2.0 * xcinv) / 6.0 + log((2.0 * (-1.0 + xc)) / (1.0 + xc)) / 6.0 - log((2.0 * (-1.0 + xc)) / ((1.0 + xc) * (1.0 - yc))) / 6.0 + log(2.0 / (xc - yc)) / 6.0)) / denom6 - (24.0 * num10 * power_of<3>(log(2.0 / (xc - yc)))) / denom7 + (12.0 * num9 * power_of<3>(log(2.0 / (xc - yc)))) / denom6 + (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-1.0 + xc) / (xc - yc))) / denom7 - (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-1.0 + xc) / (xc - yc))) / denom6
                - (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log(((1.0 - xc) * (-1.0 - yc)) / (2.0 * (xc - yc)))) / denom7 + (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log(((1.0 - xc) * (-1.0 - yc)) / (2.0 * (xc - yc)))) / denom6 + (18.0 * num11 * dilog(((-1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (1.0 - yc))) * log((xc - yc) / (-1.0 + xc))) / denom6 - (18.0 * num11 * dilog(((-1.0 + w3) * (xc - yc)) / ((w3 - xc) * (1.0 - yc))) * log((xc - yc) / (-1.0 + xc))) / denom6 + (18.0 * num11 * dilog(((-1.0 - w3) * (xc - yc)) / ((-1.0 + xc) * (-w3 - yc))) * log((xc - yc) / (-1.0 + xc))) / denom6
                - (18.0 * num11 * dilog(((-1.0 + w3) * (xc - yc)) / ((-1.0 + xc) * (w3 - yc))) * log((xc - yc) / (-1.0 + xc))) / denom6 + (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log((xc - yc) / (-1.0 + xc))) / denom7 - (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log((xc - yc) / (-1.0 + xc))) / denom6 + (72.0 * num6 * ln1myc * log((xc - yc) / (-1.0 + xc))) / denom5 - (72.0 * num10 * power_of<2>(ln1myc) * log((xc - yc) / (-1.0 + xc))) / denom7 - (18.0 * num11 * ln1myc * log((-w3 - yc) / (-w3 - xc)) * log((xc - yc) / (-1.0 + xc))) / denom6
                + (18.0 * num11 * ln1myc * log((w3 - yc) / (w3 - xc)) * log((xc - yc) / (-1.0 + xc))) / denom6 - (9.0 * num11 * log((-w3 - xc) / (-w3 - yc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 + (9.0 * num11 * log(((w3 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (-w3 - yc))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 - (9.0 * num11 * log((-w3 - yc) / (-w3 - xc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 + (9.0 * num11 * log(-(((-1.0 + xc) * (-w3 - yc)) / ((-w3 - xc) * (1.0 - yc)))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6
                + (9.0 * num11 * log((w3 - xc) / (w3 - yc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 - (9.0 * num11 * log(((-w3 + xc) * (1.0 - yc)) / ((-1.0 + xc) * (w3 - yc))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 + (9.0 * num11 * log((w3 - yc) / (w3 - xc)) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 - (9.0 * num11 * log(-(((-1.0 + xc) * (w3 - yc)) / ((w3 - xc) * (1.0 - yc)))) * power_of<2>(log((xc - yc) / (-1.0 + xc)))) / denom6 - (18.0 * num11 * dilog(((1.0 - w3) * (xc - yc)) / ((-w3 - xc) * (-1.0 - yc))) * log((xc - yc) / (1.0 + xc))) / denom6
                + (18.0 * num11 * dilog(((1.0 + w3) * (xc - yc)) / ((w3 - xc) * (-1.0 - yc))) * log((xc - yc) / (1.0 + xc))) / denom6 - (18.0 * num11 * dilog(((1.0 - w3) * (xc - yc)) / ((1.0 + xc) * (-w3 - yc))) * log((xc - yc) / (1.0 + xc))) / denom6 + (18.0 * num11 * dilog(((1.0 + w3) * (xc - yc)) / ((1.0 + xc) * (w3 - yc))) * log((xc - yc) / (1.0 + xc))) / denom6 + (9.0 * num11 * log((-w3 - xc) / (-w3 - yc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6 - (9.0 * num11 * log(((w3 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (-w3 - yc))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6
                + (9.0 * num11 * log((-w3 - yc) / (-w3 - xc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6 - (9.0 * num11 * log(-(((1.0 + xc) * (-w3 - yc)) / ((-w3 - xc) * (-1.0 - yc)))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6 - (9.0 * num11 * log((w3 - xc) / (w3 - yc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6 + (9.0 * num11 * log(((-w3 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (w3 - yc))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6 - (9.0 * num11 * log((w3 - yc) / (w3 - xc)) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6
                + (9.0 * num11 * log(-(((1.0 + xc) * (w3 - yc)) / ((w3 - xc) * (-1.0 - yc)))) * power_of<2>(log((xc - yc) / (1.0 + xc)))) / denom6 + dilog((xc - yc) / (w3 - yc)) * ((18.0 * num11 * log((xc - yc) / (-1.0 + xc))) / denom6 - (18.0 * num11 * log((xc - yc) / (1.0 + xc))) / denom6) + dilog((xc - yc) / (-w3 - yc)) * ((-18.0 * num11 * log((xc - yc) / (-1.0 + xc))) / denom6 + (18.0 * num11 * log((xc - yc) / (1.0 + xc))) / denom6) - (72.0 * num10 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-2.0 * (xc - yc)) / ((-1.0 + xc) * (-1.0 - yc)))) / denom7
                + (36.0 * num9 * power_of<2>(log((1.0 - yc) / 2.0)) * log((-2.0 * (xc - yc)) / ((-1.0 + xc) * (-1.0 - yc)))) / denom6 + (9.0 * num11 * power_of<2>(ln1myc) * log(yc)) / denom6 - (36.0 * num8 * power_of<2>(ln1myc) * log(yc)) / denom6 + (9.0 * num11 * power_of<2>(ln1myc) * log(((-1.0 - w3) * yc) / (-w3 - yc))) / denom6 - (9.0 * num11 * power_of<2>(ln1myc) * log(((-1.0 + w3) * yc) / (w3 - yc))) / denom6 - (18.0 * num11 * dilog(((-1.0 - w3) * (-1.0 - yc)) / ((1.0 - w3) * (1.0 - yc))) * ln1pychalf) / denom6 - (18.0 * num11 * dilog((-0.5) * (((-1.0 - w3) * (-1.0 - yc)) / (-w3 - yc))) * ln1pychalf) / denom6
                - (27.0 * num7 * power_of<2>(ln1myc) * ln1pychalf) / denom6 + (18.0 * num11 * ln1myc * log((-w3 - yc) / (1.0 - w3)) * ln1pychalf) / denom6 + (144.0 * num10 * ln1myc * log((-xc - yc) / (1.0 - xc)) * ln1pychalf) / denom7 - (72.0 * num9 * ln1myc * log((-xc - yc) / (1.0 - xc)) * ln1pychalf) / denom6 + (144.0 * num10 * ln1myc * log((xc - yc) / (1.0 + xc)) * ln1pychalf) / denom7 - (72.0 * num9 * ln1myc * log((xc - yc) / (1.0 + xc)) * ln1pychalf) / denom6
                + (9.0 * num11 * log((1.0 - w3) / (-w3 - yc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 - (9.0 * num11 * log((-0.5) * (((-1.0 + w3) * (1.0 - yc)) / (-w3 - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 + (9.0 * num11 * log((-w3 - yc) / (1.0 - w3)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 - (9.0 * num11 * log((2.0 * (-w3 - yc)) / ((1.0 - w3) * (1.0 - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 + (72.0 * num10 * log((1.0 - xc) / (-xc - yc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 - (36.0 * num9 * log((1.0 - xc) / (-xc - yc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6
                - (72.0 * num10 * log((-0.5) * (((-1.0 + xc) * (1.0 - yc)) / (-xc - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 + (36.0 * num9 * log((-0.5) * (((-1.0 + xc) * (1.0 - yc)) / (-xc - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 + (72.0 * num10 * log((-xc - yc) / (1.0 - xc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 - (36.0 * num9 * log((-xc - yc) / (1.0 - xc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 - (72.0 * num10 * log((2.0 * (-xc - yc)) / ((1.0 - xc) * (1.0 - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 + (36.0 * num9 * log((2.0 * (-xc - yc)) / ((1.0 - xc) * (1.0 - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6
                + (72.0 * num10 * log((1.0 + xc) / (xc - yc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 - (36.0 * num9 * log((1.0 + xc) / (xc - yc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 - (72.0 * num10 * log((-0.5) * (((-1.0 - xc) * (1.0 - yc)) / (xc - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 + (36.0 * num9 * log((-0.5) * (((-1.0 - xc) * (1.0 - yc)) / (xc - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 + (72.0 * num10 * log((xc - yc) / (1.0 + xc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7 - (36.0 * num9 * log((xc - yc) / (1.0 + xc)) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 - (72.0 * num10 * log((2.0 * (xc - yc)) / ((1.0 + xc) * (1.0 - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom7
                + (36.0 * num9 * log((2.0 * (xc - yc)) / ((1.0 + xc) * (1.0 - yc))) * power_of<2>(log((1.0 + yc) / 2.0))) / denom6 + dilog((-1.0 - yc) / (-xc - yc)) * ((144.0 * num10 * ln1pychalf) / denom7 - (72.0 * num9 * ln1pychalf) / denom6) + dilog((-1.0 - yc) / (xc - yc)) * ((144.0 * num10 * ln1pychalf) / denom7 - (72.0 * num9 * ln1pychalf) / denom6) + dilog(((-1.0 - xc) * (-1.0 - yc)) / ((1.0 - xc) * (1.0 - yc))) * ((-144.0 * num10 * ln1pychalf) / denom7 + (72.0 * num9 * ln1pychalf) / denom6)

                + dilog(((-1.0 + xc) * (-1.0 - yc)) / ((1.0 + xc) * (1.0 - yc))) * ((-144.0 * num10 * ln1pychalf) / denom7 + (72.0 * num9 * ln1pychalf) / denom6) + dilog((-0.5) * (((-1.0 - xc) * (-1.0 - yc)) / (-xc - yc))) * ((-144.0 * num10 * ln1pychalf) / denom7 + (72.0 * num9 * ln1pychalf) / denom6) + dilog((-0.5) * (((-1.0 + xc) * (-1.0 - yc)) / (xc - yc))) * ((-144.0 * num10 * ln1pychalf) / denom7 + (72.0 * num9 * ln1pychalf) / denom6) + (36.0 * lognum1 * ln1pyc) / denom8 + (3.0 * num7 * pisqu * ln1pyc) / (2.0 * denom6)
                - (18.0 * num11 * dilog(-2.0 / (-1.0 + w3)) * ln1pyc) / denom6 - (18.0 * num11 * dilog((-1.0 - xc) / (-w3 - xc)) * ln1pyc) / denom6 + (18.0 * num11 * dilog((-1.0 - xc) / (w3 - xc)) * ln1pyc) / denom6 - (18.0 * num11 * dilog((-1.0 + xc) / (-w3 + xc)) * ln1pyc) / denom6 + (18.0 * num11 * dilog((-1.0 + xc) / (w3 + xc)) * ln1pyc) / denom6 + (36.0 * num9 * dilog((-1.0 - yc) / (-1.0 - xc)) * ln1pyc) / denom6 + (36.0 * num9 * dilog((-1.0 - yc) / (-1.0 + xc)) * ln1pyc) / denom6 - (18.0 * num11 * dilog((-1.0 - yc) / (w3 - yc)) * ln1pyc) / denom6
                + (18.0 * num11 * dilog((w3 * (-1.0 - yc)) / (-w3 + yc)) * ln1pyc) / denom6 - (18.0 * num11 * dilog(-((w3 * (-1.0 - yc)) / (w3 + yc))) * ln1pyc) / denom6 + (18.0 * num1 * ln2 * ln1pyc) / denom1 - (9.0 * num7 * ln2squ * ln1pyc) / denom6 + (18.0 * num11 * (pisqu / 12.0 - ln2squ / 2.0) * ln1pyc) / denom6 + (32.0 * lnmuhat * ln1pyc) / yc3 - (96.0 * lnmuhat * ln1pyc) / yc - (16.0 * ln1mxc * ln1pyc) / yc3 + (48.0 * ln1mxc * ln1pyc) / yc + (36.0 * num9 * ln2 * ln1mxc * ln1pyc) / denom6
                - (18.0 * num9 * power_of<2>(ln1mxc) * ln1pyc) / denom6 + (32.0 * log(xc) * ln1pyc) / yc3 - (96.0 * log(xc) * ln1pyc) / yc - (16.0 * ln1pxc * ln1pyc) / yc3 + (48.0 * ln1pxc * ln1pyc) / yc + (36.0 * num9 * ln2 * ln1pxc * ln1pyc) / denom6 - (18.0 * num9 * power_of<2>(ln1pxc) * ln1pyc) / denom6 + (36.0 * num7 * ln2 * ln1myc * ln1pyc) / denom6 + (18.0 * num11 * ln1mychalf * log((w3 - yc) / (-1.0 + w3)) * ln1pyc) / denom6 + (144.0 * num10 * ln1mychalf * log((-xc - yc) / (-1.0 - xc)) * ln1pyc) / denom7
                - (72.0 * num9 * ln1mychalf * log((-xc - yc) / (-1.0 - xc)) * ln1pyc) / denom6 + (36.0 * num9 * ln1myc * log((-xc - yc) / (-1.0 - xc)) * ln1pyc) / denom6 - (72.0 * num6 * log((-xc - yc) / (1.0 - xc)) * ln1pyc) / denom5 + (36.0 * num9 * ln1myc * log((-xc - yc) / (1.0 - xc)) * ln1pyc) / denom6 + (18.0 * num11 * log((-w3 - yc) / (-w3 + xc)) * log((-xc - yc) / (1.0 - xc)) * ln1pyc) / denom6 - (18.0 * num11 * log((w3 - yc) / (w3 + xc)) * log((-xc - yc) / (1.0 - xc)) * ln1pyc) / denom6
                + (144.0 * num10 * ln1mychalf * log((xc - yc) / (-1.0 + xc)) * ln1pyc) / denom7 - (72.0 * num9 * ln1mychalf * log((xc - yc) / (-1.0 + xc)) * ln1pyc) / denom6 + (36.0 * num9 * ln1myc * log((xc - yc) / (-1.0 + xc)) * ln1pyc) / denom6 - (72.0 * num6 * log((xc - yc) / (1.0 + xc)) * ln1pyc) / denom5 + (36.0 * num9 * ln1myc * log((xc - yc) / (1.0 + xc)) * ln1pyc) / denom6 + (18.0 * num11 * log((-w3 - yc) / (-w3 - xc)) * log((xc - yc) / (1.0 + xc)) * ln1pyc) / denom6
                - (18.0 * num11 * log((w3 - yc) / (w3 - xc)) * log((xc - yc) / (1.0 + xc)) * ln1pyc) / denom6 - (9.0 * num1 * power_of<2>(ln1pyc)) / denom1 + (9.0 * num11 * ln2 * power_of<2>(ln1pyc)) / denom6 - (27.0 * num7 * ln1mychalf * power_of<2>(ln1pyc)) / denom6 + (9.0 * num11 * log((1.0 - w3) / (-w3 - yc)) * power_of<2>(ln1pyc)) / denom6 - (9.0 * num11 * log((-w3 - yc) / (1.0 - w3)) * power_of<2>(ln1pyc)) / denom6 - (9.0 * num11 * log((1.0 + w3) / (w3 - yc)) * power_of<2>(ln1pyc)) / denom6 - (72.0 * num10 * log((-xc - yc) / (1.0 - xc)) * power_of<2>(ln1pyc)) / denom7
                - (72.0 * num10 * log((xc - yc) / (1.0 + xc)) * power_of<2>(ln1pyc)) / denom7 + (9.0 * num11 * log(-yc) * power_of<2>(ln1pyc)) / denom6 - (36.0 * num8 * log(-yc) * power_of<2>(ln1pyc)) / denom6 + (3.0 * num11 * power_of<3>(ln1pyc)) / denom6 + dilog((1.0 + yc) / (1.0 - xc)) * ((-72.0 * num6) / denom5 + (144.0 * num10 * ln1myc) / denom7 - (36.0 * num9 * ln1myc) / denom6 + (144.0 * num10 * ln1pychalf) / denom7 - (72.0 * num9 * ln1pychalf) / denom6 - (144.0 * num10 * ln1pyc) / denom7)
                + dilog((1.0 + yc) / (1.0 + xc)) * ((-72.0 * num6) / denom5 + (144.0 * num10 * ln1myc) / denom7 - (36.0 * num9 * ln1myc) / denom6 + (144.0 * num10 * ln1pychalf) / denom7 - (72.0 * num9 * ln1pychalf) / denom6 - (144.0 * num10 * ln1pyc) / denom7) + dilog((xc + yc) / (w3 + xc)) * ((18.0 * num11 * ln1mxc) / denom6 - (18.0 * num11 * ln1pxc) / denom6 + (18.0 * num11 * ln1myc) / denom6 + (18.0 * num11 * log((-xc - yc) / (-1.0 - xc))) / denom6 - (18.0 * num11 * log((-xc - yc) / (1.0 - xc))) / denom6 - (18.0 * num11 * ln1pyc) / denom6)
                + dilog((-xc + yc) / (w3 - xc)) * ((-18.0 * num11 * ln1mxc) / denom6 + (18.0 * num11 * ln1pxc) / denom6 + (18.0 * num11 * ln1myc) / denom6 + (18.0 * num11 * log((xc - yc) / (-1.0 + xc))) / denom6 - (18.0 * num11 * log((xc - yc) / (1.0 + xc))) / denom6 - (18.0 * num11 * ln1pyc) / denom6) + dilog((1.0 + yc) / (1.0 - w3)) * ((18.0 * num11 * ln1myc) / denom6 + (18.0 * num11 * ln1pychalf) / denom6 - (18.0 * num11 * ln1pyc) / denom6)
                + dilog((-1.0 + yc) / (-1.0 + w3)) * ((18.0 * num11 * ln1mychalf) / denom6 - (18.0 * num11 * ln1myc) / denom6 + (18.0 * num11 * ln1pyc) / denom6) + dilog((xc + yc) / (-w3 + xc)) * ((-18.0 * num11 * ln1mxc) / denom6 + (18.0 * num11 * ln1pxc) / denom6 - (18.0 * num11 * ln1myc) / denom6 - (18.0 * num11 * log((-xc - yc) / (-1.0 - xc))) / denom6 + (18.0 * num11 * log((-xc - yc) / (1.0 - xc))) / denom6 + (18.0 * num11 * ln1pyc) / denom6)
                + dilog((-xc + yc) / (-w3 - xc)) * ((18.0 * num11 * ln1mxc) / denom6 - (18.0 * num11 * ln1pxc) / denom6 - (18.0 * num11 * ln1myc) / denom6 - (18.0 * num11 * log((xc - yc) / (-1.0 + xc))) / denom6 + (18.0 * num11 * log((xc - yc) / (1.0 + xc))) / denom6 + (18.0 * num11 * ln1pyc) / denom6) + dilog((-1.0 - yc) / (-w3 - yc)) * ((18.0 * num11 * ln1pychalf) / denom6 + (18.0 * num11 * ln1pyc) / denom6)
                + dilog((1.0 + yc) / 2.0) * ((-18.0 * num1) / denom1 - (18.0 * num11 * ln1myc) / denom6 - (18.0 * num7 * ln1myc) / denom6 - (18.0 * num11 * ln1pyc) / denom6 - (54.0 * num7 * ln1pyc) / denom6) + dilog((1.0 - yc) / 2.0) * ((-18.0 * num5) / denom4 - (18.0 * num11 * ln1myc) / denom6 - (54.0 * num7 * ln1myc) / denom6 - (18.0 * num11 * ln1pyc) / denom6 - (18.0 * num7 * ln1pyc) / denom6) + dilog(1.0 + yc) * ((18.0 * num11 * ln1pyc) / denom6 - (72.0 * num8 * ln1pyc) / denom6)
                + dilog(-yc) * ((-72.0 * num2) / denom2 + (18.0 * num11 * ln1myc) / denom6 - (36.0 * num8 * ln1myc) / denom6 - (36.0 * num8 * ln1pyc) / denom6) + dilog(yc) * ((72.0 * num2) / denom2 - (36.0 * num8 * ln1myc) / denom6 + (18.0 * num11 * ln1pyc) / denom6 - (36.0 * num8 * ln1pyc) / denom6) + dilog((-1.0 + yc) / (-1.0 - xc)) * ((72.0 * num6) / denom5 + (144.0 * num10 * ln1mychalf) / denom7 - (72.0 * num9 * ln1mychalf) / denom6 - (144.0 * num10 * ln1myc) / denom7 + (144.0 * num10 * ln1pyc) / denom7 - (36.0 * num9 * ln1pyc) / denom6)
                + dilog((-1.0 + yc) / (-1.0 + xc)) * ((72.0 * num6) / denom5 + (144.0 * num10 * ln1mychalf) / denom7 - (72.0 * num9 * ln1mychalf) / denom6 - (144.0 * num10 * ln1myc) / denom7 + (144.0 * num10 * ln1pyc) / denom7 - (36.0 * num9 * ln1pyc) / denom6) + dilog(-2.0 / (-1.0 - xc)) * ((-144.0 * num10 * ln1pyc) / denom7 + (72.0 * num9 * ln1pyc) / denom6) + dilog(-2.0 / (-1.0 + xc)) * ((-144.0 * num10 * ln1pyc) / denom7 + (72.0 * num9 * ln1pyc) / denom6)
                + (3.0 * num11 * ln1pyc * (pisqu - 6.0 * ln2squ - 12.0 * ln1myc * ln1pychalf + ln64 * ln1pyc)) / (2.0 * denom6) + (3.0 * num11 * ln1myc * (pisqu - 6.0 * ln2squ + ln64 * ln1myc - 12.0 * ln1mychalf * ln1pyc)) / (2.0 * denom6) - (3.0 * num8 * (4.0 * power_of<3>(ln2) - pisqu * ln4 + ln1myc * (pisqu - 6.0 * ln2squ + ln64 * ln1myc) - (pisqu + 6.0 * ln2squ) * ln1pyc - 2.0 * (-3.0 * log(-yc) + log((1.0 + yc) / 8.0)) * power_of<2>(ln1pyc))) / denom6
                - (3.0 * num8 * (4.0 * power_of<3>(ln2) - pisqu * ln4 - (pisqu + 6.0 * ln2squ) * ln1myc - 2.0 * power_of<2>(ln1myc) * (log((1.0 - yc) / 8.0) - 3.0 * log(yc)) + ln1pyc * (pisqu - 6.0 * ln2squ + ln64 * ln1pyc))) / denom6 + (9.0 * num11 * power_of<2>(ln1pyc) * log(((1.0 + w3) * yc) / (-w3 + yc))) / denom6 - (9.0 * num11 * power_of<2>(ln1pyc) * log(((1.0 - w3) * yc) / (w3 + yc))) / denom6 - (36.0 * num11 * ln2 * ln1mxc * log(1.0 - yc / w3)) / denom6 + (18.0 * num11 * power_of<2>(ln1mxc) * log(1.0 - yc / w3)) / denom6
                - (36.0 * num11 * ln2 * ln1pxc * log(1.0 - yc / w3)) / denom6 + (18.0 * num11 * power_of<2>(ln1pxc) * log(1.0 - yc / w3)) / denom6 - (36.0 * num11 * ln2 * ln1mxc * log(1.0 + yc / w3)) / denom6 + (18.0 * num11 * power_of<2>(ln1mxc) * log(1.0 + yc / w3)) / denom6 - (36.0 * num11 * ln2 * ln1pxc * log(1.0 + yc / w3)) / denom6 + (18.0 * num11 * power_of<2>(ln1pxc) * log(1.0 + yc / w3)) / denom6 + dilog(-w3) * ((-18.0 * num11 * log(1.0 - yc / w3)) / denom6 - (18.0 * num11 * log(1.0 + yc / w3)) / denom6)
                + dilog(w3) * ((18.0 * num11 * log(1.0 - yc / w3)) / denom6 + (18.0 * num11 * log(1.0 + yc / w3)) / denom6) - (72.0 * num6 * ln1mxc * log(1.0 - yc * xcinv)) / denom5 - (144.0 * num10 * ln2 * ln1mxc * log(1.0 - yc * xcinv)) / denom7 + (72.0 * num10 * power_of<2>(ln1mxc) * log(1.0 - yc * xcinv)) / denom7 + (72.0 * num6 * ln1pxc * log(1.0 - yc * xcinv)) / denom5 - (144.0 * num10 * ln2 * ln1pxc * log(1.0 - yc * xcinv)) / denom7 + (72.0 * num10 * power_of<2>(ln1pxc) * log(1.0 - yc * xcinv)) / denom7 - (36.0 * num9 * ln1mxc * log((-1.0 - yc) / (-1.0 - xc)) * log(1.0 - yc * xcinv)) / denom6

                + (36.0 * num9 * ln1pxc * log((-1.0 - yc) / (-1.0 - xc)) * log(1.0 - yc * xcinv)) / denom6 + (36.0 * num9 * ln1mxc * log((1.0 - yc) / (1.0 - xc)) * log(1.0 - yc * xcinv)) / denom6 - (36.0 * num9 * ln1pxc * log((1.0 - yc) / (1.0 - xc)) * log(1.0 - yc * xcinv)) / denom6 + (18.0 * num11 * ln1mxc * log((-w3 - yc) / (-w3 - xc)) * log(1.0 - yc * xcinv)) / denom6 - (18.0 * num11 * ln1pxc * log((-w3 - yc) / (-w3 - xc)) * log(1.0 - yc * xcinv)) / denom6 - (18.0 * num11 * ln1mxc * log((w3 - yc) / (w3 - xc)) * log(1.0 - yc * xcinv)) / denom6
                + (18.0 * num11 * ln1pxc * log((w3 - yc) / (w3 - xc)) * log(1.0 - yc * xcinv)) / denom6 + (72.0 * num6 * ln1mxc * log(1.0 + yc * xcinv)) / denom5 - (144.0 * num10 * ln2 * ln1mxc * log(1.0 + yc * xcinv)) / denom7 + (72.0 * num10 * power_of<2>(ln1mxc) * log(1.0 + yc * xcinv)) / denom7 - (72.0 * num6 * ln1pxc * log(1.0 + yc * xcinv)) / denom5 - (144.0 * num10 * ln2 * ln1pxc * log(1.0 + yc * xcinv)) / denom7 + (72.0 * num10 * power_of<2>(ln1pxc) * log(1.0 + yc * xcinv)) / denom7 + (36.0 * num9 * ln1mxc * log((-1.0 - yc) / (-1.0 + xc)) * log(1.0 + yc * xcinv)) / denom6
                - (36.0 * num9 * ln1pxc * log((-1.0 - yc) / (-1.0 + xc)) * log(1.0 + yc * xcinv)) / denom6 - (36.0 * num9 * ln1mxc * log((1.0 - yc) / (1.0 + xc)) * log(1.0 + yc * xcinv)) / denom6 + (36.0 * num9 * ln1pxc * log((1.0 - yc) / (1.0 + xc)) * log(1.0 + yc * xcinv)) / denom6 - (18.0 * num11 * ln1mxc * log((-w3 - yc) / (-w3 + xc)) * log(1.0 + yc * xcinv)) / denom6 + (18.0 * num11 * ln1pxc * log((-w3 - yc) / (-w3 + xc)) * log(1.0 + yc * xcinv)) / denom6 + (18.0 * num11 * ln1mxc * log((w3 - yc) / (w3 + xc)) * log(1.0 + yc * xcinv)) / denom6
                - (18.0 * num11 * ln1pxc * log((w3 - yc) / (w3 + xc)) * log(1.0 + yc * xcinv)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((-1.0 - xc) / (-1.0 - w3), 1.0 + xc) * power_of<2>(log(-(w3 / (-1.0 - xc)))) * my_sign(-imxc)) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((-1.0 - xc) / (-1.0 + w3), 1.0 + xc) * power_of<2>(log(w3 / (-1.0 - xc))) * my_sign(-imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1(1.0 - w3, 1.0 + xc) * power_of<2>(log((-w3 - xc) / ((1.0 - w3) * (-1.0 - xc)))) * my_sign(-imxc)) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1(1.0 + w3, 1.0 + xc) * power_of<2>(log((w3 - xc) / ((1.0 + w3) * (-1.0 - xc)))) * my_sign(-imxc)) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((1.0 + xc) / (1.0 - w3), 1.0 + xc) * power_of<2>(log(-(w3 / (1.0 + xc)))) * my_sign(-imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((1.0 + xc) / (1.0 + w3), 1.0 + xc) * power_of<2>(log(w3 / (1.0 + xc))) * my_sign(-imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1(1.0 - w3, 1.0 + xc) * power_of<2>(log((-w3 - xc) / ((-1.0 + w3) * (1.0 + xc)))) * my_sign(-imxc)) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1(1.0 + w3, 1.0 + xc) * power_of<2>(log((w3 - xc) / ((-1.0 - w3) * (1.0 + xc)))) * my_sign(-imxc)) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((1.0 - xc) / (1.0 - w3), 1.0 - xc) * power_of<2>(log(-(w3 / (1.0 - xc)))) * my_sign(imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((1.0 - xc) / (1.0 + w3), 1.0 - xc) * power_of<2>(log(w3 / (1.0 - xc))) * my_sign(imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((-1.0 + xc) / (-1.0 - w3), 1.0 - xc) * power_of<2>(log(-(w3 / (-1.0 + xc)))) * my_sign(imxc)) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1((-1.0 + xc) / (-1.0 + w3), 1.0 - xc) * power_of<2>(log(w3 / (-1.0 + xc))) * my_sign(imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1(1.0 - w3, 1.0 - xc) * power_of<2>(log((-w3 + xc) / ((-1.0 + w3) * (1.0 - xc)))) * my_sign(imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1(1.0 - w3, 1.0 - xc) * power_of<2>(log((-w3 + xc) / ((1.0 - w3) * (-1.0 + xc)))) * my_sign(imxc)) / denom6 + ((18.0 * myi) * num11 * M_PI * H1(1.0 + w3, 1.0 - xc) * power_of<2>(log((w3 + xc) / ((-1.0 - w3) * (1.0 - xc)))) * my_sign(imxc)) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1(1.0 + w3, 1.0 - xc) * power_of<2>(log((w3 + xc) / ((1.0 + w3) * (-1.0 + xc)))) * my_sign(imxc)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((-1.0 - w3) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 + w3) * (-1.0 - yc)) / (2.0 * (1.0 + w3)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom6 - ((144.0 * myi) * num10 * M_PI * H1((-1.0 + xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 - xc) * (-1.0 - yc)) / (2.0 * (1.0 - xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom7
                + ((72.0 * myi) * num9 * M_PI * H1((-1.0 + xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 - xc) * (-1.0 - yc)) / (2.0 * (1.0 - xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom6 - ((144.0 * myi) * num10 * M_PI * H1((-1.0 - xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 + xc) * (-1.0 - yc)) / (2.0 * (1.0 + xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom7 + ((72.0 * myi) * num9 * M_PI * H1((-1.0 - xc) / (-1.0 - yc), -2.0 / (-1.0 - yc)) * power_of<2>(log(((-1.0 + xc) * (-1.0 - yc)) / (2.0 * (1.0 + xc)))) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1(2.0 / (1.0 + w3), -2.0 / (-1.0 - yc)) * power_of<2>(log((w3 - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom6
                + ((144.0 * myi) * num10 * M_PI * H1(2.0 / (1.0 - xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((-xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom7 - ((72.0 * myi) * num9 * M_PI * H1(2.0 / (1.0 - xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((-xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom6 + ((144.0 * myi) * num10 * M_PI * H1(2.0 / (1.0 + xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom7 - ((72.0 * myi) * num9 * M_PI * H1(2.0 / (1.0 + xc), -2.0 / (-1.0 - yc)) * power_of<2>(log((xc - yc) / 2.0)) * my_sign(-2.0 * imag(1.0 / (-1.0 - yc)))) / denom6
                - ((18.0 * myi) * num11 * M_PI * H1((-1.0 + w3) / (-1.0 - yc), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log(-(((-w3 - xc) * (-1.0 - yc)) / ((1.0 - w3) * (-1.0 - xc))))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((-1.0 - w3) / (-1.0 - yc), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log(-(((w3 - xc) * (-1.0 - yc)) / ((1.0 + w3) * (-1.0 - xc))))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((1.0 + xc) / (1.0 - w3), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log((-w3 - yc) / (1.0 + xc))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc)))) / denom6
                - ((18.0 * myi) * num11 * M_PI * H1((1.0 + xc) / (1.0 + w3), (-1.0 - xc) / (-1.0 - yc)) * power_of<2>(log((w3 - yc) / (1.0 + xc))) * my_sign(imag((-1.0 - xc) / (-1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((-1.0 + w3) / (-1.0 - yc), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log(-(((-w3 + xc) * (-1.0 - yc)) / ((1.0 - w3) * (-1.0 + xc))))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((-1.0 - w3) / (-1.0 - yc), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log(-(((w3 + xc) * (-1.0 - yc)) / ((1.0 + w3) * (-1.0 + xc))))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc)))) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1((1.0 - xc) / (1.0 - w3), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log((-w3 - yc) / (1.0 - xc))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((1.0 - xc) / (1.0 + w3), (-1.0 + xc) / (-1.0 - yc)) * power_of<2>(log((w3 - yc) / (1.0 - xc))) * my_sign(imag((-1.0 + xc) / (-1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((1.0 + w3) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 - w3) * (1.0 - yc)) / (-1.0 - w3)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom6
                - ((144.0 * myi) * num10 * M_PI * H1((1.0 + xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 - xc) * (1.0 - yc)) / (-1.0 - xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom7 + ((72.0 * myi) * num9 * M_PI * H1((1.0 + xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 - xc) * (1.0 - yc)) / (-1.0 - xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom6 - ((144.0 * myi) * num10 * M_PI * H1((1.0 - xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 + xc) * (1.0 - yc)) / (-1.0 + xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom7
                + ((72.0 * myi) * num9 * M_PI * H1((1.0 - xc) / (1.0 - yc), 2.0 / (1.0 - yc)) * power_of<2>(log((-0.5) * (((1.0 + xc) * (1.0 - yc)) / (-1.0 + xc)))) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1(-2.0 / (-1.0 - w3), 2.0 / (1.0 - yc)) * power_of<2>(log((w3 + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom6 + ((144.0 * myi) * num10 * M_PI * H1(-2.0 / (-1.0 + xc), 2.0 / (1.0 - yc)) * power_of<2>(log((-xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom7 - ((72.0 * myi) * num9 * M_PI * H1(-2.0 / (-1.0 + xc), 2.0 / (1.0 - yc)) * power_of<2>(log((-xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom6
                + ((144.0 * myi) * num10 * M_PI * H1(-2.0 / (-1.0 - xc), 2.0 / (1.0 - yc)) * power_of<2>(log((xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom7 - ((72.0 * myi) * num9 * M_PI * H1(-2.0 / (-1.0 - xc), 2.0 / (1.0 - yc)) * power_of<2>(log((xc + yc) / 2.0)) * my_sign(2.0 * imag(1.0 / (1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((1.0 + w3) / (1.0 - yc), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log(-(((-w3 - xc) * (1.0 - yc)) / ((-1.0 - w3) * (1.0 - xc))))) * my_sign(imag((1.0 - xc) / (1.0 - yc)))) / denom6
                - ((18.0 * myi) * num11 * M_PI * H1((1.0 - w3) / (1.0 - yc), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log(-(((w3 - xc) * (1.0 - yc)) / ((-1.0 + w3) * (1.0 - xc))))) * my_sign(imag((1.0 - xc) / (1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((-1.0 + xc) / (-1.0 - w3), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log((-w3 - yc) / (-1.0 + xc))) * my_sign(imag((1.0 - xc) / (1.0 - yc)))) / denom6 + ((18.0 * myi) * num11 * M_PI * H1((-1.0 + xc) / (-1.0 + w3), (1.0 - xc) / (1.0 - yc)) * power_of<2>(log((w3 - yc) / (-1.0 + xc))) * my_sign(imag((1.0 - xc) / (1.0 - yc)))) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1((1.0 + w3) / (1.0 - yc), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log(-(((-w3 + xc) * (1.0 - yc)) / ((-1.0 - w3) * (1.0 + xc))))) * my_sign(imag((1.0 + xc) / (1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((1.0 - w3) / (1.0 - yc), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log(-(((w3 + xc) * (1.0 - yc)) / ((-1.0 + w3) * (1.0 + xc))))) * my_sign(imag((1.0 + xc) / (1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1((-1.0 - xc) / (-1.0 - w3), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log((-w3 - yc) / (-1.0 - xc))) * my_sign(imag((1.0 + xc) / (1.0 - yc)))) / denom6
                + ((18.0 * myi) * num11 * M_PI * H1((-1.0 - xc) / (-1.0 + w3), (1.0 + xc) / (1.0 - yc)) * power_of<2>(log((w3 - yc) / (-1.0 - xc))) * my_sign(imag((1.0 + xc) / (1.0 - yc)))) / denom6 - ((18.0 * myi) * num11 * M_PI * H1(-w3inv, -ycinv) * power_of<2>(log(-w3 + yc)) * my_sign(-imycinv)) / denom6 + ((18.0 * myi) * num11 * M_PI * H1(w3inv, -ycinv) * power_of<2>(log(w3 + yc)) * my_sign(-imycinv)) / denom6 - ((18.0 * myi) * num11 * M_PI * H1(-w3inv, ycinv) * power_of<2>(log(-w3 - yc)) * my_sign(imycinv)) / denom6 + ((18.0 * myi) * num11 * M_PI * H1(w3inv, ycinv) * power_of<2>(log(w3 - yc)) * my_sign(imycinv)) / denom6
                + ((36.0 * myi) * num11 * M_PI * power_of<2>(log((1.0 - w3) / 2.0)) * my_sign(imw3 / 2.0) * T(1.0, 1.0 / 2.0, (1.0 - w3) / 2.0)) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(-(w3 / (-1.0 - w3)))) * my_sign(imag(1.0 / (-1.0 - w3))) * T(1.0, 1.0 / 2.0, -(w3 / (-1.0 - w3)))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(w3 / (1.0 + w3))) * my_sign(-imag(1.0 / (1.0 + w3))) * T(1.0, 1.0 / 2.0, w3 / (1.0 + w3))) / denom6 + ((288.0 * myi) * num10 * M_PI * power_of<2>(log((1.0 - xc) / 2.0)) * my_sign(imxc / 2.0) * T(1.0, 1.0 / 2.0, (1.0 - xc) / 2.0)) / denom7 - ((144.0 * myi) * num9 * M_PI * power_of<2>(log((1.0 - xc) / 2.0)) * my_sign(imxc / 2.0) * T(1.0, 1.0 / 2.0, (1.0 - xc) / 2.0)) / denom6
                + ((144.0 * myi) * num10 * M_PI * power_of<2>(log(-(xc / (-1.0 - xc)))) * my_sign(imag(1.0 / (-1.0 - xc))) * T(1.0, 1.0 / 2.0, -(xc / (-1.0 - xc)))) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(log(-(xc / (-1.0 - xc)))) * my_sign(imag(1.0 / (-1.0 - xc))) * T(1.0, 1.0 / 2.0, -(xc / (-1.0 - xc)))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(log(-(xc / (1.0 - xc)))) * my_sign(-imag(1.0 / (1.0 - xc))) * T(1.0, 1.0 / 2.0, -(xc / (1.0 - xc)))) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(log(-(xc / (1.0 - xc)))) * my_sign(-imag(1.0 / (1.0 - xc))) * T(1.0, 1.0 / 2.0, -(xc / (1.0 - xc)))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(lnr_xc2) * my_sign(imag(1.0 / (-1.0 + xc))) * T(1.0, 1.0 / 2.0, xc / (-1.0 + xc))) / denom7
                - ((72.0 * myi) * num9 * M_PI * power_of<2>(lnr_xc2) * my_sign(imag(1.0 / (-1.0 + xc))) * T(1.0, 1.0 / 2.0, xc / (-1.0 + xc))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(lnr_xc1) * my_sign(-imag(1.0 / (1.0 + xc))) * T(1.0, 1.0 / 2.0, xc / (1.0 + xc))) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(lnr_xc1) * my_sign(-imag(1.0 / (1.0 + xc))) * T(1.0, 1.0 / 2.0, xc / (1.0 + xc))) / denom6 + ((288.0 * myi) * num10 * M_PI * power_of<2>(log((1.0 + xc) / 2.0)) * my_sign((-0.5) * imxc) * T(1.0, 1.0 / 2.0, (1.0 + xc) / 2.0)) / denom7 - ((144.0 * myi) * num9 * M_PI * power_of<2>(log((1.0 + xc) / 2.0)) * my_sign((-0.5) * imxc) * T(1.0, 1.0 / 2.0, (1.0 + xc) / 2.0)) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log(-(w3 / (-1.0 - w3)))) * my_sign(imag(1.0 / (-1.0 - w3))) * T(1.0, -(xc / (-1.0 - xc)), -(w3 / (-1.0 - w3)))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(w3 / (-1.0 + w3))) * my_sign(imag(1.0 / (-1.0 + w3))) * T(1.0, -(xc / (-1.0 - xc)), w3 / (-1.0 + w3))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 + w3) / (-1.0 - xc))) * T(1.0, -(xc / (-1.0 - xc)), (-w3 - xc) / (-1.0 - xc))) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 - w3) / (-1.0 - xc))) * T(1.0, -(xc / (-1.0 - xc)), (w3 - xc) / (-1.0 - xc))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(-(w3 / (1.0 - w3)))) * my_sign(-imag(1.0 / (1.0 - w3))) * T(1.0, -(xc / (1.0 - xc)), -(w3 / (1.0 - w3)))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log(w3 / (1.0 + w3))) * my_sign(-imag(1.0 / (1.0 + w3))) * T(1.0, -(xc / (1.0 - xc)), w3 / (1.0 + w3))) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 + w3) / (1.0 - xc))) * T(1.0, -(xc / (1.0 - xc)), (-w3 - xc) / (1.0 - xc))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 - w3) / (1.0 - xc))) * T(1.0, -(xc / (1.0 - xc)), (w3 - xc) / (1.0 - xc))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log(-(w3 / (-1.0 - w3)))) * my_sign(imag(1.0 / (-1.0 - w3))) * T(1.0, xc / (-1.0 + xc), -(w3 / (-1.0 - w3)))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(w3 / (-1.0 + w3))) * my_sign(imag(1.0 / (-1.0 + w3))) * T(1.0, xc / (-1.0 + xc), w3 / (-1.0 + w3))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 + w3) / (-1.0 + xc))) * T(1.0, xc / (-1.0 + xc), (-w3 + xc) / (-1.0 + xc))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 - w3) / (-1.0 + xc))) * T(1.0, xc / (-1.0 + xc), (w3 + xc) / (-1.0 + xc))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(-(w3 / (1.0 - w3)))) * my_sign(-imag(1.0 / (1.0 - w3))) * T(1.0, xc / (1.0 + xc), -(w3 / (1.0 - w3)))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log(w3 / (1.0 + w3))) * my_sign(-imag(1.0 / (1.0 + w3))) * T(1.0, xc / (1.0 + xc), w3 / (1.0 + w3))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 + w3) / (1.0 + xc))) * T(1.0, xc / (1.0 + xc), (-w3 + xc) / (1.0 + xc))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 - w3) / (1.0 + xc))) * T(1.0, xc / (1.0 + xc), (w3 + xc) / (1.0 + xc))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((1.0 - w3) / 2.0)) * my_sign(imw3 / 2.0) * T(1.0, (1.0 - yc) / 2.0, (1.0 - w3) / 2.0)) / denom6 + ((36.0 * myi) * num11 * M_PI * log((1.0 - w3) / 2.0) * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 - w3) / 2.0)) / denom6 - ((144.0 * myi) * num10 * M_PI * power_of<2>(log((1.0 - xc) / 2.0)) * my_sign(imxc / 2.0) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0)) / denom7
                + ((72.0 * myi) * num9 * M_PI * power_of<2>(log((1.0 - xc) / 2.0)) * my_sign(imxc / 2.0) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0)) / denom6 + ((288.0 * myi) * num10 * M_PI * ln1mxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0)) / denom7 - ((144.0 * myi) * num9 * M_PI * ln1mxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 - xc) / 2.0)) / denom6 - ((144.0 * myi) * num10 * M_PI * power_of<2>(log((1.0 + xc) / 2.0)) * my_sign((-0.5) * imxc) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0)) / denom7 + ((72.0 * myi) * num9 * M_PI * power_of<2>(log((1.0 + xc) / 2.0)) * my_sign((-0.5) * imxc) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0)) / denom6
                + ((288.0 * myi) * num10 * M_PI * ln1pxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0)) / denom7 - ((144.0 * myi) * num9 * M_PI * ln1pxchalf * ln1pyc * my_sign(-2.0 * imag(1.0 / (-1.0 - yc))) * T(1.0, (1.0 - yc) / 2.0, (1.0 + xc) / 2.0)) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - yc) / (1.0 + w3))) * my_sign(imag((1.0 + yc) / (1.0 + w3))) * T(1.0, (1.0 - yc) / 2.0, (w3 - yc) / (1.0 + w3))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(log((-xc - yc) / (1.0 - xc))) * my_sign(imag((1.0 + yc) / (1.0 - xc))) * T(1.0, (1.0 - yc) / 2.0, (-xc - yc) / (1.0 - xc))) / denom7
                - ((72.0 * myi) * num9 * M_PI * power_of<2>(log((-xc - yc) / (1.0 - xc))) * my_sign(imag((1.0 + yc) / (1.0 - xc))) * T(1.0, (1.0 - yc) / 2.0, (-xc - yc) / (1.0 - xc))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(log((xc - yc) / (1.0 + xc))) * my_sign(imag((1.0 + yc) / (1.0 + xc))) * T(1.0, (1.0 - yc) / 2.0, (xc - yc) / (1.0 + xc))) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(log((xc - yc) / (1.0 + xc))) * my_sign(imag((1.0 + yc) / (1.0 + xc))) * T(1.0, (1.0 - yc) / 2.0, (xc - yc) / (1.0 + xc))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(1.0 - w3)) * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6
                - ((36.0 * myi) * num11 * M_PI * log(1.0 - w3) * log((-w3 - xc) / (-1.0 - xc)) * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6 - ((36.0 * myi) * num11 * M_PI * log(1.0 - w3) * log((-w3 + xc) / (-1.0 + xc)) * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6 + dilog((-1.0 + w3) / (-1.0 - xc)) * ((-18.0 * num11 * log(w3 / (-1.0 + w3))) / denom6 + (18.0 * num11 * log((w3 - yc) / (-1.0 + w3))) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6)

                + dilog((-1.0 + w3) / (-1.0 + xc)) * ((-18.0 * num11 * log(w3 / (-1.0 + w3))) / denom6 + (18.0 * num11 * log((w3 - yc) / (-1.0 + w3))) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6) - ((36.0 * myi) * num11 * M_PI * log((1.0 - w3) / 2.0) * log(1.0 + w3) * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6 + ((36.0 * myi) * num11 * M_PI * log(1.0 + w3) * log((w3 - xc) / (-1.0 - xc)) * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6
                + ((36.0 * myi) * num11 * M_PI * log(1.0 + w3) * log((w3 + xc) / (-1.0 + xc)) * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6 + dilog(-1.0 / (-1.0 - xc)) * ((72.0 * num6) / denom5 - (144.0 * num10 * lnhalf) / denom7 + (72.0 * num9 * lnhalf) / denom6 - (18.0 * num11 * log(-(w3 / (-1.0 - w3)))) / denom6 + (18.0 * num11 * log(w3 / (-1.0 + w3))) / denom6 - (36.0 * num9 * ln1myc) / denom6 + (18.0 * num11 * log((-w3 - yc) / (-1.0 - w3))) / denom6 - (18.0 * num11 * log((w3 - yc) / (-1.0 + w3))) / denom6 + (36.0 * num9 * ln1pyc) / denom6
                  + ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6) + dilog(-1.0 / (-1.0 + xc)) * ((72.0 * num6) / denom5 - (144.0 * num10 * lnhalf) / denom7 + (72.0 * num9 * lnhalf) / denom6 - (18.0 * num11 * log(-(w3 / (-1.0 - w3)))) / denom6 + (18.0 * num11 * log(w3 / (-1.0 + w3))) / denom6 - (36.0 * num9 * ln1myc) / denom6 + (18.0 * num11 * log((-w3 - yc) / (-1.0 - w3))) / denom6 - (18.0 * num11 * log((w3 - yc) / (-1.0 + w3))) / denom6
                  + (36.0 * num9 * ln1pyc) / denom6 + ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 - yc, 1.0 - w3)) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6) + dilog((-1.0 - w3) / (-1.0 - xc)) * ((18.0 * num11 * log(-(w3 / (-1.0 - w3)))) / denom6 - (18.0 * num11 * log((-w3 - yc) / (-1.0 - w3))) / denom6 + ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6)
                + dilog((-1.0 - w3) / (-1.0 + xc)) * ((18.0 * num11 * log(-(w3 / (-1.0 - w3)))) / denom6 - (18.0 * num11 * log((-w3 - yc) / (-1.0 - w3))) / denom6 + ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6) + ((144.0 * myi) * num6 * M_PI * ln1mxc * my_sign(imag(xcinv)) * t11myc1mxc) / denom5 + ((72.0 * myi) * num9 * M_PI * ln1mxc * ln1pyc * my_sign(imag(xcinv)) * t11myc1mxc) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11myc1mxc) / denom7
                - ((72.0 * myi) * num9 * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11myc1mxc) / denom6 - ((36.0 * myi) * num11 * M_PI * ln1mxc * log((-w3 - xc) / (-1.0 - w3)) * my_sign(imxc) * t11myc1mxc) / denom6 + ((36.0 * myi) * num11 * M_PI * ln1mxc * log((w3 - xc) / (-1.0 + w3)) * my_sign(imxc) * t11myc1mxc) / denom6 - ((288.0 * myi) * num10 * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11myc1mxc) / denom7 + ((144.0 * myi) * num9 * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11myc1mxc) / denom6
                + ((36.0 * myi) * num11 * M_PI * ln1mxc * log((-w3 - yc) / (-1.0 - w3)) * my_sign(imxc) * t11myc1mxc) / denom6 - ((36.0 * myi) * num11 * M_PI * ln1mxc * log((w3 - yc) / (-1.0 + w3)) * my_sign(imxc) * t11myc1mxc) / denom6 - ((72.0 * myi) * num9 * M_PI * ln1mxc * ln1myc * my_sign(imycinv) * t11myc1mxc) / denom6 + ((144.0 * myi) * num6 * M_PI * ln1pxc * my_sign(-imag(xcinv)) * t11myc1pxc) / denom5 + ((72.0 * myi) * num9 * M_PI * ln1pxc * ln1pyc * my_sign(-imag(xcinv)) * t11myc1pxc) / denom6
                - ((288.0 * myi) * num10 * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11myc1pxc) / denom7 + ((144.0 * myi) * num9 * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11myc1pxc) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11myc1pxc) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11myc1pxc) / denom6 - ((36.0 * myi) * num11 * M_PI * ln1pxc * log((-w3 + xc) / (-1.0 - w3)) * my_sign(-imxc) * t11myc1pxc) / denom6
                + ((36.0 * myi) * num11 * M_PI * ln1pxc * log((w3 + xc) / (-1.0 + w3)) * my_sign(-imxc) * t11myc1pxc) / denom6 + ((36.0 * myi) * num11 * M_PI * ln1pxc * log((-w3 - yc) / (-1.0 - w3)) * my_sign(-imxc) * t11myc1pxc) / denom6 - ((36.0 * myi) * num11 * M_PI * ln1pxc * log((w3 - yc) / (-1.0 + w3)) * my_sign(-imxc) * t11myc1pxc) / denom6 - ((72.0 * myi) * num9 * M_PI * ln1pxc * ln1myc * my_sign(imycinv) * t11myc1pxc) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(1.0 - yc / w3)) * my_sign(imag(yc / w3)) * T(1.0, 1.0 - yc, 1.0 - yc / w3)) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log(1.0 + yc / w3)) * my_sign(-imag(yc / w3)) * T(1.0, 1.0 - yc, 1.0 + yc / w3)) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 + w3) / (-1.0 - xc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (-w3 - xc) / (-1.0 - xc))) / denom6 + ((36.0 * myi) * num11 * M_PI * log((-w3 - xc) / (-1.0 - xc)) * ln1myc * my_sign(imag((1.0 + xc) / (1.0 - yc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (-w3 - xc) / (-1.0 - xc))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - xc) / (-1.0 - xc))) * my_sign(imag((-1.0 - w3) / (-1.0 - xc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (w3 - xc) / (-1.0 - xc))) / denom6 - ((36.0 * myi) * num11 * M_PI * log((w3 - xc) / (-1.0 - xc)) * ln1myc * my_sign(imag((1.0 + xc) / (1.0 - yc))) * T(1.0, (-xc - yc) / (-1.0 - xc), (w3 - xc) / (-1.0 - xc))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - yc) / (-1.0 - w3))) * my_sign(imag((-1.0 + yc) / (-1.0 - w3))) * T(1.0, (-xc - yc) / (-1.0 - xc), (-w3 - yc) / (-1.0 - w3))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - yc) / (-1.0 + w3))) * my_sign(imag((-1.0 + yc) / (-1.0 + w3))) * T(1.0, (-xc - yc) / (-1.0 - xc), (w3 - yc) / (-1.0 + w3))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 + w3) / (1.0 - xc))) * T(1.0, (-xc - yc) / (1.0 - xc), (-w3 - xc) / (1.0 - xc))) / denom6 - ((36.0 * myi) * num11 * M_PI * log((-w3 - xc) / (1.0 - xc)) * ln1pyc * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) * T(1.0, (-xc - yc) / (1.0 - xc), (-w3 - xc) / (1.0 - xc))) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - xc) / (1.0 - xc))) * my_sign(imag((1.0 - w3) / (1.0 - xc))) * T(1.0, (-xc - yc) / (1.0 - xc), (w3 - xc) / (1.0 - xc))) / denom6 + ((36.0 * myi) * num11 * M_PI * log((w3 - xc) / (1.0 - xc)) * ln1pyc * my_sign(imag((-1.0 + xc) / (-1.0 - yc))) * T(1.0, (-xc - yc) / (1.0 - xc), (w3 - xc) / (1.0 - xc))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - yc) / (1.0 - w3))) * my_sign(imag((1.0 + yc) / (1.0 - w3))) * T(1.0, (-xc - yc) / (1.0 - xc), (-w3 - yc) / (1.0 - w3))) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - yc) / (1.0 + w3))) * my_sign(imag((1.0 + yc) / (1.0 + w3))) * T(1.0, (-xc - yc) / (1.0 - xc), (w3 - yc) / (1.0 + w3))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 + w3) / (-1.0 + xc))) * T(1.0, (xc - yc) / (-1.0 + xc), (-w3 + xc) / (-1.0 + xc))) / denom6 + ((36.0 * myi) * num11 * M_PI * log((-w3 + xc) / (-1.0 + xc)) * ln1myc * my_sign(imag((1.0 - xc) / (1.0 - yc))) * T(1.0, (xc - yc) / (-1.0 + xc), (-w3 + xc) / (-1.0 + xc))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 + xc) / (-1.0 + xc))) * my_sign(imag((-1.0 - w3) / (-1.0 + xc))) * T(1.0, (xc - yc) / (-1.0 + xc), (w3 + xc) / (-1.0 + xc))) / denom6 - ((36.0 * myi) * num11 * M_PI * log((w3 + xc) / (-1.0 + xc)) * ln1myc * my_sign(imag((1.0 - xc) / (1.0 - yc))) * T(1.0, (xc - yc) / (-1.0 + xc), (w3 + xc) / (-1.0 + xc))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - yc) / (-1.0 - w3))) * my_sign(imag((-1.0 + yc) / (-1.0 - w3))) * T(1.0, (xc - yc) / (-1.0 + xc), (-w3 - yc) / (-1.0 - w3))) / denom6
                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - yc) / (-1.0 + w3))) * my_sign(imag((-1.0 + yc) / (-1.0 + w3))) * T(1.0, (xc - yc) / (-1.0 + xc), (w3 - yc) / (-1.0 + w3))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 + w3) / (1.0 + xc))) * T(1.0, (xc - yc) / (1.0 + xc), (-w3 + xc) / (1.0 + xc))) / denom6 - ((36.0 * myi) * num11 * M_PI * log((-w3 + xc) / (1.0 + xc)) * ln1pyc * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) * T(1.0, (xc - yc) / (1.0 + xc), (-w3 + xc) / (1.0 + xc))) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 + xc) / (1.0 + xc))) * my_sign(imag((1.0 - w3) / (1.0 + xc))) * T(1.0, (xc - yc) / (1.0 + xc), (w3 + xc) / (1.0 + xc))) / denom6 + ((36.0 * myi) * num11 * M_PI * log((w3 + xc) / (1.0 + xc)) * ln1pyc * my_sign(imag((-1.0 - xc) / (-1.0 - yc))) * T(1.0, (xc - yc) / (1.0 + xc), (w3 + xc) / (1.0 + xc))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - yc) / (1.0 - w3))) * my_sign(imag((1.0 + yc) / (1.0 - w3))) * T(1.0, (xc - yc) / (1.0 + xc), (-w3 - yc) / (1.0 - w3))) / denom6
                - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((w3 - yc) / (1.0 + w3))) * my_sign(imag((1.0 + yc) / (1.0 + w3))) * T(1.0, (xc - yc) / (1.0 + xc), (w3 - yc) / (1.0 + w3))) / denom6 - ((18.0 * myi) * num11 * M_PI * power_of<2>(log((1.0 - w3) / 2.0)) * my_sign(imw3 / 2.0) * T(1.0, (1.0 + yc) / 2.0, (1.0 - w3) / 2.0)) / denom6 + ((36.0 * myi) * num11 * M_PI * log((1.0 - w3) / 2.0) * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 - w3) / 2.0)) / denom6 - ((144.0 * myi) * num10 * M_PI * power_of<2>(log((1.0 - xc) / 2.0)) * my_sign(imxc / 2.0) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0)) / denom7
                + ((72.0 * myi) * num9 * M_PI * power_of<2>(log((1.0 - xc) / 2.0)) * my_sign(imxc / 2.0) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0)) / denom6 + ((288.0 * myi) * num10 * M_PI * ln1mxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0)) / denom7 - ((144.0 * myi) * num9 * M_PI * ln1mxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 - xc) / 2.0)) / denom6 - ((144.0 * myi) * num10 * M_PI * power_of<2>(log((1.0 + xc) / 2.0)) * my_sign((-0.5) * imxc) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0)) / denom7 + ((72.0 * myi) * num9 * M_PI * power_of<2>(log((1.0 + xc) / 2.0)) * my_sign((-0.5) * imxc) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0)) / denom6
                + ((288.0 * myi) * num10 * M_PI * ln1pxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0)) / denom7 - ((144.0 * myi) * num9 * M_PI * ln1pxchalf * ln1myc * my_sign(2.0 * imag(1.0 / (1.0 - yc))) * T(1.0, (1.0 + yc) / 2.0, (1.0 + xc) / 2.0)) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log((-w3 - yc) / (-1.0 - w3))) * my_sign(imag((-1.0 + yc) / (-1.0 - w3))) * T(1.0, (1.0 + yc) / 2.0, (-w3 - yc) / (-1.0 - w3))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(log((-xc - yc) / (-1.0 - xc))) * my_sign(imag((-1.0 + yc) / (-1.0 - xc))) * T(1.0, (1.0 + yc) / 2.0, (-xc - yc) / (-1.0 - xc))) / denom7
                - ((72.0 * myi) * num9 * M_PI * power_of<2>(log((-xc - yc) / (-1.0 - xc))) * my_sign(imag((-1.0 + yc) / (-1.0 - xc))) * T(1.0, (1.0 + yc) / 2.0, (-xc - yc) / (-1.0 - xc))) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(log((xc - yc) / (-1.0 + xc))) * my_sign(imag((-1.0 + yc) / (-1.0 + xc))) * T(1.0, (1.0 + yc) / 2.0, (xc - yc) / (-1.0 + xc))) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(log((xc - yc) / (-1.0 + xc))) * my_sign(imag((-1.0 + yc) / (-1.0 + xc))) * T(1.0, (1.0 + yc) / 2.0, (xc - yc) / (-1.0 + xc))) / denom6 + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(1.0 - w3)) * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6
                - ((36.0 * myi) * num11 * M_PI * log(1.0 - w3) * log((w3 - xc) / (1.0 - xc)) * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6 - ((36.0 * myi) * num11 * M_PI * log(1.0 - w3) * log((w3 + xc) / (1.0 + xc)) * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6 + dilog((1.0 - w3) / (1.0 - xc)) * ((-18.0 * num11 * log(-(w3 / (1.0 - w3)))) / denom6 + (18.0 * num11 * log((-w3 - yc) / (1.0 - w3))) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6)

                + dilog((1.0 - w3) / (1.0 + xc)) * ((-18.0 * num11 * log(-(w3 / (1.0 - w3)))) / denom6 + (18.0 * num11 * log((-w3 - yc) / (1.0 - w3))) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6) - ((36.0 * myi) * num11 * M_PI * log((1.0 - w3) / 2.0) * log(1.0 + w3) * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6 + ((36.0 * myi) * num11 * M_PI * log(1.0 + w3) * log((-w3 - xc) / (1.0 - xc)) * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6
                + ((36.0 * myi) * num11 * M_PI * log(1.0 + w3) * log((-w3 + xc) / (1.0 + xc)) * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6 + dilog((1.0 + w3) / 2.0) * ((-18.0 * num11 * log(-(w3 / (-1.0 - w3)))) / denom6 - (18.0 * num11 * log(w3 / (1.0 + w3))) / denom6 + (18.0 * num11 * log((-w3 - yc) / (-1.0 - w3))) / denom6 + (18.0 * num11 * log((w3 - yc) / (1.0 + w3))) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6)
                + dilog(1.0 / (1.0 - xc)) * ((-72.0 * num6) / denom5 - (144.0 * num10 * lnhalf) / denom7 + (72.0 * num9 * lnhalf) / denom6 + (18.0 * num11 * log(-(w3 / (1.0 - w3)))) / denom6 - (18.0 * num11 * log(w3 / (1.0 + w3))) / denom6 + (36.0 * num9 * ln1myc) / denom6 - (18.0 * num11 * log((-w3 - yc) / (1.0 - w3))) / denom6 + (18.0 * num11 * log((w3 - yc) / (1.0 + w3))) / denom6 - (36.0 * num9 * ln1pyc) / denom6 + ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6
                  - ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6) + dilog(1.0 / (1.0 + xc)) * ((-72.0 * num6) / denom5 - (144.0 * num10 * lnhalf) / denom7 + (72.0 * num9 * lnhalf) / denom6 + (18.0 * num11 * log(-(w3 / (1.0 - w3)))) / denom6 - (18.0 * num11 * log(w3 / (1.0 + w3))) / denom6 + (36.0 * num9 * ln1myc) / denom6 - (18.0 * num11 * log((-w3 - yc) / (1.0 - w3))) / denom6 + (18.0 * num11 * log((w3 - yc) / (1.0 + w3))) / denom6 - (36.0 * num9 * ln1pyc) / denom6
                  + ((36.0 * myi) * num11 * M_PI * my_sign(imw3) * T(1.0, 1.0 + yc, 1.0 - w3)) / denom6 - ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6) + dilog((1.0 + w3) / (1.0 - xc)) * ((18.0 * num11 * log(w3 / (1.0 + w3))) / denom6 - (18.0 * num11 * log((w3 - yc) / (1.0 + w3))) / denom6 + ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6)
                + dilog((1.0 + w3) / (1.0 + xc)) * ((18.0 * num11 * log(w3 / (1.0 + w3))) / denom6 - (18.0 * num11 * log((w3 - yc) / (1.0 + w3))) / denom6 + ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6) - ((144.0 * myi) * num6 * M_PI * ln1mxc * my_sign(imag(xcinv)) * t11pyc1mxc) / denom5 + ((72.0 * myi) * num9 * M_PI * ln1mxc * ln1myc * my_sign(imag(xcinv)) * t11pyc1mxc) / denom6 + ((144.0 * myi) * num10 * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11pyc1mxc) / denom7
                - ((72.0 * myi) * num9 * M_PI * power_of<2>(ln1mxc) * my_sign(imxc) * t11pyc1mxc) / denom6 - ((288.0 * myi) * num10 * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11pyc1mxc) / denom7 + ((144.0 * myi) * num9 * M_PI * ln1mxc * ln1pxchalf * my_sign(imxc) * t11pyc1mxc) / denom6 + ((36.0 * myi) * num11 * M_PI * ln1mxc * log((-w3 + xc) / (1.0 - w3)) * my_sign(imxc) * t11pyc1mxc) / denom6 - ((36.0 * myi) * num11 * M_PI * ln1mxc * log((w3 + xc) / (1.0 + w3)) * my_sign(imxc) * t11pyc1mxc) / denom6
                - ((36.0 * myi) * num11 * M_PI * ln1mxc * log((-w3 - yc) / (1.0 - w3)) * my_sign(imxc) * t11pyc1mxc) / denom6 + ((36.0 * myi) * num11 * M_PI * ln1mxc * log((w3 - yc) / (1.0 + w3)) * my_sign(imxc) * t11pyc1mxc) / denom6 - ((72.0 * myi) * num9 * M_PI * ln1mxc * ln1pyc * my_sign(-imycinv) * t11pyc1mxc) / denom6
                + dilog((1.0 - xc) / 2.0) * ((36.0 * num3) / denom3 - (72.0 * num9 * ln1mxc) / denom6 - (144.0 * num10 * log(-(xc / (1.0 - xc)))) / denom7 + (72.0 * num9 * log(-(xc / (1.0 - xc)))) / denom6 - (144.0 * num10 * lnr_xc2) / denom7 + (72.0 * num9 * lnr_xc2) / denom6 - (36.0 * num9 * ln1myc) / denom6 + (144.0 * num10 * log((-xc - yc) / (1.0 - xc))) / denom7 - (72.0 * num9 * log((-xc - yc) / (1.0 - xc))) / denom6 + (144.0 * num10 * log((xc - yc) / (-1.0 + xc))) / denom7 - (72.0 * num9 * log((xc - yc) / (-1.0 + xc))) / denom6 - (36.0 * num9 * ln1pyc) / denom6
                  + (36.0 * num11 * log(1.0 - yc / w3)) / denom6 + (36.0 * num11 * log(1.0 + yc / w3)) / denom6 + (144.0 * num10 * log(1.0 - yc * xcinv)) / denom7 + (144.0 * num10 * log(1.0 + yc * xcinv)) / denom7 - ((288.0 * myi) * num10 * M_PI * my_sign(imxc) * t11myc1mxc) / denom7 + ((144.0 * myi) * num9 * M_PI * my_sign(imxc) * t11myc1mxc) / denom6 - ((288.0 * myi) * num10 * M_PI * my_sign(imxc) * t11pyc1mxc) / denom7 + ((144.0 * myi) * num9 * M_PI * my_sign(imxc) * t11pyc1mxc) / denom6) - ((144.0 * myi) * num6 * M_PI * ln1pxc * my_sign(-imag(xcinv)) * t11pyc1pxc) / denom5
                + ((72.0 * myi) * num9 * M_PI * ln1pxc * ln1myc * my_sign(-imag(xcinv)) * t11pyc1pxc) / denom6 - ((288.0 * myi) * num10 * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11pyc1pxc) / denom7 + ((144.0 * myi) * num9 * M_PI * ln1mxchalf * ln1pxc * my_sign(-imxc) * t11pyc1pxc) / denom6 + ((36.0 * myi) * num11 * M_PI * log((-w3 - xc) / (1.0 - w3)) * ln1pxc * my_sign(-imxc) * t11pyc1pxc) / denom6 - ((36.0 * myi) * num11 * M_PI * log((w3 - xc) / (1.0 + w3)) * ln1pxc * my_sign(-imxc) * t11pyc1pxc) / denom6
                + ((144.0 * myi) * num10 * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11pyc1pxc) / denom7 - ((72.0 * myi) * num9 * M_PI * power_of<2>(ln1pxc) * my_sign(-imxc) * t11pyc1pxc) / denom6 - ((36.0 * myi) * num11 * M_PI * ln1pxc * log((-w3 - yc) / (1.0 - w3)) * my_sign(-imxc) * t11pyc1pxc) / denom6 + ((36.0 * myi) * num11 * M_PI * ln1pxc * log((w3 - yc) / (1.0 + w3)) * my_sign(-imxc) * t11pyc1pxc) / denom6 - ((72.0 * myi) * num9 * M_PI * ln1pxc * ln1pyc * my_sign(-imycinv) * t11pyc1pxc) / denom6
                + li2half * ((18.0 * num1) / denom1 - (72.0 * num3) / denom3 + (18.0 * num5) / denom4 + (18.0 * num11 * log(-(w3 / (-1.0 - w3)))) / denom6 + (18.0 * num11 * log(w3 / (1.0 + w3))) / denom6 + (144.0 * num10 * log(-(xc / (-1.0 - xc)))) / denom7 - (72.0 * num9 * log(-(xc / (-1.0 - xc)))) / denom6 + (144.0 * num10 * log(-(xc / (1.0 - xc)))) / denom7 - (72.0 * num9 * log(-(xc / (1.0 - xc)))) / denom6 + (144.0 * num10 * lnr_xc2) / denom7 - (72.0 * num9 * lnr_xc2) / denom6 + (144.0 * num10 * lnr_xc1) / denom7 - (72.0 * num9 * lnr_xc1) / denom6
                  + (72.0 * num9 * ln1myc) / denom6 - (18.0 * num11 * log((-w3 - yc) / (-1.0 - w3))) / denom6 - (18.0 * num11 * log((w3 - yc) / (1.0 + w3))) / denom6 - (144.0 * num10 * log((-xc - yc) / (-1.0 - xc))) / denom7 + (72.0 * num9 * log((-xc - yc) / (-1.0 - xc))) / denom6 - (144.0 * num10 * log((-xc - yc) / (1.0 - xc))) / denom7 + (72.0 * num9 * log((-xc - yc) / (1.0 - xc))) / denom6 - (144.0 * num10 * log((xc - yc) / (-1.0 + xc))) / denom7 + (72.0 * num9 * log((xc - yc) / (-1.0 + xc))) / denom6 - (144.0 * num10 * log((xc - yc) / (1.0 + xc))) / denom7 + (72.0 * num9 * log((xc - yc) / (1.0 + xc))) / denom6
                  + (72.0 * num9 * ln1pyc) / denom6 - (72.0 * num11 * log(1.0 - yc / w3)) / denom6 - (72.0 * num11 * log(1.0 + yc / w3)) / denom6 - (288.0 * num10 * log(1.0 - yc * xcinv)) / denom7 - (288.0 * num10 * log(1.0 + yc * xcinv)) / denom7 + ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 - yc, 1.0 + w3)) / denom6 + ((288.0 * myi) * num10 * M_PI * my_sign(imxc) * t11myc1mxc) / denom7 - ((144.0 * myi) * num9 * M_PI * my_sign(imxc) * t11myc1mxc) / denom6 + ((288.0 * myi) * num10 * M_PI * my_sign(-imxc) * t11myc1pxc) / denom7 - ((144.0 * myi) * num9 * M_PI * my_sign(-imxc) * t11myc1pxc) / denom6
                  + ((36.0 * myi) * num11 * M_PI * my_sign(-imw3) * T(1.0, 1.0 + yc, 1.0 + w3)) / denom6 + ((288.0 * myi) * num10 * M_PI * my_sign(imxc) * t11pyc1mxc) / denom7 - ((144.0 * myi) * num9 * M_PI * my_sign(imxc) * t11pyc1mxc) / denom6 + ((288.0 * myi) * num10 * M_PI * my_sign(-imxc) * t11pyc1pxc) / denom7 - ((144.0 * myi) * num9 * M_PI * my_sign(-imxc) * t11pyc1pxc) / denom6)
                + dilog((1.0 + xc) / 2.0) * ((36.0 * num3) / denom3 - (144.0 * num10 * log(-(xc / (-1.0 - xc)))) / denom7 + (72.0 * num9 * log(-(xc / (-1.0 - xc)))) / denom6 - (144.0 * num10 * lnr_xc1) / denom7 + (72.0 * num9 * lnr_xc1) / denom6 - (72.0 * num9 * ln1pxc) / denom6 - (36.0 * num9 * ln1myc) / denom6 + (144.0 * num10 * log((-xc - yc) / (-1.0 - xc))) / denom7 - (72.0 * num9 * log((-xc - yc) / (-1.0 - xc))) / denom6 + (144.0 * num10 * log((xc - yc) / (1.0 + xc))) / denom7 - (72.0 * num9 * log((xc - yc) / (1.0 + xc))) / denom6 - (36.0 * num9 * ln1pyc) / denom6
                  + (36.0 * num11 * log(1.0 - yc / w3)) / denom6 + (36.0 * num11 * log(1.0 + yc / w3)) / denom6 + (144.0 * num10 * log(1.0 - yc * xcinv)) / denom7 + (144.0 * num10 * log(1.0 + yc * xcinv)) / denom7 - ((288.0 * myi) * num10 * M_PI * my_sign(-imxc) * t11myc1pxc) / denom7 + ((144.0 * myi) * num9 * M_PI * my_sign(-imxc) * t11myc1pxc) / denom6 - ((288.0 * myi) * num10 * M_PI * my_sign(-imxc) * t11pyc1pxc) / denom7 + ((144.0 * myi) * num9 * M_PI * my_sign(-imxc) * t11pyc1pxc) / denom6) - ((18.0 * myi) * num11 * M_PI * power_of<2>(log(1.0 - yc / w3)) * my_sign(imag(yc / w3)) * T(1.0, 1.0 + yc, 1.0 - yc / w3)) / denom6

                + ((18.0 * myi) * num11 * M_PI * power_of<2>(log(1.0 + yc / w3)) * my_sign(-imag(yc / w3)) * T(1.0, 1.0 + yc, 1.0 + yc / w3)) / denom6 + ((72.0 * myi) * num9 * M_PI * log(1.0 - xcinv) * ln1mxc * my_sign(imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 - xcinv)) / denom6 - ((72.0 * myi) * num9 * M_PI * log(1.0 - xcinv) * ln1pxc * my_sign(imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 - xcinv)) / denom6 - ((72.0 * myi) * num9 * M_PI * log(1.0 + xcinv) * ln1mxc * my_sign(-imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 + xcinv)) / denom6 + ((72.0 * myi) * num9 * M_PI * log(1.0 + xcinv) * ln1pxc * my_sign(-imxc) * T(1.0, 1.0 - yc * xcinv, 1.0 + xcinv)) / denom6
                - ((36.0 * myi) * num11 * M_PI * log(1.0 - w3 * xcinv) * ln1mxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 - w3 * xcinv)) / denom6 + ((36.0 * myi) * num11 * M_PI * log(1.0 - w3 * xcinv) * ln1pxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 - w3 * xcinv)) / denom6 + ((36.0 * myi) * num11 * M_PI * log(1.0 + w3 * xcinv) * ln1mxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 + w3 * xcinv)) / denom6 - ((36.0 * myi) * num11 * M_PI * log(1.0 + w3 * xcinv) * ln1pxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 - yc * xcinv, 1.0 + w3 * xcinv)) / denom6
                + ((72.0 * myi) * num9 * M_PI * log(1.0 - xcinv) * ln1mxc * my_sign(imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 - xcinv)) / denom6 - ((72.0 * myi) * num9 * M_PI * log(1.0 - xcinv) * ln1pxc * my_sign(imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 - xcinv)) / denom6 - ((72.0 * myi) * num9 * M_PI * log(1.0 + xcinv) * ln1mxc * my_sign(-imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 + xcinv)) / denom6 + ((72.0 * myi) * num9 * M_PI * log(1.0 + xcinv) * ln1pxc * my_sign(-imxc) * T(1.0, 1.0 + yc * xcinv, 1.0 + xcinv)) / denom6 - ((36.0 * myi) * num11 * M_PI * log(1.0 - w3 * xcinv) * ln1mxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 - w3 * xcinv)) / denom6
                + ((36.0 * myi) * num11 * M_PI * log(1.0 - w3 * xcinv) * ln1pxc * my_sign(imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 - w3 * xcinv)) / denom6 + ((36.0 * myi) * num11 * M_PI * log(1.0 + w3 * xcinv) * ln1mxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 + w3 * xcinv)) / denom6 - ((36.0 * myi) * num11 * M_PI * log(1.0 + w3 * xcinv) * ln1pxc * my_sign(-imag(xc / w3)) * T(1.0, 1.0 + yc * xcinv, 1.0 + w3 * xcinv)) / denom6
                - (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log((1.0 + xc) / w3) + log(((-1.0 + w3) * (1.0 + xc)) / (w3 + xc)) / 6.0 - log(((-1.0 + w3) * (1.0 + xc)) / ((w3 + xc) * (1.0 - yc))) / 6.0 + log((1.0 + xc) / (w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11myc1pxc * T(p(-xc, 1.0 - yc), 1.0 - yc, 1.0 - w3))) / denom6
                + (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log(-((1.0 + xc) / w3)) + log(((-1.0 - w3) * (1.0 + xc)) / (-w3 + xc)) / 6.0 - log(((-1.0 - w3) * (1.0 + xc)) / ((-w3 + xc) * (1.0 - yc))) / 6.0 + log((1.0 + xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11myc1pxc * T(p(-xc, 1.0 - yc), 1.0 - yc, 1.0 + w3))) / denom6
                - (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log(-((-1.0 - xc) / w3)) + log(((1.0 - w3) * (-1.0 - xc)) / (w3 + xc)) / 6.0 - log(((1.0 - w3) * (-1.0 - xc)) / ((-w3 - xc) * (-1.0 - yc))) / 6.0 + log((-1.0 - xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11pyc1pxc * T(p(-xc, 1.0 + yc), 1.0 + yc, 1.0 - w3))) / denom6
                + (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log((-1.0 - xc) / w3) + log(((1.0 + w3) * (-1.0 - xc)) / (-w3 + xc)) / 6.0 - log(((1.0 + w3) * (-1.0 - xc)) / ((w3 - xc) * (-1.0 - yc))) / 6.0 + log((-1.0 - xc) / (w3 - yc)) / 6.0 + 4.0 * ln1pxc * t11pyc1pxc * T(p(-xc, 1.0 + yc), 1.0 + yc, 1.0 + w3))) / denom6
                - (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log((1.0 - xc) / w3) + log(((-1.0 + w3) * (1.0 - xc)) / (w3 - xc)) / 6.0 - log(((-1.0 + w3) * (1.0 - xc)) / ((w3 - xc) * (1.0 - yc))) / 6.0 + log((1.0 - xc) / (w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11myc1mxc * T(p(xc, 1.0 - yc), 1.0 - yc, 1.0 - w3))) / denom6
                + (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log(-((1.0 - xc) / w3)) + log(((-1.0 - w3) * (1.0 - xc)) / (-w3 - xc)) / 6.0 - log(((-1.0 - w3) * (1.0 - xc)) / ((-w3 - xc) * (1.0 - yc))) / 6.0 + log((1.0 - xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11myc1mxc * T(p(xc, 1.0 - yc), 1.0 - yc, 1.0 + w3))) / denom6
                - (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log(-((-1.0 + xc) / w3)) + log(((1.0 - w3) * (-1.0 + xc)) / (w3 - xc)) / 6.0 - log(((1.0 - w3) * (-1.0 + xc)) / ((-w3 + xc) * (-1.0 - yc))) / 6.0 + log((-1.0 + xc) / (-w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11pyc1mxc * T(p(xc, 1.0 + yc), 1.0 + yc, 1.0 - w3))) / denom6
                + (18.0 * num11 * pisqu * ((-1.0 / 6.0) * log((-1.0 + xc) / w3) + log(((1.0 + w3) * (-1.0 + xc)) / (-w3 - xc)) / 6.0 - log(((1.0 + w3) * (-1.0 + xc)) / ((w3 + xc) * (-1.0 - yc))) / 6.0 + log((-1.0 + xc) / (w3 - yc)) / 6.0 + 4.0 * ln1mxc * t11pyc1mxc * T(p(xc, 1.0 + yc), 1.0 + yc, 1.0 + w3))) / denom6 - (3.0 * num11 * (2.0 * pisqu * ln2 - 4.0 * power_of<3>(ln2) - 21.0 * zeta3)) / (2.0 * denom6) - (6.0 * num9 * (2.0 * pisqu * ln2 - 4.0 * power_of<3>(ln2) - 21.0 * zeta3)) / denom6 + (9.0 * num11 * zeta3) / (2.0 * denom6) - (63.0 * num7 * zeta3) / denom6 - (198.0 * num8 * zeta3) / denom6
                + (81.0 * num9 * zeta3) / denom6;

        return result / 9.0;

        }

        complex<double> f17e(const CharmLoopsParameters & )
        {
            return 0.0;
        }

        complex<double> f19e(const CharmLoopsParameters & clp)
        {
            const double C_F = 4.0 / 3.0; // SU(3) color factor

            // f19e = C_F f29e
            return C_F * f29e(clp);
        }

        complex<double> f27e(const CharmLoopsParameters & )
        {
            return 0.0;
        }

        complex<double> f29e(const CharmLoopsParameters & clp)
        {
            const double lnmuhat = log(clp.muhat);
            const complex<double> xe = clp.x_e;
            const complex<double> ye = clp.y_e;

            const complex<double> ye2 = power_of<2>(ye);
            const complex<double> ye3 = power_of<3>(ye);
            const complex<double> ye4 = power_of<4>(ye);

            const complex<double> lnxe   = log(xe);
            const complex<double> lnye   = log(ye);
            const complex<double> lnmye  = log(-ye);
            const complex<double> ln1pxe = log(1.0 + xe);
            const complex<double> ln1mxe = log(1.0 - xe);
            const complex<double> ln1pye = log(1.0 + ye);
            const complex<double> ln1mye = log(1.0 - ye);

            const complex<double> result = -636.0 - (336.0 * myi * M_PI) + 440.0 / ye2 + (288.0 * myi * M_PI) / ye2 + (-264.0 + 56.0 / ye4 - 176.0 / ye2) * dilog(1.0 / 2.0) + (576.0 - 192.0 / ye4 + 384.0 / ye2) * trilog(1.0 / 2.0)
                + (696.0 - 232.0 / ye4 + 464.0 / ye2) * zeta3 + (-576.0 + 192.0 / ye4 - 384.0 / ye2) * trilog((1.0 - ye) / 2.0) + (192.0 - 64.0 / ye4 + 128.0 / ye2) * trilog(1.0 - ye)
                + (192.0 - 64.0 / ye4 + 128.0 / ye2) * trilog(-ye) + (192.0 - 64.0 / ye4 + 128.0 / ye2) * trilog(ye) + (192.0 - 64.0 / ye4 + 128.0 / ye2) * trilog(ye / (-1.0 + ye))
                + (-288.0 + 96.0 / ye4 - 192.0 / ye2) * trilog((2.0 * ye) / (-1.0 + ye)) + (192.0 - 64.0 / ye4 + 128.0 / ye2) * trilog(ye / (1.0 + ye)) + (-288.0 + 96.0 / ye4 - 192.0 / ye2) * trilog((2.0 * ye) / (1.0 + ye))
                + (-576.0 + 192.0 / ye4 - 384.0 / ye2) * trilog((1.0 + ye) / 2.0) + (192.0 - 64.0 / ye4 + 128.0 / ye2) * trilog(1.0 + ye) - 672.0 * ln2 - 80.0 * pisqu * ln2 + (80.0 * pisqu * ln2) / (3.0 * ye4)
                + (576.0 * ln2) / ye2 - (160.0 * pisqu * ln2) / (3.0 * ye2) + 96.0 * ln2cube - (32.0 * ln2cube) / ye4 + (64.0 * ln2cube) / ye2 + 32.0 * pisqu * ln2
                - (32.0 * pisqu * ln2) / (3.0 * ye4) + (64.0 * pisqu * ln2) / (3.0 * ye2) - 672.0 * lnmuhat + (576.0 * lnmuhat) / ye2 + (336.0 - 288.0 / ye2) * ln1mxe
                + (-672.0 + 576.0 / ye2) * lnxe + (336.0 - 288.0 / ye2) * ln1pxe + (-288.0 + 96.0 / ye4 - 192.0 / ye2) * dilog(1.0 - ye) * ln1mye
                + power_of<2>(ln1mye) * (66.0 - 14.0 / ye4 + 84.0 / ye3 + 44.0 / ye2 - 216.0 / ye + 36.0 * ye - 48.0 * ln2 + (16.0 * ln2) / ye4 - (32.0 * ln2) / ye2 - 48.0 * ln2
                    + (48.0 * ln2) / (3.0 * ye4) - (96.0 * ln2) / (3.0 * ye2) + (16.0 - 16.0 / (3.0 * ye4) + 32.0 / (3.0 * ye2)) * log((1.0 - ye) / 8.0) + (-192.0 + 64.0 / ye4 - 128.0 / ye2) * lnye
                    + (432.0 - 144.0 / ye4 + 288.0 / ye2) * log((1.0 + ye) / 2.0))
                + (-288.0 + 96.0 / ye4 - 192.0 / ye2) * dilog(1.0 + ye) * ln1pye + (-32.0 * pisqu + (32.0 * pisqu) / (3.0 * ye4) - 240.0 / ye3
                    - (144.0 * myi * M_PI) / ye3 - (64.0 * pisqu) / (3.0 * ye2) + 312.0 / ye + (288.0 * myi * M_PI) / ye - 24.0 * ye - (144.0 * myi * M_PI * ye) - 132.0 * ln2 + (28.0 * ln2) / ye4 + (168.0 * ln2) / ye3
                    - (88.0 * ln2) / ye2 + (144.0 * ln2) / ye + 72.0 * ye * ln2 + 192.0 * ln2squ - (64.0 * ln2squ) / ye4 + (128.0 * ln2squ) / ye2 - 96.0 * (pisqu / 12.0 - ln2squ / 2.0)
                    + (32.0 * (pisqu / 12.0 - ln2squ / 2.0)) / ye4 - (64.0 * (pisqu / 12.0 - ln2squ / 2.0)) / ye2 + 8.0 * (pisqu + 6.0 * ln2squ) - (8.0 * (pisqu + 6.0 * ln2squ)) / (3.0 * ye4)
                    + (16.0 * (pisqu + 6.0 * ln2squ)) / (3.0 * ye2) - (288.0 * ln2) / ye3 - 288.0 * ye * ln2 - (288.0 * lnmuhat) / ye3 + (576.0 * lnmuhat) / ye - 288.0 * ye * lnmuhat
                    + (144.0 / ye3 - 288.0 / ye + 144.0 * ye) * ln1mxe + (-288.0 / ye3 + 576.0 / ye - 288.0 * ye) * lnxe + (144.0 / ye3 - 288.0 / ye + 144.0 * ye) * ln1pxe) * ln1pye
                + (66.0 - 14.0 / ye4 - 84.0 / ye3 + 44.0 / ye2 + 216.0 / ye - 36.0 * ye - 48.0 * ln2 + (16.0 * ln2) / ye4 - (32.0 * ln2) / ye2 - 48.0 * ln2 + (48.0 * ln2) / (3.0 * ye4)
                    - (96.0 * ln2) / (3.0 * ye2) + (432.0 - 144.0 / ye4 + 288.0 / ye2) * log((1.0 - ye) / 2.0) + (-192.0 + 64.0 / ye4 - 128.0 / ye2) * lnmye
                    + (16.0 - 16.0 / (3.0 * ye4) + 32.0 / (3.0 * ye2)) * log((1.0 + ye) / 8.0)) * power_of<2>(ln1pye) + dilog(ye) * (64.0 / ye3 - 192.0 / ye + (-96.0 + 32.0 / ye4 - 64.0 / ye2) * ln1mye
                    + (-192.0 + 64.0 / ye4 - 128.0 / ye2) * ln1pye) + dilog(-ye) * (-64.0 / ye3 + 192.0 / ye + (-192.0 + 64.0 / ye4 - 128.0 / ye2) * ln1mye + (-96.0 + 32.0 / ye4 - 64.0 / ye2) * ln1pye)
                + dilog((1.0 - ye) / 2.0) * (132.0 - 28.0 / ye4 + 168.0 / ye3 + 88.0 / ye2 - 432.0 / ye + 72.0 * ye + (864.0 - 288.0 / ye4 + 576.0 / ye2) * ln1mye + (288.0 - 96.0 / ye4 + 192.0 / ye2) * ln1pye)
                + dilog((1.0 + ye) / 2.0) * (132.0 - 28.0 / ye4 - 168.0 / ye3 + 88.0 / ye2 + 432.0 / ye - 72.0 * ye + (288.0 - 96.0 / ye4 + 192.0 / ye2) * ln1mye + (864.0 - 288.0 / ye4 + 576.0 / ye2) * ln1pye)
                + ln1mye * (-32.0 * pisqu + (32.0 * pisqu) / (3.0 * ye4) + 240.0 / ye3 + (144.0 * myi * M_PI) / ye3 - (64.0 * pisqu) / (3.0 * ye2) - 312.0 / ye - (288.0 * myi * M_PI) / ye + 24.0 * ye + (144.0 * myi * M_PI * ye) - 132.0 * ln2
                    + (28.0 * ln2) / ye4 - (168.0 * ln2) / ye3 - (88.0 * ln2) / ye2 - (144.0 * ln2) / ye - 72.0 * ye * ln2 + 192.0 * ln2squ - (64.0 * ln2squ) / ye4 + (128.0 * ln2squ) / ye2
                    - 96.0 * (pisqu / 12.0 - ln2squ / 2.0) + (32.0 * (pisqu / 12.0 - ln2squ / 2.0)) / ye4 - (64.0 * (pisqu / 12.0 - ln2squ / 2.0)) / ye2 + 8.0 * (pisqu + 6.0 * ln2squ) - (8.0 * (pisqu + 6.0 * ln2squ)) / (3.0 * ye4)
                    + (16.0 * (pisqu + 6.0 * ln2squ)) / (3.0 * ye2) + (288.0 * ln2) / ye3 + 288.0 * ye * ln2 + (288.0 * lnmuhat) / ye3 - (576.0 * lnmuhat) / ye + 288.0 * ye * lnmuhat
                    + (-144.0 / ye3 + 288.0 / ye - 144.0 * ye) * ln1mxe + (288.0 / ye3 - 576.0 / ye + 288.0 * ye) * lnxe + (-144.0 / ye3 + 288.0 / ye - 144.0 * ye) * ln1pxe
                    + (-576.0 * ln2 + (192.0 * ln2) / ye4 - (384.0 * ln2) / ye2) * ln1pye)
                - 576.0 * zeta3 + (192.0 * zeta3) / ye4 - (384.0 * zeta3) / ye2;

            return result / 27.0;
        }

    }
}
